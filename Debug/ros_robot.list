
ros_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e93c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800eb10  0800eb10  0001eb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f180  0800f180  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800f180  0800f180  0001f180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f188  0800f188  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f188  0800f188  0001f188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f190  0800f190  0001f190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800f194  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c54  20000088  0800f21c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005cdc  0800f21c  00025cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020bca  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000409d  00000000  00000000  00040cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00044d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001306  00000000  00000000  000465c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a15  00000000  00000000  000478ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b768  00000000  00000000  0006d2e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e494e  00000000  00000000  00088a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ff8  00000000  00000000  0016d39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00174394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800eaf4 	.word	0x0800eaf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800eaf4 	.word	0x0800eaf4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	200000f8 	.word	0x200000f8

08000e78 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e86:	eef0 7ae7 	vabs.f32	s15, s15
 8000e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	; 0x90
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f005 f9d7 	bl	8006250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f8a3 	bl	8000fec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fcdf 	bl	8001868 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000eaa:	f000 fca5 	bl	80017f8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000eae:	f000 fc75 	bl	800179c <_ZL19MX_USART2_UART_Initv>
  MX_CAN1_Init();
 8000eb2:	f000 f913 	bl	80010dc <_ZL12MX_CAN1_Initv>
  MX_UART4_Init();
 8000eb6:	f000 fc43 	bl	8001740 <_ZL13MX_UART4_Initv>
  MX_SPI2_Init();
 8000eba:	f000 f9ad 	bl	8001218 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8000ebe:	f000 f9e7 	bl	8001290 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000ec2:	f000 fb0f 	bl	80014e4 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8000ec6:	f000 fb6b 	bl	80015a0 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8000eca:	f000 fa6b 	bl	80013a4 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
  //HAL_UART_Receive_IT(&huart4, RxData, 1);
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000ece:	213c      	movs	r1, #60	; 0x3c
 8000ed0:	4839      	ldr	r0, [pc, #228]	; (8000fb8 <main+0x120>)
 8000ed2:	f008 fb6a 	bl	80095aa <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4838      	ldr	r0, [pc, #224]	; (8000fbc <main+0x124>)
 8000eda:	f008 f99f 	bl	800921c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4836      	ldr	r0, [pc, #216]	; (8000fbc <main+0x124>)
 8000ee2:	f008 f99b 	bl	800921c <HAL_TIM_PWM_Start>
//  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <main+0x128>)
 8000eea:	f008 f997 	bl	800921c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4833      	ldr	r0, [pc, #204]	; (8000fc0 <main+0x128>)
 8000ef2:	f008 f993 	bl	800921c <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WheelControl */
  osThreadDef(WheelControl, Wheel_task, osPriorityNormal, 0, 128);
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <main+0x12c>)
 8000ef8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000efc:	461d      	mov	r5, r3
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WheelControlHandle = osThreadCreate(osThread(WheelControl), NULL);
 8000f0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00a fe2e 	bl	800bb72 <osThreadCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <main+0x130>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Joystick */
  osThreadDef(Joystick, task2_joystick, osPriorityNormal, 0, 2048);
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <main+0x134>)
 8000f1e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  JoystickHandle = osThreadCreate(osThread(Joystick), NULL);
 8000f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00a fe1b 	bl	800bb72 <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <main+0x138>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of up_down_control */
  osThreadDef(up_down_control, DC_motor, osPriorityNormal, 0, 512);
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <main+0x13c>)
 8000f44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f48:	461d      	mov	r5, r3
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  up_down_controlHandle = osThreadCreate(osThread(up_down_control), NULL);
 8000f56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a fe08 	bl	800bb72 <osThreadCreate>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <main+0x140>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* definition and creation of Target_pos */
  osThreadDef(Target_pos, Colorcheck, osPriorityNormal, 0, 512);
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <main+0x144>)
 8000f6a:	f107 0420 	add.w	r4, r7, #32
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Target_posHandle = osThreadCreate(osThread(Target_pos), NULL);
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00a fdf5 	bl	800bb72 <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <main+0x148>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Color */
  osThreadDef(Color, StartTask05, osPriorityNormal, 0, 128);
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <main+0x14c>)
 8000f90:	1d3c      	adds	r4, r7, #4
 8000f92:	461d      	mov	r5, r3
 8000f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorHandle = osThreadCreate(osThread(Color), NULL);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a fde4 	bl	800bb72 <osThreadCreate>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <main+0x150>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fb0:	f00a fdd8 	bl	800bb64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x11c>
 8000fb6:	bf00      	nop
 8000fb8:	20000408 	.word	0x20000408
 8000fbc:	200003c0 	.word	0x200003c0
 8000fc0:	20000450 	.word	0x20000450
 8000fc4:	0800eb20 	.word	0x0800eb20
 8000fc8:	200006a8 	.word	0x200006a8
 8000fcc:	0800eb48 	.word	0x0800eb48
 8000fd0:	200006ac 	.word	0x200006ac
 8000fd4:	0800eb74 	.word	0x0800eb74
 8000fd8:	200006b0 	.word	0x200006b0
 8000fdc:	0800eb9c 	.word	0x0800eb9c
 8000fe0:	200006b4 	.word	0x200006b4
 8000fe4:	0800ebc0 	.word	0x0800ebc0
 8000fe8:	200006b8 	.word	0x200006b8

08000fec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2234      	movs	r2, #52	; 0x34
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00d fc27 	bl	800e84e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <_Z18SystemClock_Configv+0xe8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <_Z18SystemClock_Configv+0xe8>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <_Z18SystemClock_Configv+0xe8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <_Z18SystemClock_Configv+0xec>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <_Z18SystemClock_Configv+0xec>)
 800103a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <_Z18SystemClock_Configv+0xec>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fa01 	bl	8008480 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800108e:	f002 fa35 	bl	80034fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800109e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f006 fe69 	bl	8007d88 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80010c6:	f002 fa19 	bl	80034fc <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	; 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <_ZL12MX_CAN1_Initv+0x124>)
 80010e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010fa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001102:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001106:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 800110a:	2200      	movs	r2, #0
 800110c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001110:	2200      	movs	r2, #0
 8001112:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001116:	2200      	movs	r2, #0
 8001118:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 800111c:	2201      	movs	r2, #1
 800111e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001122:	2200      	movs	r2, #0
 8001124:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001126:	4b35      	ldr	r3, [pc, #212]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001128:	2200      	movs	r2, #0
 800112a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800112c:	4833      	ldr	r0, [pc, #204]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 800112e:	f005 f8f5 	bl	800631c <HAL_CAN_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8001142:	f002 f9db 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  M1.ID=0x201;
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <_ZL12MX_CAN1_Initv+0x128>)
 8001148:	f240 2201 	movw	r2, #513	; 0x201
 800114c:	809a      	strh	r2, [r3, #4]
  M2.ID=0X202;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <_ZL12MX_CAN1_Initv+0x12c>)
 8001150:	f240 2202 	movw	r2, #514	; 0x202
 8001154:	809a      	strh	r2, [r3, #4]
  M3.ID=0x203;
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <_ZL12MX_CAN1_Initv+0x130>)
 8001158:	f240 2203 	movw	r2, #515	; 0x203
 800115c:	809a      	strh	r2, [r3, #4]
  M4.ID=0x204;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <_ZL12MX_CAN1_Initv+0x134>)
 8001160:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001164:	809a      	strh	r2, [r3, #4]
  sFilterConfig.FilterBank = 0;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001174:	2201      	movs	r2, #1
 8001176:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x205;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800117a:	f240 2205 	movw	r2, #517	; 0x205
 800117e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x200;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800119c:	2201      	movs	r2, #1
 800119e:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 80011a2:	220e      	movs	r2, #14
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80011a6:	491b      	ldr	r1, [pc, #108]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80011aa:	f005 f9b3 	bl	8006514 <HAL_CAN_ConfigFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZL12MX_CAN1_Initv+0xe6>
    	Error_Handler();
 80011be:	f002 f99d 	bl	80034fc <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80011c4:	f005 fa86 	bl	80066d4 <HAL_CAN_Start>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <_ZL12MX_CAN1_Initv+0x100>
    	Error_Handler();
 80011d8:	f002 f990 	bl	80034fc <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80011dc:	2102      	movs	r1, #2
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80011e0:	f005 fcd2 	bl	8006b88 <HAL_CAN_ActivateNotification>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_CAN1_Initv+0x11c>
    	Error_Handler();
 80011f4:	f002 f982 	bl	80034fc <Error_Handler>
  }


  /* USER CODE END CAN1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200002f8 	.word	0x200002f8
 8001200:	40006400 	.word	0x40006400
 8001204:	200007bc 	.word	0x200007bc
 8001208:	200007c4 	.word	0x200007c4
 800120c:	200007cc 	.word	0x200007cc
 8001210:	200007d4 	.word	0x200007d4
 8001214:	20000810 	.word	0x20000810

08001218 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <_ZL12MX_SPI2_Initv+0x74>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001228:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001238:	2202      	movs	r2, #2
 800123a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800123e:	2201      	movs	r2, #1
 8001240:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800124c:	2238      	movs	r2, #56	; 0x38
 800124e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001264:	220a      	movs	r2, #10
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800126a:	f007 fba7 	bl	80089bc <HAL_SPI_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800127e:	f002 f93d 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000320 	.word	0x20000320
 800128c:	40003800 	.word	0x40003800

08001290 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012bc:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <_ZL12MX_TIM3_Initv+0x110>)
 80012be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e0:	482e      	ldr	r0, [pc, #184]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012e2:	f007 fe81 	bl	8008fe8 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 80012f6:	f002 f901 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4619      	mov	r1, r3
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 8001308:	f008 fc2c 	bl	8009b64 <HAL_TIM_ConfigClockSource>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 800131c:	f002 f8ee 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 8001322:	f008 f843 	bl	80093ac <HAL_TIM_IC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001336:	f002 f8e1 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 800134a:	f009 f941 	bl	800a5d0 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 800135e:	f002 f8cd 	bl	80034fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001366:	2301      	movs	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 800137a:	f008 fa94 	bl	80098a6 <HAL_TIM_IC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 800138e:	f002 f8b5 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000378 	.word	0x20000378
 80013a0:	40000400 	.word	0x40000400

080013a4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013d6:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <_ZL12MX_TIM4_Initv+0x13c>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013dc:	f240 227f 	movw	r2, #639	; 0x27f
 80013e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013fc:	4837      	ldr	r0, [pc, #220]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013fe:	f007 fdf3 	bl	8008fe8 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001412:	f002 f873 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800141c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001420:	4619      	mov	r1, r3
 8001422:	482e      	ldr	r0, [pc, #184]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 8001424:	f008 fb9e 	bl	8009b64 <HAL_TIM_ConfigClockSource>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001438:	f002 f860 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800143c:	4827      	ldr	r0, [pc, #156]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 800143e:	f007 fe93 	bl	8009168 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001452:	f002 f853 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	4619      	mov	r1, r3
 8001464:	481d      	ldr	r0, [pc, #116]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 8001466:	f009 f8b3 	bl	800a5d0 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800147a:	f002 f83f 	bl	80034fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 8001496:	f008 faa3 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 80014aa:	f002 f827 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80014b6:	f008 fa93 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 80014ca:	f002 f817 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80014d0:	f004 fb86 	bl	8005be0 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200003c0 	.word	0x200003c0
 80014e0:	40000800 	.word	0x40000800

080014e4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00d f9ab 	bl	800e84e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <_ZL12MX_TIM5_Initv+0xb8>)
 8001504:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001518:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001552:	f007 ff84 	bl	800945e <HAL_TIM_Encoder_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8001566:	f001 ffc9 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001578:	f009 f82a 	bl	800a5d0 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 800158c:	f001 ffb6 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000408 	.word	0x20000408
 800159c:	40000c00 	.word	0x40000c00

080015a0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	; 0x58
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00d f938 	bl	800e84e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015de:	4b56      	ldr	r3, [pc, #344]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015e0:	4a56      	ldr	r2, [pc, #344]	; (800173c <_ZL12MX_TIM8_Initv+0x19c>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2650-1;
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015e6:	f640 2259 	movw	r2, #2649	; 0xa59
 80015ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b52      	ldr	r3, [pc, #328]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015f4:	2263      	movs	r2, #99	; 0x63
 80015f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b4f      	ldr	r3, [pc, #316]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800160a:	484b      	ldr	r0, [pc, #300]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 800160c:	f007 fcec 	bl	8008fe8 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 8001620:	f001 ff6c 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800162e:	4619      	mov	r1, r3
 8001630:	4841      	ldr	r0, [pc, #260]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001632:	f008 fa97 	bl	8009b64 <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 8001646:	f001 ff59 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800164a:	483b      	ldr	r0, [pc, #236]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 800164c:	f007 fd8c 	bl	8009168 <HAL_TIM_PWM_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8001660:	f001 ff4c 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800166c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001670:	4619      	mov	r1, r3
 8001672:	4831      	ldr	r0, [pc, #196]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001674:	f008 ffac 	bl	800a5d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 8001688:	f001 ff38 	bl	80034fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4821      	ldr	r0, [pc, #132]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80016b2:	f008 f995 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 80016c6:	f001 ff19 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	2204      	movs	r2, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80016d4:	f008 f984 	bl	80099e0 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 80016e8:	f001 ff08 	bl	80034fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001704:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001710:	f008 ffda 	bl	800a6c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 8001724:	f001 feea 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 800172a:	f004 fa59 	bl	8005be0 <HAL_TIM_MspPostInit>

}
 800172e:	bf00      	nop
 8001730:	3758      	adds	r7, #88	; 0x58
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000450 	.word	0x20000450
 800173c:	40010400 	.word	0x40010400

08001740 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_ZL13MX_UART4_Initv+0x58>)
 8001748:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001778:	f009 f80c 	bl	800a794 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800178c:	f001 feb6 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000498 	.word	0x20000498
 8001798:	40004c00 	.word	0x40004c00

0800179c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_ZL19MX_USART2_UART_Initv+0x58>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d4:	f008 ffde 	bl	800a794 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80017e8:	f001 fe88 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200004e0 	.word	0x200004e0
 80017f4:	40004400 	.word	0x40004400

080017f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <_ZL11MX_DMA_Initv+0x6c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <_ZL11MX_DMA_Initv+0x6c>)
 8001808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_ZL11MX_DMA_Initv+0x6c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	200d      	movs	r0, #13
 8001820:	f005 fcc0 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001824:	200d      	movs	r0, #13
 8001826:	f005 fcd9 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	200f      	movs	r0, #15
 8001830:	f005 fcb8 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001834:	200f      	movs	r0, #15
 8001836:	f005 fcd1 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	2010      	movs	r0, #16
 8001840:	f005 fcb0 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001844:	2010      	movs	r0, #16
 8001846:	f005 fcc9 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2011      	movs	r0, #17
 8001850:	f005 fca8 	bl	80071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001854:	2011      	movs	r0, #17
 8001856:	f005 fcc1 	bl	80071dc <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S2_Pin|S3_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80018f4:	4839      	ldr	r0, [pc, #228]	; (80019dc <_ZL12MX_GPIO_Initv+0x174>)
 80018f6:	f006 fa2d 	bl	8007d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2102      	movs	r1, #2
 80018fe:	4838      	ldr	r0, [pc, #224]	; (80019e0 <_ZL12MX_GPIO_Initv+0x178>)
 8001900:	f006 fa28 	bl	8007d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 7140 	mov.w	r1, #768	; 0x300
 800190a:	4836      	ldr	r0, [pc, #216]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 800190c:	f006 fa22 	bl	8007d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001916:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	482f      	ldr	r0, [pc, #188]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001928:	f006 f868 	bl	80079fc <HAL_GPIO_Init>

  /*Configure GPIO pins : UP1_Pin DOWN2_Pin DOWN1_Pin BALL1_Pin */
  GPIO_InitStruct.Pin = UP1_Pin|DOWN2_Pin|DOWN1_Pin|BALL1_Pin;
 800192c:	230f      	movs	r3, #15
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4829      	ldr	r0, [pc, #164]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001940:	f006 f85c 	bl	80079fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL2_Pin */
  GPIO_InitStruct.Pin = BALL2_Pin;
 8001944:	2310      	movs	r3, #16
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BALL2_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4821      	ldr	r0, [pc, #132]	; (80019dc <_ZL12MX_GPIO_Initv+0x174>)
 8001958:	f006 f850 	bl	80079fc <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S3_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin|IN4_Pin|IN3_Pin;
 800195c:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4819      	ldr	r0, [pc, #100]	; (80019dc <_ZL12MX_GPIO_Initv+0x174>)
 8001976:	f006 f841 	bl	80079fc <HAL_GPIO_Init>

  /*Configure GPIO pins : UP2_Pin IR_Pin */
  GPIO_InitStruct.Pin = UP2_Pin|IR_Pin;
 800197a:	f240 2301 	movw	r3, #513	; 0x201
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <_ZL12MX_GPIO_Initv+0x178>)
 8001990:	f006 f834 	bl	80079fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001994:	2302      	movs	r3, #2
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <_ZL12MX_GPIO_Initv+0x178>)
 80019ac:	f006 f826 	bl	80079fc <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 80019b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4806      	ldr	r0, [pc, #24]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 80019ca:	f006 f817 	bl	80079fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40020800 	.word	0x40020800

080019e8 <_Z7MotorUpv>:
//		  }
//	  }
//}

void MotorUp(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <_Z7MotorUpv+0x20>)
 80019f4:	f006 f9ae 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <_Z7MotorUpv+0x20>)
 8001a00:	f006 f9a8 	bl	8007d54 <HAL_GPIO_WritePin>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020800 	.word	0x40020800

08001a0c <_Z9MotorDownv>:

void MotorDown(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <_Z9MotorDownv+0x20>)
 8001a18:	f006 f99c 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <_Z9MotorDownv+0x20>)
 8001a24:	f006 f996 	bl	8007d54 <HAL_GPIO_WritePin>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020800 	.word	0x40020800

08001a30 <_Z9MotorStopv>:

void MotorStop(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	TIM8 -> CCR1 = 99;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_Z9MotorStopv+0x28>)
 8001a36:	2263      	movs	r2, #99	; 0x63
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	4806      	ldr	r0, [pc, #24]	; (8001a5c <_Z9MotorStopv+0x2c>)
 8001a42:	f006 f987 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <_Z9MotorStopv+0x2c>)
 8001a4e:	f006 f981 	bl	8007d54 <HAL_GPIO_WritePin>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40010400 	.word	0x40010400
 8001a5c:	40020800 	.word	0x40020800

08001a60 <_Z12calculatePIDv>:

void calculatePID()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	cTime = HAL_GetTick();
 8001a64:	f004 fc2a 	bl	80062bc <HAL_GetTick>
 8001a68:	ee07 0a90 	vmov	s15, r0
 8001a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <_Z12calculatePIDv+0x11c>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]
	Motor.my_pos = ((int32_t)TIM5->CNT)/100;
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <_Z12calculatePIDv+0x120>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4a42      	ldr	r2, [pc, #264]	; (8001b84 <_Z12calculatePIDv+0x124>)
 8001a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a80:	1152      	asrs	r2, r2, #5
 8001a82:	17db      	asrs	r3, r3, #31
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001a88:	6053      	str	r3, [r2, #4]
	dTime = (cTime - pTime)/10000;
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <_Z12calculatePIDv+0x11c>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <_Z12calculatePIDv+0x12c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001b90 <_Z12calculatePIDv+0x130>
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <_Z12calculatePIDv+0x134>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	DC_pid.error = Motor.target_pos - Motor.my_pos;
 8001aa8:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ab4:	60d3      	str	r3, [r2, #12]
	DC_pid.I_error += (DC_pid.error * dTime);
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <_Z12calculatePIDv+0x134>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ae6:	611a      	str	r2, [r3, #16]
	DC_pid.D_error = (DC_pid.error - DC_pid.lastError)/dTime;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <_Z12calculatePIDv+0x134>)
 8001afc:	ed93 7a00 	vldr	s14, [r3]
 8001b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b08:	ee17 2a90 	vmov	r2, s15
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b0e:	615a      	str	r2, [r3, #20]
	Motor.ControlSignal = (DC_pid.KP*DC_pid.error) + (DC_pid.I_error*DC_pid.KI) + (DC_pid.D_error*DC_pid.KD);
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001b5c:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_Delay(1);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f004 fbb7 	bl	80062d4 <HAL_Delay>
	pTime = cTime;
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <_Z12calculatePIDv+0x11c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <_Z12calculatePIDv+0x12c>)
 8001b6c:	6013      	str	r3, [r2, #0]
	DC_pid.lastError = DC_pid.error;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b74:	6193      	str	r3, [r2, #24]
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200006e0 	.word	0x200006e0
 8001b80:	40000c00 	.word	0x40000c00
 8001b84:	51eb851f 	.word	0x51eb851f
 8001b88:	200007dc 	.word	0x200007dc
 8001b8c:	200006e4 	.word	0x200006e4
 8001b90:	461c4000 	.word	0x461c4000
 8001b94:	200006e8 	.word	0x200006e8
 8001b98:	200007a0 	.word	0x200007a0

08001b9c <_Z10motorspeedv>:

void motorspeed(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	if(Motor.ControlSignal<0)
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001ba2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d504      	bpl.n	8001bba <_Z10motorspeedv+0x1e>
		motor_dir = -1;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e00e      	b.n	8001bd8 <_Z10motorspeedv+0x3c>
	else if(Motor.ControlSignal>0)
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dd03      	ble.n	8001bd2 <_Z10motorspeedv+0x36>
		motor_dir = 1;
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e002      	b.n	8001bd8 <_Z10motorspeedv+0x3c>
	else
		motor_dir = 0;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
	Motor.PWM = (int)fabs(Motor.ControlSignal);
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	f7ff f949 	bl	8000e78 <_ZSt4fabsf>
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
 8001bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bee:	ee17 2a90 	vmov	r2, s15
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bf4:	60da      	str	r2, [r3, #12]
	if(Motor.PWM > 300)
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bfe:	dd02      	ble.n	8001c06 <_Z10motorspeedv+0x6a>
		TIM8 -> CCR1 = 99;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <_Z10motorspeedv+0xb0>)
 8001c02:	2263      	movs	r2, #99	; 0x63
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
//	TIM8 -> CCR2 = 50;
	if(Motor.PWM < 300 && DC_pid.error != 0){
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c0e:	da06      	bge.n	8001c1e <_Z10motorspeedv+0x82>
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <_Z10motorspeedv+0xb4>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <_Z10motorspeedv+0x82>
		TIM8 -> CCR1 = 40;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <_Z10motorspeedv+0xb0>)
 8001c1a:	2228      	movs	r2, #40	; 0x28
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(motor_dir == 1){
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <_Z10motorspeedv+0x90>
		MotorUp();
 8001c26:	f7ff fedf 	bl	80019e8 <_Z7MotorUpv>
	}else if(motor_dir == (-1)){
		MotorDown();
	}else{
		MotorStop();
	}
}
 8001c2a:	e009      	b.n	8001c40 <_Z10motorspeedv+0xa4>
	}else if(motor_dir == (-1)){
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c34:	d102      	bne.n	8001c3c <_Z10motorspeedv+0xa0>
		MotorDown();
 8001c36:	f7ff fee9 	bl	8001a0c <_Z9MotorDownv>
}
 8001c3a:	e001      	b.n	8001c40 <_Z10motorspeedv+0xa4>
		MotorStop();
 8001c3c:	f7ff fef8 	bl	8001a30 <_Z9MotorStopv>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200007dc 	.word	0x200007dc
 8001c48:	200006f0 	.word	0x200006f0
 8001c4c:	40010400 	.word	0x40010400
 8001c50:	200007a0 	.word	0x200007a0

08001c54 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
//	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8001c5c:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c5e:	4a60      	ldr	r2, [pc, #384]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	4860      	ldr	r0, [pc, #384]	; (8001de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001c64:	f004 fe6e 	bl	8006944 <HAL_CAN_GetRxMessage>
	if(rxHeader.StdId == 0x201){
 8001c68:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f240 2201 	movw	r2, #513	; 0x201
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d126      	bne.n	8001cc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		M1.en_speed = rxData[2] << 8;
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c7e:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed + rxData[3];
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c8a:	78db      	ldrb	r3, [r3, #3]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c96:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed * 1.5;
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc10 	bl	80004c4 <__aeabi_i2d>
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001caa:	f7fe fc75 	bl	8000598 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff1f 	bl	8000af8 <__aeabi_d2iz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001cc0:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x202){
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f240 2202 	movw	r2, #514	; 0x202
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d126      	bne.n	8001d1c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		M2.en_speed = rxData[2] << 8;
 8001cce:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cd8:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed + rxData[3];
 8001cda:	4b45      	ldr	r3, [pc, #276]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cdc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001ce4:	78db      	ldrb	r3, [r3, #3]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cf0:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed * 1.5;
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fbe3 	bl	80004c4 <__aeabi_i2d>
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001d04:	f7fe fc48 	bl	8000598 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fef2 	bl	8000af8 <__aeabi_d2iz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001d1a:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x203){
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f240 2203 	movw	r2, #515	; 0x203
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d126      	bne.n	8001d76 <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
		M3.en_speed = rxData[2] << 8;
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d32:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed + rxData[3];
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d4a:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed * 1.5;
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbb6 	bl	80004c4 <__aeabi_i2d>
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001d5e:	f7fe fc1b 	bl	8000598 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fec5 	bl	8000af8 <__aeabi_d2iz>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d74:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x204){
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001d7e:	d129      	bne.n	8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		M4.en_speed = rxData[2] << 8;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d82:	789b      	ldrb	r3, [r3, #2]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001d8a:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed + rxData[3];
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001d8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d96:	78db      	ldrb	r3, [r3, #3]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001da2:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed * 1.5;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001da6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb8a 	bl	80004c4 <__aeabi_i2d>
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001db6:	f7fe fbef 	bl	8000598 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fe99 	bl	8000af8 <__aeabi_d2iz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001dcc:	80da      	strh	r2, [r3, #6]
		vel_up = 1;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000728 	.word	0x20000728
 8001de0:	20000838 	.word	0x20000838
 8001de4:	200002f8 	.word	0x200002f8
 8001de8:	200007bc 	.word	0x200007bc
 8001dec:	3ff80000 	.word	0x3ff80000
 8001df0:	200007c4 	.word	0x200007c4
 8001df4:	200007cc 	.word	0x200007cc
 8001df8:	200007d4 	.word	0x200007d4
 8001dfc:	200006ec 	.word	0x200006ec

08001e00 <_Z12can_transmitP17CAN_HandleTypeDeftssss>:
void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	817b      	strh	r3, [r7, #10]
 8001e12:	460b      	mov	r3, r1
 8001e14:	813b      	strh	r3, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef tx_header;
//    uint8_t             data[8];
//    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8001e1a:	897b      	ldrh	r3, [r7, #10]
 8001e1c:	613b      	str	r3, [r7, #16]
    tx_header.IDE   = CAN_ID_STD;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
    tx_header.RTR   = CAN_RTR_DATA;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    tx_header.DLC   = CAN_DATA_SIZE;
 8001e26:	2308      	movs	r3, #8
 8001e28:	623b      	str	r3, [r7, #32]
    tx_header.TransmitGlobalTime = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[0] = msg1 >> 8;
 8001e30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e34:	121b      	asrs	r3, r3, #8
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e3c:	701a      	strb	r2, [r3, #0]
    data[1] = msg1;
 8001e3e:	893b      	ldrh	r3, [r7, #8]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e44:	705a      	strb	r2, [r3, #1]
    data[2] = msg2 >> 8;
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	121b      	asrs	r3, r3, #8
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e52:	709a      	strb	r2, [r3, #2]
    data[3] = msg2;
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e5a:	70da      	strb	r2, [r3, #3]
    data[4] = msg3 >> 8;
 8001e5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001e60:	121b      	asrs	r3, r3, #8
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e68:	711a      	strb	r2, [r3, #4]
    data[5] = msg3;
 8001e6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e70:	715a      	strb	r2, [r3, #5]
    data[6] = msg4 >> 8;
 8001e72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001e76:	121b      	asrs	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e7e:	719a      	strb	r2, [r3, #6]
    data[7] = msg4;
 8001e80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e86:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK){
 8001e88:	f107 0110 	add.w	r1, r7, #16
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xd0>)
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f004 fc63 	bl	800675c <HAL_CAN_AddTxMessage>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xc4>
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 8001ea6:	bf00      	nop
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xd0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f004 fd24 	bl	80068fc <HAL_CAN_IsTxMessagePending>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f1      	bne.n	8001ea8 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xa8>
    }
}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000071c 	.word	0x2000071c
 8001ed0:	20000724 	.word	0x20000724

08001ed4 <_Z10Wheel_taskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Wheel_task */
void Wheel_task(void const * argument)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	M1_pid.KP = 1.5;
 8001edc:	4ba9      	ldr	r3, [pc, #676]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001ede:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001ee2:	601a      	str	r2, [r3, #0]
	M1_pid.KI = 0.0005;
 8001ee4:	4ba7      	ldr	r3, [pc, #668]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001ee6:	4aa8      	ldr	r2, [pc, #672]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001ee8:	605a      	str	r2, [r3, #4]
	M1_pid.KD = 0.01;
 8001eea:	4ba6      	ldr	r3, [pc, #664]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001eec:	4aa7      	ldr	r2, [pc, #668]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001eee:	609a      	str	r2, [r3, #8]

	M2_pid.KP = 1.5;
 8001ef0:	4ba7      	ldr	r3, [pc, #668]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ef2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001ef6:	601a      	str	r2, [r3, #0]
	M2_pid.KI = 0.0005;
 8001ef8:	4ba5      	ldr	r3, [pc, #660]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001efa:	4aa3      	ldr	r2, [pc, #652]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001efc:	605a      	str	r2, [r3, #4]
	M2_pid.KD = 0.01;
 8001efe:	4ba4      	ldr	r3, [pc, #656]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001f00:	4aa2      	ldr	r2, [pc, #648]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001f02:	609a      	str	r2, [r3, #8]

	M3_pid.KP = 1.5;
 8001f04:	4ba3      	ldr	r3, [pc, #652]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8001f06:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001f0a:	601a      	str	r2, [r3, #0]
	M3_pid.KI = 0.0005;
 8001f0c:	4ba1      	ldr	r3, [pc, #644]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8001f0e:	4a9e      	ldr	r2, [pc, #632]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001f10:	605a      	str	r2, [r3, #4]
	M3_pid.KD = 0.01;
 8001f12:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8001f14:	4a9d      	ldr	r2, [pc, #628]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001f16:	609a      	str	r2, [r3, #8]

	M4_pid.KP = 1.5;
 8001f18:	4b9f      	ldr	r3, [pc, #636]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8001f1a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001f1e:	601a      	str	r2, [r3, #0]
	M4_pid.KI = 0.0005;
 8001f20:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8001f22:	4a99      	ldr	r2, [pc, #612]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001f24:	605a      	str	r2, [r3, #4]
	M4_pid.KD = 0.01;
 8001f26:	4b9c      	ldr	r3, [pc, #624]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8001f28:	4a98      	ldr	r2, [pc, #608]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001f2a:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {

  if(vel_up==1){
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <_Z10Wheel_taskPKv+0x2c8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 814f 	bne.w	80021d4 <_Z10Wheel_taskPKv+0x300>
	  vel_up=0;
 8001f36:	4b99      	ldr	r3, [pc, #612]	; (800219c <_Z10Wheel_taskPKv+0x2c8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
		  M1_pid.error=M1.setpoint-M1.en_speed;
 8001f3c:	4b98      	ldr	r3, [pc, #608]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b96      	ldr	r3, [pc, #600]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 8001f46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a8d      	ldr	r2, [pc, #564]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f4e:	60d3      	str	r3, [r2, #12]
		  M1_pid.I_error+=M1_pid.error;
 8001f50:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a8a      	ldr	r2, [pc, #552]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f5c:	6113      	str	r3, [r2, #16]
		  M1_pid.D_error=M1_pid.lastError-M1_pid.error;
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	4b88      	ldr	r3, [pc, #544]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a86      	ldr	r2, [pc, #536]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f6a:	6153      	str	r3, [r2, #20]
		  M1_pid.lastError=M1_pid.error;
 8001f6c:	4b85      	ldr	r3, [pc, #532]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a84      	ldr	r2, [pc, #528]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f72:	6193      	str	r3, [r2, #24]
		  M1.Out=M1_pid.KP*M1_pid.error+M1_pid.KI*M1_pid.I_error+M1_pid.KD*M1_pid.D_error;
 8001f74:	4b83      	ldr	r3, [pc, #524]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f76:	ed93 7a00 	vldr	s14, [r3]
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	4b7e      	ldr	r3, [pc, #504]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001fa6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc2:	ee17 3a90 	vmov	r3, s15
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b75      	ldr	r3, [pc, #468]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 8001fca:	805a      	strh	r2, [r3, #2]

		  M2_pid.error=M2.setpoint-M2.en_speed;
 8001fcc:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <_Z10Wheel_taskPKv+0x2d0>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <_Z10Wheel_taskPKv+0x2d0>)
 8001fd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4a6c      	ldr	r2, [pc, #432]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fde:	60d3      	str	r3, [r2, #12]
		  M2_pid.I_error+=M2_pid.error;
 8001fe0:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fec:	6113      	str	r3, [r2, #16]
		  M2_pid.D_error=M2_pid.lastError-M2_pid.error;
 8001fee:	4b68      	ldr	r3, [pc, #416]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ffa:	6153      	str	r3, [r2, #20]
		  M2_pid.lastError=M2_pid.error;
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a63      	ldr	r2, [pc, #396]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002002:	6193      	str	r3, [r2, #24]
		  M2.Out=M2_pid.KP*M2_pid.error+M2_pid.KI*M2_pid.I_error+M2_pid.KD*M2_pid.D_error;
 8002004:	4b62      	ldr	r3, [pc, #392]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 800201c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002020:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002034:	4b56      	ldr	r3, [pc, #344]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002036:	edd3 6a02 	vldr	s13, [r3, #8]
 800203a:	4b55      	ldr	r3, [pc, #340]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	b21a      	sxth	r2, r3
 8002058:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <_Z10Wheel_taskPKv+0x2d0>)
 800205a:	805a      	strh	r2, [r3, #2]


		  M3_pid.error=M3.setpoint-M3.en_speed;
 800205c:	4b52      	ldr	r3, [pc, #328]	; (80021a8 <_Z10Wheel_taskPKv+0x2d4>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	461a      	mov	r2, r3
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <_Z10Wheel_taskPKv+0x2d4>)
 8002066:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800206e:	60d3      	str	r3, [r2, #12]
		  M3_pid.I_error+=M3_pid.error;
 8002070:	4b48      	ldr	r3, [pc, #288]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	4b47      	ldr	r3, [pc, #284]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4413      	add	r3, r2
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800207c:	6113      	str	r3, [r2, #16]
		  M3_pid.D_error=M3_pid.lastError-M3_pid.error;
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a42      	ldr	r2, [pc, #264]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800208a:	6153      	str	r3, [r2, #20]
		  M3_pid.lastError=M3_pid.error;
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a40      	ldr	r2, [pc, #256]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002092:	6193      	str	r3, [r2, #24]
		  M3.Out=M3_pid.KP*M3_pid.error+M3_pid.KI*M3_pid.I_error+M3_pid.KD*M3_pid.D_error;
 8002094:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002096:	ed93 7a00 	vldr	s14, [r3]
 800209a:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e2:	ee17 3a90 	vmov	r3, s15
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <_Z10Wheel_taskPKv+0x2d4>)
 80020ea:	805a      	strh	r2, [r3, #2]


		  M4_pid.error=M4.setpoint-M4.en_speed;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <_Z10Wheel_taskPKv+0x2d8>)
 80020ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <_Z10Wheel_taskPKv+0x2d8>)
 80020f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 80020fe:	60d3      	str	r3, [r2, #12]
		  M4_pid.I_error+=M4_pid.error;
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4413      	add	r3, r2
 800210a:	4a23      	ldr	r2, [pc, #140]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800210c:	6113      	str	r3, [r2, #16]
		  M4_pid.D_error=M4_pid.lastError-M4_pid.error;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800211a:	6153      	str	r3, [r2, #20]
		  M4_pid.lastError=M4_pid.error;
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002122:	6193      	str	r3, [r2, #24]
		  M4.Out=M4_pid.KP*M4_pid.error+M4_pid.KI*M4_pid.I_error+M4_pid.KD*M4_pid.D_error;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800213c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002156:	edd3 6a02 	vldr	s13, [r3, #8]
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002172:	ee17 3a90 	vmov	r3, s15
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <_Z10Wheel_taskPKv+0x2d8>)
 800217a:	805a      	strh	r2, [r3, #2]

		  can_transmit(&hcan1, FIRST_GROUP_ID, M1.Out, M2.Out, M3.Out, M4.Out);
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 800217e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002182:	e015      	b.n	80021b0 <_Z10Wheel_taskPKv+0x2dc>
 8002184:	20000730 	.word	0x20000730
 8002188:	3a03126f 	.word	0x3a03126f
 800218c:	3c23d70a 	.word	0x3c23d70a
 8002190:	2000074c 	.word	0x2000074c
 8002194:	20000768 	.word	0x20000768
 8002198:	20000784 	.word	0x20000784
 800219c:	200006ec 	.word	0x200006ec
 80021a0:	200007bc 	.word	0x200007bc
 80021a4:	200007c4 	.word	0x200007c4
 80021a8:	200007cc 	.word	0x200007cc
 80021ac:	200007d4 	.word	0x200007d4
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <_Z10Wheel_taskPKv+0x308>)
 80021b2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <_Z10Wheel_taskPKv+0x30c>)
 80021b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <_Z10Wheel_taskPKv+0x310>)
 80021be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <_Z10Wheel_taskPKv+0x314>)
 80021d0:	f7ff fe16 	bl	8001e00 <_Z12can_transmitP17CAN_HandleTypeDeftssss>
 }

    osDelay(5);
 80021d4:	2005      	movs	r0, #5
 80021d6:	f009 fd18 	bl	800bc0a <osDelay>
  if(vel_up==1){
 80021da:	e6a7      	b.n	8001f2c <_Z10Wheel_taskPKv+0x58>
 80021dc:	200007c4 	.word	0x200007c4
 80021e0:	200007cc 	.word	0x200007cc
 80021e4:	200007d4 	.word	0x200007d4
 80021e8:	200002f8 	.word	0x200002f8
 80021ec:	00000000 	.word	0x00000000

080021f0 <_Z14task2_joystickPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_joystick */
void task2_joystick(void const * argument)
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b0a0      	sub	sp, #128	; 0x80
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	6778      	str	r0, [r7, #116]	; 0x74
  /* USER CODE BEGIN task2_joystick */

  /* Infinite loop */
  for(;;)
  {
	  spi_enable;
 80021fa:	2200      	movs	r2, #0
 80021fc:	2102      	movs	r1, #2
 80021fe:	4888      	ldr	r0, [pc, #544]	; (8002420 <_Z14task2_joystickPKv+0x230>)
 8002200:	f005 fda8 	bl	8007d54 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi2, HC_PS2_TX, HC_PS2_RX, 9, 10);
 8002204:	230a      	movs	r3, #10
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2309      	movs	r3, #9
 800220a:	4a86      	ldr	r2, [pc, #536]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 800220c:	4986      	ldr	r1, [pc, #536]	; (8002428 <_Z14task2_joystickPKv+0x238>)
 800220e:	4887      	ldr	r0, [pc, #540]	; (800242c <_Z14task2_joystickPKv+0x23c>)
 8002210:	f006 fc5d 	bl	8008ace <HAL_SPI_TransmitReceive>
	  spi_disable;
 8002214:	2201      	movs	r2, #1
 8002216:	2102      	movs	r1, #2
 8002218:	4881      	ldr	r0, [pc, #516]	; (8002420 <_Z14task2_joystickPKv+0x230>)
 800221a:	f005 fd9b 	bl	8007d54 <HAL_GPIO_WritePin>
	  PS2.LY=-(HC_PS2_RX[8]-127);
 800221e:	4b81      	ldr	r3, [pc, #516]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002220:	7a1b      	ldrb	r3, [r3, #8]
 8002222:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002228:	601a      	str	r2, [r3, #0]
	  PS2.LX=(HC_PS2_RX[7]-127);
 800222a:	4b7e      	ldr	r3, [pc, #504]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 800222c:	79db      	ldrb	r3, [r3, #7]
 800222e:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002234:	605a      	str	r2, [r3, #4]
	  PS2.RY=HC_PS2_RX[6]-128;
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002238:	799b      	ldrb	r3, [r3, #6]
 800223a:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 800223e:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002240:	609a      	str	r2, [r3, #8]
	  PS2.RX=HC_PS2_RX[5]-128;
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002244:	795b      	ldrb	r3, [r3, #5]
 8002246:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 800224a:	4b79      	ldr	r3, [pc, #484]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 800224c:	60da      	str	r2, [r3, #12]
	  PS2.X=PS2.LX/(float)128;
 800224e:	4b78      	ldr	r3, [pc, #480]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002434 <_Z14task2_joystickPKv+0x244>
 800225e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002262:	ee16 0a90 	vmov	r0, s13
 8002266:	f7fe f93f 	bl	80004e8 <__aeabi_f2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4970      	ldr	r1, [pc, #448]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002270:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  PS2.Y=PS2.LY/(float)128;
 8002274:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002280:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002434 <_Z14task2_joystickPKv+0x244>
 8002284:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002288:	ee16 0a90 	vmov	r0, s13
 800228c:	f7fe f92c 	bl	80004e8 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4966      	ldr	r1, [pc, #408]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002296:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 800229c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022a0:	4b63      	ldr	r3, [pc, #396]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022a6:	f7fe f977 	bl	8000598 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4614      	mov	r4, r2
 80022b0:	461d      	mov	r5, r3
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022be:	f7fe f96b 	bl	8000598 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fd ffaf 	bl	800022c <__adddf3>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ec43 2b17 	vmov	d7, r2, r3
 80022d6:	eeb0 0a47 	vmov.f32	s0, s14
 80022da:	eef0 0a67 	vmov.f32	s1, s15
 80022de:	f00a fe77 	bl	800cfd0 <sqrt>
 80022e2:	eeb0 7a40 	vmov.f32	s14, s0
 80022e6:	eef0 7a60 	vmov.f32	s15, s1
 80022ea:	4b53      	ldr	r3, [pc, #332]	; (8002438 <_Z14task2_joystickPKv+0x248>)
 80022ec:	ed83 7b00 	vstr	d7, [r3]
	  degree_a=atan2(PS2.Y,PS2.X);
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022f2:	ed93 7b06 	vldr	d7, [r3, #24]
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022f8:	ed93 6b04 	vldr	d6, [r3, #16]
 80022fc:	eeb0 1a46 	vmov.f32	s2, s12
 8002300:	eef0 1a66 	vmov.f32	s3, s13
 8002304:	eeb0 0a47 	vmov.f32	s0, s14
 8002308:	eef0 0a67 	vmov.f32	s1, s15
 800230c:	f00a fe5e 	bl	800cfcc <atan2>
 8002310:	eeb0 7a40 	vmov.f32	s14, s0
 8002314:	eef0 7a60 	vmov.f32	s15, s1
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <_Z14task2_joystickPKv+0x24c>)
 800231a:	ed83 7b00 	vstr	d7, [r3]
	  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <_Z14task2_joystickPKv+0x24c>)
 8002320:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <_Z14task2_joystickPKv+0x250>)
 8002326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <_Z14task2_joystickPKv+0x254>)
 8002330:	f7fe fa5c 	bl	80007ec <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fd ff74 	bl	8000228 <__aeabi_dsub>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	ec43 2b17 	vmov	d7, r2, r3
 8002348:	eeb0 0a47 	vmov.f32	s0, s14
 800234c:	eef0 0a67 	vmov.f32	s1, s15
 8002350:	f00a febe 	bl	800d0d0 <sin>
 8002354:	ec51 0b10 	vmov	r0, r1, d0
 8002358:	4b37      	ldr	r3, [pc, #220]	; (8002438 <_Z14task2_joystickPKv+0x248>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f91b 	bl	8000598 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <_Z14task2_joystickPKv+0x258>)
 8002370:	f7fe f912 	bl	8000598 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <_Z14task2_joystickPKv+0x25c>)
 800237e:	e9c3 0100 	strd	r0, r1, [r3]
	  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002382:	4b2e      	ldr	r3, [pc, #184]	; (800243c <_Z14task2_joystickPKv+0x24c>)
 8002384:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <_Z14task2_joystickPKv+0x250>)
 800238a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <_Z14task2_joystickPKv+0x254>)
 8002394:	f7fe fa2a 	bl	80007ec <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4620      	mov	r0, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	f7fd ff42 	bl	8000228 <__aeabi_dsub>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	ec43 2b17 	vmov	d7, r2, r3
 80023ac:	eeb0 0a47 	vmov.f32	s0, s14
 80023b0:	eef0 0a67 	vmov.f32	s1, s15
 80023b4:	f00a fe38 	bl	800d028 <cos>
 80023b8:	ec51 0b10 	vmov	r0, r1, d0
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <_Z14task2_joystickPKv+0x248>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f8e9 	bl	8000598 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <_Z14task2_joystickPKv+0x258>)
 80023d4:	f7fe f8e0 	bl	8000598 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <_Z14task2_joystickPKv+0x260>)
 80023e2:	e9c3 0100 	strd	r0, r1, [r3]
	  if(HC_PS2_RX[4]==251){
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 80023e8:	791b      	ldrb	r3, [r3, #4]
 80023ea:	2bfb      	cmp	r3, #251	; 0xfb
 80023ec:	d103      	bne.n	80023f6 <_Z14task2_joystickPKv+0x206>
		  BLDC = 1;
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <_Z14task2_joystickPKv+0x264>)
 80023f0:	2301      	movs	r3, #1
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e03e      	b.n	8002474 <_Z14task2_joystickPKv+0x284>
	  }else if(HC_PS2_RX[4]==254){
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	2bfe      	cmp	r3, #254	; 0xfe
 80023fc:	d103      	bne.n	8002406 <_Z14task2_joystickPKv+0x216>
		  BLDC = 2;
 80023fe:	4a15      	ldr	r2, [pc, #84]	; (8002454 <_Z14task2_joystickPKv+0x264>)
 8002400:	2302      	movs	r3, #2
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e036      	b.n	8002474 <_Z14task2_joystickPKv+0x284>
	  }else if(HC_PS2_RX[4]==247){
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002408:	791b      	ldrb	r3, [r3, #4]
 800240a:	2bf7      	cmp	r3, #247	; 0xf7
 800240c:	d128      	bne.n	8002460 <_Z14task2_joystickPKv+0x270>
		  yellow=1;
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <_Z14task2_joystickPKv+0x268>)
 8002410:	2301      	movs	r3, #1
 8002412:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 1800;
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <_Z14task2_joystickPKv+0x26c>)
 8002416:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e02a      	b.n	8002474 <_Z14task2_joystickPKv+0x284>
 800241e:	bf00      	nop
 8002420:	40020400 	.word	0x40020400
 8002424:	20000704 	.word	0x20000704
 8002428:	20000008 	.word	0x20000008
 800242c:	20000320 	.word	0x20000320
 8002430:	200007f0 	.word	0x200007f0
 8002434:	43000000 	.word	0x43000000
 8002438:	200006d0 	.word	0x200006d0
 800243c:	200006d8 	.word	0x200006d8
 8002440:	20000000 	.word	0x20000000
 8002444:	40100000 	.word	0x40100000
 8002448:	40d00000 	.word	0x40d00000
 800244c:	200006c0 	.word	0x200006c0
 8002450:	200006c8 	.word	0x200006c8
 8002454:	20000700 	.word	0x20000700
 8002458:	200006f8 	.word	0x200006f8
 800245c:	200007dc 	.word	0x200007dc
	  }else if(HC_PS2_RX[4]==253){
 8002460:	4b9b      	ldr	r3, [pc, #620]	; (80026d0 <_Z14task2_joystickPKv+0x4e0>)
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	2bfd      	cmp	r3, #253	; 0xfd
 8002466:	d105      	bne.n	8002474 <_Z14task2_joystickPKv+0x284>
		  yellow=2;
 8002468:	4a9a      	ldr	r2, [pc, #616]	; (80026d4 <_Z14task2_joystickPKv+0x4e4>)
 800246a:	2302      	movs	r3, #2
 800246c:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 0;
 800246e:	4a9a      	ldr	r2, [pc, #616]	; (80026d8 <_Z14task2_joystickPKv+0x4e8>)
 8002470:	2300      	movs	r3, #0
 8002472:	6013      	str	r3, [r2, #0]
	  }
	  if((abs(PS2.LY) > 5 || abs(PS2.LX)>5 )&& abs(PS2.RX)<=5){
 8002474:	4b99      	ldr	r3, [pc, #612]	; (80026dc <_Z14task2_joystickPKv+0x4ec>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	bfb8      	it	lt
 800247c:	425b      	neglt	r3, r3
 800247e:	2b05      	cmp	r3, #5
 8002480:	dc07      	bgt.n	8002492 <_Z14task2_joystickPKv+0x2a2>
 8002482:	4b96      	ldr	r3, [pc, #600]	; (80026dc <_Z14task2_joystickPKv+0x4ec>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	bfb8      	it	lt
 800248a:	425b      	neglt	r3, r3
 800248c:	2b05      	cmp	r3, #5
 800248e:	f340 81ee 	ble.w	800286e <_Z14task2_joystickPKv+0x67e>
 8002492:	4b92      	ldr	r3, [pc, #584]	; (80026dc <_Z14task2_joystickPKv+0x4ec>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	bfb8      	it	lt
 800249a:	425b      	neglt	r3, r3
 800249c:	2b05      	cmp	r3, #5
 800249e:	f300 81e6 	bgt.w	800286e <_Z14task2_joystickPKv+0x67e>
		  if(ML>12000 || MR>12000){
 80024a2:	4b8f      	ldr	r3, [pc, #572]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80024a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a8:	a385      	add	r3, pc, #532	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe fb03 	bl	8000ab8 <__aeabi_dcmpgt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <_Z14task2_joystickPKv+0x2de>
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80024ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024be:	a380      	add	r3, pc, #512	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe faf8 	bl	8000ab8 <__aeabi_dcmpgt>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d048      	beq.n	8002560 <_Z14task2_joystickPKv+0x370>
			  if(ML > MR){
 80024ce:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	4b83      	ldr	r3, [pc, #524]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe faed 	bl	8000ab8 <__aeabi_dcmpgt>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01e      	beq.n	8002522 <_Z14task2_joystickPKv+0x332>
				  MR=MR/ML*12000;
 80024e4:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80024e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ea:	4b7d      	ldr	r3, [pc, #500]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f97c 	bl	80007ec <__aeabi_ddiv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	a370      	add	r3, pc, #448	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f849 	bl	8000598 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002510:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002514:	4972      	ldr	r1, [pc, #456]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002516:	a36a      	add	r3, pc, #424	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002520:	e170      	b.n	8002804 <_Z14task2_joystickPKv+0x614>

			  }
			  else{
				  ML=(ML/MR)*12000;
 8002522:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002528:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fe f95d 	bl	80007ec <__aeabi_ddiv>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	a361      	add	r3, pc, #388	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f82a 	bl	8000598 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 800254e:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002552:	4964      	ldr	r1, [pc, #400]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002554:	a35a      	add	r3, pc, #360	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 800255e:	e151      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002562:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002566:	a358      	add	r3, pc, #352	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe fa86 	bl	8000a7c <__aeabi_dcmplt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <_Z14task2_joystickPKv+0x39c>
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257c:	a352      	add	r3, pc, #328	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fe fa7b 	bl	8000a7c <__aeabi_dcmplt>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d054      	beq.n	8002636 <_Z14task2_joystickPKv+0x446>
			  if(ML < MR){
 800258c:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 800258e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002592:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe fa70 	bl	8000a7c <__aeabi_dcmplt>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d024      	beq.n	80025ec <_Z14task2_joystickPKv+0x3fc>
				  MR=-MR/ML*12000;
 80025a2:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80025aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025ba:	f7fe f917 	bl	80007ec <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	a33e      	add	r3, pc, #248	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd ffe4 	bl	8000598 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80025da:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 80025de:	4940      	ldr	r1, [pc, #256]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80025e0:	a339      	add	r3, pc, #228	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 80025ea:	e10b      	b.n	8002804 <_Z14task2_joystickPKv+0x614>

			  }
			  else{
				  ML=-ML/MR*12000;
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	663a      	str	r2, [r7, #96]	; 0x60
 80025f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025f8:	667b      	str	r3, [r7, #100]	; 0x64
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002604:	f7fe f8f2 	bl	80007ec <__aeabi_ddiv>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	a32b      	add	r3, pc, #172	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ffbf 	bl	8000598 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002624:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002628:	492e      	ldr	r1, [pc, #184]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 800262a:	a327      	add	r3, pc, #156	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002634:	e0e6      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	a320      	add	r3, pc, #128	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fe fa39 	bl	8000ab8 <__aeabi_dcmpgt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <_Z14task2_joystickPKv+0x472>
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 800264e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002652:	a31d      	add	r3, pc, #116	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe fa10 	bl	8000a7c <__aeabi_dcmplt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d067      	beq.n	8002732 <_Z14task2_joystickPKv+0x542>
			  if(ML > -MR){
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	4690      	mov	r8, r2
 800266a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	4640      	mov	r0, r8
 8002676:	4649      	mov	r1, r9
 8002678:	f7fe fa00 	bl	8000a7c <__aeabi_dcmplt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d032      	beq.n	80026e8 <_Z14task2_joystickPKv+0x4f8>
				  MR=MR/ML*12000;
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fe f8ad 	bl	80007ec <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	a309      	add	r3, pc, #36	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ff7a 	bl	8000598 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80026ae:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80026b4:	a302      	add	r3, pc, #8	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 80026be:	e0a1      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
 80026c0:	00000000 	.word	0x00000000
 80026c4:	40c77000 	.word	0x40c77000
 80026c8:	00000000 	.word	0x00000000
 80026cc:	c0c77000 	.word	0xc0c77000
 80026d0:	20000704 	.word	0x20000704
 80026d4:	200006f8 	.word	0x200006f8
 80026d8:	200007dc 	.word	0x200007dc
 80026dc:	200007f0 	.word	0x200007f0
 80026e0:	200006c0 	.word	0x200006c0
 80026e4:	200006c8 	.word	0x200006c8

			  }
			  else{
				  ML=-ML/MR*12000;
 80026e8:	4b91      	ldr	r3, [pc, #580]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80026f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f6:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002700:	f7fe f874 	bl	80007ec <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	a384      	add	r3, pc, #528	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff41 	bl	8000598 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	4b84      	ldr	r3, [pc, #528]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002720:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002724:	4983      	ldr	r1, [pc, #524]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002726:	a380      	add	r3, pc, #512	; (adr r3, 8002928 <_Z14task2_joystickPKv+0x738>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002730:	e068      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 8002732:	4b80      	ldr	r3, [pc, #512]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002738:	a379      	add	r3, pc, #484	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fe f9bb 	bl	8000ab8 <__aeabi_dcmpgt>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <_Z14task2_joystickPKv+0x56e>
 8002748:	4b79      	ldr	r3, [pc, #484]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 800274a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800274e:	a376      	add	r3, pc, #472	; (adr r3, 8002928 <_Z14task2_joystickPKv+0x738>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fe f992 	bl	8000a7c <__aeabi_dcmplt>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d052      	beq.n	8002804 <_Z14task2_joystickPKv+0x614>
			  if(MR > -ML){
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4692      	mov	sl, r2
 8002766:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800276a:	4b72      	ldr	r3, [pc, #456]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	4650      	mov	r0, sl
 8002772:	4659      	mov	r1, fp
 8002774:	f7fe f982 	bl	8000a7c <__aeabi_dcmplt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01e      	beq.n	80027bc <_Z14task2_joystickPKv+0x5cc>
				  ML=ML/MR*12000;
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002784:	4b6b      	ldr	r3, [pc, #428]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fe f82f 	bl	80007ec <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	a362      	add	r3, pc, #392	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80027aa:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 80027ae:	4961      	ldr	r1, [pc, #388]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80027b0:	a35b      	add	r3, pc, #364	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	e9c1 2300 	strd	r2, r3, [r1]
 80027ba:	e023      	b.n	8002804 <_Z14task2_joystickPKv+0x614>

			  }
			  else{
				  MR=-MR/ML*12000;
 80027bc:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	653a      	str	r2, [r7, #80]	; 0x50
 80027c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ca:	4b59      	ldr	r3, [pc, #356]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027d4:	f7fe f80a 	bl	80007ec <__aeabi_ddiv>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	a34f      	add	r3, pc, #316	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd fed7 	bl	8000598 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	4b50      	ldr	r3, [pc, #320]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80027f4:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80027fa:	a34b      	add	r3, pc, #300	; (adr r3, 8002928 <_Z14task2_joystickPKv+0x738>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	64ba      	str	r2, [r7, #72]	; 0x48
 800280c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002812:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002816:	f7fe f96f 	bl	8000af8 <__aeabi_d2iz>
 800281a:	4603      	mov	r3, r0
 800281c:	b21b      	sxth	r3, r3
 800281e:	4a46      	ldr	r2, [pc, #280]	; (8002938 <_Z14task2_joystickPKv+0x748>)
 8002820:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f964 	bl	8000af8 <__aeabi_d2iz>
 8002830:	4603      	mov	r3, r0
 8002832:	b21b      	sxth	r3, r3
 8002834:	4a41      	ldr	r2, [pc, #260]	; (800293c <_Z14task2_joystickPKv+0x74c>)
 8002836:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 8002838:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	643a      	str	r2, [r7, #64]	; 0x40
 8002840:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
 8002846:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800284a:	f7fe f955 	bl	8000af8 <__aeabi_d2iz>
 800284e:	4603      	mov	r3, r0
 8002850:	b21b      	sxth	r3, r3
 8002852:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <_Z14task2_joystickPKv+0x750>)
 8002854:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f94a 	bl	8000af8 <__aeabi_d2iz>
 8002864:	4603      	mov	r3, r0
 8002866:	b21b      	sxth	r3, r3
 8002868:	4a36      	ldr	r2, [pc, #216]	; (8002944 <_Z14task2_joystickPKv+0x754>)
 800286a:	8013      	strh	r3, [r2, #0]
 800286c:	e3a5      	b.n	8002fba <_Z14task2_joystickPKv+0xdca>
	  }
	  else if(abs(PS2.LY)<=5 && abs(PS2.LX)<=5 && abs(PS2.RX)>5){
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfb8      	it	lt
 8002876:	425b      	neglt	r3, r3
 8002878:	2b05      	cmp	r3, #5
 800287a:	dc69      	bgt.n	8002950 <_Z14task2_joystickPKv+0x760>
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	bfb8      	it	lt
 8002884:	425b      	neglt	r3, r3
 8002886:	2b05      	cmp	r3, #5
 8002888:	dc62      	bgt.n	8002950 <_Z14task2_joystickPKv+0x760>
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bfb8      	it	lt
 8002892:	425b      	neglt	r3, r3
 8002894:	2b05      	cmp	r3, #5
 8002896:	dd5b      	ble.n	8002950 <_Z14task2_joystickPKv+0x760>
		  M1.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	049b      	lsls	r3, r3, #18
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	039b      	lsls	r3, r3, #14
 80028a4:	4619      	mov	r1, r3
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 80028a8:	fb83 2301 	smull	r2, r3, r3, r1
 80028ac:	115a      	asrs	r2, r3, #5
 80028ae:	17cb      	asrs	r3, r1, #31
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <_Z14task2_joystickPKv+0x748>)
 80028b6:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	049b      	lsls	r3, r3, #18
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	039b      	lsls	r3, r3, #14
 80028c4:	4619      	mov	r1, r3
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 80028c8:	fb83 2301 	smull	r2, r3, r3, r1
 80028cc:	115a      	asrs	r2, r3, #5
 80028ce:	17cb      	asrs	r3, r1, #31
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <_Z14task2_joystickPKv+0x74c>)
 80028d6:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	049b      	lsls	r3, r3, #18
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	039b      	lsls	r3, r3, #14
 80028e4:	4619      	mov	r1, r3
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 80028e8:	fb83 2301 	smull	r2, r3, r3, r1
 80028ec:	115a      	asrs	r2, r3, #5
 80028ee:	17cb      	asrs	r3, r1, #31
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <_Z14task2_joystickPKv+0x754>)
 80028f6:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	049b      	lsls	r3, r3, #18
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	4619      	mov	r1, r3
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 8002908:	fb83 2301 	smull	r2, r3, r3, r1
 800290c:	115a      	asrs	r2, r3, #5
 800290e:	17cb      	asrs	r3, r1, #31
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b21b      	sxth	r3, r3
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <_Z14task2_joystickPKv+0x750>)
 8002916:	8013      	strh	r3, [r2, #0]
 8002918:	e34f      	b.n	8002fba <_Z14task2_joystickPKv+0xdca>
 800291a:	bf00      	nop
 800291c:	f3af 8000 	nop.w
 8002920:	00000000 	.word	0x00000000
 8002924:	40c77000 	.word	0x40c77000
 8002928:	00000000 	.word	0x00000000
 800292c:	c0c77000 	.word	0xc0c77000
 8002930:	200006c0 	.word	0x200006c0
 8002934:	200006c8 	.word	0x200006c8
 8002938:	200007bc 	.word	0x200007bc
 800293c:	200007c4 	.word	0x200007c4
 8002940:	200007d4 	.word	0x200007d4
 8002944:	200007cc 	.word	0x200007cc
 8002948:	200007f0 	.word	0x200007f0
 800294c:	10624dd3 	.word	0x10624dd3
	  }
	  else if((abs(PS2.LY)>5 || abs(PS2.LX)>5) && abs(PS2.RX)>5){
 8002950:	4ba3      	ldr	r3, [pc, #652]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	bfb8      	it	lt
 8002958:	425b      	neglt	r3, r3
 800295a:	2b05      	cmp	r3, #5
 800295c:	dc07      	bgt.n	800296e <_Z14task2_joystickPKv+0x77e>
 800295e:	4ba0      	ldr	r3, [pc, #640]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	425b      	neglt	r3, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	f340 831a 	ble.w	8002fa2 <_Z14task2_joystickPKv+0xdb2>
 800296e:	4b9c      	ldr	r3, [pc, #624]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	bfb8      	it	lt
 8002976:	425b      	neglt	r3, r3
 8002978:	2b05      	cmp	r3, #5
 800297a:	f340 8312 	ble.w	8002fa2 <_Z14task2_joystickPKv+0xdb2>
		  PS2.X=PS2.LX/(float)128;
 800297e:	4b98      	ldr	r3, [pc, #608]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002be4 <_Z14task2_joystickPKv+0x9f4>
 800298e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002992:	ee16 0a90 	vmov	r0, s13
 8002996:	f7fd fda7 	bl	80004e8 <__aeabi_f2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4990      	ldr	r1, [pc, #576]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PS2.Y=PS2.LY/(float)128;
 80029a4:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002be4 <_Z14task2_joystickPKv+0x9f4>
 80029b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029b8:	ee16 0a90 	vmov	r0, s13
 80029bc:	f7fd fd94 	bl	80004e8 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4986      	ldr	r1, [pc, #536]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029d0:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029d6:	f7fd fddf 	bl	8000598 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4614      	mov	r4, r2
 80029e0:	461d      	mov	r5, r3
 80029e2:	4b7f      	ldr	r3, [pc, #508]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029e4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029e8:	4b7d      	ldr	r3, [pc, #500]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029ee:	f7fd fdd3 	bl	8000598 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc17 	bl	800022c <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	ec43 2b17 	vmov	d7, r2, r3
 8002a06:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0a:	eef0 0a67 	vmov.f32	s1, s15
 8002a0e:	f00a fadf 	bl	800cfd0 <sqrt>
 8002a12:	eeb0 7a40 	vmov.f32	s14, s0
 8002a16:	eef0 7a60 	vmov.f32	s15, s1
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <_Z14task2_joystickPKv+0x9f8>)
 8002a1c:	ed83 7b00 	vstr	d7, [r3]
//				  speed=1;
//			  }
//			  if(speed<=-1){
//				  speed=-1;
//			  }
		  degree_a=atan2(PS2.Y,PS2.X);
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002a22:	ed93 7b06 	vldr	d7, [r3, #24]
 8002a26:	4b6e      	ldr	r3, [pc, #440]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002a28:	ed93 6b04 	vldr	d6, [r3, #16]
 8002a2c:	eeb0 1a46 	vmov.f32	s2, s12
 8002a30:	eef0 1a66 	vmov.f32	s3, s13
 8002a34:	eeb0 0a47 	vmov.f32	s0, s14
 8002a38:	eef0 0a67 	vmov.f32	s1, s15
 8002a3c:	f00a fac6 	bl	800cfcc <atan2>
 8002a40:	eeb0 7a40 	vmov.f32	s14, s0
 8002a44:	eef0 7a60 	vmov.f32	s15, s1
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <_Z14task2_joystickPKv+0x9fc>)
 8002a4a:	ed83 7b00 	vstr	d7, [r3]
		  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <_Z14task2_joystickPKv+0x9fc>)
 8002a50:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <_Z14task2_joystickPKv+0xa00>)
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <_Z14task2_joystickPKv+0xa04>)
 8002a60:	f7fd fec4 	bl	80007ec <__aeabi_ddiv>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fbdc 	bl	8000228 <__aeabi_dsub>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	ec43 2b17 	vmov	d7, r2, r3
 8002a78:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7c:	eef0 0a67 	vmov.f32	s1, s15
 8002a80:	f00a fb26 	bl	800d0d0 <sin>
 8002a84:	ec51 0b10 	vmov	r0, r1, d0
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <_Z14task2_joystickPKv+0x9f8>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fd83 	bl	8000598 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <_Z14task2_joystickPKv+0xa08>)
 8002aa0:	f7fd fd7a 	bl	8000598 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002aae:	e9c3 0100 	strd	r0, r1, [r3]
		  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <_Z14task2_joystickPKv+0x9fc>)
 8002ab4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <_Z14task2_joystickPKv+0xa00>)
 8002aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <_Z14task2_joystickPKv+0xa04>)
 8002ac4:	f7fd fe92 	bl	80007ec <__aeabi_ddiv>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4620      	mov	r0, r4
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f7fd fbaa 	bl	8000228 <__aeabi_dsub>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	ec43 2b17 	vmov	d7, r2, r3
 8002adc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae0:	eef0 0a67 	vmov.f32	s1, s15
 8002ae4:	f00a faa0 	bl	800d028 <cos>
 8002ae8:	ec51 0b10 	vmov	r0, r1, d0
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <_Z14task2_joystickPKv+0x9f8>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fd51 	bl	8000598 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <_Z14task2_joystickPKv+0xa08>)
 8002b04:	f7fd fd48 	bl	8000598 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b12:	e9c3 0100 	strd	r0, r1, [r3]
		  if(ML>12000 || MR>12000){
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b1c:	a32e      	add	r3, pc, #184	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd ffc9 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <_Z14task2_joystickPKv+0x952>
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b32:	a329      	add	r3, pc, #164	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd ffbe 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d060      	beq.n	8002c04 <_Z14task2_joystickPKv+0xa14>
			  if(ML > MR){
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd ffb3 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01e      	beq.n	8002b96 <_Z14task2_joystickPKv+0x9a6>
				  MR=MR/ML*12000;
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fe42 	bl	80007ec <__aeabi_ddiv>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	a319      	add	r3, pc, #100	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fd0f 	bl	8000598 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b84:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002b88:	491c      	ldr	r1, [pc, #112]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b8a:	a313      	add	r3, pc, #76	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002b94:	e184      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>

			  }
			  else{
				  ML=ML/MR*12000;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fe23 	bl	80007ec <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	a30a      	add	r3, pc, #40	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fcf0 	bl	8000598 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002bc2:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002bc6:	490e      	ldr	r1, [pc, #56]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002bc8:	a303      	add	r3, pc, #12	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002bd2:	e165      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	40c77000 	.word	0x40c77000
 8002be0:	200007f0 	.word	0x200007f0
 8002be4:	43000000 	.word	0x43000000
 8002be8:	200006d0 	.word	0x200006d0
 8002bec:	200006d8 	.word	0x200006d8
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	40100000 	.word	0x40100000
 8002bf8:	40d00000 	.word	0x40d00000
 8002bfc:	200006c0 	.word	0x200006c0
 8002c00:	200006c8 	.word	0x200006c8
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0a:	a38d      	add	r3, pc, #564	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd ff34 	bl	8000a7c <__aeabi_dcmplt>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <_Z14task2_joystickPKv+0xa40>
 8002c1a:	4b8e      	ldr	r3, [pc, #568]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c20:	a387      	add	r3, pc, #540	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd ff29 	bl	8000a7c <__aeabi_dcmplt>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d054      	beq.n	8002cda <_Z14task2_joystickPKv+0xaea>
			  if(ML < MR){
 8002c30:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c36:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd ff1e 	bl	8000a7c <__aeabi_dcmplt>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <_Z14task2_joystickPKv+0xaa0>
				  MR=-MR/ML*12000;
 8002c46:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	4b7e      	ldr	r3, [pc, #504]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c5e:	f7fd fdc5 	bl	80007ec <__aeabi_ddiv>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	a377      	add	r3, pc, #476	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fc92 	bl	8000598 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c7e:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002c82:	4973      	ldr	r1, [pc, #460]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c84:	a36e      	add	r3, pc, #440	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002c8e:	e107      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	633a      	str	r2, [r7, #48]	; 0x30
 8002c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ca8:	f7fd fda0 	bl	80007ec <__aeabi_ddiv>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	a364      	add	r3, pc, #400	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fc6d 	bl	8000598 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002cc8:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002ccc:	4961      	ldr	r1, [pc, #388]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002cce:	a35c      	add	r3, pc, #368	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002cd8:	e0e2      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce0:	a359      	add	r3, pc, #356	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fee7 	bl	8000ab8 <__aeabi_dcmpgt>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <_Z14task2_joystickPKv+0xb16>
 8002cf0:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf6:	a352      	add	r3, pc, #328	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd febe 	bl	8000a7c <__aeabi_dcmplt>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d054      	beq.n	8002db0 <_Z14task2_joystickPKv+0xbc0>
			  if(ML > -MR){
 8002d06:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d1e:	f7fd fead 	bl	8000a7c <__aeabi_dcmplt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01e      	beq.n	8002d66 <_Z14task2_joystickPKv+0xb76>
				  MR=MR/ML*12000;
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d2e:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fd5a 	bl	80007ec <__aeabi_ddiv>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	a341      	add	r3, pc, #260	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc27 	bl	8000598 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d54:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002d58:	493d      	ldr	r1, [pc, #244]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d5a:	a33b      	add	r3, pc, #236	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002d64:	e09c      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002d66:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	623a      	str	r2, [r7, #32]
 8002d6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d7e:	f7fd fd35 	bl	80007ec <__aeabi_ddiv>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	a32f      	add	r3, pc, #188	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d9e:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002da2:	492c      	ldr	r1, [pc, #176]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002da4:	a326      	add	r3, pc, #152	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002dae:	e077      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db6:	a324      	add	r3, pc, #144	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fe7c 	bl	8000ab8 <__aeabi_dcmpgt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <_Z14task2_joystickPKv+0xbec>
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dcc:	a31c      	add	r3, pc, #112	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fe53 	bl	8000a7c <__aeabi_dcmplt>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d061      	beq.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
			  if(MR > -ML){
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	61ba      	str	r2, [r7, #24]
 8002de4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df4:	f7fd fe42 	bl	8000a7c <__aeabi_dcmplt>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02c      	beq.n	8002e58 <_Z14task2_joystickPKv+0xc68>
				  ML=ML/MR*12000;
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fcef 	bl	80007ec <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	a30c      	add	r3, pc, #48	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fbbc 	bl	8000598 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002e2a:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002e2e:	4909      	ldr	r1, [pc, #36]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002e30:	a305      	add	r3, pc, #20	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	e9c1 2300 	strd	r2, r3, [r1]
 8002e3a:	e031      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
 8002e3c:	f3af 8000 	nop.w
 8002e40:	00000000 	.word	0x00000000
 8002e44:	c0c77000 	.word	0xc0c77000
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	40c77000 	.word	0x40c77000
 8002e50:	200006c0 	.word	0x200006c0
 8002e54:	200006c8 	.word	0x200006c8

			  }
			  else{
				  MR=-MR/ML*12000;
 8002e58:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	613a      	str	r2, [r7, #16]
 8002e60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e70:	f7fd fcbc 	bl	80007ec <__aeabi_ddiv>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	a352      	add	r3, pc, #328	; (adr r3, 8002fc8 <_Z14task2_joystickPKv+0xdd8>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fb89 	bl	8000598 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002e90:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002e94:	4951      	ldr	r1, [pc, #324]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002e96:	a34e      	add	r3, pc, #312	; (adr r3, 8002fd0 <_Z14task2_joystickPKv+0xde0>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	60ba      	str	r2, [r7, #8]
 8002ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb2:	f7fd fe21 	bl	8000af8 <__aeabi_d2iz>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	4a49      	ldr	r2, [pc, #292]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002ebc:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe16 	bl	8000af8 <__aeabi_d2iz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002ed2:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 8002ed4:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	603a      	str	r2, [r7, #0]
 8002edc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ee6:	f7fd fe07 	bl	8000af8 <__aeabi_d2iz>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4a3e      	ldr	r2, [pc, #248]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002ef0:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7fd fdfc 	bl	8000af8 <__aeabi_d2iz>
 8002f00:	4603      	mov	r3, r0
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002f06:	8013      	strh	r3, [r2, #0]
		  M1.setpoint=M1.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f08:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0e:	b298      	uxth	r0, r3
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0399      	lsls	r1, r3, #14
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f18:	fb83 2301 	smull	r2, r3, r3, r1
 8002f1c:	121a      	asrs	r2, r3, #8
 8002f1e:	17cb      	asrs	r3, r1, #31
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4403      	add	r3, r0
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002f2c:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=M2.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	b298      	uxth	r0, r3
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	0399      	lsls	r1, r3, #14
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f3e:	fb83 2301 	smull	r2, r3, r3, r1
 8002f42:	121a      	asrs	r2, r3, #8
 8002f44:	17cb      	asrs	r3, r1, #31
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4403      	add	r3, r0
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002f52:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=M3.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5a:	b298      	uxth	r0, r3
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0399      	lsls	r1, r3, #14
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f64:	fb83 2301 	smull	r2, r3, r3, r1
 8002f68:	121a      	asrs	r2, r3, #8
 8002f6a:	17cb      	asrs	r3, r1, #31
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4403      	add	r3, r0
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002f78:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=M4.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f80:	b298      	uxth	r0, r3
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0399      	lsls	r1, r3, #14
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f8a:	fb83 2301 	smull	r2, r3, r3, r1
 8002f8e:	121a      	asrs	r2, r3, #8
 8002f90:	17cb      	asrs	r3, r1, #31
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4403      	add	r3, r0
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002f9e:	8013      	strh	r3, [r2, #0]
 8002fa0:	e00b      	b.n	8002fba <_Z14task2_joystickPKv+0xdca>
	  }
	  else{
		  M1.setpoint=0;
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=0;
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002faa:	2300      	movs	r3, #0
 8002fac:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=0;
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=0;
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	8013      	strh	r3, [r2, #0]
	  }
      osDelay(10);
 8002fba:	200a      	movs	r0, #10
 8002fbc:	f008 fe25 	bl	800bc0a <osDelay>
	  spi_enable;
 8002fc0:	f7ff b91b 	b.w	80021fa <_Z14task2_joystickPKv+0xa>
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	40c77000 	.word	0x40c77000
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	c0c77000 	.word	0xc0c77000
 8002fd8:	200006c8 	.word	0x200006c8
 8002fdc:	200006c0 	.word	0x200006c0
 8002fe0:	200007bc 	.word	0x200007bc
 8002fe4:	200007c4 	.word	0x200007c4
 8002fe8:	200007d4 	.word	0x200007d4
 8002fec:	200007cc 	.word	0x200007cc
 8002ff0:	200007f0 	.word	0x200007f0
 8002ff4:	51eb851f 	.word	0x51eb851f

08002ff8 <_Z8DC_motorPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DC_motor */
void DC_motor(void const * argument)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DC_motor */
	DC_pid.error = 0;
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <_Z8DC_motorPKv+0x124>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	2120      	movs	r1, #32
 800300a:	4845      	ldr	r0, [pc, #276]	; (8003120 <_Z8DC_motorPKv+0x128>)
 800300c:	f004 fea2 	bl	8007d54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8003010:	2201      	movs	r2, #1
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	4842      	ldr	r0, [pc, #264]	; (8003120 <_Z8DC_motorPKv+0x128>)
 8003016:	f004 fe9d 	bl	8007d54 <HAL_GPIO_WritePin>
	TIM4->CCR1=920;
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 800301c:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=920;
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 8003024:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
//	TIM8 -> CCR1 = 99;
  /* Infinite loop */
  for(;;)
  {
		if(BLDC==1 || flag==1){
 800302a:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <_Z8DC_motorPKv+0x130>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d003      	beq.n	800303a <_Z8DC_motorPKv+0x42>
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <_Z8DC_motorPKv+0x134>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d137      	bne.n	80030aa <_Z8DC_motorPKv+0xb2>
			TIM4->CCR1 = 930;
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 800303c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 909;
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 8003044:	f240 328d 	movw	r2, #909	; 0x38d
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
			flag = 1;
 800304a:	4b38      	ldr	r3, [pc, #224]	; (800312c <_Z8DC_motorPKv+0x134>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
			//HAL_Delay(500);
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8003050:	bf00      	nop
 8003052:	2108      	movs	r1, #8
 8003054:	4836      	ldr	r0, [pc, #216]	; (8003130 <_Z8DC_motorPKv+0x138>)
 8003056:	f004 fe65 	bl	8007d24 <HAL_GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01e      	beq.n	800309e <_Z8DC_motorPKv+0xa6>
 8003060:	e016      	b.n	8003090 <_Z8DC_motorPKv+0x98>
				TIM4->CCR1 = 920;
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 8003064:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 800306c:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
//				HAL_Delay(2000);
				flag = 0;
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <_Z8DC_motorPKv+0x134>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
				BLDC = 0;
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <_Z8DC_motorPKv+0x130>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
				blue = 1;
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <_Z8DC_motorPKv+0x13c>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 890;
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <_Z8DC_motorPKv+0x140>)
 8003086:	f240 327a 	movw	r2, #890	; 0x37a
 800308a:	601a      	str	r2, [r3, #0]
				break;
 800308c:	bf00      	nop
		if(BLDC==1 || flag==1){
 800308e:	e040      	b.n	8003112 <_Z8DC_motorPKv+0x11a>
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8003090:	2110      	movs	r1, #16
 8003092:	4823      	ldr	r0, [pc, #140]	; (8003120 <_Z8DC_motorPKv+0x128>)
 8003094:	f004 fe46 	bl	8007d24 <HAL_GPIO_ReadPin>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <_Z8DC_motorPKv+0xaa>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <_Z8DC_motorPKv+0xac>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1dc      	bne.n	8003062 <_Z8DC_motorPKv+0x6a>
		if(BLDC==1 || flag==1){
 80030a8:	e033      	b.n	8003112 <_Z8DC_motorPKv+0x11a>
//					Motor.target_pos = 890;
//					break;
//				}
			}
		}
		else if(BLDC==2 && flag==0){
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <_Z8DC_motorPKv+0x130>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d12f      	bne.n	8003112 <_Z8DC_motorPKv+0x11a>
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <_Z8DC_motorPKv+0x134>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d12b      	bne.n	8003112 <_Z8DC_motorPKv+0x11a>
			TIM4->CCR1 = 915;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030bc:	f240 3293 	movw	r2, #915	; 0x393
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 925;
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030c4:	f240 329d 	movw	r2, #925	; 0x39d
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
			//HAL_Delay(200);
			while((HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)) == 1){
 80030ca:	bf00      	nop
 80030cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d0:	481a      	ldr	r0, [pc, #104]	; (800313c <_Z8DC_motorPKv+0x144>)
 80030d2:	f004 fe27 	bl	8007d24 <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <_Z8DC_motorPKv+0x11a>
				TIM4->CCR1 = 920;
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030e8:	f44f 7266 	mov.w	r2, #920	; 0x398
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030f0:	f44f 7266 	mov.w	r2, #920	; 0x398
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(2000);
 80030f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030fa:	f003 f8eb 	bl	80062d4 <HAL_Delay>
				BLDC = 0;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <_Z8DC_motorPKv+0x130>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
				yellow=2;
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <_Z8DC_motorPKv+0x148>)
 8003106:	2202      	movs	r2, #2
 8003108:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 0;
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <_Z8DC_motorPKv+0x140>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
				break;
 8003110:	bf00      	nop
			}
		}
    osDelay(50);
 8003112:	2032      	movs	r0, #50	; 0x32
 8003114:	f008 fd79 	bl	800bc0a <osDelay>
		if(BLDC==1 || flag==1){
 8003118:	e787      	b.n	800302a <_Z8DC_motorPKv+0x32>
 800311a:	bf00      	nop
 800311c:	200007a0 	.word	0x200007a0
 8003120:	40020000 	.word	0x40020000
 8003124:	40000800 	.word	0x40000800
 8003128:	20000700 	.word	0x20000700
 800312c:	200006fc 	.word	0x200006fc
 8003130:	40020800 	.word	0x40020800
 8003134:	200006f4 	.word	0x200006f4
 8003138:	200007dc 	.word	0x200007dc
 800313c:	40020400 	.word	0x40020400
 8003140:	200006f8 	.word	0x200006f8

08003144 <_Z10ColorcheckPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Colorcheck */
void Colorcheck(void const * argument)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Colorcheck */
	Motor.my_pos = TIM5->CNT=0;
 800314c:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
 8003152:	4b58      	ldr	r3, [pc, #352]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
	DC_pid.KP = 0.7;
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 800315a:	4a58      	ldr	r2, [pc, #352]	; (80032bc <_Z10ColorcheckPKv+0x178>)
 800315c:	601a      	str	r2, [r3, #0]
	DC_pid.KI = 0.0005;
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <_Z10ColorcheckPKv+0x17c>)
 8003162:	605a      	str	r2, [r3, #4]
	DC_pid.KD = 0.00003;
 8003164:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003166:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <_Z10ColorcheckPKv+0x180>)
 8003168:	609a      	str	r2, [r3, #8]
	Motor.target_pos=0;
 800316a:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003170:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <_Z10ColorcheckPKv+0x184>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d121      	bne.n	80031bc <_Z10ColorcheckPKv+0x78>
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f240 327a 	movw	r2, #890	; 0x37a
 8003180:	4293      	cmp	r3, r2
 8003182:	d11b      	bne.n	80031bc <_Z10ColorcheckPKv+0x78>
		 calculatePID();
 8003184:	f7fe fc6c 	bl	8001a60 <_Z12calculatePIDv>
		 motorspeed();
 8003188:	f7fe fd08 	bl	8001b9c <_Z10motorspeedv>
		 Motor.target_pos = 890;
 800318c:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800318e:	f240 327a 	movw	r2, #890	; 0x37a
 8003192:	601a      	str	r2, [r3, #0]
		 while(DC_pid.error < 5 ){
 8003194:	bf00      	nop
 8003196:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b04      	cmp	r3, #4
 800319c:	f300 8082 	bgt.w	80032a4 <_Z10ColorcheckPKv+0x160>
			 MotorStop();
 80031a0:	f7fe fc46 	bl	8001a30 <_Z9MotorStopv>
			 TIM5->CNT=89000;
 80031a4:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 80031a6:	4a49      	ldr	r2, [pc, #292]	; (80032cc <_Z10ColorcheckPKv+0x188>)
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=890;
 80031aa:	4b42      	ldr	r3, [pc, #264]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 80031ac:	f240 327a 	movw	r2, #890	; 0x37a
 80031b0:	605a      	str	r2, [r3, #4]
//			 Motor.target_pos = 0;
//			 yellow=2;
			 blue = 0;
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <_Z10ColorcheckPKv+0x184>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
			 break;
 80031b8:	bf00      	nop
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 80031ba:	e073      	b.n	80032a4 <_Z10ColorcheckPKv+0x160>
		}
	 }else if(yellow==2 && Motor.target_pos == 0){//target pos = 0
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d12f      	bne.n	8003224 <_Z10ColorcheckPKv+0xe0>
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d12b      	bne.n	8003224 <_Z10ColorcheckPKv+0xe0>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 80031cc:	e00b      	b.n	80031e6 <_Z10ColorcheckPKv+0xa2>
			 MotorStop();
 80031ce:	f7fe fc2f 	bl	8001a30 <_Z9MotorStopv>
//			 Motor.target_pos=0;
			 TIM5->CNT=0;
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=0;
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
			 yellow=0;
 80031de:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
			 break;
 80031e4:	e016      	b.n	8003214 <_Z10ColorcheckPKv+0xd0>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 80031e6:	2104      	movs	r1, #4
 80031e8:	483a      	ldr	r0, [pc, #232]	; (80032d4 <_Z10ColorcheckPKv+0x190>)
 80031ea:	f004 fd9b 	bl	8007d24 <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <_Z10ColorcheckPKv+0xbe>
 80031f4:	2102      	movs	r1, #2
 80031f6:	4837      	ldr	r0, [pc, #220]	; (80032d4 <_Z10ColorcheckPKv+0x190>)
 80031f8:	f004 fd94 	bl	8007d24 <HAL_GPIO_ReadPin>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <_Z10ColorcheckPKv+0xca>
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b63      	cmp	r3, #99	; 0x63
 8003208:	dc01      	bgt.n	800320e <_Z10ColorcheckPKv+0xca>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <_Z10ColorcheckPKv+0xcc>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1dc      	bne.n	80031ce <_Z10ColorcheckPKv+0x8a>
		 }
		 	 Motor.target_pos= 0;
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
			 calculatePID();
 800321a:	f7fe fc21 	bl	8001a60 <_Z12calculatePIDv>
			 motorspeed();
 800321e:	f7fe fcbd 	bl	8001b9c <_Z10motorspeedv>
 8003222:	e040      	b.n	80032a6 <_Z10ColorcheckPKv+0x162>
	}else if(yellow==1 && Motor.target_pos == 1800){//target pos = 1800
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d135      	bne.n	8003298 <_Z10ColorcheckPKv+0x154>
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003234:	d130      	bne.n	8003298 <_Z10ColorcheckPKv+0x154>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 8003236:	e00f      	b.n	8003258 <_Z10ColorcheckPKv+0x114>
			 MotorStop();
 8003238:	f7fe fbfa 	bl	8001a30 <_Z9MotorStopv>
			 Motor.my_pos = 1800;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800323e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003242:	605a      	str	r2, [r3, #4]
			 Motor.target_pos = 0;
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
			 TIM5->CNT = 180000;
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <_Z10ColorcheckPKv+0x194>)
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
			 yellow=0;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
			 break;
 8003256:	e016      	b.n	8003286 <_Z10ColorcheckPKv+0x142>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 8003258:	2101      	movs	r1, #1
 800325a:	481e      	ldr	r0, [pc, #120]	; (80032d4 <_Z10ColorcheckPKv+0x190>)
 800325c:	f004 fd62 	bl	8007d24 <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <_Z10ColorcheckPKv+0x130>
 8003266:	2101      	movs	r1, #1
 8003268:	481c      	ldr	r0, [pc, #112]	; (80032dc <_Z10ColorcheckPKv+0x198>)
 800326a:	f004 fd5b 	bl	8007d24 <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <_Z10ColorcheckPKv+0x13c>
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b63      	cmp	r3, #99	; 0x63
 800327a:	dc01      	bgt.n	8003280 <_Z10ColorcheckPKv+0x13c>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <_Z10ColorcheckPKv+0x13e>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1d8      	bne.n	8003238 <_Z10ColorcheckPKv+0xf4>
		 }
		 	 Motor.target_pos = 1800;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003288:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800328c:	601a      	str	r2, [r3, #0]
			 calculatePID();
 800328e:	f7fe fbe7 	bl	8001a60 <_Z12calculatePIDv>
			 motorspeed();
 8003292:	f7fe fc83 	bl	8001b9c <_Z10motorspeedv>
 8003296:	e006      	b.n	80032a6 <_Z10ColorcheckPKv+0x162>
	}else{
		 MotorStop();
 8003298:	f7fe fbca 	bl	8001a30 <_Z9MotorStopv>
		 yellow = 0;
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e000      	b.n	80032a6 <_Z10ColorcheckPKv+0x162>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 80032a4:	bf00      	nop
	 }
    osDelay(5);
 80032a6:	2005      	movs	r0, #5
 80032a8:	f008 fcaf 	bl	800bc0a <osDelay>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 80032ac:	e760      	b.n	8003170 <_Z10ColorcheckPKv+0x2c>
 80032ae:	bf00      	nop
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	200007dc 	.word	0x200007dc
 80032b8:	200007a0 	.word	0x200007a0
 80032bc:	3f333333 	.word	0x3f333333
 80032c0:	3a03126f 	.word	0x3a03126f
 80032c4:	37fba882 	.word	0x37fba882
 80032c8:	200006f4 	.word	0x200006f4
 80032cc:	00015ba8 	.word	0x00015ba8
 80032d0:	200006f8 	.word	0x200006f8
 80032d4:	40020800 	.word	0x40020800
 80032d8:	0002bf20 	.word	0x0002bf20
 80032dc:	40020400 	.word	0x40020400

080032e0 <_Z11StartTask05PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	setup();
 80032e8:	f001 fdc0 	bl	8004e6c <setup>
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 80032ec:	2101      	movs	r1, #1
 80032ee:	4872      	ldr	r0, [pc, #456]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 80032f0:	f004 fd18 	bl	8007d24 <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <_Z11StartTask05PKv+0x36>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000001;
 8003304:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b21a      	sxth	r2, r3
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003312:	811a      	strh	r2, [r3, #8]
 8003314:	e007      	b.n	8003326 <_Z11StartTask05PKv+0x46>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111110;
 8003316:	4b69      	ldr	r3, [pc, #420]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003318:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800331c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003320:	b21a      	sxth	r2, r3
 8003322:	4b66      	ldr	r3, [pc, #408]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003324:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin)==1){
 8003326:	2101      	movs	r1, #1
 8003328:	4865      	ldr	r0, [pc, #404]	; (80034c0 <_Z11StartTask05PKv+0x1e0>)
 800332a:	f004 fcfb 	bl	8007d24 <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <_Z11StartTask05PKv+0x70>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000010;
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003340:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	b21a      	sxth	r2, r3
 800334a:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800334c:	811a      	strh	r2, [r3, #8]
 800334e:	e007      	b.n	8003360 <_Z11StartTask05PKv+0x80>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111101;
 8003350:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003356:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800335a:	b21a      	sxth	r2, r3
 800335c:	4b57      	ldr	r3, [pc, #348]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800335e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin)==1){
 8003360:	2104      	movs	r1, #4
 8003362:	4855      	ldr	r0, [pc, #340]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 8003364:	f004 fcde 	bl	8007d24 <HAL_GPIO_ReadPin>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <_Z11StartTask05PKv+0xaa>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000100;
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800337a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	b21a      	sxth	r2, r3
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003386:	811a      	strh	r2, [r3, #8]
 8003388:	e007      	b.n	800339a <_Z11StartTask05PKv+0xba>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111011;
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800338c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003390:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8003394:	b21a      	sxth	r2, r3
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003398:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin)==1){
 800339a:	2102      	movs	r1, #2
 800339c:	4846      	ldr	r0, [pc, #280]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 800339e:	f004 fcc1 	bl	8007d24 <HAL_GPIO_ReadPin>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <_Z11StartTask05PKv+0xe4>
	  		  sensor_buff[4]=sensor_buff[4]|0b00001000;
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	b21a      	sxth	r2, r3
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033c0:	811a      	strh	r2, [r3, #8]
 80033c2:	e007      	b.n	80033d4 <_Z11StartTask05PKv+0xf4>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11110111;
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80033ce:	b21a      	sxth	r2, r3
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033d2:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==1){
 80033d4:	2108      	movs	r1, #8
 80033d6:	4838      	ldr	r0, [pc, #224]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 80033d8:	f004 fca4 	bl	8007d24 <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <_Z11StartTask05PKv+0x11e>
	  		  sensor_buff[4]=sensor_buff[4]|0b00010000;
 80033ec:	4b33      	ldr	r3, [pc, #204]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033f2:	f043 0310 	orr.w	r3, r3, #16
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	4b30      	ldr	r3, [pc, #192]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033fa:	811a      	strh	r2, [r3, #8]
 80033fc:	e007      	b.n	800340e <_Z11StartTask05PKv+0x12e>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11101111;
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003404:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003408:	b21a      	sxth	r2, r3
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800340c:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==1){
 800340e:	2110      	movs	r1, #16
 8003410:	482c      	ldr	r0, [pc, #176]	; (80034c4 <_Z11StartTask05PKv+0x1e4>)
 8003412:	f004 fc87 	bl	8007d24 <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <_Z11StartTask05PKv+0x158>
	  		  sensor_buff[4]=sensor_buff[4]|0b00100000;
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003428:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800342c:	f043 0320 	orr.w	r3, r3, #32
 8003430:	b21a      	sxth	r2, r3
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003434:	811a      	strh	r2, [r3, #8]
 8003436:	e007      	b.n	8003448 <_Z11StartTask05PKv+0x168>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11011111;
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800343a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800343e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003442:	b21a      	sxth	r2, r3
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003446:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)==1){
 8003448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800344c:	481c      	ldr	r0, [pc, #112]	; (80034c0 <_Z11StartTask05PKv+0x1e0>)
 800344e:	f004 fc69 	bl	8007d24 <HAL_GPIO_ReadPin>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <_Z11StartTask05PKv+0x194>
	  		  sensor_buff[4]=sensor_buff[4]|0b01000000;
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003464:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346c:	b21a      	sxth	r2, r3
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003470:	811a      	strh	r2, [r3, #8]
 8003472:	e007      	b.n	8003484 <_Z11StartTask05PKv+0x1a4>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b10111111;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800347a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800347e:	b21a      	sxth	r2, r3
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003482:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  sensor_buff[0]=M1.en_speed;
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_Z11StartTask05PKv+0x1e8>)
 8003486:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800348c:	801a      	strh	r2, [r3, #0]
	  	  sensor_buff[1]=M2.en_speed;
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <_Z11StartTask05PKv+0x1ec>)
 8003490:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003496:	805a      	strh	r2, [r3, #2]
	  	  sensor_buff[2]=M3.en_speed;
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <_Z11StartTask05PKv+0x1f0>)
 800349a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80034a0:	809a      	strh	r2, [r3, #4]
	  	  sensor_buff[3]=M4.en_speed;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <_Z11StartTask05PKv+0x1f4>)
 80034a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80034aa:	80da      	strh	r2, [r3, #6]
	  	  loop();
 80034ac:	f001 fcf4 	bl	8004e98 <loop>
    osDelay(10);
 80034b0:	200a      	movs	r0, #10
 80034b2:	f008 fbaa 	bl	800bc0a <osDelay>
	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 80034b6:	e719      	b.n	80032ec <_Z11StartTask05PKv+0xc>
 80034b8:	40020800 	.word	0x40020800
 80034bc:	20000710 	.word	0x20000710
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020000 	.word	0x40020000
 80034c8:	200007bc 	.word	0x200007bc
 80034cc:	200007c4 	.word	0x200007c4
 80034d0:	200007cc 	.word	0x200007cc
 80034d4:	200007d4 	.word	0x200007d4

080034d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034ea:	f002 fed3 	bl	8006294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>

08003506 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <_ZN3ros3MsgC1Ev+0x1c>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	0800ef08 	.word	0x0800ef08

08003548 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
      data()
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ffe8 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ffcf 	bl	8003506 <_ZN3ros4TimeC1Ev>
    {
    }
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	0800eef0 	.word	0x0800eef0

08003578 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0a19      	lsrs	r1, r3, #8
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	b2ca      	uxtb	r2, r1
 80035a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0c19      	lsrs	r1, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3302      	adds	r3, #2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	b2ca      	uxtb	r2, r1
 80035b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0e19      	lsrs	r1, r3, #24
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3303      	adds	r3, #3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	b2ca      	uxtb	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3304      	adds	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	b2ca      	uxtb	r2, r1
 80035dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0a19      	lsrs	r1, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3301      	adds	r3, #1
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	b2ca      	uxtb	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	0c19      	lsrs	r1, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3302      	adds	r3, #2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	b2ca      	uxtb	r2, r1
 8003600:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0e19      	lsrs	r1, r3, #24
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3303      	adds	r3, #3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4413      	add	r3, r2
 8003610:	b2ca      	uxtb	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3304      	adds	r3, #4
 8003618:	60fb      	str	r3, [r7, #12]
      return offset;
 800361a:	68fb      	ldr	r3, [r7, #12]
    }
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	440b      	add	r3, r1
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3302      	adds	r3, #2
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	440b      	add	r3, r1
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3303      	adds	r3, #3
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	440b      	add	r3, r1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3304      	adds	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	440b      	add	r3, r1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3302      	adds	r3, #2
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	440b      	add	r3, r1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3303      	adds	r3, #3
 80036ce:	6839      	ldr	r1, [r7, #0]
 80036d0:	440b      	add	r3, r1
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
     return offset;
 80036e2:	68fb      	ldr	r3, [r7, #12]
    }
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	0800ebdc 	.word	0x0800ebdc

0800370c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	0800ebec 	.word	0x0800ebec

08003728 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fef8 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003738:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003748:	609a      	str	r2, [r3, #8]
      message_type(""),
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800374e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a06      	ldr	r2, [pc, #24]	; (800376c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003754:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	615a      	str	r2, [r3, #20]
    {
    }
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	0800eed8 	.word	0x0800eed8
 800376c:	0800ec10 	.word	0x0800ec10

08003770 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8899      	ldrh	r1, [r3, #4]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	4413      	add	r3, r2
 8003788:	b2ca      	uxtb	r2, r1
 800378a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	889b      	ldrh	r3, [r3, #4]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	b299      	uxth	r1, r3
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4413      	add	r3, r2
 800379c:	b2ca      	uxtb	r2, r1
 800379e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3302      	adds	r3, #2
 80037a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fd30 	bl	8000210 <strlen>
 80037b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fb86 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3304      	adds	r3, #4
 80037c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	18d0      	adds	r0, r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4619      	mov	r1, r3
 80037d4:	f00b f870 	bl	800e8b8 <memcpy>
      offset += length_topic_name;
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fd13 	bl	8000210 <strlen>
 80037ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fb69 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3304      	adds	r3, #4
 80037fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	18d0      	adds	r0, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4619      	mov	r1, r3
 800380e:	f00b f853 	bl	800e8b8 <memcpy>
      offset += length_message_type;
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4413      	add	r3, r2
 8003818:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fcf6 	bl	8000210 <strlen>
 8003824:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	4413      	add	r3, r2
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fb4c 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3304      	adds	r3, #4
 8003838:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	18d0      	adds	r0, r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4619      	mov	r1, r3
 8003848:	f00b f836 	bl	800e8b8 <memcpy>
      offset += length_md5sum;
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4413      	add	r3, r2
 8003862:	b2ca      	uxtb	r2, r1
 8003864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0a19      	lsrs	r1, r3, #8
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4413      	add	r3, r2
 8003872:	b2ca      	uxtb	r2, r1
 8003874:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0c19      	lsrs	r1, r3, #16
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3302      	adds	r3, #2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4413      	add	r3, r2
 8003882:	b2ca      	uxtb	r2, r1
 8003884:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0e19      	lsrs	r1, r3, #24
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3303      	adds	r3, #3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4413      	add	r3, r2
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	61fb      	str	r3, [r7, #28]
      return offset;
 800389c:	69fb      	ldr	r3, [r7, #28]
    }
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	889b      	ldrh	r3, [r3, #4]
 80038c6:	b21a      	sxth	r2, r3
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	3301      	adds	r3, #1
 80038cc:	6839      	ldr	r1, [r7, #0]
 80038ce:	440b      	add	r3, r1
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b21b      	sxth	r3, r3
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	3302      	adds	r3, #2
 80038e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	441a      	add	r2, r3
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f001 fb09 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	3304      	adds	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e00b      	b.n	800391c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	441a      	add	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	3b01      	subs	r3, #1
 800390e:	6839      	ldr	r1, [r7, #0]
 8003910:	440b      	add	r3, r1
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	3301      	adds	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	429a      	cmp	r2, r3
 8003926:	d3ed      	bcc.n	8003904 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4413      	add	r3, r2
 800392e:	3b01      	subs	r3, #1
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4413      	add	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3b01      	subs	r3, #1
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4413      	add	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	441a      	add	r2, r3
 8003952:	f107 0310 	add.w	r3, r7, #16
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fad6 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3304      	adds	r3, #4
 8003962:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	e00b      	b.n	8003982 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	441a      	add	r2, r3
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	3b01      	subs	r3, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	440b      	add	r3, r1
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	3301      	adds	r3, #1
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3ed      	bcc.n	800396a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	3b01      	subs	r3, #1
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	441a      	add	r2, r3
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 faa3 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	3304      	adds	r3, #4
 80039c8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	e00b      	b.n	80039e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	441a      	add	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b01      	subs	r3, #1
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	440b      	add	r3, r1
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3ed      	bcc.n	80039d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	3b01      	subs	r3, #1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	440a      	add	r2, r1
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	440b      	add	r3, r1
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	3302      	adds	r3, #2
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	440b      	add	r3, r1
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3303      	adds	r3, #3
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	440b      	add	r3, r1
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	61bb      	str	r3, [r7, #24]
     return offset;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
    }
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	0800ec14 	.word	0x0800ec14

08003a94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	0800ec30 	.word	0x0800ec30

08003ab0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fd34 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003ac0:	4a06      	ldr	r2, [pc, #24]	; (8003adc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
      level(0),
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	711a      	strb	r2, [r3, #4]
      msg("")
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003ad0:	609a      	str	r2, [r3, #8]
    {
    }
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	0800eec0 	.word	0x0800eec0
 8003ae0:	0800ec10 	.word	0x0800ec10

08003ae4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	7912      	ldrb	r2, [r2, #4]
 8003afc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fc fb81 	bl	8000210 <strlen>
 8003b0e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 f9d7 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	18d0      	adds	r0, r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f00a fec1 	bl	800e8b8 <memcpy>
      offset += length_msg;
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
    }
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 f9c8 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e00b      	b.n	8003b9e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	440b      	add	r3, r1
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3ed      	bcc.n	8003b86 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
     return offset;
 8003bce:	693b      	ldr	r3, [r7, #16]
    }
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	0800ec54 	.word	0x0800ec54

08003bf4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	0800ec68 	.word	0x0800ec68

08003c10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fc84 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	615a      	str	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	621a      	str	r2, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	0800eea8 	.word	0x0800eea8

08003c6c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	b2ca      	uxtb	r2, r1
 8003c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0a19      	lsrs	r1, r3, #8
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0c19      	lsrs	r1, r3, #16
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b2ca      	uxtb	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0e19      	lsrs	r1, r3, #24
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	3303      	adds	r3, #3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2ca      	uxtb	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	e02a      	b.n	8003d20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	b2ca      	uxtb	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	0a19      	lsrs	r1, r3, #8
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	3301      	adds	r3, #1
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	b2ca      	uxtb	r2, r1
 8003cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	0c19      	lsrs	r1, r3, #16
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	b2ca      	uxtb	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	0e19      	lsrs	r1, r3, #24
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	b2ca      	uxtb	r2, r1
 8003d12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	3304      	adds	r3, #4
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d3cf      	bcc.n	8003cca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	b2ca      	uxtb	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	0a19      	lsrs	r1, r3, #8
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2ca      	uxtb	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	0c19      	lsrs	r1, r3, #16
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3302      	adds	r3, #2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	b2ca      	uxtb	r2, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	0e19      	lsrs	r1, r3, #24
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	3303      	adds	r3, #3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2ca      	uxtb	r2, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	3304      	adds	r3, #4
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e02a      	b.n	8003dd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	b2ca      	uxtb	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0a19      	lsrs	r1, r3, #8
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b2ca      	uxtb	r2, r1
 8003da2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0c19      	lsrs	r1, r3, #16
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	3302      	adds	r3, #2
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	b2ca      	uxtb	r2, r1
 8003db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	0e19      	lsrs	r1, r3, #24
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3303      	adds	r3, #3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b2ca      	uxtb	r2, r1
 8003dc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3cf      	bcc.n	8003d7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69d9      	ldr	r1, [r3, #28]
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	b2ca      	uxtb	r2, r1
 8003de6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	0a19      	lsrs	r1, r3, #8
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	b2ca      	uxtb	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	0c19      	lsrs	r1, r3, #16
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3302      	adds	r3, #2
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	b2ca      	uxtb	r2, r1
 8003e0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	0e19      	lsrs	r1, r3, #24
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	3303      	adds	r3, #3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b2ca      	uxtb	r2, r1
 8003e1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	3304      	adds	r3, #4
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e027      	b.n	8003e7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc f9ea 	bl	8000210 <strlen>
 8003e3c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f001 f840 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	3304      	adds	r3, #4
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	18d0      	adds	r0, r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4619      	mov	r1, r3
 8003e68:	f00a fd26 	bl	800e8b8 <memcpy>
      offset += length_stringsi;
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3d2      	bcc.n	8003e2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e86:	4618      	mov	r0, r3
 8003e88:	3728      	adds	r7, #40	; 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08e      	sub	sp, #56	; 0x38
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	3302      	adds	r3, #2
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	3303      	adds	r3, #3
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	3304      	adds	r3, #4
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d90a      	bls.n	8003f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f00a fc72 	bl	800e7e0 <realloc>
 8003efc:	4602      	mov	r2, r0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003f08:	2300      	movs	r3, #0
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f0c:	e035      	b.n	8003f7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	440a      	add	r2, r1
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	3301      	adds	r3, #1
 8003f26:	6839      	ldr	r1, [r7, #0]
 8003f28:	440b      	add	r3, r1
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	3302      	adds	r3, #2
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	440b      	add	r3, r1
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	3303      	adds	r3, #3
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	440b      	add	r3, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	3304      	adds	r3, #4
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	3208      	adds	r2, #8
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	3301      	adds	r3, #1
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3c4      	bcc.n	8003f0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	3301      	adds	r3, #1
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	4413      	add	r3, r2
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d90a      	bls.n	8003fea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f00a fbfe 	bl	800e7e0 <realloc>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff4:	e035      	b.n	8004062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	440a      	add	r2, r1
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	3301      	adds	r3, #1
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	440b      	add	r3, r1
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	3302      	adds	r3, #2
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	440b      	add	r3, r1
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	3303      	adds	r3, #3
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	440b      	add	r3, r1
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	3304      	adds	r3, #4
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	3214      	adds	r2, #20
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	3301      	adds	r3, #1
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d3c4      	bcc.n	8003ff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800406c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4413      	add	r3, r2
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	3301      	adds	r3, #1
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	3302      	adds	r3, #2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	4413      	add	r3, r2
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	3303      	adds	r3, #3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	3304      	adds	r3, #4
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d90a      	bls.n	80040d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f00a fb8a 	bl	800e7e0 <realloc>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80040d8:	2300      	movs	r3, #0
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
 80040dc:	e03e      	b.n	800415c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	441a      	add	r2, r3
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 ff0d 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f2:	3304      	adds	r3, #4
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	e00b      	b.n	8004114 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	441a      	add	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	3b01      	subs	r3, #1
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	440b      	add	r3, r1
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	429a      	cmp	r2, r3
 800411e:	d3ed      	bcc.n	80040fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	3b01      	subs	r3, #1
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	3b01      	subs	r3, #1
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800413c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	3220      	adds	r2, #32
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	3301      	adds	r3, #1
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004162:	429a      	cmp	r2, r3
 8004164:	d3bb      	bcc.n	80040de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004168:	4618      	mov	r0, r3
 800416a:	3738      	adds	r7, #56	; 0x38
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	0800edfc 	.word	0x0800edfc

0800418c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	0800ec8c 	.word	0x0800ec8c

080041a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	611a      	str	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68d8      	ldr	r0, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6891      	ldr	r1, [r2, #8]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	4798      	blx	r3
 80041f4:	4603      	mov	r3, r0
  };
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
  }
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004230:	2200      	movs	r2, #0
 8004232:	805a      	strh	r2, [r3, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	2200      	movs	r2, #0
 800423c:	809a      	strh	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004244:	2200      	movs	r2, #0
 8004246:	80da      	strh	r2, [r3, #6]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	461a      	mov	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004270:	689b      	ldr	r3, [r3, #8]
	}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	2200      	movs	r2, #0
 8004298:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	6898      	ldr	r0, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	4619      	mov	r1, r3
 80042ae:	f006 fb31 	bl	800a914 <HAL_UART_Receive_DMA>
	}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_ZN11SerialClass4readEv>:



	inline int read(void)
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80042d6:	b29b      	uxth	r3, r3
				& buf_mask;
 80042d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042dc:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	89fa      	ldrh	r2, [r7, #14]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d102      	bne.n	80042f2 <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f0:	e01b      	b.n	800432a <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f8:	885b      	ldrh	r3, [r3, #2]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	b291      	uxth	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004304:	8051      	strh	r1, [r2, #2]
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004310:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	885b      	ldrh	r3, [r3, #2]
 800431a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	805a      	strh	r2, [r3, #2]
		return c;
 8004328:	68bb      	ldr	r3, [r7, #8]
	}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	dc35      	bgt.n	80043b6 <_ZN11SerialClass5writeEPKhi+0x80>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dd32      	ble.n	80043b6 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8004350:	bf00      	nop
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f6      	bne.n	8004352 <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e00b      	b.n	8004382 <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	4413      	add	r3, r2
 8004370:	7819      	ldrb	r1, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	460a      	mov	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3301      	adds	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	dbef      	blt.n	800436a <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	b292      	uxth	r2, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f006 fa40 	bl	800a834 <HAL_UART_Transmit_DMA>
 80043b4:	e000      	b.n	80043b8 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80043b6:	bf00      	nop
		}
	}
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
	}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f6:	4619      	mov	r1, r3
 80043f8:	f006 fa8c 	bl	800a914 <HAL_UART_Receive_DMA>
    }
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681c      	ldr	r4, [r3, #0]
 8004410:	4809      	ldr	r0, [pc, #36]	; (8004438 <HAL_UART_TxCpltCallback+0x34>)
 8004412:	f7ff ff26 	bl	8004262 <_ZN11SerialClass10get_handleEv>
 8004416:	4603      	mov	r3, r0
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429c      	cmp	r4, r3
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8004428:	4803      	ldr	r0, [pc, #12]	; (8004438 <HAL_UART_TxCpltCallback+0x34>)
 800442a:	f7ff ffc8 	bl	80043be <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bd90      	pop	{r4, r7, pc}
 8004436:	bf00      	nop
 8004438:	20000854 	.word	0x20000854

0800443c <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8004444:	4803      	ldr	r0, [pc, #12]	; (8004454 <HAL_UART_RxCpltCallback+0x18>)
 8004446:	f7ff ffc9 	bl	80043dc <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000854 	.word	0x20000854

08004458 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
			com(&serial)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a04      	ldr	r2, [pc, #16]	; (8004474 <_ZN13STM32HardwareC1Ev+0x1c>)
 8004464:	601a      	str	r2, [r3, #0]
	{

	}
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	20000854 	.word	0x20000854

08004478 <_ZN13STM32Hardware4initEv>:

	void init()
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fefa 	bl	800427e <_ZN11SerialClass9start_dmaEv>
	}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZN13STM32Hardware4readEv>:

	int read()
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff0b 	bl	80042ba <_ZN11SerialClass4readEv>
 80044a4:	4603      	mov	r3, r0
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff37 	bl	8004336 <_ZN11SerialClass5writeEPKhi>
	}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80044d8:	f001 fef0 	bl	80062bc <HAL_GetTick>
 80044dc:	4603      	mov	r3, r0
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
      data("")
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff f818 	bl	8003528 <_ZN3ros3MsgC1Ev>
 80044f8:	4a05      	ldr	r2, [pc, #20]	; (8004510 <_ZN8std_msgs6StringC1Ev+0x28>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8004502:	605a      	str	r2, [r3, #4]
    {
    }
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	0800ee7c 	.word	0x0800ee7c
 8004514:	0800ec10 	.word	0x0800ec10

08004518 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb fe70 	bl	8000210 <strlen>
 8004530:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	4413      	add	r3, r2
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fcc6 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3304      	adds	r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	18d0      	adds	r0, r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4619      	mov	r1, r3
 8004554:	f00a f9b0 	bl	800e8b8 <memcpy>
      offset += length_data;
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4413      	add	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
      return offset;
 8004560:	68fb      	ldr	r3, [r7, #12]
    }
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	441a      	add	r2, r3
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fcc0 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3304      	adds	r3, #4
 800458e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e00b      	b.n	80045ae <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	441a      	add	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3b01      	subs	r3, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	440b      	add	r3, r1
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3ed      	bcc.n	8004596 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	3b01      	subs	r3, #1
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
     return offset;
 80045de:	693b      	ldr	r3, [r7, #16]
    }
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	0800ecb0 	.word	0x0800ecb0

08004604 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	0800ecc0 	.word	0x0800ecc0

08004620 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe ff7c 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
      label(""),
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a07      	ldr	r2, [pc, #28]	; (8004658 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800463a:	605a      	str	r2, [r3, #4]
      size(0),
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
      stride(0)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	60da      	str	r2, [r3, #12]
    {
    }
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	0800ee64 	.word	0x0800ee64
 8004658:	0800ec10 	.word	0x0800ec10

0800465c <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fb fdce 	bl	8000210 <strlen>
 8004674:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	4413      	add	r3, r2
 800467c:	68b9      	ldr	r1, [r7, #8]
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fc24 	bl	8004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3304      	adds	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	18d0      	adds	r0, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4619      	mov	r1, r3
 8004698:	f00a f90e 	bl	800e8b8 <memcpy>
      offset += length_label;
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4413      	add	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	b2ca      	uxtb	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0a19      	lsrs	r1, r3, #8
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	4413      	add	r3, r2
 80046c0:	b2ca      	uxtb	r2, r1
 80046c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	0c19      	lsrs	r1, r3, #16
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3302      	adds	r3, #2
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	b2ca      	uxtb	r2, r1
 80046d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0e19      	lsrs	r1, r3, #24
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3303      	adds	r3, #3
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	4413      	add	r3, r2
 80046e4:	b2ca      	uxtb	r2, r1
 80046e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3304      	adds	r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68d9      	ldr	r1, [r3, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	4413      	add	r3, r2
 80046f8:	b2ca      	uxtb	r2, r1
 80046fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	0a19      	lsrs	r1, r3, #8
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3301      	adds	r3, #1
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	4413      	add	r3, r2
 800470a:	b2ca      	uxtb	r2, r1
 800470c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	0c19      	lsrs	r1, r3, #16
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3302      	adds	r3, #2
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4413      	add	r3, r2
 800471c:	b2ca      	uxtb	r2, r1
 800471e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	0e19      	lsrs	r1, r3, #24
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3303      	adds	r3, #3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	4413      	add	r3, r2
 800472e:	b2ca      	uxtb	r2, r1
 8004730:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3304      	adds	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
      return offset;
 8004738:	68fb      	ldr	r3, [r7, #12]
    }
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	441a      	add	r2, r3
 8004756:	f107 030c 	add.w	r3, r7, #12
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fbd4 	bl	8004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3304      	adds	r3, #4
 8004766:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	e00b      	b.n	8004786 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	441a      	add	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	3b01      	subs	r3, #1
 8004778:	6839      	ldr	r1, [r7, #0]
 800477a:	440b      	add	r3, r1
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	3301      	adds	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3ed      	bcc.n	800476e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	3b01      	subs	r3, #1
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	4413      	add	r3, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3301      	adds	r3, #1
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	440b      	add	r3, r1
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3302      	adds	r3, #2
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	440b      	add	r3, r1
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3303      	adds	r3, #3
 80047f8:	6839      	ldr	r1, [r7, #0]
 80047fa:	440b      	add	r3, r1
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	061b      	lsls	r3, r3, #24
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	3304      	adds	r3, #4
 800480a:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4413      	add	r3, r2
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3301      	adds	r3, #1
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	440b      	add	r3, r1
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3302      	adds	r3, #2
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	440b      	add	r3, r1
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3303      	adds	r3, #3
 800484e:	6839      	ldr	r1, [r7, #0]
 8004850:	440b      	add	r3, r1
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3304      	adds	r3, #4
 8004860:	613b      	str	r3, [r7, #16]
     return offset;
 8004862:	693b      	ldr	r3, [r7, #16]
    }
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	4b03      	ldr	r3, [pc, #12]	; (8004884 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	0800ece4 	.word	0x0800ece4

08004888 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	0800ed04 	.word	0x0800ed04

080048a4 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fe3a 	bl	8003528 <_ZN3ros3MsgC1Ev>
 80048b4:	4a0a      	ldr	r2, [pc, #40]	; (80048e0 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3308      	adds	r3, #8
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff feab 	bl	8004620 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	61da      	str	r2, [r3, #28]
    {
    }
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	0800ee4c 	.word	0x0800ee4c

080048e4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	b2ca      	uxtb	r2, r1
 80048fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	0a19      	lsrs	r1, r3, #8
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3301      	adds	r3, #1
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	4413      	add	r3, r2
 800490e:	b2ca      	uxtb	r2, r1
 8004910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	0c19      	lsrs	r1, r3, #16
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3302      	adds	r3, #2
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	4413      	add	r3, r2
 8004920:	b2ca      	uxtb	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	0e19      	lsrs	r1, r3, #24
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3303      	adds	r3, #3
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	4413      	add	r3, r2
 8004932:	b2ca      	uxtb	r2, r1
 8004934:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3304      	adds	r3, #4
 800493a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800493c:	2300      	movs	r3, #0
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	e017      	b.n	8004972 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	18d0      	adds	r0, r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699a      	ldr	r2, [r3, #24]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	4413      	add	r3, r2
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	440a      	add	r2, r1
 8004960:	4611      	mov	r1, r2
 8004962:	4798      	blx	r3
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3301      	adds	r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	d3e2      	bcc.n	8004942 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69d9      	ldr	r1, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	4413      	add	r3, r2
 8004986:	b2ca      	uxtb	r2, r1
 8004988:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	0a19      	lsrs	r1, r3, #8
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3301      	adds	r3, #1
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	4413      	add	r3, r2
 8004998:	b2ca      	uxtb	r2, r1
 800499a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	0c19      	lsrs	r1, r3, #16
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3302      	adds	r3, #2
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	b2ca      	uxtb	r2, r1
 80049ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	0e19      	lsrs	r1, r3, #24
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3303      	adds	r3, #3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	4413      	add	r3, r2
 80049bc:	b2ca      	uxtb	r2, r1
 80049be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	3304      	adds	r3, #4
 80049c4:	60fb      	str	r3, [r7, #12]
      return offset;
 80049c6:	68fb      	ldr	r3, [r7, #12]
    }
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3301      	adds	r3, #1
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	3302      	adds	r3, #2
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	4413      	add	r3, r2
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3303      	adds	r3, #3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	4413      	add	r3, r2
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	3304      	adds	r3, #4
 8004a22:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d90a      	bls.n	8004a44 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f009 fed1 	bl	800e7e0 <realloc>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	e01a      	b.n	8004a86 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f103 0008 	add.w	r0, r3, #8
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f7ff fe70 	bl	8004742 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4413      	add	r3, r2
 8004a68:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	18d0      	adds	r0, r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3308      	adds	r3, #8
 8004a78:	2210      	movs	r2, #16
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	f009 ff1c 	bl	800e8b8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3301      	adds	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d3df      	bcc.n	8004a50 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	4413      	add	r3, r2
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	440b      	add	r3, r1
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	3302      	adds	r3, #2
 8004abc:	6839      	ldr	r1, [r7, #0]
 8004abe:	440b      	add	r3, r1
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	440b      	add	r3, r1
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	617b      	str	r3, [r7, #20]
     return offset;
 8004ae6:	697b      	ldr	r3, [r7, #20]
    }
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	0800ed28 	.word	0x0800ed28

08004b0c <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	0800ed44 	.word	0x0800ed44

08004b28 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fcf8 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8004b38:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]
      layout(),
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff feae 	bl	80048a4 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	851a      	strh	r2, [r3, #40]	; 0x28
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	0800ee34 	.word	0x0800ee34

08004b68 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	1d18      	adds	r0, r3, #4
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	4413      	add	r3, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	f7ff feaf 	bl	80048e4 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	4413      	add	r3, r2
 8004b98:	b2ca      	uxtb	r2, r1
 8004b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	0a19      	lsrs	r1, r3, #8
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	4413      	add	r3, r2
 8004baa:	b2ca      	uxtb	r2, r1
 8004bac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	0c19      	lsrs	r1, r3, #16
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	4413      	add	r3, r2
 8004bbc:	b2ca      	uxtb	r2, r1
 8004bbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	0e19      	lsrs	r1, r3, #24
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3303      	adds	r3, #3
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	b2ca      	uxtb	r2, r1
 8004bd0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e01c      	b.n	8004c18 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bec:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8004bee:	89b9      	ldrh	r1, [r7, #12]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	b2ca      	uxtb	r2, r1
 8004bf8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8004bfa:	89bb      	ldrh	r3, [r7, #12]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3301      	adds	r3, #1
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	b2ca      	uxtb	r2, r1
 8004c0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	3302      	adds	r3, #2
 8004c10:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3301      	adds	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d3dd      	bcc.n	8004bde <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 8004c22:	697b      	ldr	r3, [r7, #20]
    }
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1d18      	adds	r0, r3, #4
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7ff fec3 	bl	80049d0 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	3302      	adds	r3, #2
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3303      	adds	r3, #3
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	061b      	lsls	r3, r3, #24
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3304      	adds	r3, #4
 8004c96:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d90a      	bls.n	8004cb8 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f009 fd97 	bl	800e7e0 <realloc>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e02b      	b.n	8004d1c <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xf0>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004cc8:	893a      	ldrh	r2, [r7, #8]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	6839      	ldr	r1, [r7, #0]
 8004cce:	440b      	add	r3, r1
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004cda:	893b      	ldrh	r3, [r7, #8]
 8004cdc:	b21a      	sxth	r2, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	440b      	add	r3, r1
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004cf4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	3302      	adds	r3, #2
 8004d00:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	3228      	adds	r2, #40	; 0x28
 8004d10:	8812      	ldrh	r2, [r2, #0]
 8004d12:	b292      	uxth	r2, r2
 8004d14:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3ce      	bcc.n	8004cc4 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8004d26:	697b      	ldr	r3, [r7, #20]
    }
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	0800ed68 	.word	0x0800ed68

08004d4c <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	0800ed84 	.word	0x0800ed84

08004d68 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	4a04      	ldr	r2, [pc, #16]	; (8004d84 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	0800ee94 	.word	0x0800ee94

08004d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff ffe8 	bl	8004d68 <_ZN3ros15NodeHandleBase_C1Ev>
 8004d98:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fb58 	bl	8004458 <_ZN13STM32HardwareC1Ev>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3318      	adds	r3, #24
 8004dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc8:	2100      	movs	r1, #0
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f009 fd3f 	bl	800e84e <memset>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f009 fd36 	bl	800e84e <memset>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004de8:	2264      	movs	r2, #100	; 0x64
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f009 fd2e 	bl	800e84e <memset>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8004df8:	2264      	movs	r2, #100	; 0x64
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f009 fd26 	bl	800e84e <memset>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fed9 	bl	8003c10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	0800ee20 	.word	0x0800ee20

08004e6c <setup>:
extern int16_t sensor_buff[5];
//extern int16_t sensor_buff[5];
ros::Publisher chatter("chatter", &str_msg);
ros::Publisher sensor("sensor", &Sensor_data);

void setup(void){
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
	nh.initNode();
 8004e70:	4806      	ldr	r0, [pc, #24]	; (8004e8c <setup+0x20>)
 8004e72:	f000 f870 	bl	8004f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 8004e76:	4906      	ldr	r1, [pc, #24]	; (8004e90 <setup+0x24>)
 8004e78:	4804      	ldr	r0, [pc, #16]	; (8004e8c <setup+0x20>)
 8004e7a:	f000 f889 	bl	8004f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensor);
 8004e7e:	4905      	ldr	r1, [pc, #20]	; (8004e94 <setup+0x28>)
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <setup+0x20>)
 8004e82:	f000 f885 	bl	8004f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20001860 	.word	0x20001860
 8004e90:	20001dc8 	.word	0x20001dc8
 8004e94:	20001ddc 	.word	0x20001ddc

08004e98 <loop>:

void loop(void){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0

//	str_msg.data = hello;
//	chatter.publish(&str_msg);
//	nh.spinOnce();
//	HAL_Delay(1);
	    Sensor_data.data_length =5;
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <loop+0x24>)
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
		Sensor_data.data= sensor_buff;
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <loop+0x24>)
 8004ea4:	4a06      	ldr	r2, [pc, #24]	; (8004ec0 <loop+0x28>)
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
		sensor.publish(&Sensor_data);
 8004ea8:	4904      	ldr	r1, [pc, #16]	; (8004ebc <loop+0x24>)
 8004eaa:	4806      	ldr	r0, [pc, #24]	; (8004ec4 <loop+0x2c>)
 8004eac:	f7ff f993 	bl	80041d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8004eb0:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <loop+0x30>)
 8004eb2:	f000 f89b 	bl	8004fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20001d98 	.word	0x20001d98
 8004ec0:	20000710 	.word	0x20000710
 8004ec4:	20001ddc 	.word	0x20001ddc
 8004ec8:	20001860 	.word	0x20001860

08004ecc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e00c      	b.n	8004ef6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	fa22 f103 	lsr.w	r1, r2, r3
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	b2ca      	uxtb	r2, r1
 8004eee:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d9ef      	bls.n	8004edc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e010      	b.n	8004f42 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	440a      	add	r2, r1
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	00d2      	lsls	r2, r2, #3
 8004f32:	fa01 f202 	lsl.w	r2, r1, r2
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d9eb      	bls.n	8004f20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fa88 	bl	8004478 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e01b      	b.n	8004fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	60da      	str	r2, [r3, #12]
        return true;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e006      	b.n	8004fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b18      	cmp	r3, #24
 8004fdc:	dde0      	ble.n	8004fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8004fde:	2300      	movs	r3, #0
  }
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fa69 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8004ffe:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800500e:	4293      	cmp	r3, r2
 8005010:	d903      	bls.n	800501a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	429a      	cmp	r2, r3
 800502e:	d903      	bls.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d013      	beq.n	8005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3304      	adds	r3, #4
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fa43 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 800504a:	4602      	mov	r2, r0
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf8c      	ite	hi
 8005058:	2301      	movhi	r3, #1
 800505a:	2300      	movls	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8005062:	f06f 0301 	mvn.w	r3, #1
 8005066:	e190      	b.n	800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff fa10 	bl	8004492 <_ZN13STM32Hardware4readEv>
 8005072:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f2c0 8170 	blt.w	800535c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005092:	2b07      	cmp	r3, #7
 8005094:	d11d      	bne.n	80050d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	b2d1      	uxtb	r1, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	460a      	mov	r2, r1
 80050ae:	761a      	strb	r2, [r3, #24]
        bytes_--;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80050b6:	1e5a      	subs	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1b7      	bne.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2208      	movs	r2, #8
 80050cc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80050d0:	e7b2      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d128      	bne.n	800512e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2bff      	cmp	r3, #255	; 0xff
 80050e0:	d10d      	bne.n	80050fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f103 0214 	add.w	r2, r3, #20
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80050fc:	e79c      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff f9e4 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	bf8c      	ite	hi
 8005116:	2301      	movhi	r3, #1
 8005118:	2300      	movls	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d08b      	beq.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8005128:	f06f 0301 	mvn.w	r3, #1
 800512c:	e12d      	b.n	800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005134:	2b01      	cmp	r3, #1
 8005136:	d118      	bne.n	800516a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2bfe      	cmp	r3, #254	; 0xfe
 800513c:	d107      	bne.n	800514e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800514c:	e774      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800515c:	2b00      	cmp	r3, #0
 800515e:	f47f af6b 	bne.w	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f915 	bl	8005392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005168:	e766      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005170:	2b02      	cmp	r3, #2
 8005172:	d113      	bne.n	800519c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800519a:	e74d      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d110      	bne.n	80051c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	441a      	add	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80051c6:	e737      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d116      	bne.n	8005200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80051d8:	425a      	negs	r2, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	bf58      	it	pl
 80051e0:	4253      	negpl	r3, r2
 80051e2:	2bff      	cmp	r3, #255	; 0xff
 80051e4:	d107      	bne.n	80051f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80051f4:	e720      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80051fe:	e71b      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005206:	2b05      	cmp	r3, #5
 8005208:	d10f      	bne.n	800522a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005228:	e706      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005230:	2b06      	cmp	r3, #6
 8005232:	d117      	bne.n	8005264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	441a      	add	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2207      	movs	r2, #7
 800524a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f aeef 	bne.w	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2208      	movs	r2, #8
 800525e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005262:	e6e9      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800526a:	2b08      	cmp	r3, #8
 800526c:	f47f aee4 	bne.w	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800527e:	425a      	negs	r2, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	bf58      	it	pl
 8005286:	4253      	negpl	r3, r2
 8005288:	2bff      	cmp	r3, #255	; 0xff
 800528a:	f47f aed5 	bne.w	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d110      	bne.n	80052ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f87a 	bl	8005392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f894 	bl	80053cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80052b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b8:	e067      	b.n	800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80052c0:	2b0a      	cmp	r3, #10
 80052c2:	d106      	bne.n	80052d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3318      	adds	r3, #24
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f95e 	bl	800558c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80052d0:	e6b2      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80052d8:	2b06      	cmp	r3, #6
 80052da:	d10d      	bne.n	80052f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3318      	adds	r3, #24
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7fe fdd0 	bl	8003e8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80052f6:	e69f      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80052fe:	2b0b      	cmp	r3, #11
 8005300:	d104      	bne.n	800530c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800530a:	e695      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005312:	3b64      	subs	r3, #100	; 0x64
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	f43f ae89 	beq.w	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800532c:	3b64      	subs	r3, #100	; 0x64
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	6858      	ldr	r0, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005340:	3b64      	subs	r3, #100	; 0x64
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	3218      	adds	r2, #24
 8005356:	4611      	mov	r1, r2
 8005358:	4798      	blx	r3
    while (true)
 800535a:	e66d      	b.n	8005038 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800535c:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00f      	beq.n	8005388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005376:	4293      	cmp	r3, r2
 8005378:	d906      	bls.n	8005388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f809 	bl	8005392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8005388:	2300      	movs	r3, #0
  }
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800539a:	f107 030c 	add.w	r3, r7, #12
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f8d2 	bl	8003548 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f107 020c 	add.w	r2, r7, #12
 80053ae:	210a      	movs	r1, #10
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	4798      	blx	r3
    rt_time = hardware_.time();
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f889 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 80053be:	4602      	mov	r2, r0
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	609a      	str	r2, [r3, #8]
  }
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b08b      	sub	sp, #44	; 0x2c
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80053d4:	f107 030c 	add.w	r3, r7, #12
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fe f9a5 	bl	8003728 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e05a      	b.n	800549a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80053ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d04f      	beq.n	8005494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80053fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	b29b      	uxth	r3, r3
 8005404:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800540e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800541e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005422:	6859      	ldr	r1, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800542c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4608      	mov	r0, r1
 800543a:	4798      	blx	r3
 800543c:	4603      	mov	r3, r0
 800543e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005452:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4608      	mov	r0, r1
 8005464:	4798      	blx	r3
 8005466:	4603      	mov	r3, r0
 8005468:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800546a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800546e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681c      	ldr	r4, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe febb 	bl	80041fe <_ZN3ros9Publisher15getEndpointTypeEv>
 8005488:	4601      	mov	r1, r0
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	461a      	mov	r2, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	3301      	adds	r3, #1
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	2b18      	cmp	r3, #24
 800549e:	dda1      	ble.n	80053e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
 80054a4:	e067      	b.n	8005576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d05b      	beq.n	8005570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	6859      	ldr	r1, [r3, #4]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3308      	adds	r3, #8
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4608      	mov	r0, r1
 8005502:	4798      	blx	r3
 8005504:	4603      	mov	r3, r0
 8005506:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	6859      	ldr	r1, [r3, #4]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4608      	mov	r0, r1
 800552c:	4798      	blx	r3
 800552e:	4603      	mov	r3, r0
 8005530:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005536:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681c      	ldr	r4, [r3, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	6859      	ldr	r1, [r3, #4]
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3304      	adds	r3, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4608      	mov	r0, r1
 8005562:	4798      	blx	r3
 8005564:	4601      	mov	r1, r0
 8005566:	f107 030c 	add.w	r3, r7, #12
 800556a:	461a      	mov	r2, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	3301      	adds	r3, #1
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	2b18      	cmp	r3, #24
 800557a:	dd94      	ble.n	80054a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8005584:	bf00      	nop
 8005586:	372c      	adds	r7, #44	; 0x2c
 8005588:	46bd      	mov	sp, r7
 800558a:	bd90      	pop	{r4, r7, pc}

0800558c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd ffd4 	bl	8003548 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe ff93 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe f834 	bl	8003628 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	4914      	ldr	r1, [pc, #80]	; (8005618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80055c6:	fba1 1303 	umull	r1, r3, r1, r3
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	4413      	add	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80055d0:	6939      	ldr	r1, [r7, #16]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4b10      	ldr	r3, [pc, #64]	; (8005618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80055d6:	fba3 0302 	umull	r0, r3, r3, r2
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055e0:	fb00 f303 	mul.w	r3, r0, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	4a0d      	ldr	r2, [pc, #52]	; (800561c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80055e8:	fb02 f303 	mul.w	r3, r2, r3
 80055ec:	440b      	add	r3, r1
 80055ee:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80055f0:	f107 0308 	add.w	r3, r7, #8
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8a5 	bl	8005748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe ff64 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8005608:	4602      	mov	r2, r0
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8005610:	bf00      	nop
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	10624dd3 	.word	0x10624dd3
 800561c:	000f4240 	.word	0x000f4240

08005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b63      	cmp	r3, #99	; 0x63
 8005630:	dd09      	ble.n	8005646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005638:	f083 0301 	eor.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8005642:	2300      	movs	r3, #0
 8005644:	e079      	b.n	800573a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8005652:	3207      	adds	r2, #7
 8005654:	4611      	mov	r1, r2
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
 800565a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	22ff      	movs	r2, #255	; 0xff
 8005660:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	22fe      	movs	r2, #254	; 0xfe
 8005668:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	b29b      	uxth	r3, r3
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	b29b      	uxth	r3, r3
 800567e:	b2da      	uxtb	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8005692:	4413      	add	r3, r2
 8005694:	b2db      	uxtb	r3, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	b21b      	sxth	r3, r3
 80056ae:	121b      	asrs	r3, r3, #8
 80056b0:	b21b      	sxth	r3, r3
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80056be:	2305      	movs	r3, #5
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e00c      	b.n	80056de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	3301      	adds	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	3306      	adds	r3, #6
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	dded      	ble.n	80056c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	3307      	adds	r3, #7
 80056ec:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	425a      	negs	r2, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	bf58      	it	pl
 80056f8:	4253      	negpl	r3, r2
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1c59      	adds	r1, r3, #1
 8005700:	6179      	str	r1, [r7, #20]
 8005702:	43d2      	mvns	r2, r2
 8005704:	b2d1      	uxtb	r1, r2
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	460a      	mov	r2, r1
 800570c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005716:	dc0a      	bgt.n	800572e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1d18      	adds	r0, r3, #4
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4619      	mov	r1, r3
 8005726:	f7fe fec2 	bl	80044ae <_ZN13STM32Hardware5writeEPhi>
      return l;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	e005      	b.n	800573a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800572e:	4905      	ldr	r1, [pc, #20]	; (8005744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f847 	bl	80057c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	0800eda8 	.word	0x0800eda8

08005748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe feba 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 800575c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4914      	ldr	r1, [pc, #80]	; (80057b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8005766:	fba1 1303 	umull	r1, r3, r1, r3
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	1e5a      	subs	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 800577c:	fba3 0302 	umull	r0, r3, r3, r2
 8005780:	099b      	lsrs	r3, r3, #6
 8005782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005786:	fb00 f303 	mul.w	r3, r0, r3
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	1aca      	subs	r2, r1, r3
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8005796:	4413      	add	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f103 020c 	add.w	r2, r3, #12
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3310      	adds	r3, #16
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f000 fcfb 	bl	80061a4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	10624dd3 	.word	0x10624dd3
 80057bc:	000f4240 	.word	0x000f4240
 80057c0:	3b9aca00 	.word	0x3b9aca00

080057c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	2103      	movs	r1, #3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f804 	bl	80057e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	460b      	mov	r3, r1
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe f95c 	bl	8003ab0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80057f8:	7afb      	ldrb	r3, [r7, #11]
 80057fa:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f107 0214 	add.w	r2, r7, #20
 800580a:	2107      	movs	r1, #7
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	4798      	blx	r3
  }
 8005810:	bf00      	nop
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_Z41__static_initialization_and_destruction_0ii>:
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d11d      	bne.n	8005864 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582e:	4293      	cmp	r3, r2
 8005830:	d118      	bne.n	8005864 <_Z41__static_initialization_and_destruction_0ii+0x4c>
SerialClass serial(huart2);
 8005832:	490e      	ldr	r1, [pc, #56]	; (800586c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005834:	480e      	ldr	r0, [pc, #56]	; (8005870 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005836:	f7fe fcee 	bl	8004216 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 800583a:	480e      	ldr	r0, [pc, #56]	; (8005874 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800583c:	f7ff faa4 	bl	8004d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8005840:	480d      	ldr	r0, [pc, #52]	; (8005878 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005842:	f7fe fe51 	bl	80044e8 <_ZN8std_msgs6StringC1Ev>
std_msgs::Int16MultiArray Sensor_data;
 8005846:	480d      	ldr	r0, [pc, #52]	; (800587c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005848:	f7ff f96e 	bl	8004b28 <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 800584c:	2300      	movs	r3, #0
 800584e:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005850:	490b      	ldr	r1, [pc, #44]	; (8005880 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005852:	480c      	ldr	r0, [pc, #48]	; (8005884 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005854:	f7fe fca8 	bl	80041a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensor("sensor", &Sensor_data);
 8005858:	2300      	movs	r3, #0
 800585a:	4a08      	ldr	r2, [pc, #32]	; (800587c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800585c:	490a      	ldr	r1, [pc, #40]	; (8005888 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800585e:	480b      	ldr	r0, [pc, #44]	; (800588c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005860:	f7fe fca2 	bl	80041a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	200004e0 	.word	0x200004e0
 8005870:	20000854 	.word	0x20000854
 8005874:	20001860 	.word	0x20001860
 8005878:	20001d90 	.word	0x20001d90
 800587c:	20001d98 	.word	0x20001d98
 8005880:	0800ede4 	.word	0x0800ede4
 8005884:	20001dc8 	.word	0x20001dc8
 8005888:	0800edec 	.word	0x0800edec
 800588c:	20001ddc 	.word	0x20001ddc

08005890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    return configured_;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <_GLOBAL__sub_I_serial>:
 80058aa:	b580      	push	{r7, lr}
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80058b2:	2001      	movs	r0, #1
 80058b4:	f7ff ffb0 	bl	8005818 <_Z41__static_initialization_and_destruction_0ii>
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	4b12      	ldr	r3, [pc, #72]	; (8005910 <HAL_MspInit+0x54>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ca:	4a11      	ldr	r2, [pc, #68]	; (8005910 <HAL_MspInit+0x54>)
 80058cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d0:	6453      	str	r3, [r2, #68]	; 0x44
 80058d2:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <HAL_MspInit+0x54>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058de:	2300      	movs	r3, #0
 80058e0:	603b      	str	r3, [r7, #0]
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <HAL_MspInit+0x54>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	4a0a      	ldr	r2, [pc, #40]	; (8005910 <HAL_MspInit+0x54>)
 80058e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
 80058ee:	4b08      	ldr	r3, [pc, #32]	; (8005910 <HAL_MspInit+0x54>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058fa:	2200      	movs	r2, #0
 80058fc:	210f      	movs	r1, #15
 80058fe:	f06f 0001 	mvn.w	r0, #1
 8005902:	f001 fc4f 	bl	80071a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1d      	ldr	r2, [pc, #116]	; (80059a8 <HAL_CAN_MspInit+0x94>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d134      	bne.n	80059a0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <HAL_CAN_MspInit+0x98>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <HAL_CAN_MspInit+0x98>)
 8005940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005944:	6413      	str	r3, [r2, #64]	; 0x40
 8005946:	4b19      	ldr	r3, [pc, #100]	; (80059ac <HAL_CAN_MspInit+0x98>)
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <HAL_CAN_MspInit+0x98>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a14      	ldr	r2, [pc, #80]	; (80059ac <HAL_CAN_MspInit+0x98>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <HAL_CAN_MspInit+0x98>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800596e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005974:	2302      	movs	r3, #2
 8005976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800597c:	2303      	movs	r3, #3
 800597e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005980:	2309      	movs	r3, #9
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	4619      	mov	r1, r3
 800598a:	4809      	ldr	r0, [pc, #36]	; (80059b0 <HAL_CAN_MspInit+0x9c>)
 800598c:	f002 f836 	bl	80079fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005990:	2200      	movs	r2, #0
 8005992:	2105      	movs	r1, #5
 8005994:	2014      	movs	r0, #20
 8005996:	f001 fc05 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800599a:	2014      	movs	r0, #20
 800599c:	f001 fc1e 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80059a0:	bf00      	nop
 80059a2:	3728      	adds	r7, #40	; 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40006400 	.word	0x40006400
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40020000 	.word	0x40020000

080059b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059bc:	f107 0314 	add.w	r3, r7, #20
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <HAL_SPI_MspInit+0xa8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d13d      	bne.n	8005a52 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_SPI_MspInit+0xac>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <HAL_SPI_MspInit+0xac>)
 80059e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e4:	6413      	str	r3, [r2, #64]	; 0x40
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_SPI_MspInit+0xac>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <HAL_SPI_MspInit+0xac>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <HAL_SPI_MspInit+0xac>)
 80059fc:	f043 0302 	orr.w	r3, r3, #2
 8005a00:	6313      	str	r3, [r2, #48]	; 0x30
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <HAL_SPI_MspInit+0xac>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005a0e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a14:	2302      	movs	r3, #2
 8005a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a20:	2305      	movs	r3, #5
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4619      	mov	r1, r3
 8005a2a:	480e      	ldr	r0, [pc, #56]	; (8005a64 <HAL_SPI_MspInit+0xb0>)
 8005a2c:	f001 ffe6 	bl	80079fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a36:	2302      	movs	r3, #2
 8005a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a42:	2305      	movs	r3, #5
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a46:	f107 0314 	add.w	r3, r7, #20
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4805      	ldr	r0, [pc, #20]	; (8005a64 <HAL_SPI_MspInit+0xb0>)
 8005a4e:	f001 ffd5 	bl	80079fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005a52:	bf00      	nop
 8005a54:	3728      	adds	r7, #40	; 0x28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40003800 	.word	0x40003800
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40020400 	.word	0x40020400

08005a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08c      	sub	sp, #48	; 0x30
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a70:	f107 031c 	add.w	r3, r7, #28
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a2d      	ldr	r2, [pc, #180]	; (8005b3c <HAL_TIM_Base_MspInit+0xd4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d12c      	bne.n	8005ae4 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	4b2c      	ldr	r3, [pc, #176]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	4a2b      	ldr	r2, [pc, #172]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	4b25      	ldr	r3, [pc, #148]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ab6:	4b22      	ldr	r3, [pc, #136]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ac2:	2340      	movs	r3, #64	; 0x40
 8005ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ad6:	f107 031c 	add.w	r3, r7, #28
 8005ada:	4619      	mov	r1, r3
 8005adc:	4819      	ldr	r0, [pc, #100]	; (8005b44 <HAL_TIM_Base_MspInit+0xdc>)
 8005ade:	f001 ff8d 	bl	80079fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005ae2:	e026      	b.n	8005b32 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <HAL_TIM_Base_MspInit+0xe0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005af8:	f043 0304 	orr.w	r3, r3, #4
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]
}
 8005b0a:	e012      	b.n	8005b32 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a0e      	ldr	r2, [pc, #56]	; (8005b4c <HAL_TIM_Base_MspInit+0xe4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d10d      	bne.n	8005b32 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005b20:	f043 0302 	orr.w	r3, r3, #2
 8005b24:	6453      	str	r3, [r2, #68]	; 0x44
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_TIM_Base_MspInit+0xd8>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
}
 8005b32:	bf00      	nop
 8005b34:	3730      	adds	r7, #48	; 0x30
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40020000 	.word	0x40020000
 8005b48:	40000800 	.word	0x40000800
 8005b4c:	40010400 	.word	0x40010400

08005b50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	605a      	str	r2, [r3, #4]
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	60da      	str	r2, [r3, #12]
 8005b66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <HAL_TIM_Encoder_MspInit+0x84>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d12b      	bne.n	8005bca <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005b7c:	f043 0308 	orr.w	r3, r3, #8
 8005b80:	6413      	str	r3, [r2, #64]	; 0x40
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005baa:	2303      	movs	r3, #3
 8005bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bae:	2302      	movs	r3, #2
 8005bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005bba:	2302      	movs	r3, #2
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbe:	f107 0314 	add.w	r3, r7, #20
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	4805      	ldr	r0, [pc, #20]	; (8005bdc <HAL_TIM_Encoder_MspInit+0x8c>)
 8005bc6:	f001 ff19 	bl	80079fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005bca:	bf00      	nop
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	40020000 	.word	0x40020000

08005be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <HAL_TIM_MspPostInit+0xb0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d11e      	bne.n	8005c40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <HAL_TIM_MspPostInit+0xb4>)
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <HAL_TIM_MspPostInit+0xb4>)
 8005c0c:	f043 0302 	orr.w	r3, r3, #2
 8005c10:	6313      	str	r3, [r2, #48]	; 0x30
 8005c12:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <HAL_TIM_MspPostInit+0xb4>)
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c1e:	23c0      	movs	r3, #192	; 0xc0
 8005c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c22:	2302      	movs	r3, #2
 8005c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	4619      	mov	r1, r3
 8005c38:	4817      	ldr	r0, [pc, #92]	; (8005c98 <HAL_TIM_MspPostInit+0xb8>)
 8005c3a:	f001 fedf 	bl	80079fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005c3e:	e022      	b.n	8005c86 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_TIM_MspPostInit+0xbc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d11d      	bne.n	8005c86 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_TIM_MspPostInit+0xb4>)
 8005c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c52:	4a10      	ldr	r2, [pc, #64]	; (8005c94 <HAL_TIM_MspPostInit+0xb4>)
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	6313      	str	r3, [r2, #48]	; 0x30
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <HAL_TIM_MspPostInit+0xb4>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c66:	23c0      	movs	r3, #192	; 0xc0
 8005c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c72:	2300      	movs	r3, #0
 8005c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005c76:	2303      	movs	r3, #3
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c7a:	f107 0314 	add.w	r3, r7, #20
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4807      	ldr	r0, [pc, #28]	; (8005ca0 <HAL_TIM_MspPostInit+0xc0>)
 8005c82:	f001 febb 	bl	80079fc <HAL_GPIO_Init>
}
 8005c86:	bf00      	nop
 8005c88:	3728      	adds	r7, #40	; 0x28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40020400 	.word	0x40020400
 8005c9c:	40010400 	.word	0x40010400
 8005ca0:	40020800 	.word	0x40020800

08005ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08c      	sub	sp, #48	; 0x30
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cac:	f107 031c 	add.w	r3, r7, #28
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	60da      	str	r2, [r3, #12]
 8005cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a9a      	ldr	r2, [pc, #616]	; (8005f2c <HAL_UART_MspInit+0x288>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	f040 8095 	bne.w	8005df2 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	4b98      	ldr	r3, [pc, #608]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd0:	4a97      	ldr	r2, [pc, #604]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005cd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8005cd8:	4b95      	ldr	r3, [pc, #596]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	4b91      	ldr	r3, [pc, #580]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cec:	4a90      	ldr	r2, [pc, #576]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8005cf4:	4b8e      	ldr	r3, [pc, #568]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005d00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d06:	2302      	movs	r3, #2
 8005d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005d12:	2308      	movs	r3, #8
 8005d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d16:	f107 031c 	add.w	r3, r7, #28
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4885      	ldr	r0, [pc, #532]	; (8005f34 <HAL_UART_MspInit+0x290>)
 8005d1e:	f001 fe6d 	bl	80079fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005d22:	4b85      	ldr	r3, [pc, #532]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d24:	4a85      	ldr	r2, [pc, #532]	; (8005f3c <HAL_UART_MspInit+0x298>)
 8005d26:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005d28:	4b83      	ldr	r3, [pc, #524]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d2e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d30:	4b81      	ldr	r3, [pc, #516]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d36:	4b80      	ldr	r3, [pc, #512]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d3c:	4b7e      	ldr	r3, [pc, #504]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d42:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d44:	4b7c      	ldr	r3, [pc, #496]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d4a:	4b7b      	ldr	r3, [pc, #492]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8005d50:	4b79      	ldr	r3, [pc, #484]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d56:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d58:	4b77      	ldr	r3, [pc, #476]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d5e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005d66:	4874      	ldr	r0, [pc, #464]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d68:	f001 fa46 	bl	80071f8 <HAL_DMA_Init>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8005d72:	f7fd fbc3 	bl	80034fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a6f      	ldr	r2, [pc, #444]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d7c:	4a6e      	ldr	r2, [pc, #440]	; (8005f38 <HAL_UART_MspInit+0x294>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005d82:	4b6f      	ldr	r3, [pc, #444]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005d84:	4a6f      	ldr	r2, [pc, #444]	; (8005f44 <HAL_UART_MspInit+0x2a0>)
 8005d86:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005d88:	4b6d      	ldr	r3, [pc, #436]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d8e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d90:	4b6b      	ldr	r3, [pc, #428]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005d92:	2240      	movs	r2, #64	; 0x40
 8005d94:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d96:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005da2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005da4:	4b66      	ldr	r3, [pc, #408]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005daa:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005db0:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005db6:	4b62      	ldr	r3, [pc, #392]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005db8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005dbc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005dbe:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005dc4:	485e      	ldr	r0, [pc, #376]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005dc6:	f001 fa17 	bl	80071f8 <HAL_DMA_Init>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8005dd0:	f7fd fb94 	bl	80034fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a5a      	ldr	r2, [pc, #360]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8005dda:	4a59      	ldr	r2, [pc, #356]	; (8005f40 <HAL_UART_MspInit+0x29c>)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2105      	movs	r1, #5
 8005de4:	2034      	movs	r0, #52	; 0x34
 8005de6:	f001 f9dd 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005dea:	2034      	movs	r0, #52	; 0x34
 8005dec:	f001 f9f6 	bl	80071dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005df0:	e098      	b.n	8005f24 <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART2)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a54      	ldr	r2, [pc, #336]	; (8005f48 <HAL_UART_MspInit+0x2a4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	f040 8093 	bne.w	8005f24 <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	4b4b      	ldr	r3, [pc, #300]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	4a4a      	ldr	r2, [pc, #296]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0e:	4b48      	ldr	r3, [pc, #288]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a43      	ldr	r2, [pc, #268]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b41      	ldr	r3, [pc, #260]	; (8005f30 <HAL_UART_MspInit+0x28c>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005e36:	230c      	movs	r3, #12
 8005e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e42:	2303      	movs	r3, #3
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e46:	2307      	movs	r3, #7
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e4a:	f107 031c 	add.w	r3, r7, #28
 8005e4e:	4619      	mov	r1, r3
 8005e50:	483e      	ldr	r0, [pc, #248]	; (8005f4c <HAL_UART_MspInit+0x2a8>)
 8005e52:	f001 fdd3 	bl	80079fc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e58:	4a3e      	ldr	r2, [pc, #248]	; (8005f54 <HAL_UART_MspInit+0x2b0>)
 8005e5a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005e5c:	4b3c      	ldr	r3, [pc, #240]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e62:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e64:	4b3a      	ldr	r3, [pc, #232]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e6a:	4b39      	ldr	r3, [pc, #228]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e70:	4b37      	ldr	r3, [pc, #220]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e76:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e78:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e7e:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005e84:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005e8c:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e92:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e94:	4b2e      	ldr	r3, [pc, #184]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e9a:	482d      	ldr	r0, [pc, #180]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005e9c:	f001 f9ac 	bl	80071f8 <HAL_DMA_Init>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_UART_MspInit+0x206>
      Error_Handler();
 8005ea6:	f7fd fb29 	bl	80034fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005eae:	63da      	str	r2, [r3, #60]	; 0x3c
 8005eb0:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_UART_MspInit+0x2ac>)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005eb6:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <HAL_UART_MspInit+0x2b8>)
 8005eba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005ebc:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ebe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ec2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ec4:	4b24      	ldr	r3, [pc, #144]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ed0:	4b21      	ldr	r3, [pc, #132]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ed2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ed6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ed8:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ede:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005ee4:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005eea:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005eec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ef0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ef2:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005ef8:	4817      	ldr	r0, [pc, #92]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005efa:	f001 f97d 	bl	80071f8 <HAL_DMA_Init>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8005f04:	f7fd fafa 	bl	80034fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f0e:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <HAL_UART_MspInit+0x2b4>)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2105      	movs	r1, #5
 8005f18:	2026      	movs	r0, #38	; 0x26
 8005f1a:	f001 f943 	bl	80071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f1e:	2026      	movs	r0, #38	; 0x26
 8005f20:	f001 f95c 	bl	80071dc <HAL_NVIC_EnableIRQ>
}
 8005f24:	bf00      	nop
 8005f26:	3730      	adds	r7, #48	; 0x30
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40004c00 	.word	0x40004c00
 8005f30:	40023800 	.word	0x40023800
 8005f34:	40020800 	.word	0x40020800
 8005f38:	20000528 	.word	0x20000528
 8005f3c:	40026040 	.word	0x40026040
 8005f40:	20000588 	.word	0x20000588
 8005f44:	40026070 	.word	0x40026070
 8005f48:	40004400 	.word	0x40004400
 8005f4c:	40020000 	.word	0x40020000
 8005f50:	200005e8 	.word	0x200005e8
 8005f54:	40026088 	.word	0x40026088
 8005f58:	20000648 	.word	0x20000648
 8005f5c:	400260a0 	.word	0x400260a0

08005f60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005f70:	2300      	movs	r3, #0
 8005f72:	60bb      	str	r3, [r7, #8]
 8005f74:	4b2f      	ldr	r3, [pc, #188]	; (8006034 <HAL_InitTick+0xd4>)
 8005f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f78:	4a2e      	ldr	r2, [pc, #184]	; (8006034 <HAL_InitTick+0xd4>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8005f80:	4b2c      	ldr	r3, [pc, #176]	; (8006034 <HAL_InitTick+0xd4>)
 8005f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005f8c:	f107 020c 	add.w	r2, r7, #12
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f002 f810 	bl	8007fbc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005f9c:	f001 fffa 	bl	8007f94 <HAL_RCC_GetPCLK2Freq>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <HAL_InitTick+0xd8>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	0c9b      	lsrs	r3, r3, #18
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005fb4:	4b21      	ldr	r3, [pc, #132]	; (800603c <HAL_InitTick+0xdc>)
 8005fb6:	4a22      	ldr	r2, [pc, #136]	; (8006040 <HAL_InitTick+0xe0>)
 8005fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005fba:	4b20      	ldr	r3, [pc, #128]	; (800603c <HAL_InitTick+0xdc>)
 8005fbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <HAL_InitTick+0xdc>)
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <HAL_InitTick+0xdc>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_InitTick+0xdc>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fd4:	4b19      	ldr	r3, [pc, #100]	; (800603c <HAL_InitTick+0xdc>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005fda:	4818      	ldr	r0, [pc, #96]	; (800603c <HAL_InitTick+0xdc>)
 8005fdc:	f003 f804 	bl	8008fe8 <HAL_TIM_Base_Init>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d11b      	bne.n	8006026 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005fee:	4813      	ldr	r0, [pc, #76]	; (800603c <HAL_InitTick+0xdc>)
 8005ff0:	f003 f84a 	bl	8009088 <HAL_TIM_Base_Start_IT>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d111      	bne.n	8006026 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006002:	2019      	movs	r0, #25
 8006004:	f001 f8ea 	bl	80071dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b0f      	cmp	r3, #15
 800600c:	d808      	bhi.n	8006020 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800600e:	2200      	movs	r2, #0
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	2019      	movs	r0, #25
 8006014:	f001 f8c6 	bl	80071a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006018:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <HAL_InitTick+0xe4>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e002      	b.n	8006026 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800602a:	4618      	mov	r0, r3
 800602c:	3730      	adds	r7, #48	; 0x30
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800
 8006038:	431bde83 	.word	0x431bde83
 800603c:	20001df0 	.word	0x20001df0
 8006040:	40010000 	.word	0x40010000
 8006044:	20000018 	.word	0x20000018

08006048 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800604c:	e7fe      	b.n	800604c <NMI_Handler+0x4>

0800604e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800604e:	b480      	push	{r7}
 8006050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006052:	e7fe      	b.n	8006052 <HardFault_Handler+0x4>

08006054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006058:	e7fe      	b.n	8006058 <MemManage_Handler+0x4>

0800605a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800605a:	b480      	push	{r7}
 800605c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800605e:	e7fe      	b.n	800605e <BusFault_Handler+0x4>

08006060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006064:	e7fe      	b.n	8006064 <UsageFault_Handler+0x4>

08006066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006066:	b480      	push	{r7}
 8006068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800606a:	bf00      	nop
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006078:	4802      	ldr	r0, [pc, #8]	; (8006084 <DMA1_Stream2_IRQHandler+0x10>)
 800607a:	f001 fa55 	bl	8007528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000528 	.word	0x20000528

08006088 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800608c:	4802      	ldr	r0, [pc, #8]	; (8006098 <DMA1_Stream4_IRQHandler+0x10>)
 800608e:	f001 fa4b 	bl	8007528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000588 	.word	0x20000588

0800609c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80060a0:	4802      	ldr	r0, [pc, #8]	; (80060ac <DMA1_Stream5_IRQHandler+0x10>)
 80060a2:	f001 fa41 	bl	8007528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80060a6:	bf00      	nop
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200005e8 	.word	0x200005e8

080060b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80060b4:	4802      	ldr	r0, [pc, #8]	; (80060c0 <DMA1_Stream6_IRQHandler+0x10>)
 80060b6:	f001 fa37 	bl	8007528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80060ba:	bf00      	nop
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000648 	.word	0x20000648

080060c4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80060c8:	4802      	ldr	r0, [pc, #8]	; (80060d4 <CAN1_RX0_IRQHandler+0x10>)
 80060ca:	f000 fd83 	bl	8006bd4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200002f8 	.word	0x200002f8

080060d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80060dc:	4802      	ldr	r0, [pc, #8]	; (80060e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80060de:	f003 faf2 	bl	80096c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20001df0 	.word	0x20001df0

080060ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80060f0:	4802      	ldr	r0, [pc, #8]	; (80060fc <USART2_IRQHandler+0x10>)
 80060f2:	f004 fc35 	bl	800a960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80060f6:	bf00      	nop
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200004e0 	.word	0x200004e0

08006100 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006104:	4802      	ldr	r0, [pc, #8]	; (8006110 <UART4_IRQHandler+0x10>)
 8006106:	f004 fc2b 	bl	800a960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000498 	.word	0x20000498

08006114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800611c:	4a14      	ldr	r2, [pc, #80]	; (8006170 <_sbrk+0x5c>)
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <_sbrk+0x60>)
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <_sbrk+0x64>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d102      	bne.n	8006136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006130:	4b11      	ldr	r3, [pc, #68]	; (8006178 <_sbrk+0x64>)
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <_sbrk+0x68>)
 8006134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006136:	4b10      	ldr	r3, [pc, #64]	; (8006178 <_sbrk+0x64>)
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d207      	bcs.n	8006154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006144:	f008 fb8c 	bl	800e860 <__errno>
 8006148:	4603      	mov	r3, r0
 800614a:	220c      	movs	r2, #12
 800614c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800614e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006152:	e009      	b.n	8006168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006154:	4b08      	ldr	r3, [pc, #32]	; (8006178 <_sbrk+0x64>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <_sbrk+0x64>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	4a05      	ldr	r2, [pc, #20]	; (8006178 <_sbrk+0x64>)
 8006164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20020000 	.word	0x20020000
 8006174:	00000400 	.word	0x00000400
 8006178:	20001e38 	.word	0x20001e38
 800617c:	20005ce0 	.word	0x20005ce0

08006180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <SystemInit+0x20>)
 8006186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618a:	4a05      	ldr	r2, [pc, #20]	; (80061a0 <SystemInit+0x20>)
 800618c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	e000ed00 	.word	0xe000ed00

080061a4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	0a5a      	lsrs	r2, r3, #9
 80061b4:	490f      	ldr	r1, [pc, #60]	; (80061f4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80061b6:	fba1 1202 	umull	r1, r2, r1, r2
 80061ba:	09d2      	lsrs	r2, r2, #7
 80061bc:	490e      	ldr	r1, [pc, #56]	; (80061f8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80061be:	fb01 f202 	mul.w	r2, r1, r2
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	0a5b      	lsrs	r3, r3, #9
 80061cc:	4a09      	ldr	r2, [pc, #36]	; (80061f4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80061ce:	fba2 2303 	umull	r2, r3, r2, r3
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	441a      	add	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	601a      	str	r2, [r3, #0]
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	00044b83 	.word	0x00044b83
 80061f8:	3b9aca00 	.word	0x3b9aca00

080061fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80061fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006200:	f7ff ffbe 	bl	8006180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006204:	480c      	ldr	r0, [pc, #48]	; (8006238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006206:	490d      	ldr	r1, [pc, #52]	; (800623c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006208:	4a0d      	ldr	r2, [pc, #52]	; (8006240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800620a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800620c:	e002      	b.n	8006214 <LoopCopyDataInit>

0800620e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800620e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006212:	3304      	adds	r3, #4

08006214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006218:	d3f9      	bcc.n	800620e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800621a:	4a0a      	ldr	r2, [pc, #40]	; (8006244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800621c:	4c0a      	ldr	r4, [pc, #40]	; (8006248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800621e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006220:	e001      	b.n	8006226 <LoopFillZerobss>

08006222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006224:	3204      	adds	r2, #4

08006226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006228:	d3fb      	bcc.n	8006222 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800622a:	f008 fb1f 	bl	800e86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800622e:	f7fa fe33 	bl	8000e98 <main>
  bx  lr    
 8006232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800623c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006240:	0800f194 	.word	0x0800f194
  ldr r2, =_sbss
 8006244:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006248:	20005cdc 	.word	0x20005cdc

0800624c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800624c:	e7fe      	b.n	800624c <ADC_IRQHandler>
	...

08006250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <HAL_Init+0x40>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <HAL_Init+0x40>)
 800625a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800625e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_Init+0x40>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0a      	ldr	r2, [pc, #40]	; (8006290 <HAL_Init+0x40>)
 8006266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800626a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800626c:	4b08      	ldr	r3, [pc, #32]	; (8006290 <HAL_Init+0x40>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a07      	ldr	r2, [pc, #28]	; (8006290 <HAL_Init+0x40>)
 8006272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006278:	2003      	movs	r0, #3
 800627a:	f000 ff88 	bl	800718e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800627e:	200f      	movs	r0, #15
 8006280:	f7ff fe6e 	bl	8005f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006284:	f7ff fb1a 	bl	80058bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	40023c00 	.word	0x40023c00

08006294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_IncTick+0x20>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_IncTick+0x24>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4413      	add	r3, r2
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <HAL_IncTick+0x24>)
 80062a6:	6013      	str	r3, [r2, #0]
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000001c 	.word	0x2000001c
 80062b8:	20001e3c 	.word	0x20001e3c

080062bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  return uwTick;
 80062c0:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <HAL_GetTick+0x14>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20001e3c 	.word	0x20001e3c

080062d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062dc:	f7ff ffee 	bl	80062bc <HAL_GetTick>
 80062e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ec:	d005      	beq.n	80062fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062ee:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <HAL_Delay+0x44>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4413      	add	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062fa:	bf00      	nop
 80062fc:	f7ff ffde 	bl	80062bc <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	429a      	cmp	r2, r3
 800630a:	d8f7      	bhi.n	80062fc <HAL_Delay+0x28>
  {
  }
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	2000001c 	.word	0x2000001c

0800631c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e0ed      	b.n	800650a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff faea 	bl	8005914 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006350:	f7ff ffb4 	bl	80062bc <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006356:	e012      	b.n	800637e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006358:	f7ff ffb0 	bl	80062bc <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b0a      	cmp	r3, #10
 8006364:	d90b      	bls.n	800637e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2205      	movs	r2, #5
 8006376:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e0c5      	b.n	800650a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0e5      	beq.n	8006358 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0202 	bic.w	r2, r2, #2
 800639a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800639c:	f7ff ff8e 	bl	80062bc <HAL_GetTick>
 80063a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80063a2:	e012      	b.n	80063ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80063a4:	f7ff ff8a 	bl	80062bc <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b0a      	cmp	r3, #10
 80063b0:	d90b      	bls.n	80063ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2205      	movs	r2, #5
 80063c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e09f      	b.n	800650a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e5      	bne.n	80063a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7e1b      	ldrb	r3, [r3, #24]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d108      	bne.n	80063f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	e007      	b.n	8006402 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006400:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	7e5b      	ldrb	r3, [r3, #25]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d108      	bne.n	800641c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e007      	b.n	800642c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	7e9b      	ldrb	r3, [r3, #26]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d108      	bne.n	8006446 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0220 	orr.w	r2, r2, #32
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e007      	b.n	8006456 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0220 	bic.w	r2, r2, #32
 8006454:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7edb      	ldrb	r3, [r3, #27]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d108      	bne.n	8006470 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0210 	bic.w	r2, r2, #16
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e007      	b.n	8006480 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0210 	orr.w	r2, r2, #16
 800647e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	7f1b      	ldrb	r3, [r3, #28]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d108      	bne.n	800649a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0208 	orr.w	r2, r2, #8
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	e007      	b.n	80064aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0208 	bic.w	r2, r2, #8
 80064a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	7f5b      	ldrb	r3, [r3, #29]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d108      	bne.n	80064c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0204 	orr.w	r2, r2, #4
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e007      	b.n	80064d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0204 	bic.w	r2, r2, #4
 80064d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	ea42 0103 	orr.w	r1, r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	1e5a      	subs	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d003      	beq.n	800653a <HAL_CAN_ConfigFilter+0x26>
 8006532:	7cfb      	ldrb	r3, [r7, #19]
 8006534:	2b02      	cmp	r3, #2
 8006536:	f040 80be 	bne.w	80066b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800653a:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800653c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006544:	f043 0201 	orr.w	r2, r3, #1
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006554:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	431a      	orrs	r2, r3
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2201      	movs	r2, #1
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	43db      	mvns	r3, r3
 800658c:	401a      	ands	r2, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d123      	bne.n	80065e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	43db      	mvns	r3, r3
 80065a6:	401a      	ands	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80065be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3248      	adds	r2, #72	; 0x48
 80065c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80065d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80065da:	6979      	ldr	r1, [r7, #20]
 80065dc:	3348      	adds	r3, #72	; 0x48
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	440b      	add	r3, r1
 80065e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d122      	bne.n	8006632 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800660c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	3248      	adds	r2, #72	; 0x48
 8006612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006626:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	3348      	adds	r3, #72	; 0x48
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	440b      	add	r3, r1
 8006630:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	43db      	mvns	r3, r3
 8006644:	401a      	ands	r2, r3
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800664c:	e007      	b.n	800665e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	431a      	orrs	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d109      	bne.n	800667a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	43db      	mvns	r3, r3
 8006670:	401a      	ands	r2, r3
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006678:	e007      	b.n	800668a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	431a      	orrs	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d107      	bne.n	80066a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	431a      	orrs	r2, r3
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066a8:	f023 0201 	bic.w	r2, r3, #1
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e006      	b.n	80066c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
  }
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40006400 	.word	0x40006400

080066d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d12e      	bne.n	8006746 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006700:	f7ff fddc 	bl	80062bc <HAL_GetTick>
 8006704:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006706:	e012      	b.n	800672e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006708:	f7ff fdd8 	bl	80062bc <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b0a      	cmp	r3, #10
 8006714:	d90b      	bls.n	800672e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2205      	movs	r2, #5
 8006726:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e012      	b.n	8006754 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e006      	b.n	8006754 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
  }
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	; 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006770:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800677a:	7ffb      	ldrb	r3, [r7, #31]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d003      	beq.n	8006788 <HAL_CAN_AddTxMessage+0x2c>
 8006780:	7ffb      	ldrb	r3, [r7, #31]
 8006782:	2b02      	cmp	r3, #2
 8006784:	f040 80ad 	bne.w	80068e2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8095 	beq.w	80068d2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	0e1b      	lsrs	r3, r3, #24
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80067b2:	2201      	movs	r2, #1
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	409a      	lsls	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10d      	bne.n	80067e0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	6809      	ldr	r1, [r1, #0]
 80067d2:	431a      	orrs	r2, r3
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	3318      	adds	r3, #24
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	440b      	add	r3, r1
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e00f      	b.n	8006800 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067ea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067f0:	68f9      	ldr	r1, [r7, #12]
 80067f2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80067f4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	3318      	adds	r3, #24
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	440b      	add	r3, r1
 80067fe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	3318      	adds	r3, #24
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	440b      	add	r3, r1
 8006810:	3304      	adds	r3, #4
 8006812:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7d1b      	ldrb	r3, [r3, #20]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d111      	bne.n	8006840 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	3318      	adds	r3, #24
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	4413      	add	r3, r2
 8006828:	3304      	adds	r3, #4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	6811      	ldr	r1, [r2, #0]
 8006830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3318      	adds	r3, #24
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	440b      	add	r3, r1
 800683c:	3304      	adds	r3, #4
 800683e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3307      	adds	r3, #7
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	061a      	lsls	r2, r3, #24
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3306      	adds	r3, #6
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3305      	adds	r3, #5
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	4313      	orrs	r3, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	3204      	adds	r2, #4
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	4610      	mov	r0, r2
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	6811      	ldr	r1, [r2, #0]
 8006868:	ea43 0200 	orr.w	r2, r3, r0
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	440b      	add	r3, r1
 8006872:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006876:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3303      	adds	r3, #3
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	061a      	lsls	r2, r3, #24
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	3302      	adds	r3, #2
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3301      	adds	r3, #1
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	4313      	orrs	r3, r2
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7812      	ldrb	r2, [r2, #0]
 8006898:	4610      	mov	r0, r2
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	ea43 0200 	orr.w	r2, r3, r0
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	440b      	add	r3, r1
 80068a8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80068ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	3318      	adds	r3, #24
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	4413      	add	r3, r2
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	6811      	ldr	r1, [r2, #0]
 80068c0:	f043 0201 	orr.w	r2, r3, #1
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3318      	adds	r3, #24
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	440b      	add	r3, r1
 80068cc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	e00e      	b.n	80068f0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e006      	b.n	80068f0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3724      	adds	r7, #36	; 0x24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006910:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d002      	beq.n	800691e <HAL_CAN_IsTxMessagePending+0x22>
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d10b      	bne.n	8006936 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	069b      	lsls	r3, r3, #26
 8006928:	401a      	ands	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	069b      	lsls	r3, r3, #26
 800692e:	429a      	cmp	r2, r3
 8006930:	d001      	beq.n	8006936 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8006932:	2301      	movs	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8006936:	68fb      	ldr	r3, [r7, #12]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006958:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800695a:	7dfb      	ldrb	r3, [r7, #23]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d003      	beq.n	8006968 <HAL_CAN_GetRxMessage+0x24>
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b02      	cmp	r3, #2
 8006964:	f040 8103 	bne.w	8006b6e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10e      	bne.n	800698c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0303 	and.w	r3, r3, #3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d116      	bne.n	80069aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0f7      	b.n	8006b7c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d107      	bne.n	80069aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e0e8      	b.n	8006b7c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	331b      	adds	r3, #27
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	4413      	add	r3, r2
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0204 	and.w	r2, r3, #4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10c      	bne.n	80069e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	331b      	adds	r3, #27
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	4413      	add	r3, r2
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	0d5b      	lsrs	r3, r3, #21
 80069d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	e00b      	b.n	80069fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	331b      	adds	r3, #27
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	4413      	add	r3, r2
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	08db      	lsrs	r3, r3, #3
 80069f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	331b      	adds	r3, #27
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	4413      	add	r3, r2
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0202 	and.w	r2, r3, #2
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	331b      	adds	r3, #27
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	611a      	str	r2, [r3, #16]
 8006a2e:	e00b      	b.n	8006a48 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	331b      	adds	r3, #27
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	331b      	adds	r3, #27
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	4413      	add	r3, r2
 8006a54:	3304      	adds	r3, #4
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	331b      	adds	r3, #27
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	0c1b      	lsrs	r3, r3, #16
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	0a1a      	lsrs	r2, r3, #8
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	0c1a      	lsrs	r2, r3, #16
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3302      	adds	r3, #2
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	0e1a      	lsrs	r2, r3, #24
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	3303      	adds	r3, #3
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	3304      	adds	r3, #4
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	0a1a      	lsrs	r2, r3, #8
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	3305      	adds	r3, #5
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	0c1a      	lsrs	r2, r3, #16
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	3306      	adds	r3, #6
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	0e1a      	lsrs	r2, r3, #24
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0220 	orr.w	r2, r2, #32
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	e007      	b.n	8006b6a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0220 	orr.w	r2, r2, #32
 8006b68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e006      	b.n	8006b7c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b98:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d002      	beq.n	8006ba6 <HAL_CAN_ActivateNotification+0x1e>
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d109      	bne.n	8006bba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6959      	ldr	r1, [r3, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e006      	b.n	8006bc8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
  }
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08a      	sub	sp, #40	; 0x28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d07c      	beq.n	8006d14 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d023      	beq.n	8006c6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f983 	bl	8006f42 <HAL_CAN_TxMailbox0CompleteCallback>
 8006c3c:	e016      	b.n	8006c6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c50:	e00c      	b.n	8006c6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
 8006c64:	e002      	b.n	8006c6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f989 	bl	8006f7e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d024      	beq.n	8006cc0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f963 	bl	8006f56 <HAL_CAN_TxMailbox1CompleteCallback>
 8006c90:	e016      	b.n	8006cc0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca4:	e00c      	b.n	8006cc0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d004      	beq.n	8006cba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb8:	e002      	b.n	8006cc0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f969 	bl	8006f92 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d024      	beq.n	8006d14 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006cd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f943 	bl	8006f6a <HAL_CAN_TxMailbox2CompleteCallback>
 8006ce4:	e016      	b.n	8006d14 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf8:	e00c      	b.n	8006d14 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0c:	e002      	b.n	8006d14 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f949 	bl	8006fa6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2210      	movs	r2, #16
 8006d36:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d006      	beq.n	8006d5a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2208      	movs	r2, #8
 8006d52:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f930 	bl	8006fba <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7fa ff6e 	bl	8001c54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f003 0310 	and.w	r3, r3, #16
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2210      	movs	r2, #16
 8006d9a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00b      	beq.n	8006dbe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2208      	movs	r2, #8
 8006db6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f912 	bl	8006fe2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006dbe:	6a3b      	ldr	r3, [r7, #32]
 8006dc0:	f003 0310 	and.w	r3, r3, #16
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d009      	beq.n	8006ddc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8f9 	bl	8006fce <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00b      	beq.n	8006dfe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d006      	beq.n	8006dfe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2210      	movs	r2, #16
 8006df6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f8fc 	bl	8006ff6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2208      	movs	r2, #8
 8006e18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f8f5 	bl	800700a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d07b      	beq.n	8006f22 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d072      	beq.n	8006f1a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d008      	beq.n	8006e50 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d008      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	f043 0302 	orr.w	r3, r3, #2
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d008      	beq.n	8006e88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	f043 0304 	orr.w	r3, r3, #4
 8006e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d043      	beq.n	8006f1a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d03e      	beq.n	8006f1a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ea2:	2b60      	cmp	r3, #96	; 0x60
 8006ea4:	d02b      	beq.n	8006efe <HAL_CAN_IRQHandler+0x32a>
 8006ea6:	2b60      	cmp	r3, #96	; 0x60
 8006ea8:	d82e      	bhi.n	8006f08 <HAL_CAN_IRQHandler+0x334>
 8006eaa:	2b50      	cmp	r3, #80	; 0x50
 8006eac:	d022      	beq.n	8006ef4 <HAL_CAN_IRQHandler+0x320>
 8006eae:	2b50      	cmp	r3, #80	; 0x50
 8006eb0:	d82a      	bhi.n	8006f08 <HAL_CAN_IRQHandler+0x334>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d019      	beq.n	8006eea <HAL_CAN_IRQHandler+0x316>
 8006eb6:	2b40      	cmp	r3, #64	; 0x40
 8006eb8:	d826      	bhi.n	8006f08 <HAL_CAN_IRQHandler+0x334>
 8006eba:	2b30      	cmp	r3, #48	; 0x30
 8006ebc:	d010      	beq.n	8006ee0 <HAL_CAN_IRQHandler+0x30c>
 8006ebe:	2b30      	cmp	r3, #48	; 0x30
 8006ec0:	d822      	bhi.n	8006f08 <HAL_CAN_IRQHandler+0x334>
 8006ec2:	2b10      	cmp	r3, #16
 8006ec4:	d002      	beq.n	8006ecc <HAL_CAN_IRQHandler+0x2f8>
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d005      	beq.n	8006ed6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006eca:	e01d      	b.n	8006f08 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ece:	f043 0308 	orr.w	r3, r3, #8
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ed4:	e019      	b.n	8006f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	f043 0310 	orr.w	r3, r3, #16
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ede:	e014      	b.n	8006f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	f043 0320 	orr.w	r3, r3, #32
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ee8:	e00f      	b.n	8006f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ef2:	e00a      	b.n	8006f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006efc:	e005      	b.n	8006f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006f06:	e000      	b.n	8006f0a <HAL_CAN_IRQHandler+0x336>
            break;
 8006f08:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	699a      	ldr	r2, [r3, #24]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f18:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d008      	beq.n	8006f3a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f872 	bl	800701e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006f3a:	bf00      	nop
 8006f3c:	3728      	adds	r7, #40	; 0x28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
	...

08007034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <__NVIC_SetPriorityGrouping+0x44>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007050:	4013      	ands	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800705c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007066:	4a04      	ldr	r2, [pc, #16]	; (8007078 <__NVIC_SetPriorityGrouping+0x44>)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	60d3      	str	r3, [r2, #12]
}
 800706c:	bf00      	nop
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	e000ed00 	.word	0xe000ed00

0800707c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <__NVIC_GetPriorityGrouping+0x18>)
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	f003 0307 	and.w	r3, r3, #7
}
 800708a:	4618      	mov	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	e000ed00 	.word	0xe000ed00

08007098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	db0b      	blt.n	80070c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070aa:	79fb      	ldrb	r3, [r7, #7]
 80070ac:	f003 021f 	and.w	r2, r3, #31
 80070b0:	4907      	ldr	r1, [pc, #28]	; (80070d0 <__NVIC_EnableIRQ+0x38>)
 80070b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	2001      	movs	r0, #1
 80070ba:	fa00 f202 	lsl.w	r2, r0, r2
 80070be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	e000e100 	.word	0xe000e100

080070d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	db0a      	blt.n	80070fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	490c      	ldr	r1, [pc, #48]	; (8007120 <__NVIC_SetPriority+0x4c>)
 80070ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f2:	0112      	lsls	r2, r2, #4
 80070f4:	b2d2      	uxtb	r2, r2
 80070f6:	440b      	add	r3, r1
 80070f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070fc:	e00a      	b.n	8007114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4908      	ldr	r1, [pc, #32]	; (8007124 <__NVIC_SetPriority+0x50>)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	3b04      	subs	r3, #4
 800710c:	0112      	lsls	r2, r2, #4
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	440b      	add	r3, r1
 8007112:	761a      	strb	r2, [r3, #24]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	e000e100 	.word	0xe000e100
 8007124:	e000ed00 	.word	0xe000ed00

08007128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007128:	b480      	push	{r7}
 800712a:	b089      	sub	sp, #36	; 0x24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f1c3 0307 	rsb	r3, r3, #7
 8007142:	2b04      	cmp	r3, #4
 8007144:	bf28      	it	cs
 8007146:	2304      	movcs	r3, #4
 8007148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	3304      	adds	r3, #4
 800714e:	2b06      	cmp	r3, #6
 8007150:	d902      	bls.n	8007158 <NVIC_EncodePriority+0x30>
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3b03      	subs	r3, #3
 8007156:	e000      	b.n	800715a <NVIC_EncodePriority+0x32>
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800715c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	fa02 f303 	lsl.w	r3, r2, r3
 8007166:	43da      	mvns	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	401a      	ands	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	43d9      	mvns	r1, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007180:	4313      	orrs	r3, r2
         );
}
 8007182:	4618      	mov	r0, r3
 8007184:	3724      	adds	r7, #36	; 0x24
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff ff4c 	bl	8007034 <__NVIC_SetPriorityGrouping>
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071b6:	f7ff ff61 	bl	800707c <__NVIC_GetPriorityGrouping>
 80071ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68b9      	ldr	r1, [r7, #8]
 80071c0:	6978      	ldr	r0, [r7, #20]
 80071c2:	f7ff ffb1 	bl	8007128 <NVIC_EncodePriority>
 80071c6:	4602      	mov	r2, r0
 80071c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff ff80 	bl	80070d4 <__NVIC_SetPriority>
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff ff54 	bl	8007098 <__NVIC_EnableIRQ>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007204:	f7ff f85a 	bl	80062bc <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e099      	b.n	8007348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007234:	e00f      	b.n	8007256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007236:	f7ff f841 	bl	80062bc <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b05      	cmp	r3, #5
 8007242:	d908      	bls.n	8007256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2220      	movs	r2, #32
 8007248:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2203      	movs	r2, #3
 800724e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e078      	b.n	8007348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e8      	bne.n	8007236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4b38      	ldr	r3, [pc, #224]	; (8007350 <HAL_DMA_Init+0x158>)
 8007270:	4013      	ands	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800728e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800729a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d107      	bne.n	80072c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	4313      	orrs	r3, r2
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0307 	bic.w	r3, r3, #7
 80072d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d117      	bne.n	800731a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00e      	beq.n	800731a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fb01 	bl	8007904 <DMA_CheckFifoParam>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2240      	movs	r2, #64	; 0x40
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007316:	2301      	movs	r3, #1
 8007318:	e016      	b.n	8007348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fab8 	bl	8007898 <DMA_CalcBaseAndBitshift>
 8007328:	4603      	mov	r3, r0
 800732a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007330:	223f      	movs	r2, #63	; 0x3f
 8007332:	409a      	lsls	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	f010803f 	.word	0xf010803f

08007354 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_DMA_Start_IT+0x26>
 8007376:	2302      	movs	r3, #2
 8007378:	e040      	b.n	80073fc <HAL_DMA_Start_IT+0xa8>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d12f      	bne.n	80073ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fa4a 	bl	800783c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ac:	223f      	movs	r2, #63	; 0x3f
 80073ae:	409a      	lsls	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0216 	orr.w	r2, r2, #22
 80073c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d007      	beq.n	80073dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0208 	orr.w	r2, r2, #8
 80073da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e005      	b.n	80073fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80073f6:	2302      	movs	r3, #2
 80073f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007412:	f7fe ff53 	bl	80062bc <HAL_GetTick>
 8007416:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d008      	beq.n	8007436 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2280      	movs	r2, #128	; 0x80
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e052      	b.n	80074dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0216 	bic.w	r2, r2, #22
 8007444:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007454:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <HAL_DMA_Abort+0x62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0208 	bic.w	r2, r2, #8
 8007474:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007486:	e013      	b.n	80074b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007488:	f7fe ff18 	bl	80062bc <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b05      	cmp	r3, #5
 8007494:	d90c      	bls.n	80074b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2203      	movs	r2, #3
 80074a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e015      	b.n	80074dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e4      	bne.n	8007488 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c2:	223f      	movs	r2, #63	; 0x3f
 80074c4:	409a      	lsls	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d004      	beq.n	8007502 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2280      	movs	r2, #128	; 0x80
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e00c      	b.n	800751c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2205      	movs	r2, #5
 8007506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f022 0201 	bic.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007534:	4b8e      	ldr	r3, [pc, #568]	; (8007770 <HAL_DMA_IRQHandler+0x248>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a8e      	ldr	r2, [pc, #568]	; (8007774 <HAL_DMA_IRQHandler+0x24c>)
 800753a:	fba2 2303 	umull	r2, r3, r2, r3
 800753e:	0a9b      	lsrs	r3, r3, #10
 8007540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007552:	2208      	movs	r2, #8
 8007554:	409a      	lsls	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01a      	beq.n	8007594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b00      	cmp	r3, #0
 800756a:	d013      	beq.n	8007594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0204 	bic.w	r2, r2, #4
 800757a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	2208      	movs	r2, #8
 8007582:	409a      	lsls	r2, r3
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758c:	f043 0201 	orr.w	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007598:	2201      	movs	r2, #1
 800759a:	409a      	lsls	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d012      	beq.n	80075ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00b      	beq.n	80075ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b6:	2201      	movs	r2, #1
 80075b8:	409a      	lsls	r2, r3
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	f043 0202 	orr.w	r2, r3, #2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ce:	2204      	movs	r2, #4
 80075d0:	409a      	lsls	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d012      	beq.n	8007600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00b      	beq.n	8007600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ec:	2204      	movs	r2, #4
 80075ee:	409a      	lsls	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	f043 0204 	orr.w	r2, r3, #4
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007604:	2210      	movs	r2, #16
 8007606:	409a      	lsls	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d043      	beq.n	8007698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d03c      	beq.n	8007698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007622:	2210      	movs	r2, #16
 8007624:	409a      	lsls	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d018      	beq.n	800766a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d108      	bne.n	8007658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d024      	beq.n	8007698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
 8007656:	e01f      	b.n	8007698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765c:	2b00      	cmp	r3, #0
 800765e:	d01b      	beq.n	8007698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	4798      	blx	r3
 8007668:	e016      	b.n	8007698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007674:	2b00      	cmp	r3, #0
 8007676:	d107      	bne.n	8007688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0208 	bic.w	r2, r2, #8
 8007686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769c:	2220      	movs	r2, #32
 800769e:	409a      	lsls	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 808f 	beq.w	80077c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0310 	and.w	r3, r3, #16
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 8087 	beq.w	80077c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076be:	2220      	movs	r2, #32
 80076c0:	409a      	lsls	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	d136      	bne.n	8007740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f022 0216 	bic.w	r2, r2, #22
 80076e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <HAL_DMA_IRQHandler+0x1da>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d007      	beq.n	8007712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0208 	bic.w	r2, r2, #8
 8007710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007716:	223f      	movs	r2, #63	; 0x3f
 8007718:	409a      	lsls	r2, r3
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007732:	2b00      	cmp	r3, #0
 8007734:	d07e      	beq.n	8007834 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	4798      	blx	r3
        }
        return;
 800773e:	e079      	b.n	8007834 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01d      	beq.n	800778a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10d      	bne.n	8007778 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007760:	2b00      	cmp	r3, #0
 8007762:	d031      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	4798      	blx	r3
 800776c:	e02c      	b.n	80077c8 <HAL_DMA_IRQHandler+0x2a0>
 800776e:	bf00      	nop
 8007770:	20000014 	.word	0x20000014
 8007774:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d023      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
 8007788:	e01e      	b.n	80077c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10f      	bne.n	80077b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0210 	bic.w	r2, r2, #16
 80077a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d032      	beq.n	8007836 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d022      	beq.n	8007822 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2205      	movs	r2, #5
 80077e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d307      	bcc.n	8007810 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f2      	bne.n	80077f4 <HAL_DMA_IRQHandler+0x2cc>
 800780e:	e000      	b.n	8007812 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007810:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	e000      	b.n	8007836 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007834:	bf00      	nop
    }
  }
}
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007858:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d108      	bne.n	800787c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800787a:	e007      	b.n	800788c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	3b10      	subs	r3, #16
 80078a8:	4a14      	ldr	r2, [pc, #80]	; (80078fc <DMA_CalcBaseAndBitshift+0x64>)
 80078aa:	fba2 2303 	umull	r2, r3, r2, r3
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80078b2:	4a13      	ldr	r2, [pc, #76]	; (8007900 <DMA_CalcBaseAndBitshift+0x68>)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d909      	bls.n	80078da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	1d1a      	adds	r2, r3, #4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	659a      	str	r2, [r3, #88]	; 0x58
 80078d8:	e007      	b.n	80078ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	aaaaaaab 	.word	0xaaaaaaab
 8007900:	0800ef30 	.word	0x0800ef30

08007904 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d11f      	bne.n	800795e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b03      	cmp	r3, #3
 8007922:	d856      	bhi.n	80079d2 <DMA_CheckFifoParam+0xce>
 8007924:	a201      	add	r2, pc, #4	; (adr r2, 800792c <DMA_CheckFifoParam+0x28>)
 8007926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792a:	bf00      	nop
 800792c:	0800793d 	.word	0x0800793d
 8007930:	0800794f 	.word	0x0800794f
 8007934:	0800793d 	.word	0x0800793d
 8007938:	080079d3 	.word	0x080079d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d046      	beq.n	80079d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800794c:	e043      	b.n	80079d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007956:	d140      	bne.n	80079da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800795c:	e03d      	b.n	80079da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007966:	d121      	bne.n	80079ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b03      	cmp	r3, #3
 800796c:	d837      	bhi.n	80079de <DMA_CheckFifoParam+0xda>
 800796e:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <DMA_CheckFifoParam+0x70>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	08007985 	.word	0x08007985
 8007978:	0800798b 	.word	0x0800798b
 800797c:	08007985 	.word	0x08007985
 8007980:	0800799d 	.word	0x0800799d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	73fb      	strb	r3, [r7, #15]
      break;
 8007988:	e030      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d025      	beq.n	80079e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800799a:	e022      	b.n	80079e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079a4:	d11f      	bne.n	80079e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80079aa:	e01c      	b.n	80079e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d903      	bls.n	80079ba <DMA_CheckFifoParam+0xb6>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d003      	beq.n	80079c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80079b8:	e018      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	73fb      	strb	r3, [r7, #15]
      break;
 80079be:	e015      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00e      	beq.n	80079ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	73fb      	strb	r3, [r7, #15]
      break;
 80079d0:	e00b      	b.n	80079ea <DMA_CheckFifoParam+0xe6>
      break;
 80079d2:	bf00      	nop
 80079d4:	e00a      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      break;
 80079d6:	bf00      	nop
 80079d8:	e008      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      break;
 80079da:	bf00      	nop
 80079dc:	e006      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      break;
 80079de:	bf00      	nop
 80079e0:	e004      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      break;
 80079e2:	bf00      	nop
 80079e4:	e002      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      break;   
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <DMA_CheckFifoParam+0xe8>
      break;
 80079ea:	bf00      	nop
    }
  } 
  
  return status; 
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop

080079fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a12:	2300      	movs	r3, #0
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e165      	b.n	8007ce4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007a18:	2201      	movs	r2, #1
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	f040 8154 	bne.w	8007cde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d005      	beq.n	8007a4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d130      	bne.n	8007ab0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	2203      	movs	r2, #3
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a84:	2201      	movs	r2, #1
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	4013      	ands	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	091b      	lsrs	r3, r3, #4
 8007a9a:	f003 0201 	and.w	r2, r3, #1
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d017      	beq.n	8007aec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	2203      	movs	r2, #3
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	43db      	mvns	r3, r3
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f003 0303 	and.w	r3, r3, #3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d123      	bne.n	8007b40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	08da      	lsrs	r2, r3, #3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3208      	adds	r2, #8
 8007b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	220f      	movs	r2, #15
 8007b10:	fa02 f303 	lsl.w	r3, r2, r3
 8007b14:	43db      	mvns	r3, r3
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	08da      	lsrs	r2, r3, #3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3208      	adds	r2, #8
 8007b3a:	69b9      	ldr	r1, [r7, #24]
 8007b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	43db      	mvns	r3, r3
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4013      	ands	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f003 0203 	and.w	r2, r3, #3
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	fa02 f303 	lsl.w	r3, r2, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80ae 	beq.w	8007cde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
 8007b86:	4b5d      	ldr	r3, [pc, #372]	; (8007cfc <HAL_GPIO_Init+0x300>)
 8007b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8a:	4a5c      	ldr	r2, [pc, #368]	; (8007cfc <HAL_GPIO_Init+0x300>)
 8007b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b90:	6453      	str	r3, [r2, #68]	; 0x44
 8007b92:	4b5a      	ldr	r3, [pc, #360]	; (8007cfc <HAL_GPIO_Init+0x300>)
 8007b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b9e:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <HAL_GPIO_Init+0x304>)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	089b      	lsrs	r3, r3, #2
 8007ba4:	3302      	adds	r3, #2
 8007ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	220f      	movs	r2, #15
 8007bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a4f      	ldr	r2, [pc, #316]	; (8007d04 <HAL_GPIO_Init+0x308>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d025      	beq.n	8007c16 <HAL_GPIO_Init+0x21a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a4e      	ldr	r2, [pc, #312]	; (8007d08 <HAL_GPIO_Init+0x30c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d01f      	beq.n	8007c12 <HAL_GPIO_Init+0x216>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a4d      	ldr	r2, [pc, #308]	; (8007d0c <HAL_GPIO_Init+0x310>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d019      	beq.n	8007c0e <HAL_GPIO_Init+0x212>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a4c      	ldr	r2, [pc, #304]	; (8007d10 <HAL_GPIO_Init+0x314>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <HAL_GPIO_Init+0x20e>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a4b      	ldr	r2, [pc, #300]	; (8007d14 <HAL_GPIO_Init+0x318>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d00d      	beq.n	8007c06 <HAL_GPIO_Init+0x20a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a4a      	ldr	r2, [pc, #296]	; (8007d18 <HAL_GPIO_Init+0x31c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d007      	beq.n	8007c02 <HAL_GPIO_Init+0x206>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a49      	ldr	r2, [pc, #292]	; (8007d1c <HAL_GPIO_Init+0x320>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d101      	bne.n	8007bfe <HAL_GPIO_Init+0x202>
 8007bfa:	2306      	movs	r3, #6
 8007bfc:	e00c      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007bfe:	2307      	movs	r3, #7
 8007c00:	e00a      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007c02:	2305      	movs	r3, #5
 8007c04:	e008      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007c06:	2304      	movs	r3, #4
 8007c08:	e006      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e004      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e002      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <HAL_GPIO_Init+0x21c>
 8007c16:	2300      	movs	r3, #0
 8007c18:	69fa      	ldr	r2, [r7, #28]
 8007c1a:	f002 0203 	and.w	r2, r2, #3
 8007c1e:	0092      	lsls	r2, r2, #2
 8007c20:	4093      	lsls	r3, r2
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c28:	4935      	ldr	r1, [pc, #212]	; (8007d00 <HAL_GPIO_Init+0x304>)
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	089b      	lsrs	r3, r3, #2
 8007c2e:	3302      	adds	r3, #2
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c36:	4b3a      	ldr	r3, [pc, #232]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007c5a:	4a31      	ldr	r2, [pc, #196]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007c60:	4b2f      	ldr	r3, [pc, #188]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007c84:	4a26      	ldr	r2, [pc, #152]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007c8a:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4013      	ands	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007cae:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007cb4:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	43db      	mvns	r3, r3
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007cd8:	4a11      	ldr	r2, [pc, #68]	; (8007d20 <HAL_GPIO_Init+0x324>)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	f67f ae96 	bls.w	8007a18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	3724      	adds	r7, #36	; 0x24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40013800 	.word	0x40013800
 8007d04:	40020000 	.word	0x40020000
 8007d08:	40020400 	.word	0x40020400
 8007d0c:	40020800 	.word	0x40020800
 8007d10:	40020c00 	.word	0x40020c00
 8007d14:	40021000 	.word	0x40021000
 8007d18:	40021400 	.word	0x40021400
 8007d1c:	40021800 	.word	0x40021800
 8007d20:	40013c00 	.word	0x40013c00

08007d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	887b      	ldrh	r3, [r7, #2]
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
 8007d40:	e001      	b.n	8007d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	807b      	strh	r3, [r7, #2]
 8007d60:	4613      	mov	r3, r2
 8007d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007d64:	787b      	ldrb	r3, [r7, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d6a:	887a      	ldrh	r2, [r7, #2]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007d70:	e003      	b.n	8007d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007d72:	887b      	ldrh	r3, [r7, #2]
 8007d74:	041a      	lsls	r2, r3, #16
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	619a      	str	r2, [r3, #24]
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0cc      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d9c:	4b68      	ldr	r3, [pc, #416]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d90c      	bls.n	8007dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007daa:	4b65      	ldr	r3, [pc, #404]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db2:	4b63      	ldr	r3, [pc, #396]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d001      	beq.n	8007dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0b8      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d020      	beq.n	8007e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ddc:	4b59      	ldr	r3, [pc, #356]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4a58      	ldr	r2, [pc, #352]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007df4:	4b53      	ldr	r3, [pc, #332]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a52      	ldr	r2, [pc, #328]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e00:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	494d      	ldr	r1, [pc, #308]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d044      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d107      	bne.n	8007e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e26:	4b47      	ldr	r3, [pc, #284]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d119      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e07f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d107      	bne.n	8007e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e46:	4b3f      	ldr	r3, [pc, #252]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e06f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e56:	4b3b      	ldr	r3, [pc, #236]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e067      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e66:	4b37      	ldr	r3, [pc, #220]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f023 0203 	bic.w	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4934      	ldr	r1, [pc, #208]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e78:	f7fe fa20 	bl	80062bc <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e80:	f7fe fa1c 	bl	80062bc <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e04f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e96:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 020c 	and.w	r2, r3, #12
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d1eb      	bne.n	8007e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ea8:	4b25      	ldr	r3, [pc, #148]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d20c      	bcs.n	8007ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ebe:	4b20      	ldr	r3, [pc, #128]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e032      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007edc:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4916      	ldr	r1, [pc, #88]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007efa:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	490e      	ldr	r1, [pc, #56]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f0e:	f000 f887 	bl	8008020 <HAL_RCC_GetSysClockFreq>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	490a      	ldr	r1, [pc, #40]	; (8007f48 <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	5ccb      	ldrb	r3, [r1, r3]
 8007f22:	fa22 f303 	lsr.w	r3, r2, r3
 8007f26:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <HAL_RCC_ClockConfig+0x1c4>)
 8007f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe f816 	bl	8005f60 <HAL_InitTick>

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40023c00 	.word	0x40023c00
 8007f44:	40023800 	.word	0x40023800
 8007f48:	0800ef18 	.word	0x0800ef18
 8007f4c:	20000014 	.word	0x20000014
 8007f50:	20000018 	.word	0x20000018

08007f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f58:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	20000014 	.word	0x20000014

08007f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f70:	f7ff fff0 	bl	8007f54 <HAL_RCC_GetHCLKFreq>
 8007f74:	4602      	mov	r2, r0
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	0a9b      	lsrs	r3, r3, #10
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	4903      	ldr	r1, [pc, #12]	; (8007f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f82:	5ccb      	ldrb	r3, [r1, r3]
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40023800 	.word	0x40023800
 8007f90:	0800ef28 	.word	0x0800ef28

08007f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f98:	f7ff ffdc 	bl	8007f54 <HAL_RCC_GetHCLKFreq>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	0b5b      	lsrs	r3, r3, #13
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	4903      	ldr	r1, [pc, #12]	; (8007fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007faa:	5ccb      	ldrb	r3, [r1, r3]
 8007fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	0800ef28 	.word	0x0800ef28

08007fbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	220f      	movs	r2, #15
 8007fca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fcc:	4b12      	ldr	r3, [pc, #72]	; (8008018 <HAL_RCC_GetClockConfig+0x5c>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 0203 	and.w	r2, r3, #3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fd8:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <HAL_RCC_GetClockConfig+0x5c>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <HAL_RCC_GetClockConfig+0x5c>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ff0:	4b09      	ldr	r3, [pc, #36]	; (8008018 <HAL_RCC_GetClockConfig+0x5c>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	08db      	lsrs	r3, r3, #3
 8007ff6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ffe:	4b07      	ldr	r3, [pc, #28]	; (800801c <HAL_RCC_GetClockConfig+0x60>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 020f 	and.w	r2, r3, #15
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	601a      	str	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	40023800 	.word	0x40023800
 800801c:	40023c00 	.word	0x40023c00

08008020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008024:	b0ae      	sub	sp, #184	; 0xb8
 8008026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008046:	4bcb      	ldr	r3, [pc, #812]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 030c 	and.w	r3, r3, #12
 800804e:	2b0c      	cmp	r3, #12
 8008050:	f200 8206 	bhi.w	8008460 <HAL_RCC_GetSysClockFreq+0x440>
 8008054:	a201      	add	r2, pc, #4	; (adr r2, 800805c <HAL_RCC_GetSysClockFreq+0x3c>)
 8008056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805a:	bf00      	nop
 800805c:	08008091 	.word	0x08008091
 8008060:	08008461 	.word	0x08008461
 8008064:	08008461 	.word	0x08008461
 8008068:	08008461 	.word	0x08008461
 800806c:	08008099 	.word	0x08008099
 8008070:	08008461 	.word	0x08008461
 8008074:	08008461 	.word	0x08008461
 8008078:	08008461 	.word	0x08008461
 800807c:	080080a1 	.word	0x080080a1
 8008080:	08008461 	.word	0x08008461
 8008084:	08008461 	.word	0x08008461
 8008088:	08008461 	.word	0x08008461
 800808c:	08008291 	.word	0x08008291
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008090:	4bb9      	ldr	r3, [pc, #740]	; (8008378 <HAL_RCC_GetSysClockFreq+0x358>)
 8008092:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008096:	e1e7      	b.n	8008468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008098:	4bb8      	ldr	r3, [pc, #736]	; (800837c <HAL_RCC_GetSysClockFreq+0x35c>)
 800809a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800809e:	e1e3      	b.n	8008468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080a0:	4bb4      	ldr	r3, [pc, #720]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080ac:	4bb1      	ldr	r3, [pc, #708]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d071      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080b8:	4bae      	ldr	r3, [pc, #696]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	099b      	lsrs	r3, r3, #6
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80080c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080d4:	2300      	movs	r3, #0
 80080d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080de:	4622      	mov	r2, r4
 80080e0:	462b      	mov	r3, r5
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f04f 0100 	mov.w	r1, #0
 80080ea:	0159      	lsls	r1, r3, #5
 80080ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080f0:	0150      	lsls	r0, r2, #5
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4621      	mov	r1, r4
 80080f8:	1a51      	subs	r1, r2, r1
 80080fa:	6439      	str	r1, [r7, #64]	; 0x40
 80080fc:	4629      	mov	r1, r5
 80080fe:	eb63 0301 	sbc.w	r3, r3, r1
 8008102:	647b      	str	r3, [r7, #68]	; 0x44
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008110:	4649      	mov	r1, r9
 8008112:	018b      	lsls	r3, r1, #6
 8008114:	4641      	mov	r1, r8
 8008116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800811a:	4641      	mov	r1, r8
 800811c:	018a      	lsls	r2, r1, #6
 800811e:	4641      	mov	r1, r8
 8008120:	1a51      	subs	r1, r2, r1
 8008122:	63b9      	str	r1, [r7, #56]	; 0x38
 8008124:	4649      	mov	r1, r9
 8008126:	eb63 0301 	sbc.w	r3, r3, r1
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800812c:	f04f 0200 	mov.w	r2, #0
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008138:	4649      	mov	r1, r9
 800813a:	00cb      	lsls	r3, r1, #3
 800813c:	4641      	mov	r1, r8
 800813e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008142:	4641      	mov	r1, r8
 8008144:	00ca      	lsls	r2, r1, #3
 8008146:	4610      	mov	r0, r2
 8008148:	4619      	mov	r1, r3
 800814a:	4603      	mov	r3, r0
 800814c:	4622      	mov	r2, r4
 800814e:	189b      	adds	r3, r3, r2
 8008150:	633b      	str	r3, [r7, #48]	; 0x30
 8008152:	462b      	mov	r3, r5
 8008154:	460a      	mov	r2, r1
 8008156:	eb42 0303 	adc.w	r3, r2, r3
 800815a:	637b      	str	r3, [r7, #52]	; 0x34
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 0300 	mov.w	r3, #0
 8008164:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008168:	4629      	mov	r1, r5
 800816a:	024b      	lsls	r3, r1, #9
 800816c:	4621      	mov	r1, r4
 800816e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008172:	4621      	mov	r1, r4
 8008174:	024a      	lsls	r2, r1, #9
 8008176:	4610      	mov	r0, r2
 8008178:	4619      	mov	r1, r3
 800817a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800817e:	2200      	movs	r2, #0
 8008180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008184:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008188:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800818c:	f7f8 fcdc 	bl	8000b48 <__aeabi_uldivmod>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4613      	mov	r3, r2
 8008196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800819a:	e067      	b.n	800826c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819c:	4b75      	ldr	r3, [pc, #468]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	099b      	lsrs	r3, r3, #6
 80081a2:	2200      	movs	r2, #0
 80081a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081a8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80081ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80081b6:	2300      	movs	r3, #0
 80081b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80081ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f04f 0100 	mov.w	r1, #0
 80081ca:	0159      	lsls	r1, r3, #5
 80081cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081d0:	0150      	lsls	r0, r2, #5
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4621      	mov	r1, r4
 80081d8:	1a51      	subs	r1, r2, r1
 80081da:	62b9      	str	r1, [r7, #40]	; 0x28
 80081dc:	4629      	mov	r1, r5
 80081de:	eb63 0301 	sbc.w	r3, r3, r1
 80081e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e4:	f04f 0200 	mov.w	r2, #0
 80081e8:	f04f 0300 	mov.w	r3, #0
 80081ec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80081f0:	4649      	mov	r1, r9
 80081f2:	018b      	lsls	r3, r1, #6
 80081f4:	4641      	mov	r1, r8
 80081f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081fa:	4641      	mov	r1, r8
 80081fc:	018a      	lsls	r2, r1, #6
 80081fe:	4641      	mov	r1, r8
 8008200:	ebb2 0a01 	subs.w	sl, r2, r1
 8008204:	4649      	mov	r1, r9
 8008206:	eb63 0b01 	sbc.w	fp, r3, r1
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008216:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800821a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800821e:	4692      	mov	sl, r2
 8008220:	469b      	mov	fp, r3
 8008222:	4623      	mov	r3, r4
 8008224:	eb1a 0303 	adds.w	r3, sl, r3
 8008228:	623b      	str	r3, [r7, #32]
 800822a:	462b      	mov	r3, r5
 800822c:	eb4b 0303 	adc.w	r3, fp, r3
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800823e:	4629      	mov	r1, r5
 8008240:	028b      	lsls	r3, r1, #10
 8008242:	4621      	mov	r1, r4
 8008244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008248:	4621      	mov	r1, r4
 800824a:	028a      	lsls	r2, r1, #10
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008254:	2200      	movs	r2, #0
 8008256:	673b      	str	r3, [r7, #112]	; 0x70
 8008258:	677a      	str	r2, [r7, #116]	; 0x74
 800825a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800825e:	f7f8 fc73 	bl	8000b48 <__aeabi_uldivmod>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4613      	mov	r3, r2
 8008268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800826c:	4b41      	ldr	r3, [pc, #260]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	0c1b      	lsrs	r3, r3, #16
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	3301      	adds	r3, #1
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800827e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800828e:	e0eb      	b.n	8008468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008290:	4b38      	ldr	r3, [pc, #224]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800829c:	4b35      	ldr	r3, [pc, #212]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d06b      	beq.n	8008380 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a8:	4b32      	ldr	r3, [pc, #200]	; (8008374 <HAL_RCC_GetSysClockFreq+0x354>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	099b      	lsrs	r3, r3, #6
 80082ae:	2200      	movs	r2, #0
 80082b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80082b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ba:	663b      	str	r3, [r7, #96]	; 0x60
 80082bc:	2300      	movs	r3, #0
 80082be:	667b      	str	r3, [r7, #100]	; 0x64
 80082c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80082c4:	4622      	mov	r2, r4
 80082c6:	462b      	mov	r3, r5
 80082c8:	f04f 0000 	mov.w	r0, #0
 80082cc:	f04f 0100 	mov.w	r1, #0
 80082d0:	0159      	lsls	r1, r3, #5
 80082d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082d6:	0150      	lsls	r0, r2, #5
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4621      	mov	r1, r4
 80082de:	1a51      	subs	r1, r2, r1
 80082e0:	61b9      	str	r1, [r7, #24]
 80082e2:	4629      	mov	r1, r5
 80082e4:	eb63 0301 	sbc.w	r3, r3, r1
 80082e8:	61fb      	str	r3, [r7, #28]
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80082f6:	4659      	mov	r1, fp
 80082f8:	018b      	lsls	r3, r1, #6
 80082fa:	4651      	mov	r1, sl
 80082fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008300:	4651      	mov	r1, sl
 8008302:	018a      	lsls	r2, r1, #6
 8008304:	4651      	mov	r1, sl
 8008306:	ebb2 0801 	subs.w	r8, r2, r1
 800830a:	4659      	mov	r1, fp
 800830c:	eb63 0901 	sbc.w	r9, r3, r1
 8008310:	f04f 0200 	mov.w	r2, #0
 8008314:	f04f 0300 	mov.w	r3, #0
 8008318:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800831c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008320:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008324:	4690      	mov	r8, r2
 8008326:	4699      	mov	r9, r3
 8008328:	4623      	mov	r3, r4
 800832a:	eb18 0303 	adds.w	r3, r8, r3
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	462b      	mov	r3, r5
 8008332:	eb49 0303 	adc.w	r3, r9, r3
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008344:	4629      	mov	r1, r5
 8008346:	024b      	lsls	r3, r1, #9
 8008348:	4621      	mov	r1, r4
 800834a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800834e:	4621      	mov	r1, r4
 8008350:	024a      	lsls	r2, r1, #9
 8008352:	4610      	mov	r0, r2
 8008354:	4619      	mov	r1, r3
 8008356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800835a:	2200      	movs	r2, #0
 800835c:	65bb      	str	r3, [r7, #88]	; 0x58
 800835e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008360:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008364:	f7f8 fbf0 	bl	8000b48 <__aeabi_uldivmod>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4613      	mov	r3, r2
 800836e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008372:	e065      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0x420>
 8008374:	40023800 	.word	0x40023800
 8008378:	00f42400 	.word	0x00f42400
 800837c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <HAL_RCC_GetSysClockFreq+0x458>)
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	099b      	lsrs	r3, r3, #6
 8008386:	2200      	movs	r2, #0
 8008388:	4618      	mov	r0, r3
 800838a:	4611      	mov	r1, r2
 800838c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008390:	653b      	str	r3, [r7, #80]	; 0x50
 8008392:	2300      	movs	r3, #0
 8008394:	657b      	str	r3, [r7, #84]	; 0x54
 8008396:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800839a:	4642      	mov	r2, r8
 800839c:	464b      	mov	r3, r9
 800839e:	f04f 0000 	mov.w	r0, #0
 80083a2:	f04f 0100 	mov.w	r1, #0
 80083a6:	0159      	lsls	r1, r3, #5
 80083a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80083ac:	0150      	lsls	r0, r2, #5
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	4641      	mov	r1, r8
 80083b4:	1a51      	subs	r1, r2, r1
 80083b6:	60b9      	str	r1, [r7, #8]
 80083b8:	4649      	mov	r1, r9
 80083ba:	eb63 0301 	sbc.w	r3, r3, r1
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80083cc:	4659      	mov	r1, fp
 80083ce:	018b      	lsls	r3, r1, #6
 80083d0:	4651      	mov	r1, sl
 80083d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083d6:	4651      	mov	r1, sl
 80083d8:	018a      	lsls	r2, r1, #6
 80083da:	4651      	mov	r1, sl
 80083dc:	1a54      	subs	r4, r2, r1
 80083de:	4659      	mov	r1, fp
 80083e0:	eb63 0501 	sbc.w	r5, r3, r1
 80083e4:	f04f 0200 	mov.w	r2, #0
 80083e8:	f04f 0300 	mov.w	r3, #0
 80083ec:	00eb      	lsls	r3, r5, #3
 80083ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083f2:	00e2      	lsls	r2, r4, #3
 80083f4:	4614      	mov	r4, r2
 80083f6:	461d      	mov	r5, r3
 80083f8:	4643      	mov	r3, r8
 80083fa:	18e3      	adds	r3, r4, r3
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	464b      	mov	r3, r9
 8008400:	eb45 0303 	adc.w	r3, r5, r3
 8008404:	607b      	str	r3, [r7, #4]
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008412:	4629      	mov	r1, r5
 8008414:	028b      	lsls	r3, r1, #10
 8008416:	4621      	mov	r1, r4
 8008418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800841c:	4621      	mov	r1, r4
 800841e:	028a      	lsls	r2, r1, #10
 8008420:	4610      	mov	r0, r2
 8008422:	4619      	mov	r1, r3
 8008424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008428:	2200      	movs	r2, #0
 800842a:	64bb      	str	r3, [r7, #72]	; 0x48
 800842c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800842e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008432:	f7f8 fb89 	bl	8000b48 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4613      	mov	r3, r2
 800843c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008440:	4b0d      	ldr	r3, [pc, #52]	; (8008478 <HAL_RCC_GetSysClockFreq+0x458>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	0f1b      	lsrs	r3, r3, #28
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800844e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008452:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008456:	fbb2 f3f3 	udiv	r3, r2, r3
 800845a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800845e:	e003      	b.n	8008468 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <HAL_RCC_GetSysClockFreq+0x45c>)
 8008462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008466:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008468:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800846c:	4618      	mov	r0, r3
 800846e:	37b8      	adds	r7, #184	; 0xb8
 8008470:	46bd      	mov	sp, r7
 8008472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008476:	bf00      	nop
 8008478:	40023800 	.word	0x40023800
 800847c:	00f42400 	.word	0x00f42400

08008480 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e28d      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 8083 	beq.w	80085a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80084a0:	4b94      	ldr	r3, [pc, #592]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f003 030c 	and.w	r3, r3, #12
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d019      	beq.n	80084e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80084ac:	4b91      	ldr	r3, [pc, #580]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d106      	bne.n	80084c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80084b8:	4b8e      	ldr	r3, [pc, #568]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c4:	d00c      	beq.n	80084e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084c6:	4b8b      	ldr	r3, [pc, #556]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80084ce:	2b0c      	cmp	r3, #12
 80084d0:	d112      	bne.n	80084f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084d2:	4b88      	ldr	r3, [pc, #544]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084de:	d10b      	bne.n	80084f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e0:	4b84      	ldr	r3, [pc, #528]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d05b      	beq.n	80085a4 <HAL_RCC_OscConfig+0x124>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d157      	bne.n	80085a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e25a      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008500:	d106      	bne.n	8008510 <HAL_RCC_OscConfig+0x90>
 8008502:	4b7c      	ldr	r3, [pc, #496]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a7b      	ldr	r2, [pc, #492]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	e01d      	b.n	800854c <HAL_RCC_OscConfig+0xcc>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008518:	d10c      	bne.n	8008534 <HAL_RCC_OscConfig+0xb4>
 800851a:	4b76      	ldr	r3, [pc, #472]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a75      	ldr	r2, [pc, #468]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	4b73      	ldr	r3, [pc, #460]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a72      	ldr	r2, [pc, #456]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 800852c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	e00b      	b.n	800854c <HAL_RCC_OscConfig+0xcc>
 8008534:	4b6f      	ldr	r3, [pc, #444]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a6e      	ldr	r2, [pc, #440]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 800853a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	4b6c      	ldr	r3, [pc, #432]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a6b      	ldr	r2, [pc, #428]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800854a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d013      	beq.n	800857c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008554:	f7fd feb2 	bl	80062bc <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800855c:	f7fd feae 	bl	80062bc <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b64      	cmp	r3, #100	; 0x64
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e21f      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856e:	4b61      	ldr	r3, [pc, #388]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0f0      	beq.n	800855c <HAL_RCC_OscConfig+0xdc>
 800857a:	e014      	b.n	80085a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857c:	f7fd fe9e 	bl	80062bc <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008584:	f7fd fe9a 	bl	80062bc <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b64      	cmp	r3, #100	; 0x64
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e20b      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008596:	4b57      	ldr	r3, [pc, #348]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1f0      	bne.n	8008584 <HAL_RCC_OscConfig+0x104>
 80085a2:	e000      	b.n	80085a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d06f      	beq.n	8008692 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80085b2:	4b50      	ldr	r3, [pc, #320]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f003 030c 	and.w	r3, r3, #12
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d017      	beq.n	80085ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80085be:	4b4d      	ldr	r3, [pc, #308]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d105      	bne.n	80085d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80085ca:	4b4a      	ldr	r3, [pc, #296]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085d6:	4b47      	ldr	r3, [pc, #284]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80085de:	2b0c      	cmp	r3, #12
 80085e0:	d11c      	bne.n	800861c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085e2:	4b44      	ldr	r3, [pc, #272]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085ee:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <HAL_RCC_OscConfig+0x186>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d001      	beq.n	8008606 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e1d3      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008606:	4b3b      	ldr	r3, [pc, #236]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4937      	ldr	r1, [pc, #220]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008616:	4313      	orrs	r3, r2
 8008618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800861a:	e03a      	b.n	8008692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d020      	beq.n	8008666 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008624:	4b34      	ldr	r3, [pc, #208]	; (80086f8 <HAL_RCC_OscConfig+0x278>)
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862a:	f7fd fe47 	bl	80062bc <HAL_GetTick>
 800862e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008630:	e008      	b.n	8008644 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008632:	f7fd fe43 	bl	80062bc <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d901      	bls.n	8008644 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008640:	2303      	movs	r3, #3
 8008642:	e1b4      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008644:	4b2b      	ldr	r3, [pc, #172]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f0      	beq.n	8008632 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008650:	4b28      	ldr	r3, [pc, #160]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4925      	ldr	r1, [pc, #148]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008660:	4313      	orrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]
 8008664:	e015      	b.n	8008692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008666:	4b24      	ldr	r3, [pc, #144]	; (80086f8 <HAL_RCC_OscConfig+0x278>)
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7fd fe26 	bl	80062bc <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008674:	f7fd fe22 	bl	80062bc <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e193      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008686:	4b1b      	ldr	r3, [pc, #108]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d036      	beq.n	800870c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d016      	beq.n	80086d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <HAL_RCC_OscConfig+0x27c>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7fd fe06 	bl	80062bc <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086b4:	f7fd fe02 	bl	80062bc <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e173      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <HAL_RCC_OscConfig+0x274>)
 80086c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f0      	beq.n	80086b4 <HAL_RCC_OscConfig+0x234>
 80086d2:	e01b      	b.n	800870c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d4:	4b09      	ldr	r3, [pc, #36]	; (80086fc <HAL_RCC_OscConfig+0x27c>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086da:	f7fd fdef 	bl	80062bc <HAL_GetTick>
 80086de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086e0:	e00e      	b.n	8008700 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e2:	f7fd fdeb 	bl	80062bc <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d907      	bls.n	8008700 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e15c      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
 80086f4:	40023800 	.word	0x40023800
 80086f8:	42470000 	.word	0x42470000
 80086fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008700:	4b8a      	ldr	r3, [pc, #552]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ea      	bne.n	80086e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 8097 	beq.w	8008848 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800871e:	4b83      	ldr	r3, [pc, #524]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d10f      	bne.n	800874a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	4b7f      	ldr	r3, [pc, #508]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	4a7e      	ldr	r2, [pc, #504]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008738:	6413      	str	r3, [r2, #64]	; 0x40
 800873a:	4b7c      	ldr	r3, [pc, #496]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008742:	60bb      	str	r3, [r7, #8]
 8008744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800874a:	4b79      	ldr	r3, [pc, #484]	; (8008930 <HAL_RCC_OscConfig+0x4b0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008752:	2b00      	cmp	r3, #0
 8008754:	d118      	bne.n	8008788 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008756:	4b76      	ldr	r3, [pc, #472]	; (8008930 <HAL_RCC_OscConfig+0x4b0>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a75      	ldr	r2, [pc, #468]	; (8008930 <HAL_RCC_OscConfig+0x4b0>)
 800875c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008762:	f7fd fdab 	bl	80062bc <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800876a:	f7fd fda7 	bl	80062bc <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e118      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800877c:	4b6c      	ldr	r3, [pc, #432]	; (8008930 <HAL_RCC_OscConfig+0x4b0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0f0      	beq.n	800876a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d106      	bne.n	800879e <HAL_RCC_OscConfig+0x31e>
 8008790:	4b66      	ldr	r3, [pc, #408]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008794:	4a65      	ldr	r2, [pc, #404]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008796:	f043 0301 	orr.w	r3, r3, #1
 800879a:	6713      	str	r3, [r2, #112]	; 0x70
 800879c:	e01c      	b.n	80087d8 <HAL_RCC_OscConfig+0x358>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d10c      	bne.n	80087c0 <HAL_RCC_OscConfig+0x340>
 80087a6:	4b61      	ldr	r3, [pc, #388]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087aa:	4a60      	ldr	r2, [pc, #384]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087ac:	f043 0304 	orr.w	r3, r3, #4
 80087b0:	6713      	str	r3, [r2, #112]	; 0x70
 80087b2:	4b5e      	ldr	r3, [pc, #376]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	4a5d      	ldr	r2, [pc, #372]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087b8:	f043 0301 	orr.w	r3, r3, #1
 80087bc:	6713      	str	r3, [r2, #112]	; 0x70
 80087be:	e00b      	b.n	80087d8 <HAL_RCC_OscConfig+0x358>
 80087c0:	4b5a      	ldr	r3, [pc, #360]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c4:	4a59      	ldr	r2, [pc, #356]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087c6:	f023 0301 	bic.w	r3, r3, #1
 80087ca:	6713      	str	r3, [r2, #112]	; 0x70
 80087cc:	4b57      	ldr	r3, [pc, #348]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a56      	ldr	r2, [pc, #344]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80087d2:	f023 0304 	bic.w	r3, r3, #4
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d015      	beq.n	800880c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e0:	f7fd fd6c 	bl	80062bc <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e6:	e00a      	b.n	80087fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087e8:	f7fd fd68 	bl	80062bc <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e0d7      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087fe:	4b4b      	ldr	r3, [pc, #300]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0ee      	beq.n	80087e8 <HAL_RCC_OscConfig+0x368>
 800880a:	e014      	b.n	8008836 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880c:	f7fd fd56 	bl	80062bc <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008812:	e00a      	b.n	800882a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008814:	f7fd fd52 	bl	80062bc <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008822:	4293      	cmp	r3, r2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e0c1      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800882a:	4b40      	ldr	r3, [pc, #256]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 800882c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1ee      	bne.n	8008814 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d105      	bne.n	8008848 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800883c:	4b3b      	ldr	r3, [pc, #236]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	4a3a      	ldr	r2, [pc, #232]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80ad 	beq.w	80089ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008852:	4b36      	ldr	r3, [pc, #216]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 030c 	and.w	r3, r3, #12
 800885a:	2b08      	cmp	r3, #8
 800885c:	d060      	beq.n	8008920 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b02      	cmp	r3, #2
 8008864:	d145      	bne.n	80088f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008866:	4b33      	ldr	r3, [pc, #204]	; (8008934 <HAL_RCC_OscConfig+0x4b4>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800886c:	f7fd fd26 	bl	80062bc <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008874:	f7fd fd22 	bl	80062bc <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b02      	cmp	r3, #2
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e093      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008886:	4b29      	ldr	r3, [pc, #164]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f0      	bne.n	8008874 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69da      	ldr	r2, [r3, #28]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	019b      	lsls	r3, r3, #6
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	3b01      	subs	r3, #1
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	061b      	lsls	r3, r3, #24
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	071b      	lsls	r3, r3, #28
 80088be:	491b      	ldr	r1, [pc, #108]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088c4:	4b1b      	ldr	r3, [pc, #108]	; (8008934 <HAL_RCC_OscConfig+0x4b4>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ca:	f7fd fcf7 	bl	80062bc <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088d0:	e008      	b.n	80088e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088d2:	f7fd fcf3 	bl	80062bc <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e064      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088e4:	4b11      	ldr	r3, [pc, #68]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <HAL_RCC_OscConfig+0x452>
 80088f0:	e05c      	b.n	80089ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f2:	4b10      	ldr	r3, [pc, #64]	; (8008934 <HAL_RCC_OscConfig+0x4b4>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f8:	f7fd fce0 	bl	80062bc <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008900:	f7fd fcdc 	bl	80062bc <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e04d      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008912:	4b06      	ldr	r3, [pc, #24]	; (800892c <HAL_RCC_OscConfig+0x4ac>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0x480>
 800891e:	e045      	b.n	80089ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d107      	bne.n	8008938 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e040      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
 800892c:	40023800 	.word	0x40023800
 8008930:	40007000 	.word	0x40007000
 8008934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008938:	4b1f      	ldr	r3, [pc, #124]	; (80089b8 <HAL_RCC_OscConfig+0x538>)
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d030      	beq.n	80089a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008950:	429a      	cmp	r2, r3
 8008952:	d129      	bne.n	80089a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800895e:	429a      	cmp	r2, r3
 8008960:	d122      	bne.n	80089a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008968:	4013      	ands	r3, r2
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800896e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008970:	4293      	cmp	r3, r2
 8008972:	d119      	bne.n	80089a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	085b      	lsrs	r3, r3, #1
 8008980:	3b01      	subs	r3, #1
 8008982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008984:	429a      	cmp	r2, r3
 8008986:	d10f      	bne.n	80089a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008994:	429a      	cmp	r2, r3
 8008996:	d107      	bne.n	80089a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40023800 	.word	0x40023800

080089bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e07b      	b.n	8008ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d108      	bne.n	80089e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089de:	d009      	beq.n	80089f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	61da      	str	r2, [r3, #28]
 80089e6:	e005      	b.n	80089f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fc ffd0 	bl	80059b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	ea42 0103 	orr.w	r1, r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	f003 0104 	and.w	r1, r3, #4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	f003 0210 	and.w	r2, r3, #16
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69da      	ldr	r2, [r3, #28]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b08c      	sub	sp, #48	; 0x30
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	60b9      	str	r1, [r7, #8]
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008adc:	2301      	movs	r3, #1
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_SPI_TransmitReceive+0x26>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e198      	b.n	8008e26 <HAL_SPI_TransmitReceive+0x358>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008afc:	f7fd fbde 	bl	80062bc <HAL_GetTick>
 8008b00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b12:	887b      	ldrh	r3, [r7, #2]
 8008b14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d00f      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x70>
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b24:	d107      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d103      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x68>
 8008b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d003      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b36:	2302      	movs	r3, #2
 8008b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b3c:	e16d      	b.n	8008e1a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_SPI_TransmitReceive+0x82>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_SPI_TransmitReceive+0x82>
 8008b4a:	887b      	ldrh	r3, [r7, #2]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b56:	e160      	b.n	8008e1a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d003      	beq.n	8008b6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2205      	movs	r2, #5
 8008b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	887a      	ldrh	r2, [r7, #2]
 8008b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	887a      	ldrh	r2, [r7, #2]
 8008b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	887a      	ldrh	r2, [r7, #2]
 8008b8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	887a      	ldrh	r2, [r7, #2]
 8008b94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bac:	2b40      	cmp	r3, #64	; 0x40
 8008bae:	d007      	beq.n	8008bc0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc8:	d17c      	bne.n	8008cc4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_SPI_TransmitReceive+0x10a>
 8008bd2:	8b7b      	ldrh	r3, [r7, #26]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d16a      	bne.n	8008cae <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bdc:	881a      	ldrh	r2, [r3, #0]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be8:	1c9a      	adds	r2, r3, #2
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bfc:	e057      	b.n	8008cae <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d11b      	bne.n	8008c44 <HAL_SPI_TransmitReceive+0x176>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d016      	beq.n	8008c44 <HAL_SPI_TransmitReceive+0x176>
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d113      	bne.n	8008c44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	881a      	ldrh	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	1c9a      	adds	r2, r3, #2
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d119      	bne.n	8008c86 <HAL_SPI_TransmitReceive+0x1b8>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d014      	beq.n	8008c86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c66:	b292      	uxth	r2, r2
 8008c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	1c9a      	adds	r2, r3, #2
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c82:	2301      	movs	r3, #1
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c86:	f7fd fb19 	bl	80062bc <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d80b      	bhi.n	8008cae <HAL_SPI_TransmitReceive+0x1e0>
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c9c:	d007      	beq.n	8008cae <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008cac:	e0b5      	b.n	8008e1a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1a2      	bne.n	8008bfe <HAL_SPI_TransmitReceive+0x130>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d19d      	bne.n	8008bfe <HAL_SPI_TransmitReceive+0x130>
 8008cc2:	e080      	b.n	8008dc6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x204>
 8008ccc:	8b7b      	ldrh	r3, [r7, #26]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d16f      	bne.n	8008db2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	330c      	adds	r3, #12
 8008cdc:	7812      	ldrb	r2, [r2, #0]
 8008cde:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cf8:	e05b      	b.n	8008db2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d11c      	bne.n	8008d42 <HAL_SPI_TransmitReceive+0x274>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d017      	beq.n	8008d42 <HAL_SPI_TransmitReceive+0x274>
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d114      	bne.n	8008d42 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	330c      	adds	r3, #12
 8008d22:	7812      	ldrb	r2, [r2, #0]
 8008d24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d119      	bne.n	8008d84 <HAL_SPI_TransmitReceive+0x2b6>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d014      	beq.n	8008d84 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d80:	2301      	movs	r3, #1
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d84:	f7fd fa9a 	bl	80062bc <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d803      	bhi.n	8008d9c <HAL_SPI_TransmitReceive+0x2ce>
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d9a:	d102      	bne.n	8008da2 <HAL_SPI_TransmitReceive+0x2d4>
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d107      	bne.n	8008db2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008db0:	e033      	b.n	8008e1a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d19e      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x22c>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d199      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f000 f8b8 	bl	8008f40 <SPI_EndRxTxTransaction>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d006      	beq.n	8008de4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008de2:	e01a      	b.n	8008e1a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e10:	e003      	b.n	8008e1a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3730      	adds	r7, #48	; 0x30
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e40:	f7fd fa3c 	bl	80062bc <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	1a9b      	subs	r3, r3, r2
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e50:	f7fd fa34 	bl	80062bc <HAL_GetTick>
 8008e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e56:	4b39      	ldr	r3, [pc, #228]	; (8008f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	015b      	lsls	r3, r3, #5
 8008e5c:	0d1b      	lsrs	r3, r3, #20
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	fb02 f303 	mul.w	r3, r2, r3
 8008e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e66:	e054      	b.n	8008f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e6e:	d050      	beq.n	8008f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e70:	f7fd fa24 	bl	80062bc <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d902      	bls.n	8008e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d13d      	bne.n	8008f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e9e:	d111      	bne.n	8008ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ea8:	d004      	beq.n	8008eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb2:	d107      	bne.n	8008ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ecc:	d10f      	bne.n	8008eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e017      	b.n	8008f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	bf0c      	ite	eq
 8008f22:	2301      	moveq	r3, #1
 8008f24:	2300      	movne	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d19b      	bne.n	8008e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000014 	.word	0x20000014

08008f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2201      	movs	r2, #1
 8008f54:	2102      	movs	r1, #2
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f7ff ff6a 	bl	8008e30 <SPI_WaitFlagStateUntilTimeout>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d007      	beq.n	8008f72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f66:	f043 0220 	orr.w	r2, r3, #32
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e032      	b.n	8008fd8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f72:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <SPI_EndRxTxTransaction+0xa0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <SPI_EndRxTxTransaction+0xa4>)
 8008f78:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7c:	0d5b      	lsrs	r3, r3, #21
 8008f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f82:	fb02 f303 	mul.w	r3, r2, r3
 8008f86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f90:	d112      	bne.n	8008fb8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2180      	movs	r1, #128	; 0x80
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff ff47 	bl	8008e30 <SPI_WaitFlagStateUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d016      	beq.n	8008fd6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fac:	f043 0220 	orr.w	r2, r3, #32
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e00f      	b.n	8008fd8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fce:	2b80      	cmp	r3, #128	; 0x80
 8008fd0:	d0f2      	beq.n	8008fb8 <SPI_EndRxTxTransaction+0x78>
 8008fd2:	e000      	b.n	8008fd6 <SPI_EndRxTxTransaction+0x96>
        break;
 8008fd4:	bf00      	nop
  }

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000014 	.word	0x20000014
 8008fe4:	165e9f81 	.word	0x165e9f81

08008fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e041      	b.n	800907e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d106      	bne.n	8009014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7fc fd2a 	bl	8005a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2202      	movs	r2, #2
 8009018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3304      	adds	r3, #4
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f000 fe8c 	bl	8009d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b01      	cmp	r3, #1
 800909a:	d001      	beq.n	80090a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e04e      	b.n	800913e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a23      	ldr	r2, [pc, #140]	; (800914c <HAL_TIM_Base_Start_IT+0xc4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d022      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ca:	d01d      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a1f      	ldr	r2, [pc, #124]	; (8009150 <HAL_TIM_Base_Start_IT+0xc8>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d018      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a1e      	ldr	r2, [pc, #120]	; (8009154 <HAL_TIM_Base_Start_IT+0xcc>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d013      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1c      	ldr	r2, [pc, #112]	; (8009158 <HAL_TIM_Base_Start_IT+0xd0>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00e      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a1b      	ldr	r2, [pc, #108]	; (800915c <HAL_TIM_Base_Start_IT+0xd4>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d009      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a19      	ldr	r2, [pc, #100]	; (8009160 <HAL_TIM_Base_Start_IT+0xd8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d004      	beq.n	8009108 <HAL_TIM_Base_Start_IT+0x80>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a18      	ldr	r2, [pc, #96]	; (8009164 <HAL_TIM_Base_Start_IT+0xdc>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d111      	bne.n	800912c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 0307 	and.w	r3, r3, #7
 8009112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b06      	cmp	r3, #6
 8009118:	d010      	beq.n	800913c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f042 0201 	orr.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800912a:	e007      	b.n	800913c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0201 	orr.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	40010000 	.word	0x40010000
 8009150:	40000400 	.word	0x40000400
 8009154:	40000800 	.word	0x40000800
 8009158:	40000c00 	.word	0x40000c00
 800915c:	40010400 	.word	0x40010400
 8009160:	40014000 	.word	0x40014000
 8009164:	40001800 	.word	0x40001800

08009168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e041      	b.n	80091fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f839 	bl	8009206 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3304      	adds	r3, #4
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f000 fdcc 	bl	8009d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
	...

0800921c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d109      	bne.n	8009240 <HAL_TIM_PWM_Start+0x24>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b01      	cmp	r3, #1
 8009236:	bf14      	ite	ne
 8009238:	2301      	movne	r3, #1
 800923a:	2300      	moveq	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	e022      	b.n	8009286 <HAL_TIM_PWM_Start+0x6a>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2b04      	cmp	r3, #4
 8009244:	d109      	bne.n	800925a <HAL_TIM_PWM_Start+0x3e>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b01      	cmp	r3, #1
 8009250:	bf14      	ite	ne
 8009252:	2301      	movne	r3, #1
 8009254:	2300      	moveq	r3, #0
 8009256:	b2db      	uxtb	r3, r3
 8009258:	e015      	b.n	8009286 <HAL_TIM_PWM_Start+0x6a>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b08      	cmp	r3, #8
 800925e:	d109      	bne.n	8009274 <HAL_TIM_PWM_Start+0x58>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b01      	cmp	r3, #1
 800926a:	bf14      	ite	ne
 800926c:	2301      	movne	r3, #1
 800926e:	2300      	moveq	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	e008      	b.n	8009286 <HAL_TIM_PWM_Start+0x6a>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b01      	cmp	r3, #1
 800927e:	bf14      	ite	ne
 8009280:	2301      	movne	r3, #1
 8009282:	2300      	moveq	r3, #0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e07c      	b.n	8009388 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <HAL_TIM_PWM_Start+0x82>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800929c:	e013      	b.n	80092c6 <HAL_TIM_PWM_Start+0xaa>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d104      	bne.n	80092ae <HAL_TIM_PWM_Start+0x92>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ac:	e00b      	b.n	80092c6 <HAL_TIM_PWM_Start+0xaa>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d104      	bne.n	80092be <HAL_TIM_PWM_Start+0xa2>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092bc:	e003      	b.n	80092c6 <HAL_TIM_PWM_Start+0xaa>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2202      	movs	r2, #2
 80092c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2201      	movs	r2, #1
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 f958 	bl	800a584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a2d      	ldr	r2, [pc, #180]	; (8009390 <HAL_TIM_PWM_Start+0x174>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d004      	beq.n	80092e8 <HAL_TIM_PWM_Start+0xcc>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a2c      	ldr	r2, [pc, #176]	; (8009394 <HAL_TIM_PWM_Start+0x178>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <HAL_TIM_PWM_Start+0xd0>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <HAL_TIM_PWM_Start+0xd2>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009300:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a22      	ldr	r2, [pc, #136]	; (8009390 <HAL_TIM_PWM_Start+0x174>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d022      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009314:	d01d      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a1f      	ldr	r2, [pc, #124]	; (8009398 <HAL_TIM_PWM_Start+0x17c>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d018      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a1d      	ldr	r2, [pc, #116]	; (800939c <HAL_TIM_PWM_Start+0x180>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d013      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a1c      	ldr	r2, [pc, #112]	; (80093a0 <HAL_TIM_PWM_Start+0x184>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00e      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a16      	ldr	r2, [pc, #88]	; (8009394 <HAL_TIM_PWM_Start+0x178>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d009      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a18      	ldr	r2, [pc, #96]	; (80093a4 <HAL_TIM_PWM_Start+0x188>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d004      	beq.n	8009352 <HAL_TIM_PWM_Start+0x136>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a16      	ldr	r2, [pc, #88]	; (80093a8 <HAL_TIM_PWM_Start+0x18c>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d111      	bne.n	8009376 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b06      	cmp	r3, #6
 8009362:	d010      	beq.n	8009386 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009374:	e007      	b.n	8009386 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f042 0201 	orr.w	r2, r2, #1
 8009384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	40010000 	.word	0x40010000
 8009394:	40010400 	.word	0x40010400
 8009398:	40000400 	.word	0x40000400
 800939c:	40000800 	.word	0x40000800
 80093a0:	40000c00 	.word	0x40000c00
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40001800 	.word	0x40001800

080093ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e041      	b.n	8009442 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d106      	bne.n	80093d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f839 	bl	800944a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f000 fcaa 	bl	8009d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800944a:	b480      	push	{r7}
 800944c:	b083      	sub	sp, #12
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009452:	bf00      	nop
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	e097      	b.n	80095a2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fc fb62 	bl	8005b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094a2:	f023 0307 	bic.w	r3, r3, #7
 80094a6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	3304      	adds	r3, #4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f000 fc46 	bl	8009d44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094e0:	f023 0303 	bic.w	r3, r3, #3
 80094e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	689a      	ldr	r2, [r3, #8]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	4313      	orrs	r3, r2
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80094fe:	f023 030c 	bic.w	r3, r3, #12
 8009502:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800950a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800950e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	021b      	lsls	r3, r3, #8
 800951a:	4313      	orrs	r3, r2
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	4313      	orrs	r3, r2
 8009520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	011a      	lsls	r2, r3, #4
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	031b      	lsls	r3, r3, #12
 800952e:	4313      	orrs	r3, r2
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	4313      	orrs	r3, r2
 8009534:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800953c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009544:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	4313      	orrs	r3, r2
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095ba:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80095c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095ca:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095d2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d110      	bne.n	80095fc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d102      	bne.n	80095e6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80095e0:	7b7b      	ldrb	r3, [r7, #13]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d001      	beq.n	80095ea <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e069      	b.n	80096be <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2202      	movs	r2, #2
 80095ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2202      	movs	r2, #2
 80095f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095fa:	e031      	b.n	8009660 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d110      	bne.n	8009624 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d102      	bne.n	800960e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009608:	7b3b      	ldrb	r3, [r7, #12]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d001      	beq.n	8009612 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e055      	b.n	80096be <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2202      	movs	r2, #2
 8009616:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009622:	e01d      	b.n	8009660 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d108      	bne.n	800963c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d105      	bne.n	800963c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009630:	7b7b      	ldrb	r3, [r7, #13]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d102      	bne.n	800963c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009636:	7b3b      	ldrb	r3, [r7, #12]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d001      	beq.n	8009640 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e03e      	b.n	80096be <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2202      	movs	r2, #2
 800965c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_TIM_Encoder_Start+0xc4>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b04      	cmp	r3, #4
 800966a:	d008      	beq.n	800967e <HAL_TIM_Encoder_Start+0xd4>
 800966c:	e00f      	b.n	800968e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2201      	movs	r2, #1
 8009674:	2100      	movs	r1, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f000 ff84 	bl	800a584 <TIM_CCxChannelCmd>
      break;
 800967c:	e016      	b.n	80096ac <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2201      	movs	r2, #1
 8009684:	2104      	movs	r1, #4
 8009686:	4618      	mov	r0, r3
 8009688:	f000 ff7c 	bl	800a584 <TIM_CCxChannelCmd>
      break;
 800968c:	e00e      	b.n	80096ac <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2201      	movs	r2, #1
 8009694:	2100      	movs	r1, #0
 8009696:	4618      	mov	r0, r3
 8009698:	f000 ff74 	bl	800a584 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2201      	movs	r2, #1
 80096a2:	2104      	movs	r1, #4
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 ff6d 	bl	800a584 <TIM_CCxChannelCmd>
      break;
 80096aa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0201 	orr.w	r2, r2, #1
 80096ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d020      	beq.n	800972a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d01b      	beq.n	800972a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f06f 0202 	mvn.w	r2, #2
 80096fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 faf8 	bl	8009d06 <HAL_TIM_IC_CaptureCallback>
 8009716:	e005      	b.n	8009724 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 faea 	bl	8009cf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fafb 	bl	8009d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d020      	beq.n	8009776 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	2b00      	cmp	r3, #0
 800973c:	d01b      	beq.n	8009776 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f06f 0204 	mvn.w	r2, #4
 8009746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2202      	movs	r2, #2
 800974c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fad2 	bl	8009d06 <HAL_TIM_IC_CaptureCallback>
 8009762:	e005      	b.n	8009770 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fac4 	bl	8009cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fad5 	bl	8009d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f003 0308 	and.w	r3, r3, #8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d020      	beq.n	80097c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f003 0308 	and.w	r3, r3, #8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d01b      	beq.n	80097c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f06f 0208 	mvn.w	r2, #8
 8009792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2204      	movs	r2, #4
 8009798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	f003 0303 	and.w	r3, r3, #3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 faac 	bl	8009d06 <HAL_TIM_IC_CaptureCallback>
 80097ae:	e005      	b.n	80097bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 fa9e 	bl	8009cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 faaf 	bl	8009d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	f003 0310 	and.w	r3, r3, #16
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d020      	beq.n	800980e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f003 0310 	and.w	r3, r3, #16
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d01b      	beq.n	800980e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f06f 0210 	mvn.w	r2, #16
 80097de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2208      	movs	r2, #8
 80097e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa86 	bl	8009d06 <HAL_TIM_IC_CaptureCallback>
 80097fa:	e005      	b.n	8009808 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fa78 	bl	8009cf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa89 	bl	8009d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00c      	beq.n	8009832 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d007      	beq.n	8009832 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f06f 0201 	mvn.w	r2, #1
 800982a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7f9 fe53 	bl	80034d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800984e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 ff95 	bl	800a780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00c      	beq.n	800987a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa5a 	bl	8009d2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00c      	beq.n	800989e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f06f 0220 	mvn.w	r2, #32
 8009896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 ff67 	bl	800a76c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800989e:	bf00      	nop
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	60f8      	str	r0, [r7, #12]
 80098ae:	60b9      	str	r1, [r7, #8]
 80098b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e088      	b.n	80099d6 <HAL_TIM_IC_ConfigChannel+0x130>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d11b      	bne.n	800990a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80098e2:	f000 fc8b 	bl	800a1fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 020c 	bic.w	r2, r2, #12
 80098f4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6999      	ldr	r1, [r3, #24]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	619a      	str	r2, [r3, #24]
 8009908:	e060      	b.n	80099cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b04      	cmp	r3, #4
 800990e:	d11c      	bne.n	800994a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009920:	f000 fd0f 	bl	800a342 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009932:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6999      	ldr	r1, [r3, #24]
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	021a      	lsls	r2, r3, #8
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	619a      	str	r2, [r3, #24]
 8009948:	e040      	b.n	80099cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b08      	cmp	r3, #8
 800994e:	d11b      	bne.n	8009988 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009960:	f000 fd5c 	bl	800a41c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	69da      	ldr	r2, [r3, #28]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f022 020c 	bic.w	r2, r2, #12
 8009972:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69d9      	ldr	r1, [r3, #28]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	61da      	str	r2, [r3, #28]
 8009986:	e021      	b.n	80099cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b0c      	cmp	r3, #12
 800998c:	d11c      	bne.n	80099c8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800999e:	f000 fd79 	bl	800a494 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69da      	ldr	r2, [r3, #28]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80099b0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69d9      	ldr	r1, [r3, #28]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	021a      	lsls	r2, r3, #8
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	430a      	orrs	r2, r1
 80099c4:	61da      	str	r2, [r3, #28]
 80099c6:	e001      	b.n	80099cc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e0ae      	b.n	8009b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b0c      	cmp	r3, #12
 8009a0a:	f200 809f 	bhi.w	8009b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a49 	.word	0x08009a49
 8009a18:	08009b4d 	.word	0x08009b4d
 8009a1c:	08009b4d 	.word	0x08009b4d
 8009a20:	08009b4d 	.word	0x08009b4d
 8009a24:	08009a89 	.word	0x08009a89
 8009a28:	08009b4d 	.word	0x08009b4d
 8009a2c:	08009b4d 	.word	0x08009b4d
 8009a30:	08009b4d 	.word	0x08009b4d
 8009a34:	08009acb 	.word	0x08009acb
 8009a38:	08009b4d 	.word	0x08009b4d
 8009a3c:	08009b4d 	.word	0x08009b4d
 8009a40:	08009b4d 	.word	0x08009b4d
 8009a44:	08009b0b 	.word	0x08009b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fa24 	bl	8009e9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0208 	orr.w	r2, r2, #8
 8009a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699a      	ldr	r2, [r3, #24]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0204 	bic.w	r2, r2, #4
 8009a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6999      	ldr	r1, [r3, #24]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	619a      	str	r2, [r3, #24]
      break;
 8009a86:	e064      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fa74 	bl	8009f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6999      	ldr	r1, [r3, #24]
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	021a      	lsls	r2, r3, #8
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	619a      	str	r2, [r3, #24]
      break;
 8009ac8:	e043      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 fac9 	bl	800a068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	69da      	ldr	r2, [r3, #28]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f042 0208 	orr.w	r2, r2, #8
 8009ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	69da      	ldr	r2, [r3, #28]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0204 	bic.w	r2, r2, #4
 8009af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69d9      	ldr	r1, [r3, #28]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	61da      	str	r2, [r3, #28]
      break;
 8009b08:	e023      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fb1d 	bl	800a150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69da      	ldr	r2, [r3, #28]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	69d9      	ldr	r1, [r3, #28]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	021a      	lsls	r2, r3, #8
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	61da      	str	r2, [r3, #28]
      break;
 8009b4a:	e002      	b.n	8009b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_TIM_ConfigClockSource+0x1c>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e0b4      	b.n	8009cea <HAL_TIM_ConfigClockSource+0x186>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bb8:	d03e      	beq.n	8009c38 <HAL_TIM_ConfigClockSource+0xd4>
 8009bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bbe:	f200 8087 	bhi.w	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc6:	f000 8086 	beq.w	8009cd6 <HAL_TIM_ConfigClockSource+0x172>
 8009bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bce:	d87f      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b70      	cmp	r3, #112	; 0x70
 8009bd2:	d01a      	beq.n	8009c0a <HAL_TIM_ConfigClockSource+0xa6>
 8009bd4:	2b70      	cmp	r3, #112	; 0x70
 8009bd6:	d87b      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b60      	cmp	r3, #96	; 0x60
 8009bda:	d050      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x11a>
 8009bdc:	2b60      	cmp	r3, #96	; 0x60
 8009bde:	d877      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be0:	2b50      	cmp	r3, #80	; 0x50
 8009be2:	d03c      	beq.n	8009c5e <HAL_TIM_ConfigClockSource+0xfa>
 8009be4:	2b50      	cmp	r3, #80	; 0x50
 8009be6:	d873      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be8:	2b40      	cmp	r3, #64	; 0x40
 8009bea:	d058      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0x13a>
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d86f      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bf0:	2b30      	cmp	r3, #48	; 0x30
 8009bf2:	d064      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009bf4:	2b30      	cmp	r3, #48	; 0x30
 8009bf6:	d86b      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	d060      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d867      	bhi.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d05c      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d05a      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x15a>
 8009c08:	e062      	b.n	8009cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c1a:	f000 fc93 	bl	800a544 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	609a      	str	r2, [r3, #8]
      break;
 8009c36:	e04f      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c48:	f000 fc7c 	bl	800a544 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689a      	ldr	r2, [r3, #8]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c5a:	609a      	str	r2, [r3, #8]
      break;
 8009c5c:	e03c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f000 fb3a 	bl	800a2e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2150      	movs	r1, #80	; 0x50
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fc49 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009c7c:	e02c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f000 fb96 	bl	800a3bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2160      	movs	r1, #96	; 0x60
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fc39 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009c9c:	e01c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009caa:	461a      	mov	r2, r3
 8009cac:	f000 fb1a 	bl	800a2e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2140      	movs	r1, #64	; 0x40
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fc29 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009cbc:	e00c      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4610      	mov	r0, r2
 8009cca:	f000 fc20 	bl	800a50e <TIM_ITRx_SetConfig>
      break;
 8009cce:	e003      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd4:	e000      	b.n	8009cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
	...

08009d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a46      	ldr	r2, [pc, #280]	; (8009e70 <TIM_Base_SetConfig+0x12c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d013      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d62:	d00f      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a43      	ldr	r2, [pc, #268]	; (8009e74 <TIM_Base_SetConfig+0x130>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d00b      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a42      	ldr	r2, [pc, #264]	; (8009e78 <TIM_Base_SetConfig+0x134>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d007      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a41      	ldr	r2, [pc, #260]	; (8009e7c <TIM_Base_SetConfig+0x138>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d003      	beq.n	8009d84 <TIM_Base_SetConfig+0x40>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a40      	ldr	r2, [pc, #256]	; (8009e80 <TIM_Base_SetConfig+0x13c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d108      	bne.n	8009d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a35      	ldr	r2, [pc, #212]	; (8009e70 <TIM_Base_SetConfig+0x12c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d02b      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da4:	d027      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a32      	ldr	r2, [pc, #200]	; (8009e74 <TIM_Base_SetConfig+0x130>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d023      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a31      	ldr	r2, [pc, #196]	; (8009e78 <TIM_Base_SetConfig+0x134>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d01f      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a30      	ldr	r2, [pc, #192]	; (8009e7c <TIM_Base_SetConfig+0x138>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d01b      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a2f      	ldr	r2, [pc, #188]	; (8009e80 <TIM_Base_SetConfig+0x13c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d017      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a2e      	ldr	r2, [pc, #184]	; (8009e84 <TIM_Base_SetConfig+0x140>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d013      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a2d      	ldr	r2, [pc, #180]	; (8009e88 <TIM_Base_SetConfig+0x144>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d00f      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a2c      	ldr	r2, [pc, #176]	; (8009e8c <TIM_Base_SetConfig+0x148>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00b      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a2b      	ldr	r2, [pc, #172]	; (8009e90 <TIM_Base_SetConfig+0x14c>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d007      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a2a      	ldr	r2, [pc, #168]	; (8009e94 <TIM_Base_SetConfig+0x150>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d003      	beq.n	8009df6 <TIM_Base_SetConfig+0xb2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a29      	ldr	r2, [pc, #164]	; (8009e98 <TIM_Base_SetConfig+0x154>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d108      	bne.n	8009e08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	689a      	ldr	r2, [r3, #8]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a10      	ldr	r2, [pc, #64]	; (8009e70 <TIM_Base_SetConfig+0x12c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d003      	beq.n	8009e3c <TIM_Base_SetConfig+0xf8>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a12      	ldr	r2, [pc, #72]	; (8009e80 <TIM_Base_SetConfig+0x13c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d103      	bne.n	8009e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	691a      	ldr	r2, [r3, #16]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d105      	bne.n	8009e62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	f023 0201 	bic.w	r2, r3, #1
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	611a      	str	r2, [r3, #16]
  }
}
 8009e62:	bf00      	nop
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40000400 	.word	0x40000400
 8009e78:	40000800 	.word	0x40000800
 8009e7c:	40000c00 	.word	0x40000c00
 8009e80:	40010400 	.word	0x40010400
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40014400 	.word	0x40014400
 8009e8c:	40014800 	.word	0x40014800
 8009e90:	40001800 	.word	0x40001800
 8009e94:	40001c00 	.word	0x40001c00
 8009e98:	40002000 	.word	0x40002000

08009e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	f023 0201 	bic.w	r2, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0303 	bic.w	r3, r3, #3
 8009ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 0302 	bic.w	r3, r3, #2
 8009ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a20      	ldr	r2, [pc, #128]	; (8009f74 <TIM_OC1_SetConfig+0xd8>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d003      	beq.n	8009f00 <TIM_OC1_SetConfig+0x64>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a1f      	ldr	r2, [pc, #124]	; (8009f78 <TIM_OC1_SetConfig+0xdc>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d10c      	bne.n	8009f1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	f023 0308 	bic.w	r3, r3, #8
 8009f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f023 0304 	bic.w	r3, r3, #4
 8009f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <TIM_OC1_SetConfig+0xd8>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d003      	beq.n	8009f2a <TIM_OC1_SetConfig+0x8e>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a14      	ldr	r2, [pc, #80]	; (8009f78 <TIM_OC1_SetConfig+0xdc>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d111      	bne.n	8009f4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	621a      	str	r2, [r3, #32]
}
 8009f68:	bf00      	nop
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr
 8009f74:	40010000 	.word	0x40010000
 8009f78:	40010400 	.word	0x40010400

08009f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	f023 0210 	bic.w	r2, r3, #16
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	021b      	lsls	r3, r3, #8
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f023 0320 	bic.w	r3, r3, #32
 8009fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a22      	ldr	r2, [pc, #136]	; (800a060 <TIM_OC2_SetConfig+0xe4>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d003      	beq.n	8009fe4 <TIM_OC2_SetConfig+0x68>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a21      	ldr	r2, [pc, #132]	; (800a064 <TIM_OC2_SetConfig+0xe8>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d10d      	bne.n	800a000 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ffe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a17      	ldr	r2, [pc, #92]	; (800a060 <TIM_OC2_SetConfig+0xe4>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d003      	beq.n	800a010 <TIM_OC2_SetConfig+0x94>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a16      	ldr	r2, [pc, #88]	; (800a064 <TIM_OC2_SetConfig+0xe8>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d113      	bne.n	800a038 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a016:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a01e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	695b      	ldr	r3, [r3, #20]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	4313      	orrs	r3, r2
 800a02a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4313      	orrs	r3, r2
 800a036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	621a      	str	r2, [r3, #32]
}
 800a052:	bf00      	nop
 800a054:	371c      	adds	r7, #28
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	40010000 	.word	0x40010000
 800a064:	40010400 	.word	0x40010400

0800a068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a068:	b480      	push	{r7}
 800a06a:	b087      	sub	sp, #28
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	69db      	ldr	r3, [r3, #28]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f023 0303 	bic.w	r3, r3, #3
 800a09e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	697a      	ldr	r2, [r7, #20]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a21      	ldr	r2, [pc, #132]	; (800a148 <TIM_OC3_SetConfig+0xe0>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d003      	beq.n	800a0ce <TIM_OC3_SetConfig+0x66>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a20      	ldr	r2, [pc, #128]	; (800a14c <TIM_OC3_SetConfig+0xe4>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d10d      	bne.n	800a0ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	021b      	lsls	r3, r3, #8
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a16      	ldr	r2, [pc, #88]	; (800a148 <TIM_OC3_SetConfig+0xe0>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d003      	beq.n	800a0fa <TIM_OC3_SetConfig+0x92>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a15      	ldr	r2, [pc, #84]	; (800a14c <TIM_OC3_SetConfig+0xe4>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d113      	bne.n	800a122 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	011b      	lsls	r3, r3, #4
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	4313      	orrs	r3, r2
 800a120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	621a      	str	r2, [r3, #32]
}
 800a13c:	bf00      	nop
 800a13e:	371c      	adds	r7, #28
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	40010000 	.word	0x40010000
 800a14c:	40010400 	.word	0x40010400

0800a150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
 800a15e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a1b      	ldr	r3, [r3, #32]
 800a164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a19a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	031b      	lsls	r3, r3, #12
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a12      	ldr	r2, [pc, #72]	; (800a1f4 <TIM_OC4_SetConfig+0xa4>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d003      	beq.n	800a1b8 <TIM_OC4_SetConfig+0x68>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a11      	ldr	r2, [pc, #68]	; (800a1f8 <TIM_OC4_SetConfig+0xa8>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d109      	bne.n	800a1cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	695b      	ldr	r3, [r3, #20]
 800a1c4:	019b      	lsls	r3, r3, #6
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	621a      	str	r2, [r3, #32]
}
 800a1e6:	bf00      	nop
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	40010000 	.word	0x40010000
 800a1f8:	40010400 	.word	0x40010400

0800a1fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f023 0201 	bic.w	r2, r3, #1
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4a28      	ldr	r2, [pc, #160]	; (800a2c8 <TIM_TI1_SetConfig+0xcc>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d01b      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a230:	d017      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4a25      	ldr	r2, [pc, #148]	; (800a2cc <TIM_TI1_SetConfig+0xd0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d013      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4a24      	ldr	r2, [pc, #144]	; (800a2d0 <TIM_TI1_SetConfig+0xd4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00f      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4a23      	ldr	r2, [pc, #140]	; (800a2d4 <TIM_TI1_SetConfig+0xd8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00b      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4a22      	ldr	r2, [pc, #136]	; (800a2d8 <TIM_TI1_SetConfig+0xdc>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d007      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <TIM_TI1_SetConfig+0xe0>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_TI1_SetConfig+0x66>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4a20      	ldr	r2, [pc, #128]	; (800a2e0 <TIM_TI1_SetConfig+0xe4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d101      	bne.n	800a266 <TIM_TI1_SetConfig+0x6a>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <TIM_TI1_SetConfig+0x6c>
 800a266:	2300      	movs	r3, #0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	e003      	b.n	800a286 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a28c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	b2db      	uxtb	r3, r3
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	4313      	orrs	r3, r2
 800a298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f023 030a 	bic.w	r3, r3, #10
 800a2a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f003 030a 	and.w	r3, r3, #10
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	621a      	str	r2, [r3, #32]
}
 800a2ba:	bf00      	nop
 800a2bc:	371c      	adds	r7, #28
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40010000 	.word	0x40010000
 800a2cc:	40000400 	.word	0x40000400
 800a2d0:	40000800 	.word	0x40000800
 800a2d4:	40000c00 	.word	0x40000c00
 800a2d8:	40010400 	.word	0x40010400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40001800 	.word	0x40001800

0800a2e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f023 0201 	bic.w	r2, r3, #1
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a30e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f023 030a 	bic.w	r3, r3, #10
 800a320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	4313      	orrs	r3, r2
 800a328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	621a      	str	r2, [r3, #32]
}
 800a336:	bf00      	nop
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a342:	b480      	push	{r7}
 800a344:	b087      	sub	sp, #28
 800a346:	af00      	add	r7, sp, #0
 800a348:	60f8      	str	r0, [r7, #12]
 800a34a:	60b9      	str	r1, [r7, #8]
 800a34c:	607a      	str	r2, [r7, #4]
 800a34e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f023 0210 	bic.w	r2, r3, #16
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	021b      	lsls	r3, r3, #8
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a380:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	031b      	lsls	r3, r3, #12
 800a386:	b29b      	uxth	r3, r3
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a394:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	621a      	str	r2, [r3, #32]
}
 800a3b0:	bf00      	nop
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b087      	sub	sp, #28
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	6a1b      	ldr	r3, [r3, #32]
 800a3cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	f023 0210 	bic.w	r2, r3, #16
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	699b      	ldr	r3, [r3, #24]
 800a3de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	031b      	lsls	r3, r3, #12
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	4313      	orrs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4313      	orrs	r3, r2
 800a450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a458:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	4313      	orrs	r3, r2
 800a464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a46c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	021b      	lsls	r3, r3, #8
 800a472:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	4313      	orrs	r3, r2
 800a47a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	621a      	str	r2, [r3, #32]
}
 800a488:	bf00      	nop
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a494:	b480      	push	{r7}
 800a496:	b087      	sub	sp, #28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
 800a4a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6a1b      	ldr	r3, [r3, #32]
 800a4ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	031b      	lsls	r3, r3, #12
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a4e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	031b      	lsls	r3, r3, #12
 800a4ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	621a      	str	r2, [r3, #32]
}
 800a502:	bf00      	nop
 800a504:	371c      	adds	r7, #28
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a50e:	b480      	push	{r7}
 800a510:	b085      	sub	sp, #20
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f043 0307 	orr.w	r3, r3, #7
 800a530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	609a      	str	r2, [r3, #8]
}
 800a538:	bf00      	nop
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a544:	b480      	push	{r7}
 800a546:	b087      	sub	sp, #28
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a55e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	021a      	lsls	r2, r3, #8
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	431a      	orrs	r2, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	609a      	str	r2, [r3, #8]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f003 031f 	and.w	r3, r3, #31
 800a596:	2201      	movs	r2, #1
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a1a      	ldr	r2, [r3, #32]
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	401a      	ands	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6a1a      	ldr	r2, [r3, #32]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f003 031f 	and.w	r3, r3, #31
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5bc:	431a      	orrs	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e05a      	b.n	800a69e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	4313      	orrs	r3, r2
 800a618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a21      	ldr	r2, [pc, #132]	; (800a6ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d022      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a634:	d01d      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a1d      	ldr	r2, [pc, #116]	; (800a6b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d018      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a1b      	ldr	r2, [pc, #108]	; (800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d013      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a1a      	ldr	r2, [pc, #104]	; (800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d00e      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a18      	ldr	r2, [pc, #96]	; (800a6bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d009      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a17      	ldr	r2, [pc, #92]	; (800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d004      	beq.n	800a672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a15      	ldr	r2, [pc, #84]	; (800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d10c      	bne.n	800a68c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	4313      	orrs	r3, r2
 800a682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	40010000 	.word	0x40010000
 800a6b0:	40000400 	.word	0x40000400
 800a6b4:	40000800 	.word	0x40000800
 800a6b8:	40000c00 	.word	0x40000c00
 800a6bc:	40010400 	.word	0x40010400
 800a6c0:	40014000 	.word	0x40014000
 800a6c4:	40001800 	.word	0x40001800

0800a6c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d101      	bne.n	800a6e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e03d      	b.n	800a760 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	4313      	orrs	r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e042      	b.n	800a82c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d106      	bne.n	800a7c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fb fa72 	bl	8005ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2224      	movs	r2, #36	; 0x24
 800a7c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a7d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 ff37 	bl	800b64c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695a      	ldr	r2, [r3, #20]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a80c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08c      	sub	sp, #48	; 0x30
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d156      	bne.n	800a8fc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_UART_Transmit_DMA+0x26>
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e04f      	b.n	800a8fe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	88fa      	ldrh	r2, [r7, #6]
 800a868:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2221      	movs	r2, #33	; 0x21
 800a87a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a882:	4a21      	ldr	r2, [pc, #132]	; (800a908 <HAL_UART_Transmit_DMA+0xd4>)
 800a884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	4a20      	ldr	r2, [pc, #128]	; (800a90c <HAL_UART_Transmit_DMA+0xd8>)
 800a88c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	4a1f      	ldr	r2, [pc, #124]	; (800a910 <HAL_UART_Transmit_DMA+0xdc>)
 800a894:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	2200      	movs	r2, #0
 800a89c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a89e:	f107 0308 	add.w	r3, r7, #8
 800a8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	6819      	ldr	r1, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	f7fc fd4d 	bl	8007354 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a8c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3314      	adds	r3, #20
 800a8ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8da:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3314      	adds	r3, #20
 800a8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8e4:	627a      	str	r2, [r7, #36]	; 0x24
 800a8e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6a39      	ldr	r1, [r7, #32]
 800a8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3730      	adds	r7, #48	; 0x30
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	0800aed9 	.word	0x0800aed9
 800a90c:	0800af73 	.word	0x0800af73
 800a910:	0800b0f7 	.word	0x0800b0f7

0800a914 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	4613      	mov	r3, r2
 800a920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b20      	cmp	r3, #32
 800a92c:	d112      	bne.n	800a954 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_UART_Receive_DMA+0x26>
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e00b      	b.n	800a956 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	461a      	mov	r2, r3
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 fc1e 	bl	800b18c <UART_Start_Receive_DMA>
 800a950:	4603      	mov	r3, r0
 800a952:	e000      	b.n	800a956 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a954:	2302      	movs	r3, #2
  }
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b0ba      	sub	sp, #232	; 0xe8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a986:	2300      	movs	r3, #0
 800a988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a996:	f003 030f 	and.w	r3, r3, #15
 800a99a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a99e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10f      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9aa:	f003 0320 	and.w	r3, r3, #32
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x66>
 800a9b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fd85 	bl	800b4ce <UART_Receive_IT>
      return;
 800a9c4:	e25b      	b.n	800ae7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80de 	beq.w	800ab8c <HAL_UART_IRQHandler+0x22c>
 800a9d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f000 80d1 	beq.w	800ab8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00b      	beq.n	800aa0e <HAL_UART_IRQHandler+0xae>
 800a9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d005      	beq.n	800aa0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa06:	f043 0201 	orr.w	r2, r3, #1
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa12:	f003 0304 	and.w	r3, r3, #4
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00b      	beq.n	800aa32 <HAL_UART_IRQHandler+0xd2>
 800aa1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d005      	beq.n	800aa32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2a:	f043 0202 	orr.w	r2, r3, #2
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <HAL_UART_IRQHandler+0xf6>
 800aa3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d005      	beq.n	800aa56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4e:	f043 0204 	orr.w	r2, r3, #4
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aa56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5a:	f003 0308 	and.w	r3, r3, #8
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d011      	beq.n	800aa86 <HAL_UART_IRQHandler+0x126>
 800aa62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d105      	bne.n	800aa7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7e:	f043 0208 	orr.w	r2, r3, #8
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 81f2 	beq.w	800ae74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa94:	f003 0320 	and.w	r3, r3, #32
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d008      	beq.n	800aaae <HAL_UART_IRQHandler+0x14e>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa0:	f003 0320 	and.w	r3, r3, #32
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fd10 	bl	800b4ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	695b      	ldr	r3, [r3, #20]
 800aab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab8:	2b40      	cmp	r3, #64	; 0x40
 800aaba:	bf0c      	ite	eq
 800aabc:	2301      	moveq	r3, #1
 800aabe:	2300      	movne	r3, #0
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaca:	f003 0308 	and.w	r3, r3, #8
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d103      	bne.n	800aada <HAL_UART_IRQHandler+0x17a>
 800aad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d04f      	beq.n	800ab7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fc18 	bl	800b310 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaea:	2b40      	cmp	r3, #64	; 0x40
 800aaec:	d141      	bne.n	800ab72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3314      	adds	r3, #20
 800aaf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3314      	adds	r3, #20
 800ab16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab2a:	e841 2300 	strex	r3, r2, [r1]
 800ab2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1d9      	bne.n	800aaee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d013      	beq.n	800ab6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab46:	4a7e      	ldr	r2, [pc, #504]	; (800ad40 <HAL_UART_IRQHandler+0x3e0>)
 800ab48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fc fcc8 	bl	80074e4 <HAL_DMA_Abort_IT>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d016      	beq.n	800ab88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab68:	e00e      	b.n	800ab88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f99e 	bl	800aeac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab70:	e00a      	b.n	800ab88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f99a 	bl	800aeac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab78:	e006      	b.n	800ab88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f996 	bl	800aeac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ab86:	e175      	b.n	800ae74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab88:	bf00      	nop
    return;
 800ab8a:	e173      	b.n	800ae74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	f040 814f 	bne.w	800ae34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ab96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9a:	f003 0310 	and.w	r3, r3, #16
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8148 	beq.w	800ae34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aba8:	f003 0310 	and.w	r3, r3, #16
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 8141 	beq.w	800ae34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abb2:	2300      	movs	r3, #0
 800abb4:	60bb      	str	r3, [r7, #8]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	60bb      	str	r3, [r7, #8]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	60bb      	str	r3, [r7, #8]
 800abc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd2:	2b40      	cmp	r3, #64	; 0x40
 800abd4:	f040 80b6 	bne.w	800ad44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800abe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 8145 	beq.w	800ae78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800abf6:	429a      	cmp	r2, r3
 800abf8:	f080 813e 	bcs.w	800ae78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac0e:	f000 8088 	beq.w	800ad22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	330c      	adds	r3, #12
 800ac18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac20:	e853 3f00 	ldrex	r3, [r3]
 800ac24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	330c      	adds	r3, #12
 800ac3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ac3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ac4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ac56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1d9      	bne.n	800ac12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3314      	adds	r3, #20
 800ac64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac70:	f023 0301 	bic.w	r3, r3, #1
 800ac74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3314      	adds	r3, #20
 800ac7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac8e:	e841 2300 	strex	r3, r2, [r1]
 800ac92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1e1      	bne.n	800ac5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3314      	adds	r3, #20
 800aca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800acaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800acac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3314      	adds	r3, #20
 800acba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800acbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800acc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800acc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800acc6:	e841 2300 	strex	r3, r2, [r1]
 800acca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800accc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e3      	bne.n	800ac9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	330c      	adds	r3, #12
 800ace6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800acf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acf2:	f023 0310 	bic.w	r3, r3, #16
 800acf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	330c      	adds	r3, #12
 800ad00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad04:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad0c:	e841 2300 	strex	r3, r2, [r1]
 800ad10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1e3      	bne.n	800ace0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fc fb71 	bl	8007404 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2202      	movs	r2, #2
 800ad26:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f8c1 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad3e:	e09b      	b.n	800ae78 <HAL_UART_IRQHandler+0x518>
 800ad40:	0800b3d7 	.word	0x0800b3d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f000 808e 	beq.w	800ae7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ad60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 8089 	beq.w	800ae7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	330c      	adds	r3, #12
 800ad8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ad8e:	647a      	str	r2, [r7, #68]	; 0x44
 800ad90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e3      	bne.n	800ad6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3314      	adds	r3, #20
 800ada8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	623b      	str	r3, [r7, #32]
   return(result);
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	f023 0301 	bic.w	r3, r3, #1
 800adb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3314      	adds	r3, #20
 800adc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800adc6:	633a      	str	r2, [r7, #48]	; 0x30
 800adc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adce:	e841 2300 	strex	r3, r2, [r1]
 800add2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1e3      	bne.n	800ada2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2220      	movs	r2, #32
 800adde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	330c      	adds	r3, #12
 800adee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	e853 3f00 	ldrex	r3, [r3]
 800adf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0310 	bic.w	r3, r3, #16
 800adfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	330c      	adds	r3, #12
 800ae08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae0c:	61fa      	str	r2, [r7, #28]
 800ae0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	69b9      	ldr	r1, [r7, #24]
 800ae12:	69fa      	ldr	r2, [r7, #28]
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	617b      	str	r3, [r7, #20]
   return(result);
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e3      	bne.n	800ade8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f847 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae32:	e023      	b.n	800ae7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ae34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d009      	beq.n	800ae54 <HAL_UART_IRQHandler+0x4f4>
 800ae40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fad6 	bl	800b3fe <UART_Transmit_IT>
    return;
 800ae52:	e014      	b.n	800ae7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ae54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00e      	beq.n	800ae7e <HAL_UART_IRQHandler+0x51e>
 800ae60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d008      	beq.n	800ae7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fb16 	bl	800b49e <UART_EndTransmit_IT>
    return;
 800ae72:	e004      	b.n	800ae7e <HAL_UART_IRQHandler+0x51e>
    return;
 800ae74:	bf00      	nop
 800ae76:	e002      	b.n	800ae7e <HAL_UART_IRQHandler+0x51e>
      return;
 800ae78:	bf00      	nop
 800ae7a:	e000      	b.n	800ae7e <HAL_UART_IRQHandler+0x51e>
      return;
 800ae7c:	bf00      	nop
  }
}
 800ae7e:	37e8      	adds	r7, #232	; 0xe8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aeb4:	bf00      	nop
 800aeb6:	370c      	adds	r7, #12
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b090      	sub	sp, #64	; 0x40
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d137      	bne.n	800af64 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef6:	2200      	movs	r2, #0
 800aef8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aefa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	3314      	adds	r3, #20
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af04:	e853 3f00 	ldrex	r3, [r3]
 800af08:	623b      	str	r3, [r7, #32]
   return(result);
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af10:	63bb      	str	r3, [r7, #56]	; 0x38
 800af12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3314      	adds	r3, #20
 800af18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af1a:	633a      	str	r2, [r7, #48]	; 0x30
 800af1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af22:	e841 2300 	strex	r3, r2, [r1]
 800af26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1e5      	bne.n	800aefa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	330c      	adds	r3, #12
 800af34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af44:	637b      	str	r3, [r7, #52]	; 0x34
 800af46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	330c      	adds	r3, #12
 800af4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af4e:	61fa      	str	r2, [r7, #28]
 800af50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af52:	69b9      	ldr	r1, [r7, #24]
 800af54:	69fa      	ldr	r2, [r7, #28]
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	617b      	str	r3, [r7, #20]
   return(result);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e5      	bne.n	800af2e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af62:	e002      	b.n	800af6a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800af64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800af66:	f7f9 fa4d 	bl	8004404 <HAL_UART_TxCpltCallback>
}
 800af6a:	bf00      	nop
 800af6c:	3740      	adds	r7, #64	; 0x40
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7ff ff7f 	bl	800ae84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af86:	bf00      	nop
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b09c      	sub	sp, #112	; 0x70
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d172      	bne.n	800b090 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800afaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afac:	2200      	movs	r2, #0
 800afae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	330c      	adds	r3, #12
 800afb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800afc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800afc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	330c      	adds	r3, #12
 800afce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afd0:	65ba      	str	r2, [r7, #88]	; 0x58
 800afd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800afd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afd8:	e841 2300 	strex	r3, r2, [r1]
 800afdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800afde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e5      	bne.n	800afb0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3314      	adds	r3, #20
 800afea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	f023 0301 	bic.w	r3, r3, #1
 800affa:	667b      	str	r3, [r7, #100]	; 0x64
 800affc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3314      	adds	r3, #20
 800b002:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b004:	647a      	str	r2, [r7, #68]	; 0x44
 800b006:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b00a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b00c:	e841 2300 	strex	r3, r2, [r1]
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e5      	bne.n	800afe4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3314      	adds	r3, #20
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	623b      	str	r3, [r7, #32]
   return(result);
 800b028:	6a3b      	ldr	r3, [r7, #32]
 800b02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b02e:	663b      	str	r3, [r7, #96]	; 0x60
 800b030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3314      	adds	r3, #20
 800b036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b038:	633a      	str	r2, [r7, #48]	; 0x30
 800b03a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e5      	bne.n	800b018 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04e:	2220      	movs	r2, #32
 800b050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d119      	bne.n	800b090 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	330c      	adds	r3, #12
 800b062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f023 0310 	bic.w	r3, r3, #16
 800b072:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	330c      	adds	r3, #12
 800b07a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b07c:	61fa      	str	r2, [r7, #28]
 800b07e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	69b9      	ldr	r1, [r7, #24]
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	617b      	str	r3, [r7, #20]
   return(result);
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e5      	bne.n	800b05c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b092:	2200      	movs	r2, #0
 800b094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d106      	bne.n	800b0ac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0a6:	f7ff ff0b 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0aa:	e002      	b.n	800b0b2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b0ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b0ae:	f7f9 f9c5 	bl	800443c <HAL_UART_RxCpltCallback>
}
 800b0b2:	bf00      	nop
 800b0b4:	3770      	adds	r7, #112	; 0x70
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d108      	bne.n	800b0e8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f7ff feed 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0e6:	e002      	b.n	800b0ee <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7ff fed5 	bl	800ae98 <HAL_UART_RxHalfCpltCallback>
}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b112:	2b80      	cmp	r3, #128	; 0x80
 800b114:	bf0c      	ite	eq
 800b116:	2301      	moveq	r3, #1
 800b118:	2300      	movne	r3, #0
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b21      	cmp	r3, #33	; 0x21
 800b128:	d108      	bne.n	800b13c <UART_DMAError+0x46>
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b136:	68b8      	ldr	r0, [r7, #8]
 800b138:	f000 f8c2 	bl	800b2c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	bf0c      	ite	eq
 800b14a:	2301      	moveq	r3, #1
 800b14c:	2300      	movne	r3, #0
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b22      	cmp	r3, #34	; 0x22
 800b15c:	d108      	bne.n	800b170 <UART_DMAError+0x7a>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2200      	movs	r2, #0
 800b168:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b16a:	68b8      	ldr	r0, [r7, #8]
 800b16c:	f000 f8d0 	bl	800b310 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b174:	f043 0210 	orr.w	r2, r3, #16
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b17c:	68b8      	ldr	r0, [r7, #8]
 800b17e:	f7ff fe95 	bl	800aeac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b182:	bf00      	nop
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b098      	sub	sp, #96	; 0x60
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	4613      	mov	r3, r2
 800b198:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	88fa      	ldrh	r2, [r7, #6]
 800b1a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2222      	movs	r2, #34	; 0x22
 800b1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b8:	4a3e      	ldr	r2, [pc, #248]	; (800b2b4 <UART_Start_Receive_DMA+0x128>)
 800b1ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c0:	4a3d      	ldr	r2, [pc, #244]	; (800b2b8 <UART_Start_Receive_DMA+0x12c>)
 800b1c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c8:	4a3c      	ldr	r2, [pc, #240]	; (800b2bc <UART_Start_Receive_DMA+0x130>)
 800b1ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b1d4:	f107 0308 	add.w	r3, r7, #8
 800b1d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	88fb      	ldrh	r3, [r7, #6]
 800b1ec:	f7fc f8b2 	bl	8007354 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	613b      	str	r3, [r7, #16]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	613b      	str	r3, [r7, #16]
 800b204:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d019      	beq.n	800b242 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	330c      	adds	r3, #12
 800b214:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b21e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b224:	65bb      	str	r3, [r7, #88]	; 0x58
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	330c      	adds	r3, #12
 800b22c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b22e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e5      	bne.n	800b20e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3314      	adds	r3, #20
 800b248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	f043 0301 	orr.w	r3, r3, #1
 800b258:	657b      	str	r3, [r7, #84]	; 0x54
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3314      	adds	r3, #20
 800b260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b262:	63ba      	str	r2, [r7, #56]	; 0x38
 800b264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3314      	adds	r3, #20
 800b27c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	e853 3f00 	ldrex	r3, [r3]
 800b284:	617b      	str	r3, [r7, #20]
   return(result);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b28c:	653b      	str	r3, [r7, #80]	; 0x50
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3314      	adds	r3, #20
 800b294:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b296:	627a      	str	r2, [r7, #36]	; 0x24
 800b298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29a:	6a39      	ldr	r1, [r7, #32]
 800b29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e5      	bne.n	800b276 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3760      	adds	r7, #96	; 0x60
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	0800af8f 	.word	0x0800af8f
 800b2b8:	0800b0bb 	.word	0x0800b0bb
 800b2bc:	0800b0f7 	.word	0x0800b0f7

0800b2c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b089      	sub	sp, #36	; 0x24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	330c      	adds	r3, #12
 800b2ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	e853 3f00 	ldrex	r3, [r3]
 800b2d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b2de:	61fb      	str	r3, [r7, #28]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	330c      	adds	r3, #12
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	61ba      	str	r2, [r7, #24]
 800b2ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	6979      	ldr	r1, [r7, #20]
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	e841 2300 	strex	r3, r2, [r1]
 800b2f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e5      	bne.n	800b2c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b304:	bf00      	nop
 800b306:	3724      	adds	r7, #36	; 0x24
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b310:	b480      	push	{r7}
 800b312:	b095      	sub	sp, #84	; 0x54
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	330c      	adds	r3, #12
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b322:	e853 3f00 	ldrex	r3, [r3]
 800b326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b32e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	330c      	adds	r3, #12
 800b336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b338:	643a      	str	r2, [r7, #64]	; 0x40
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b33e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b340:	e841 2300 	strex	r3, r2, [r1]
 800b344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1e5      	bne.n	800b318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3314      	adds	r3, #20
 800b352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	f023 0301 	bic.w	r3, r3, #1
 800b362:	64bb      	str	r3, [r7, #72]	; 0x48
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3314      	adds	r3, #20
 800b36a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b36c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b36e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b374:	e841 2300 	strex	r3, r2, [r1]
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1e5      	bne.n	800b34c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	2b01      	cmp	r3, #1
 800b386:	d119      	bne.n	800b3bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	330c      	adds	r3, #12
 800b38e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	e853 3f00 	ldrex	r3, [r3]
 800b396:	60bb      	str	r3, [r7, #8]
   return(result);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f023 0310 	bic.w	r3, r3, #16
 800b39e:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	330c      	adds	r3, #12
 800b3a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3a8:	61ba      	str	r2, [r7, #24]
 800b3aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ac:	6979      	ldr	r1, [r7, #20]
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	e841 2300 	strex	r3, r2, [r1]
 800b3b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e5      	bne.n	800b388 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2220      	movs	r2, #32
 800b3c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b3ca:	bf00      	nop
 800b3cc:	3754      	adds	r7, #84	; 0x54
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f7ff fd5b 	bl	800aeac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3f6:	bf00      	nop
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b21      	cmp	r3, #33	; 0x21
 800b410:	d13e      	bne.n	800b490 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b41a:	d114      	bne.n	800b446 <UART_Transmit_IT+0x48>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d110      	bne.n	800b446 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a1b      	ldr	r3, [r3, #32]
 800b428:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b438:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	1c9a      	adds	r2, r3, #2
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	621a      	str	r2, [r3, #32]
 800b444:	e008      	b.n	800b458 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	1c59      	adds	r1, r3, #1
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	6211      	str	r1, [r2, #32]
 800b450:	781a      	ldrb	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	3b01      	subs	r3, #1
 800b460:	b29b      	uxth	r3, r3
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	4619      	mov	r1, r3
 800b466:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10f      	bne.n	800b48c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68da      	ldr	r2, [r3, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b47a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b48a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	e000      	b.n	800b492 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b490:	2302      	movs	r3, #2
  }
}
 800b492:	4618      	mov	r0, r3
 800b494:	3714      	adds	r7, #20
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2220      	movs	r2, #32
 800b4ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7f8 ffa0 	bl	8004404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b08c      	sub	sp, #48	; 0x30
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b22      	cmp	r3, #34	; 0x22
 800b4e0:	f040 80ae 	bne.w	800b640 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ec:	d117      	bne.n	800b51e <UART_Receive_IT+0x50>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d113      	bne.n	800b51e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	b29b      	uxth	r3, r3
 800b508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	1c9a      	adds	r2, r3, #2
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	629a      	str	r2, [r3, #40]	; 0x28
 800b51c:	e026      	b.n	800b56c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b522:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b530:	d007      	beq.n	800b542 <UART_Receive_IT+0x74>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <UART_Receive_IT+0x82>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54c:	701a      	strb	r2, [r3, #0]
 800b54e:	e008      	b.n	800b562 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b570:	b29b      	uxth	r3, r3
 800b572:	3b01      	subs	r3, #1
 800b574:	b29b      	uxth	r3, r3
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	4619      	mov	r1, r3
 800b57a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d15d      	bne.n	800b63c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 0220 	bic.w	r2, r2, #32
 800b58e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68da      	ldr	r2, [r3, #12]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b59e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	695a      	ldr	r2, [r3, #20]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f022 0201 	bic.w	r2, r2, #1
 800b5ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d135      	bne.n	800b632 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	330c      	adds	r3, #12
 800b5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	e853 3f00 	ldrex	r3, [r3]
 800b5da:	613b      	str	r3, [r7, #16]
   return(result);
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f023 0310 	bic.w	r3, r3, #16
 800b5e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	330c      	adds	r3, #12
 800b5ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ec:	623a      	str	r2, [r7, #32]
 800b5ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	69f9      	ldr	r1, [r7, #28]
 800b5f2:	6a3a      	ldr	r2, [r7, #32]
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e5      	bne.n	800b5cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f003 0310 	and.w	r3, r3, #16
 800b60a:	2b10      	cmp	r3, #16
 800b60c:	d10a      	bne.n	800b624 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fc48 	bl	800aec0 <HAL_UARTEx_RxEventCallback>
 800b630:	e002      	b.n	800b638 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7f8 ff02 	bl	800443c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	e002      	b.n	800b642 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	e000      	b.n	800b642 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b640:	2302      	movs	r3, #2
  }
}
 800b642:	4618      	mov	r0, r3
 800b644:	3730      	adds	r7, #48	; 0x30
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
	...

0800b64c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b64c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b650:	b0c0      	sub	sp, #256	; 0x100
 800b652:	af00      	add	r7, sp, #0
 800b654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b668:	68d9      	ldr	r1, [r3, #12]
 800b66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	ea40 0301 	orr.w	r3, r0, r1
 800b674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	431a      	orrs	r2, r3
 800b684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	431a      	orrs	r2, r3
 800b68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b690:	69db      	ldr	r3, [r3, #28]
 800b692:	4313      	orrs	r3, r2
 800b694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6a4:	f021 010c 	bic.w	r1, r1, #12
 800b6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6b2:	430b      	orrs	r3, r1
 800b6b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	6999      	ldr	r1, [r3, #24]
 800b6c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	ea40 0301 	orr.w	r3, r0, r1
 800b6d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	4b8f      	ldr	r3, [pc, #572]	; (800b918 <UART_SetConfig+0x2cc>)
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d005      	beq.n	800b6ec <UART_SetConfig+0xa0>
 800b6e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b8d      	ldr	r3, [pc, #564]	; (800b91c <UART_SetConfig+0x2d0>)
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d104      	bne.n	800b6f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6ec:	f7fc fc52 	bl	8007f94 <HAL_RCC_GetPCLK2Freq>
 800b6f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b6f4:	e003      	b.n	800b6fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6f6:	f7fc fc39 	bl	8007f6c <HAL_RCC_GetPCLK1Freq>
 800b6fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b708:	f040 810c 	bne.w	800b924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b70c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b710:	2200      	movs	r2, #0
 800b712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b71a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b71e:	4622      	mov	r2, r4
 800b720:	462b      	mov	r3, r5
 800b722:	1891      	adds	r1, r2, r2
 800b724:	65b9      	str	r1, [r7, #88]	; 0x58
 800b726:	415b      	adcs	r3, r3
 800b728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b72a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b72e:	4621      	mov	r1, r4
 800b730:	eb12 0801 	adds.w	r8, r2, r1
 800b734:	4629      	mov	r1, r5
 800b736:	eb43 0901 	adc.w	r9, r3, r1
 800b73a:	f04f 0200 	mov.w	r2, #0
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b74a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b74e:	4690      	mov	r8, r2
 800b750:	4699      	mov	r9, r3
 800b752:	4623      	mov	r3, r4
 800b754:	eb18 0303 	adds.w	r3, r8, r3
 800b758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b75c:	462b      	mov	r3, r5
 800b75e:	eb49 0303 	adc.w	r3, r9, r3
 800b762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b77a:	460b      	mov	r3, r1
 800b77c:	18db      	adds	r3, r3, r3
 800b77e:	653b      	str	r3, [r7, #80]	; 0x50
 800b780:	4613      	mov	r3, r2
 800b782:	eb42 0303 	adc.w	r3, r2, r3
 800b786:	657b      	str	r3, [r7, #84]	; 0x54
 800b788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b78c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b790:	f7f5 f9da 	bl	8000b48 <__aeabi_uldivmod>
 800b794:	4602      	mov	r2, r0
 800b796:	460b      	mov	r3, r1
 800b798:	4b61      	ldr	r3, [pc, #388]	; (800b920 <UART_SetConfig+0x2d4>)
 800b79a:	fba3 2302 	umull	r2, r3, r3, r2
 800b79e:	095b      	lsrs	r3, r3, #5
 800b7a0:	011c      	lsls	r4, r3, #4
 800b7a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b7b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	1891      	adds	r1, r2, r2
 800b7ba:	64b9      	str	r1, [r7, #72]	; 0x48
 800b7bc:	415b      	adcs	r3, r3
 800b7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b7c4:	4641      	mov	r1, r8
 800b7c6:	eb12 0a01 	adds.w	sl, r2, r1
 800b7ca:	4649      	mov	r1, r9
 800b7cc:	eb43 0b01 	adc.w	fp, r3, r1
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	f04f 0300 	mov.w	r3, #0
 800b7d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b7dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b7e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7e4:	4692      	mov	sl, r2
 800b7e6:	469b      	mov	fp, r3
 800b7e8:	4643      	mov	r3, r8
 800b7ea:	eb1a 0303 	adds.w	r3, sl, r3
 800b7ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	eb4b 0303 	adc.w	r3, fp, r3
 800b7f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b80c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b810:	460b      	mov	r3, r1
 800b812:	18db      	adds	r3, r3, r3
 800b814:	643b      	str	r3, [r7, #64]	; 0x40
 800b816:	4613      	mov	r3, r2
 800b818:	eb42 0303 	adc.w	r3, r2, r3
 800b81c:	647b      	str	r3, [r7, #68]	; 0x44
 800b81e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b826:	f7f5 f98f 	bl	8000b48 <__aeabi_uldivmod>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4611      	mov	r1, r2
 800b830:	4b3b      	ldr	r3, [pc, #236]	; (800b920 <UART_SetConfig+0x2d4>)
 800b832:	fba3 2301 	umull	r2, r3, r3, r1
 800b836:	095b      	lsrs	r3, r3, #5
 800b838:	2264      	movs	r2, #100	; 0x64
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	1acb      	subs	r3, r1, r3
 800b840:	00db      	lsls	r3, r3, #3
 800b842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b846:	4b36      	ldr	r3, [pc, #216]	; (800b920 <UART_SetConfig+0x2d4>)
 800b848:	fba3 2302 	umull	r2, r3, r3, r2
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b854:	441c      	add	r4, r3
 800b856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b868:	4642      	mov	r2, r8
 800b86a:	464b      	mov	r3, r9
 800b86c:	1891      	adds	r1, r2, r2
 800b86e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b870:	415b      	adcs	r3, r3
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b878:	4641      	mov	r1, r8
 800b87a:	1851      	adds	r1, r2, r1
 800b87c:	6339      	str	r1, [r7, #48]	; 0x30
 800b87e:	4649      	mov	r1, r9
 800b880:	414b      	adcs	r3, r1
 800b882:	637b      	str	r3, [r7, #52]	; 0x34
 800b884:	f04f 0200 	mov.w	r2, #0
 800b888:	f04f 0300 	mov.w	r3, #0
 800b88c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b890:	4659      	mov	r1, fp
 800b892:	00cb      	lsls	r3, r1, #3
 800b894:	4651      	mov	r1, sl
 800b896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b89a:	4651      	mov	r1, sl
 800b89c:	00ca      	lsls	r2, r1, #3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	189b      	adds	r3, r3, r2
 800b8a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8ac:	464b      	mov	r3, r9
 800b8ae:	460a      	mov	r2, r1
 800b8b0:	eb42 0303 	adc.w	r3, r2, r3
 800b8b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b8c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	18db      	adds	r3, r3, r3
 800b8d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	eb42 0303 	adc.w	r3, r2, r3
 800b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b8de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b8e2:	f7f5 f931 	bl	8000b48 <__aeabi_uldivmod>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4b0d      	ldr	r3, [pc, #52]	; (800b920 <UART_SetConfig+0x2d4>)
 800b8ec:	fba3 1302 	umull	r1, r3, r3, r2
 800b8f0:	095b      	lsrs	r3, r3, #5
 800b8f2:	2164      	movs	r1, #100	; 0x64
 800b8f4:	fb01 f303 	mul.w	r3, r1, r3
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	3332      	adds	r3, #50	; 0x32
 800b8fe:	4a08      	ldr	r2, [pc, #32]	; (800b920 <UART_SetConfig+0x2d4>)
 800b900:	fba2 2303 	umull	r2, r3, r2, r3
 800b904:	095b      	lsrs	r3, r3, #5
 800b906:	f003 0207 	and.w	r2, r3, #7
 800b90a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4422      	add	r2, r4
 800b912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b914:	e106      	b.n	800bb24 <UART_SetConfig+0x4d8>
 800b916:	bf00      	nop
 800b918:	40011000 	.word	0x40011000
 800b91c:	40011400 	.word	0x40011400
 800b920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b928:	2200      	movs	r2, #0
 800b92a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b92e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b936:	4642      	mov	r2, r8
 800b938:	464b      	mov	r3, r9
 800b93a:	1891      	adds	r1, r2, r2
 800b93c:	6239      	str	r1, [r7, #32]
 800b93e:	415b      	adcs	r3, r3
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
 800b942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b946:	4641      	mov	r1, r8
 800b948:	1854      	adds	r4, r2, r1
 800b94a:	4649      	mov	r1, r9
 800b94c:	eb43 0501 	adc.w	r5, r3, r1
 800b950:	f04f 0200 	mov.w	r2, #0
 800b954:	f04f 0300 	mov.w	r3, #0
 800b958:	00eb      	lsls	r3, r5, #3
 800b95a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b95e:	00e2      	lsls	r2, r4, #3
 800b960:	4614      	mov	r4, r2
 800b962:	461d      	mov	r5, r3
 800b964:	4643      	mov	r3, r8
 800b966:	18e3      	adds	r3, r4, r3
 800b968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b96c:	464b      	mov	r3, r9
 800b96e:	eb45 0303 	adc.w	r3, r5, r3
 800b972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b986:	f04f 0200 	mov.w	r2, #0
 800b98a:	f04f 0300 	mov.w	r3, #0
 800b98e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b992:	4629      	mov	r1, r5
 800b994:	008b      	lsls	r3, r1, #2
 800b996:	4621      	mov	r1, r4
 800b998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b99c:	4621      	mov	r1, r4
 800b99e:	008a      	lsls	r2, r1, #2
 800b9a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b9a4:	f7f5 f8d0 	bl	8000b48 <__aeabi_uldivmod>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	4b60      	ldr	r3, [pc, #384]	; (800bb30 <UART_SetConfig+0x4e4>)
 800b9ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b9b2:	095b      	lsrs	r3, r3, #5
 800b9b4:	011c      	lsls	r4, r3, #4
 800b9b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b9c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b9c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b9c8:	4642      	mov	r2, r8
 800b9ca:	464b      	mov	r3, r9
 800b9cc:	1891      	adds	r1, r2, r2
 800b9ce:	61b9      	str	r1, [r7, #24]
 800b9d0:	415b      	adcs	r3, r3
 800b9d2:	61fb      	str	r3, [r7, #28]
 800b9d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b9d8:	4641      	mov	r1, r8
 800b9da:	1851      	adds	r1, r2, r1
 800b9dc:	6139      	str	r1, [r7, #16]
 800b9de:	4649      	mov	r1, r9
 800b9e0:	414b      	adcs	r3, r1
 800b9e2:	617b      	str	r3, [r7, #20]
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	f04f 0300 	mov.w	r3, #0
 800b9ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b9f0:	4659      	mov	r1, fp
 800b9f2:	00cb      	lsls	r3, r1, #3
 800b9f4:	4651      	mov	r1, sl
 800b9f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9fa:	4651      	mov	r1, sl
 800b9fc:	00ca      	lsls	r2, r1, #3
 800b9fe:	4610      	mov	r0, r2
 800ba00:	4619      	mov	r1, r3
 800ba02:	4603      	mov	r3, r0
 800ba04:	4642      	mov	r2, r8
 800ba06:	189b      	adds	r3, r3, r2
 800ba08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba0c:	464b      	mov	r3, r9
 800ba0e:	460a      	mov	r2, r1
 800ba10:	eb42 0303 	adc.w	r3, r2, r3
 800ba14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba22:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ba24:	f04f 0200 	mov.w	r2, #0
 800ba28:	f04f 0300 	mov.w	r3, #0
 800ba2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ba30:	4649      	mov	r1, r9
 800ba32:	008b      	lsls	r3, r1, #2
 800ba34:	4641      	mov	r1, r8
 800ba36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba3a:	4641      	mov	r1, r8
 800ba3c:	008a      	lsls	r2, r1, #2
 800ba3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ba42:	f7f5 f881 	bl	8000b48 <__aeabi_uldivmod>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	4b38      	ldr	r3, [pc, #224]	; (800bb30 <UART_SetConfig+0x4e4>)
 800ba4e:	fba3 2301 	umull	r2, r3, r3, r1
 800ba52:	095b      	lsrs	r3, r3, #5
 800ba54:	2264      	movs	r2, #100	; 0x64
 800ba56:	fb02 f303 	mul.w	r3, r2, r3
 800ba5a:	1acb      	subs	r3, r1, r3
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	3332      	adds	r3, #50	; 0x32
 800ba60:	4a33      	ldr	r2, [pc, #204]	; (800bb30 <UART_SetConfig+0x4e4>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	095b      	lsrs	r3, r3, #5
 800ba68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba6c:	441c      	add	r4, r3
 800ba6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba72:	2200      	movs	r2, #0
 800ba74:	673b      	str	r3, [r7, #112]	; 0x70
 800ba76:	677a      	str	r2, [r7, #116]	; 0x74
 800ba78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	464b      	mov	r3, r9
 800ba80:	1891      	adds	r1, r2, r2
 800ba82:	60b9      	str	r1, [r7, #8]
 800ba84:	415b      	adcs	r3, r3
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba8c:	4641      	mov	r1, r8
 800ba8e:	1851      	adds	r1, r2, r1
 800ba90:	6039      	str	r1, [r7, #0]
 800ba92:	4649      	mov	r1, r9
 800ba94:	414b      	adcs	r3, r1
 800ba96:	607b      	str	r3, [r7, #4]
 800ba98:	f04f 0200 	mov.w	r2, #0
 800ba9c:	f04f 0300 	mov.w	r3, #0
 800baa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800baa4:	4659      	mov	r1, fp
 800baa6:	00cb      	lsls	r3, r1, #3
 800baa8:	4651      	mov	r1, sl
 800baaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800baae:	4651      	mov	r1, sl
 800bab0:	00ca      	lsls	r2, r1, #3
 800bab2:	4610      	mov	r0, r2
 800bab4:	4619      	mov	r1, r3
 800bab6:	4603      	mov	r3, r0
 800bab8:	4642      	mov	r2, r8
 800baba:	189b      	adds	r3, r3, r2
 800babc:	66bb      	str	r3, [r7, #104]	; 0x68
 800babe:	464b      	mov	r3, r9
 800bac0:	460a      	mov	r2, r1
 800bac2:	eb42 0303 	adc.w	r3, r2, r3
 800bac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	663b      	str	r3, [r7, #96]	; 0x60
 800bad2:	667a      	str	r2, [r7, #100]	; 0x64
 800bad4:	f04f 0200 	mov.w	r2, #0
 800bad8:	f04f 0300 	mov.w	r3, #0
 800badc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bae0:	4649      	mov	r1, r9
 800bae2:	008b      	lsls	r3, r1, #2
 800bae4:	4641      	mov	r1, r8
 800bae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800baea:	4641      	mov	r1, r8
 800baec:	008a      	lsls	r2, r1, #2
 800baee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800baf2:	f7f5 f829 	bl	8000b48 <__aeabi_uldivmod>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	4b0d      	ldr	r3, [pc, #52]	; (800bb30 <UART_SetConfig+0x4e4>)
 800bafc:	fba3 1302 	umull	r1, r3, r3, r2
 800bb00:	095b      	lsrs	r3, r3, #5
 800bb02:	2164      	movs	r1, #100	; 0x64
 800bb04:	fb01 f303 	mul.w	r3, r1, r3
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	3332      	adds	r3, #50	; 0x32
 800bb0e:	4a08      	ldr	r2, [pc, #32]	; (800bb30 <UART_SetConfig+0x4e4>)
 800bb10:	fba2 2303 	umull	r2, r3, r2, r3
 800bb14:	095b      	lsrs	r3, r3, #5
 800bb16:	f003 020f 	and.w	r2, r3, #15
 800bb1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4422      	add	r2, r4
 800bb22:	609a      	str	r2, [r3, #8]
}
 800bb24:	bf00      	nop
 800bb26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb30:	51eb851f 	.word	0x51eb851f

0800bb34 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bb42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb46:	2b84      	cmp	r3, #132	; 0x84
 800bb48:	d005      	beq.n	800bb56 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bb4a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	3303      	adds	r3, #3
 800bb54:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb56:	68fb      	ldr	r3, [r7, #12]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb68:	f000 fade 	bl	800c128 <vTaskStartScheduler>
  
  return osOK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb72:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb74:	b089      	sub	sp, #36	; 0x24
 800bb76:	af04      	add	r7, sp, #16
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d020      	beq.n	800bbc6 <osThreadCreate+0x54>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d01c      	beq.n	800bbc6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	685c      	ldr	r4, [r3, #4]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	691e      	ldr	r6, [r3, #16]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff ffc8 	bl	800bb34 <makeFreeRtosPriority>
 800bba4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbae:	9202      	str	r2, [sp, #8]
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	9100      	str	r1, [sp, #0]
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	4632      	mov	r2, r6
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 f8ed 	bl	800bd9a <xTaskCreateStatic>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e01c      	b.n	800bc00 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685c      	ldr	r4, [r3, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbd2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff ffaa 	bl	800bb34 <makeFreeRtosPriority>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	f107 030c 	add.w	r3, r7, #12
 800bbe6:	9301      	str	r3, [sp, #4]
 800bbe8:	9200      	str	r2, [sp, #0]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	4632      	mov	r2, r6
 800bbee:	4629      	mov	r1, r5
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 f92f 	bl	800be54 <xTaskCreate>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d001      	beq.n	800bc00 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e000      	b.n	800bc02 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bc00:	68fb      	ldr	r3, [r7, #12]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <osDelay+0x16>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	e000      	b.n	800bc22 <osDelay+0x18>
 800bc20:	2301      	movs	r3, #1
 800bc22:	4618      	mov	r0, r3
 800bc24:	f000 fa4c 	bl	800c0c0 <vTaskDelay>
  
  return osOK;
 800bc28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc32:	b480      	push	{r7}
 800bc34:	b083      	sub	sp, #12
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f103 0208 	add.w	r2, r3, #8
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc4a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f103 0208 	add.w	r2, r3, #8
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f103 0208 	add.w	r2, r3, #8
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc66:	bf00      	nop
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	689a      	ldr	r2, [r3, #8]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	683a      	ldr	r2, [r7, #0]
 800bcb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	601a      	str	r2, [r3, #0]
}
 800bcc8:	bf00      	nop
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcea:	d103      	bne.n	800bcf4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	e00c      	b.n	800bd0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	3308      	adds	r3, #8
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	e002      	b.n	800bd02 <vListInsert+0x2e>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d2f6      	bcs.n	800bcfc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	601a      	str	r2, [r3, #0]
}
 800bd3a:	bf00      	nop
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd46:	b480      	push	{r7}
 800bd48:	b085      	sub	sp, #20
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6892      	ldr	r2, [r2, #8]
 800bd5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	6852      	ldr	r2, [r2, #4]
 800bd66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d103      	bne.n	800bd7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	689a      	ldr	r2, [r3, #8]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b08e      	sub	sp, #56	; 0x38
 800bd9e:	af04      	add	r7, sp, #16
 800bda0:	60f8      	str	r0, [r7, #12]
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bdc0:	bf00      	nop
 800bdc2:	e7fe      	b.n	800bdc2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <xTaskCreateStatic+0x46>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	61fb      	str	r3, [r7, #28]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bde0:	2354      	movs	r3, #84	; 0x54
 800bde2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	2b54      	cmp	r3, #84	; 0x54
 800bde8:	d00a      	beq.n	800be00 <xTaskCreateStatic+0x66>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	61bb      	str	r3, [r7, #24]
}
 800bdfc:	bf00      	nop
 800bdfe:	e7fe      	b.n	800bdfe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01e      	beq.n	800be46 <xTaskCreateStatic+0xac>
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d01b      	beq.n	800be46 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be16:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	2202      	movs	r2, #2
 800be1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be20:	2300      	movs	r3, #0
 800be22:	9303      	str	r3, [sp, #12]
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	9302      	str	r3, [sp, #8]
 800be28:	f107 0314 	add.w	r3, r7, #20
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	68b9      	ldr	r1, [r7, #8]
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 f850 	bl	800bede <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be40:	f000 f8d4 	bl	800bfec <prvAddNewTaskToReadyList>
 800be44:	e001      	b.n	800be4a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be4a:	697b      	ldr	r3, [r7, #20]
	}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3728      	adds	r7, #40	; 0x28
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08c      	sub	sp, #48	; 0x30
 800be58:	af04      	add	r7, sp, #16
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	4613      	mov	r3, r2
 800be62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be64:	88fb      	ldrh	r3, [r7, #6]
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4618      	mov	r0, r3
 800be6a:	f000 fec5 	bl	800cbf8 <pvPortMalloc>
 800be6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00e      	beq.n	800be94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be76:	2054      	movs	r0, #84	; 0x54
 800be78:	f000 febe 	bl	800cbf8 <pvPortMalloc>
 800be7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d003      	beq.n	800be8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	631a      	str	r2, [r3, #48]	; 0x30
 800be8a:	e005      	b.n	800be98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800be8c:	6978      	ldr	r0, [r7, #20]
 800be8e:	f000 ff7f 	bl	800cd90 <vPortFree>
 800be92:	e001      	b.n	800be98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be94:	2300      	movs	r3, #0
 800be96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d017      	beq.n	800bece <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bea6:	88fa      	ldrh	r2, [r7, #6]
 800bea8:	2300      	movs	r3, #0
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	9302      	str	r3, [sp, #8]
 800beb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68b9      	ldr	r1, [r7, #8]
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f000 f80e 	bl	800bede <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bec2:	69f8      	ldr	r0, [r7, #28]
 800bec4:	f000 f892 	bl	800bfec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bec8:	2301      	movs	r3, #1
 800beca:	61bb      	str	r3, [r7, #24]
 800becc:	e002      	b.n	800bed4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bed2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bed4:	69bb      	ldr	r3, [r7, #24]
	}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3720      	adds	r7, #32
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b088      	sub	sp, #32
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	607a      	str	r2, [r7, #4]
 800beea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bef6:	3b01      	subs	r3, #1
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	f023 0307 	bic.w	r3, r3, #7
 800bf04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	f003 0307 	and.w	r3, r3, #7
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	617b      	str	r3, [r7, #20]
}
 800bf22:	bf00      	nop
 800bf24:	e7fe      	b.n	800bf24 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d01f      	beq.n	800bf6c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	61fb      	str	r3, [r7, #28]
 800bf30:	e012      	b.n	800bf58 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	4413      	add	r3, r2
 800bf38:	7819      	ldrb	r1, [r3, #0]
 800bf3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	4413      	add	r3, r2
 800bf40:	3334      	adds	r3, #52	; 0x34
 800bf42:	460a      	mov	r2, r1
 800bf44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d006      	beq.n	800bf60 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	3301      	adds	r3, #1
 800bf56:	61fb      	str	r3, [r7, #28]
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	2b0f      	cmp	r3, #15
 800bf5c:	d9e9      	bls.n	800bf32 <prvInitialiseNewTask+0x54>
 800bf5e:	e000      	b.n	800bf62 <prvInitialiseNewTask+0x84>
			{
				break;
 800bf60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf6a:	e003      	b.n	800bf74 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	2b06      	cmp	r3, #6
 800bf78:	d901      	bls.n	800bf7e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bf7a:	2306      	movs	r3, #6
 800bf7c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf88:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	3304      	adds	r3, #4
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff fe6c 	bl	800bc72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	3318      	adds	r3, #24
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff fe67 	bl	800bc72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	f1c3 0207 	rsb	r2, r3, #7
 800bfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfb8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	68f9      	ldr	r1, [r7, #12]
 800bfcc:	69b8      	ldr	r0, [r7, #24]
 800bfce:	f000 fc05 	bl	800c7dc <pxPortInitialiseStack>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfe4:	bf00      	nop
 800bfe6:	3720      	adds	r7, #32
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bff4:	f000 fd1e 	bl	800ca34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bff8:	4b2a      	ldr	r3, [pc, #168]	; (800c0a4 <prvAddNewTaskToReadyList+0xb8>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3301      	adds	r3, #1
 800bffe:	4a29      	ldr	r2, [pc, #164]	; (800c0a4 <prvAddNewTaskToReadyList+0xb8>)
 800c000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c002:	4b29      	ldr	r3, [pc, #164]	; (800c0a8 <prvAddNewTaskToReadyList+0xbc>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c00a:	4a27      	ldr	r2, [pc, #156]	; (800c0a8 <prvAddNewTaskToReadyList+0xbc>)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c010:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <prvAddNewTaskToReadyList+0xb8>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d110      	bne.n	800c03a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c018:	f000 fabc 	bl	800c594 <prvInitialiseTaskLists>
 800c01c:	e00d      	b.n	800c03a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c01e:	4b23      	ldr	r3, [pc, #140]	; (800c0ac <prvAddNewTaskToReadyList+0xc0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d109      	bne.n	800c03a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c026:	4b20      	ldr	r3, [pc, #128]	; (800c0a8 <prvAddNewTaskToReadyList+0xbc>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	429a      	cmp	r2, r3
 800c032:	d802      	bhi.n	800c03a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c034:	4a1c      	ldr	r2, [pc, #112]	; (800c0a8 <prvAddNewTaskToReadyList+0xbc>)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c03a:	4b1d      	ldr	r3, [pc, #116]	; (800c0b0 <prvAddNewTaskToReadyList+0xc4>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3301      	adds	r3, #1
 800c040:	4a1b      	ldr	r2, [pc, #108]	; (800c0b0 <prvAddNewTaskToReadyList+0xc4>)
 800c042:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c048:	2201      	movs	r2, #1
 800c04a:	409a      	lsls	r2, r3
 800c04c:	4b19      	ldr	r3, [pc, #100]	; (800c0b4 <prvAddNewTaskToReadyList+0xc8>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4313      	orrs	r3, r2
 800c052:	4a18      	ldr	r2, [pc, #96]	; (800c0b4 <prvAddNewTaskToReadyList+0xc8>)
 800c054:	6013      	str	r3, [r2, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05a:	4613      	mov	r3, r2
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	4413      	add	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4a15      	ldr	r2, [pc, #84]	; (800c0b8 <prvAddNewTaskToReadyList+0xcc>)
 800c064:	441a      	add	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3304      	adds	r3, #4
 800c06a:	4619      	mov	r1, r3
 800c06c:	4610      	mov	r0, r2
 800c06e:	f7ff fe0d 	bl	800bc8c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c072:	f000 fd0f 	bl	800ca94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c076:	4b0d      	ldr	r3, [pc, #52]	; (800c0ac <prvAddNewTaskToReadyList+0xc0>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00e      	beq.n	800c09c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c07e:	4b0a      	ldr	r3, [pc, #40]	; (800c0a8 <prvAddNewTaskToReadyList+0xbc>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c088:	429a      	cmp	r2, r3
 800c08a:	d207      	bcs.n	800c09c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c08c:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <prvAddNewTaskToReadyList+0xd0>)
 800c08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20001f40 	.word	0x20001f40
 800c0a8:	20001e40 	.word	0x20001e40
 800c0ac:	20001f4c 	.word	0x20001f4c
 800c0b0:	20001f5c 	.word	0x20001f5c
 800c0b4:	20001f48 	.word	0x20001f48
 800c0b8:	20001e44 	.word	0x20001e44
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d017      	beq.n	800c102 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c0d2:	4b13      	ldr	r3, [pc, #76]	; (800c120 <vTaskDelay+0x60>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00a      	beq.n	800c0f0 <vTaskDelay+0x30>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	60bb      	str	r3, [r7, #8]
}
 800c0ec:	bf00      	nop
 800c0ee:	e7fe      	b.n	800c0ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0f0:	f000 f87a 	bl	800c1e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0f4:	2100      	movs	r1, #0
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fb0a 	bl	800c710 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0fc:	f000 f882 	bl	800c204 <xTaskResumeAll>
 800c100:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d107      	bne.n	800c118 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c108:	4b06      	ldr	r3, [pc, #24]	; (800c124 <vTaskDelay+0x64>)
 800c10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c118:	bf00      	nop
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	20001f68 	.word	0x20001f68
 800c124:	e000ed04 	.word	0xe000ed04

0800c128 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b08a      	sub	sp, #40	; 0x28
 800c12c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c132:	2300      	movs	r3, #0
 800c134:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c136:	463a      	mov	r2, r7
 800c138:	1d39      	adds	r1, r7, #4
 800c13a:	f107 0308 	add.w	r3, r7, #8
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f4 fe80 	bl	8000e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	9202      	str	r2, [sp, #8]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	2300      	movs	r3, #0
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	2300      	movs	r3, #0
 800c154:	460a      	mov	r2, r1
 800c156:	491e      	ldr	r1, [pc, #120]	; (800c1d0 <vTaskStartScheduler+0xa8>)
 800c158:	481e      	ldr	r0, [pc, #120]	; (800c1d4 <vTaskStartScheduler+0xac>)
 800c15a:	f7ff fe1e 	bl	800bd9a <xTaskCreateStatic>
 800c15e:	4603      	mov	r3, r0
 800c160:	4a1d      	ldr	r2, [pc, #116]	; (800c1d8 <vTaskStartScheduler+0xb0>)
 800c162:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c164:	4b1c      	ldr	r3, [pc, #112]	; (800c1d8 <vTaskStartScheduler+0xb0>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c16c:	2301      	movs	r3, #1
 800c16e:	617b      	str	r3, [r7, #20]
 800c170:	e001      	b.n	800c176 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c172:	2300      	movs	r3, #0
 800c174:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d116      	bne.n	800c1aa <vTaskStartScheduler+0x82>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	613b      	str	r3, [r7, #16]
}
 800c18e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c190:	4b12      	ldr	r3, [pc, #72]	; (800c1dc <vTaskStartScheduler+0xb4>)
 800c192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c196:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c198:	4b11      	ldr	r3, [pc, #68]	; (800c1e0 <vTaskStartScheduler+0xb8>)
 800c19a:	2201      	movs	r2, #1
 800c19c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c19e:	4b11      	ldr	r3, [pc, #68]	; (800c1e4 <vTaskStartScheduler+0xbc>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c1a4:	f000 fba4 	bl	800c8f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c1a8:	e00e      	b.n	800c1c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b0:	d10a      	bne.n	800c1c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60fb      	str	r3, [r7, #12]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <vTaskStartScheduler+0x9e>
}
 800c1c8:	bf00      	nop
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	0800edf4 	.word	0x0800edf4
 800c1d4:	0800c565 	.word	0x0800c565
 800c1d8:	20001f64 	.word	0x20001f64
 800c1dc:	20001f60 	.word	0x20001f60
 800c1e0:	20001f4c 	.word	0x20001f4c
 800c1e4:	20001f44 	.word	0x20001f44

0800c1e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1ec:	4b04      	ldr	r3, [pc, #16]	; (800c200 <vTaskSuspendAll+0x18>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	4a03      	ldr	r2, [pc, #12]	; (800c200 <vTaskSuspendAll+0x18>)
 800c1f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1f6:	bf00      	nop
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr
 800c200:	20001f68 	.word	0x20001f68

0800c204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c212:	4b41      	ldr	r3, [pc, #260]	; (800c318 <xTaskResumeAll+0x114>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10a      	bne.n	800c230 <xTaskResumeAll+0x2c>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	603b      	str	r3, [r7, #0]
}
 800c22c:	bf00      	nop
 800c22e:	e7fe      	b.n	800c22e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c230:	f000 fc00 	bl	800ca34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c234:	4b38      	ldr	r3, [pc, #224]	; (800c318 <xTaskResumeAll+0x114>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	3b01      	subs	r3, #1
 800c23a:	4a37      	ldr	r2, [pc, #220]	; (800c318 <xTaskResumeAll+0x114>)
 800c23c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c23e:	4b36      	ldr	r3, [pc, #216]	; (800c318 <xTaskResumeAll+0x114>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d161      	bne.n	800c30a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c246:	4b35      	ldr	r3, [pc, #212]	; (800c31c <xTaskResumeAll+0x118>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d05d      	beq.n	800c30a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c24e:	e02e      	b.n	800c2ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c250:	4b33      	ldr	r3, [pc, #204]	; (800c320 <xTaskResumeAll+0x11c>)
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	3318      	adds	r3, #24
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7ff fd72 	bl	800bd46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3304      	adds	r3, #4
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff fd6d 	bl	800bd46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	2201      	movs	r2, #1
 800c272:	409a      	lsls	r2, r3
 800c274:	4b2b      	ldr	r3, [pc, #172]	; (800c324 <xTaskResumeAll+0x120>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4313      	orrs	r3, r2
 800c27a:	4a2a      	ldr	r2, [pc, #168]	; (800c324 <xTaskResumeAll+0x120>)
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c282:	4613      	mov	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4a27      	ldr	r2, [pc, #156]	; (800c328 <xTaskResumeAll+0x124>)
 800c28c:	441a      	add	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3304      	adds	r3, #4
 800c292:	4619      	mov	r1, r3
 800c294:	4610      	mov	r0, r2
 800c296:	f7ff fcf9 	bl	800bc8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c29e:	4b23      	ldr	r3, [pc, #140]	; (800c32c <xTaskResumeAll+0x128>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c2a8:	4b21      	ldr	r3, [pc, #132]	; (800c330 <xTaskResumeAll+0x12c>)
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2ae:	4b1c      	ldr	r3, [pc, #112]	; (800c320 <xTaskResumeAll+0x11c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1cc      	bne.n	800c250 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2bc:	f000 fa08 	bl	800c6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2c0:	4b1c      	ldr	r3, [pc, #112]	; (800c334 <xTaskResumeAll+0x130>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d010      	beq.n	800c2ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2cc:	f000 f836 	bl	800c33c <xTaskIncrementTick>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c2d6:	4b16      	ldr	r3, [pc, #88]	; (800c330 <xTaskResumeAll+0x12c>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1f1      	bne.n	800c2cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c2e8:	4b12      	ldr	r3, [pc, #72]	; (800c334 <xTaskResumeAll+0x130>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2ee:	4b10      	ldr	r3, [pc, #64]	; (800c330 <xTaskResumeAll+0x12c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d009      	beq.n	800c30a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2fa:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <xTaskResumeAll+0x134>)
 800c2fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c30a:	f000 fbc3 	bl	800ca94 <vPortExitCritical>

	return xAlreadyYielded;
 800c30e:	68bb      	ldr	r3, [r7, #8]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	20001f68 	.word	0x20001f68
 800c31c:	20001f40 	.word	0x20001f40
 800c320:	20001f00 	.word	0x20001f00
 800c324:	20001f48 	.word	0x20001f48
 800c328:	20001e44 	.word	0x20001e44
 800c32c:	20001e40 	.word	0x20001e40
 800c330:	20001f54 	.word	0x20001f54
 800c334:	20001f50 	.word	0x20001f50
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c346:	4b4e      	ldr	r3, [pc, #312]	; (800c480 <xTaskIncrementTick+0x144>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f040 808e 	bne.w	800c46c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c350:	4b4c      	ldr	r3, [pc, #304]	; (800c484 <xTaskIncrementTick+0x148>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3301      	adds	r3, #1
 800c356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c358:	4a4a      	ldr	r2, [pc, #296]	; (800c484 <xTaskIncrementTick+0x148>)
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d120      	bne.n	800c3a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c364:	4b48      	ldr	r3, [pc, #288]	; (800c488 <xTaskIncrementTick+0x14c>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <xTaskIncrementTick+0x48>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	603b      	str	r3, [r7, #0]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <xTaskIncrementTick+0x46>
 800c384:	4b40      	ldr	r3, [pc, #256]	; (800c488 <xTaskIncrementTick+0x14c>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	4b40      	ldr	r3, [pc, #256]	; (800c48c <xTaskIncrementTick+0x150>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a3e      	ldr	r2, [pc, #248]	; (800c488 <xTaskIncrementTick+0x14c>)
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	4a3e      	ldr	r2, [pc, #248]	; (800c48c <xTaskIncrementTick+0x150>)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	4b3d      	ldr	r3, [pc, #244]	; (800c490 <xTaskIncrementTick+0x154>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3301      	adds	r3, #1
 800c39e:	4a3c      	ldr	r2, [pc, #240]	; (800c490 <xTaskIncrementTick+0x154>)
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	f000 f995 	bl	800c6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3a6:	4b3b      	ldr	r3, [pc, #236]	; (800c494 <xTaskIncrementTick+0x158>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d348      	bcc.n	800c442 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3b0:	4b35      	ldr	r3, [pc, #212]	; (800c488 <xTaskIncrementTick+0x14c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d104      	bne.n	800c3c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ba:	4b36      	ldr	r3, [pc, #216]	; (800c494 <xTaskIncrementTick+0x158>)
 800c3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3c0:	601a      	str	r2, [r3, #0]
					break;
 800c3c2:	e03e      	b.n	800c442 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3c4:	4b30      	ldr	r3, [pc, #192]	; (800c488 <xTaskIncrementTick+0x14c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d203      	bcs.n	800c3e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c3dc:	4a2d      	ldr	r2, [pc, #180]	; (800c494 <xTaskIncrementTick+0x158>)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c3e2:	e02e      	b.n	800c442 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff fcac 	bl	800bd46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d004      	beq.n	800c400 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	3318      	adds	r3, #24
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7ff fca3 	bl	800bd46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	2201      	movs	r2, #1
 800c406:	409a      	lsls	r2, r3
 800c408:	4b23      	ldr	r3, [pc, #140]	; (800c498 <xTaskIncrementTick+0x15c>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	4a22      	ldr	r2, [pc, #136]	; (800c498 <xTaskIncrementTick+0x15c>)
 800c410:	6013      	str	r3, [r2, #0]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c416:	4613      	mov	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4a1f      	ldr	r2, [pc, #124]	; (800c49c <xTaskIncrementTick+0x160>)
 800c420:	441a      	add	r2, r3
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	3304      	adds	r3, #4
 800c426:	4619      	mov	r1, r3
 800c428:	4610      	mov	r0, r2
 800c42a:	f7ff fc2f 	bl	800bc8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c432:	4b1b      	ldr	r3, [pc, #108]	; (800c4a0 <xTaskIncrementTick+0x164>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	429a      	cmp	r2, r3
 800c43a:	d3b9      	bcc.n	800c3b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c43c:	2301      	movs	r3, #1
 800c43e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c440:	e7b6      	b.n	800c3b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c442:	4b17      	ldr	r3, [pc, #92]	; (800c4a0 <xTaskIncrementTick+0x164>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c448:	4914      	ldr	r1, [pc, #80]	; (800c49c <xTaskIncrementTick+0x160>)
 800c44a:	4613      	mov	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d901      	bls.n	800c45e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c45a:	2301      	movs	r3, #1
 800c45c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c45e:	4b11      	ldr	r3, [pc, #68]	; (800c4a4 <xTaskIncrementTick+0x168>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d007      	beq.n	800c476 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c466:	2301      	movs	r3, #1
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	e004      	b.n	800c476 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c46c:	4b0e      	ldr	r3, [pc, #56]	; (800c4a8 <xTaskIncrementTick+0x16c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	4a0d      	ldr	r2, [pc, #52]	; (800c4a8 <xTaskIncrementTick+0x16c>)
 800c474:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c476:	697b      	ldr	r3, [r7, #20]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20001f68 	.word	0x20001f68
 800c484:	20001f44 	.word	0x20001f44
 800c488:	20001ef8 	.word	0x20001ef8
 800c48c:	20001efc 	.word	0x20001efc
 800c490:	20001f58 	.word	0x20001f58
 800c494:	20001f60 	.word	0x20001f60
 800c498:	20001f48 	.word	0x20001f48
 800c49c:	20001e44 	.word	0x20001e44
 800c4a0:	20001e40 	.word	0x20001e40
 800c4a4:	20001f54 	.word	0x20001f54
 800c4a8:	20001f50 	.word	0x20001f50

0800c4ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b087      	sub	sp, #28
 800c4b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4b2:	4b27      	ldr	r3, [pc, #156]	; (800c550 <vTaskSwitchContext+0xa4>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d003      	beq.n	800c4c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4ba:	4b26      	ldr	r3, [pc, #152]	; (800c554 <vTaskSwitchContext+0xa8>)
 800c4bc:	2201      	movs	r2, #1
 800c4be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4c0:	e03f      	b.n	800c542 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c4c2:	4b24      	ldr	r3, [pc, #144]	; (800c554 <vTaskSwitchContext+0xa8>)
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c8:	4b23      	ldr	r3, [pc, #140]	; (800c558 <vTaskSwitchContext+0xac>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	fab3 f383 	clz	r3, r3
 800c4d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	f1c3 031f 	rsb	r3, r3, #31
 800c4dc:	617b      	str	r3, [r7, #20]
 800c4de:	491f      	ldr	r1, [pc, #124]	; (800c55c <vTaskSwitchContext+0xb0>)
 800c4e0:	697a      	ldr	r2, [r7, #20]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4413      	add	r3, r2
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	440b      	add	r3, r1
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10a      	bne.n	800c508 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	607b      	str	r3, [r7, #4]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <vTaskSwitchContext+0x5a>
 800c508:	697a      	ldr	r2, [r7, #20]
 800c50a:	4613      	mov	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4a12      	ldr	r2, [pc, #72]	; (800c55c <vTaskSwitchContext+0xb0>)
 800c514:	4413      	add	r3, r2
 800c516:	613b      	str	r3, [r7, #16]
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	685a      	ldr	r2, [r3, #4]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	605a      	str	r2, [r3, #4]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	3308      	adds	r3, #8
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d104      	bne.n	800c538 <vTaskSwitchContext+0x8c>
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	605a      	str	r2, [r3, #4]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	4a08      	ldr	r2, [pc, #32]	; (800c560 <vTaskSwitchContext+0xb4>)
 800c540:	6013      	str	r3, [r2, #0]
}
 800c542:	bf00      	nop
 800c544:	371c      	adds	r7, #28
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	20001f68 	.word	0x20001f68
 800c554:	20001f54 	.word	0x20001f54
 800c558:	20001f48 	.word	0x20001f48
 800c55c:	20001e44 	.word	0x20001e44
 800c560:	20001e40 	.word	0x20001e40

0800c564 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c56c:	f000 f852 	bl	800c614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c570:	4b06      	ldr	r3, [pc, #24]	; (800c58c <prvIdleTask+0x28>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d9f9      	bls.n	800c56c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c578:	4b05      	ldr	r3, [pc, #20]	; (800c590 <prvIdleTask+0x2c>)
 800c57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57e:	601a      	str	r2, [r3, #0]
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c588:	e7f0      	b.n	800c56c <prvIdleTask+0x8>
 800c58a:	bf00      	nop
 800c58c:	20001e44 	.word	0x20001e44
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b082      	sub	sp, #8
 800c598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c59a:	2300      	movs	r3, #0
 800c59c:	607b      	str	r3, [r7, #4]
 800c59e:	e00c      	b.n	800c5ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4a12      	ldr	r2, [pc, #72]	; (800c5f4 <prvInitialiseTaskLists+0x60>)
 800c5ac:	4413      	add	r3, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff fb3f 	bl	800bc32 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	607b      	str	r3, [r7, #4]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b06      	cmp	r3, #6
 800c5be:	d9ef      	bls.n	800c5a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5c0:	480d      	ldr	r0, [pc, #52]	; (800c5f8 <prvInitialiseTaskLists+0x64>)
 800c5c2:	f7ff fb36 	bl	800bc32 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5c6:	480d      	ldr	r0, [pc, #52]	; (800c5fc <prvInitialiseTaskLists+0x68>)
 800c5c8:	f7ff fb33 	bl	800bc32 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5cc:	480c      	ldr	r0, [pc, #48]	; (800c600 <prvInitialiseTaskLists+0x6c>)
 800c5ce:	f7ff fb30 	bl	800bc32 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5d2:	480c      	ldr	r0, [pc, #48]	; (800c604 <prvInitialiseTaskLists+0x70>)
 800c5d4:	f7ff fb2d 	bl	800bc32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5d8:	480b      	ldr	r0, [pc, #44]	; (800c608 <prvInitialiseTaskLists+0x74>)
 800c5da:	f7ff fb2a 	bl	800bc32 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5de:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <prvInitialiseTaskLists+0x78>)
 800c5e0:	4a05      	ldr	r2, [pc, #20]	; (800c5f8 <prvInitialiseTaskLists+0x64>)
 800c5e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5e4:	4b0a      	ldr	r3, [pc, #40]	; (800c610 <prvInitialiseTaskLists+0x7c>)
 800c5e6:	4a05      	ldr	r2, [pc, #20]	; (800c5fc <prvInitialiseTaskLists+0x68>)
 800c5e8:	601a      	str	r2, [r3, #0]
}
 800c5ea:	bf00      	nop
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20001e44 	.word	0x20001e44
 800c5f8:	20001ed0 	.word	0x20001ed0
 800c5fc:	20001ee4 	.word	0x20001ee4
 800c600:	20001f00 	.word	0x20001f00
 800c604:	20001f14 	.word	0x20001f14
 800c608:	20001f2c 	.word	0x20001f2c
 800c60c:	20001ef8 	.word	0x20001ef8
 800c610:	20001efc 	.word	0x20001efc

0800c614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c61a:	e019      	b.n	800c650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c61c:	f000 fa0a 	bl	800ca34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c620:	4b10      	ldr	r3, [pc, #64]	; (800c664 <prvCheckTasksWaitingTermination+0x50>)
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	68db      	ldr	r3, [r3, #12]
 800c626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	3304      	adds	r3, #4
 800c62c:	4618      	mov	r0, r3
 800c62e:	f7ff fb8a 	bl	800bd46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c632:	4b0d      	ldr	r3, [pc, #52]	; (800c668 <prvCheckTasksWaitingTermination+0x54>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	3b01      	subs	r3, #1
 800c638:	4a0b      	ldr	r2, [pc, #44]	; (800c668 <prvCheckTasksWaitingTermination+0x54>)
 800c63a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c63c:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <prvCheckTasksWaitingTermination+0x58>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3b01      	subs	r3, #1
 800c642:	4a0a      	ldr	r2, [pc, #40]	; (800c66c <prvCheckTasksWaitingTermination+0x58>)
 800c644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c646:	f000 fa25 	bl	800ca94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f810 	bl	800c670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c650:	4b06      	ldr	r3, [pc, #24]	; (800c66c <prvCheckTasksWaitingTermination+0x58>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1e1      	bne.n	800c61c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c658:	bf00      	nop
 800c65a:	bf00      	nop
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20001f14 	.word	0x20001f14
 800c668:	20001f40 	.word	0x20001f40
 800c66c:	20001f28 	.word	0x20001f28

0800c670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d108      	bne.n	800c694 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fb82 	bl	800cd90 <vPortFree>
				vPortFree( pxTCB );
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fb7f 	bl	800cd90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c692:	e018      	b.n	800c6c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d103      	bne.n	800c6a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fb76 	bl	800cd90 <vPortFree>
	}
 800c6a4:	e00f      	b.n	800c6c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d00a      	beq.n	800c6c6 <prvDeleteTCB+0x56>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	60fb      	str	r3, [r7, #12]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <prvDeleteTCB+0x54>
	}
 800c6c6:	bf00      	nop
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6d6:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <prvResetNextTaskUnblockTime+0x38>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d104      	bne.n	800c6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6e0:	4b0a      	ldr	r3, [pc, #40]	; (800c70c <prvResetNextTaskUnblockTime+0x3c>)
 800c6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c6e8:	e008      	b.n	800c6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <prvResetNextTaskUnblockTime+0x38>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4a04      	ldr	r2, [pc, #16]	; (800c70c <prvResetNextTaskUnblockTime+0x3c>)
 800c6fa:	6013      	str	r3, [r2, #0]
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	20001ef8 	.word	0x20001ef8
 800c70c:	20001f60 	.word	0x20001f60

0800c710 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c71a:	4b29      	ldr	r3, [pc, #164]	; (800c7c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3304      	adds	r3, #4
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff fb0d 	bl	800bd46 <uxListRemove>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10b      	bne.n	800c74a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c732:	4b24      	ldr	r3, [pc, #144]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c738:	2201      	movs	r2, #1
 800c73a:	fa02 f303 	lsl.w	r3, r2, r3
 800c73e:	43da      	mvns	r2, r3
 800c740:	4b21      	ldr	r3, [pc, #132]	; (800c7c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4013      	ands	r3, r2
 800c746:	4a20      	ldr	r2, [pc, #128]	; (800c7c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c748:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c750:	d10a      	bne.n	800c768 <prvAddCurrentTaskToDelayedList+0x58>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d007      	beq.n	800c768 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c758:	4b1a      	ldr	r3, [pc, #104]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3304      	adds	r3, #4
 800c75e:	4619      	mov	r1, r3
 800c760:	481a      	ldr	r0, [pc, #104]	; (800c7cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c762:	f7ff fa93 	bl	800bc8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c766:	e026      	b.n	800c7b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c770:	4b14      	ldr	r3, [pc, #80]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d209      	bcs.n	800c794 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c780:	4b13      	ldr	r3, [pc, #76]	; (800c7d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	4b0f      	ldr	r3, [pc, #60]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3304      	adds	r3, #4
 800c78a:	4619      	mov	r1, r3
 800c78c:	4610      	mov	r0, r2
 800c78e:	f7ff faa1 	bl	800bcd4 <vListInsert>
}
 800c792:	e010      	b.n	800c7b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c794:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	3304      	adds	r3, #4
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f7ff fa97 	bl	800bcd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7a6:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d202      	bcs.n	800c7b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c7b0:	4a09      	ldr	r2, [pc, #36]	; (800c7d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6013      	str	r3, [r2, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20001f44 	.word	0x20001f44
 800c7c4:	20001e40 	.word	0x20001e40
 800c7c8:	20001f48 	.word	0x20001f48
 800c7cc:	20001f2c 	.word	0x20001f2c
 800c7d0:	20001efc 	.word	0x20001efc
 800c7d4:	20001ef8 	.word	0x20001ef8
 800c7d8:	20001f60 	.word	0x20001f60

0800c7dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	3b04      	subs	r3, #4
 800c7ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	3b04      	subs	r3, #4
 800c7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f023 0201 	bic.w	r2, r3, #1
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3b04      	subs	r3, #4
 800c80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c80c:	4a0c      	ldr	r2, [pc, #48]	; (800c840 <pxPortInitialiseStack+0x64>)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3b14      	subs	r3, #20
 800c816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3b04      	subs	r3, #4
 800c822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f06f 0202 	mvn.w	r2, #2
 800c82a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	3b20      	subs	r3, #32
 800c830:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c832:	68fb      	ldr	r3, [r7, #12]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	0800c845 	.word	0x0800c845

0800c844 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c84e:	4b12      	ldr	r3, [pc, #72]	; (800c898 <prvTaskExitError+0x54>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c856:	d00a      	beq.n	800c86e <prvTaskExitError+0x2a>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	60fb      	str	r3, [r7, #12]
}
 800c86a:	bf00      	nop
 800c86c:	e7fe      	b.n	800c86c <prvTaskExitError+0x28>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	60bb      	str	r3, [r7, #8]
}
 800c880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c882:	bf00      	nop
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0fc      	beq.n	800c884 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c88a:	bf00      	nop
 800c88c:	bf00      	nop
 800c88e:	3714      	adds	r7, #20
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr
 800c898:	20000020 	.word	0x20000020
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8a0:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <pxCurrentTCBConst2>)
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	6808      	ldr	r0, [r1, #0]
 800c8a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8aa:	f380 8809 	msr	PSP, r0
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f04f 0000 	mov.w	r0, #0
 800c8b6:	f380 8811 	msr	BASEPRI, r0
 800c8ba:	4770      	bx	lr
 800c8bc:	f3af 8000 	nop.w

0800c8c0 <pxCurrentTCBConst2>:
 800c8c0:	20001e40 	.word	0x20001e40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8c4:	bf00      	nop
 800c8c6:	bf00      	nop

0800c8c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8c8:	4808      	ldr	r0, [pc, #32]	; (800c8ec <prvPortStartFirstTask+0x24>)
 800c8ca:	6800      	ldr	r0, [r0, #0]
 800c8cc:	6800      	ldr	r0, [r0, #0]
 800c8ce:	f380 8808 	msr	MSP, r0
 800c8d2:	f04f 0000 	mov.w	r0, #0
 800c8d6:	f380 8814 	msr	CONTROL, r0
 800c8da:	b662      	cpsie	i
 800c8dc:	b661      	cpsie	f
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	df00      	svc	0
 800c8e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c8ea:	bf00      	nop
 800c8ec:	e000ed08 	.word	0xe000ed08

0800c8f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c8f6:	4b46      	ldr	r3, [pc, #280]	; (800ca10 <xPortStartScheduler+0x120>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a46      	ldr	r2, [pc, #280]	; (800ca14 <xPortStartScheduler+0x124>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d10a      	bne.n	800c916 <xPortStartScheduler+0x26>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	613b      	str	r3, [r7, #16]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c916:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <xPortStartScheduler+0x120>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a3f      	ldr	r2, [pc, #252]	; (800ca18 <xPortStartScheduler+0x128>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d10a      	bne.n	800c936 <xPortStartScheduler+0x46>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	60fb      	str	r3, [r7, #12]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c936:	4b39      	ldr	r3, [pc, #228]	; (800ca1c <xPortStartScheduler+0x12c>)
 800c938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	22ff      	movs	r2, #255	; 0xff
 800c946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	4b31      	ldr	r3, [pc, #196]	; (800ca20 <xPortStartScheduler+0x130>)
 800c95c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c95e:	4b31      	ldr	r3, [pc, #196]	; (800ca24 <xPortStartScheduler+0x134>)
 800c960:	2207      	movs	r2, #7
 800c962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c964:	e009      	b.n	800c97a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c966:	4b2f      	ldr	r3, [pc, #188]	; (800ca24 <xPortStartScheduler+0x134>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	4a2d      	ldr	r2, [pc, #180]	; (800ca24 <xPortStartScheduler+0x134>)
 800c96e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	b2db      	uxtb	r3, r3
 800c978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c97a:	78fb      	ldrb	r3, [r7, #3]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c982:	2b80      	cmp	r3, #128	; 0x80
 800c984:	d0ef      	beq.n	800c966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c986:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <xPortStartScheduler+0x134>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f1c3 0307 	rsb	r3, r3, #7
 800c98e:	2b04      	cmp	r3, #4
 800c990:	d00a      	beq.n	800c9a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	60bb      	str	r3, [r7, #8]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9a8:	4b1e      	ldr	r3, [pc, #120]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	4a1d      	ldr	r2, [pc, #116]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ca24 <xPortStartScheduler+0x134>)
 800c9bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9c6:	4b18      	ldr	r3, [pc, #96]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a17      	ldr	r2, [pc, #92]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9d2:	4b15      	ldr	r3, [pc, #84]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a14      	ldr	r2, [pc, #80]	; (800ca28 <xPortStartScheduler+0x138>)
 800c9d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9de:	f000 f8dd 	bl	800cb9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9e2:	4b12      	ldr	r3, [pc, #72]	; (800ca2c <xPortStartScheduler+0x13c>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9e8:	f000 f8fc 	bl	800cbe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9ec:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <xPortStartScheduler+0x140>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0f      	ldr	r2, [pc, #60]	; (800ca30 <xPortStartScheduler+0x140>)
 800c9f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c9f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9f8:	f7ff ff66 	bl	800c8c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c9fc:	f7ff fd56 	bl	800c4ac <vTaskSwitchContext>
	prvTaskExitError();
 800ca00:	f7ff ff20 	bl	800c844 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3718      	adds	r7, #24
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	e000ed00 	.word	0xe000ed00
 800ca14:	410fc271 	.word	0x410fc271
 800ca18:	410fc270 	.word	0x410fc270
 800ca1c:	e000e400 	.word	0xe000e400
 800ca20:	20001f6c 	.word	0x20001f6c
 800ca24:	20001f70 	.word	0x20001f70
 800ca28:	e000ed20 	.word	0xe000ed20
 800ca2c:	20000020 	.word	0x20000020
 800ca30:	e000ef34 	.word	0xe000ef34

0800ca34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	607b      	str	r3, [r7, #4]
}
 800ca4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca4e:	4b0f      	ldr	r3, [pc, #60]	; (800ca8c <vPortEnterCritical+0x58>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	3301      	adds	r3, #1
 800ca54:	4a0d      	ldr	r2, [pc, #52]	; (800ca8c <vPortEnterCritical+0x58>)
 800ca56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca58:	4b0c      	ldr	r3, [pc, #48]	; (800ca8c <vPortEnterCritical+0x58>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d10f      	bne.n	800ca80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <vPortEnterCritical+0x5c>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	603b      	str	r3, [r7, #0]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <vPortEnterCritical+0x4a>
	}
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	20000020 	.word	0x20000020
 800ca90:	e000ed04 	.word	0xe000ed04

0800ca94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca9a:	4b12      	ldr	r3, [pc, #72]	; (800cae4 <vPortExitCritical+0x50>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10a      	bne.n	800cab8 <vPortExitCritical+0x24>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	607b      	str	r3, [r7, #4]
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cab8:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <vPortExitCritical+0x50>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	3b01      	subs	r3, #1
 800cabe:	4a09      	ldr	r2, [pc, #36]	; (800cae4 <vPortExitCritical+0x50>)
 800cac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cac2:	4b08      	ldr	r3, [pc, #32]	; (800cae4 <vPortExitCritical+0x50>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d105      	bne.n	800cad6 <vPortExitCritical+0x42>
 800caca:	2300      	movs	r3, #0
 800cacc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	20000020 	.word	0x20000020
	...

0800caf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800caf0:	f3ef 8009 	mrs	r0, PSP
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <pxCurrentTCBConst>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	f01e 0f10 	tst.w	lr, #16
 800cb00:	bf08      	it	eq
 800cb02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0a:	6010      	str	r0, [r2, #0]
 800cb0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb14:	f380 8811 	msr	BASEPRI, r0
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f7ff fcc4 	bl	800c4ac <vTaskSwitchContext>
 800cb24:	f04f 0000 	mov.w	r0, #0
 800cb28:	f380 8811 	msr	BASEPRI, r0
 800cb2c:	bc09      	pop	{r0, r3}
 800cb2e:	6819      	ldr	r1, [r3, #0]
 800cb30:	6808      	ldr	r0, [r1, #0]
 800cb32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb36:	f01e 0f10 	tst.w	lr, #16
 800cb3a:	bf08      	it	eq
 800cb3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb40:	f380 8809 	msr	PSP, r0
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	f3af 8000 	nop.w

0800cb50 <pxCurrentTCBConst>:
 800cb50:	20001e40 	.word	0x20001e40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop

0800cb58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	607b      	str	r3, [r7, #4]
}
 800cb70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb72:	f7ff fbe3 	bl	800c33c <xTaskIncrementTick>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d003      	beq.n	800cb84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <SysTick_Handler+0x40>)
 800cb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	2300      	movs	r3, #0
 800cb86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	f383 8811 	msr	BASEPRI, r3
}
 800cb8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb90:	bf00      	nop
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	e000ed04 	.word	0xe000ed04

0800cb9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cba0:	4b0b      	ldr	r3, [pc, #44]	; (800cbd0 <vPortSetupTimerInterrupt+0x34>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cba6:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <vPortSetupTimerInterrupt+0x38>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbac:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <vPortSetupTimerInterrupt+0x3c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a0a      	ldr	r2, [pc, #40]	; (800cbdc <vPortSetupTimerInterrupt+0x40>)
 800cbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	4a09      	ldr	r2, [pc, #36]	; (800cbe0 <vPortSetupTimerInterrupt+0x44>)
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbbe:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <vPortSetupTimerInterrupt+0x34>)
 800cbc0:	2207      	movs	r2, #7
 800cbc2:	601a      	str	r2, [r3, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	e000e010 	.word	0xe000e010
 800cbd4:	e000e018 	.word	0xe000e018
 800cbd8:	20000014 	.word	0x20000014
 800cbdc:	10624dd3 	.word	0x10624dd3
 800cbe0:	e000e014 	.word	0xe000e014

0800cbe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cbf4 <vPortEnableVFP+0x10>
 800cbe8:	6801      	ldr	r1, [r0, #0]
 800cbea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cbee:	6001      	str	r1, [r0, #0]
 800cbf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbf2:	bf00      	nop
 800cbf4:	e000ed88 	.word	0xe000ed88

0800cbf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	; 0x28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc00:	2300      	movs	r3, #0
 800cc02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc04:	f7ff faf0 	bl	800c1e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc08:	4b5b      	ldr	r3, [pc, #364]	; (800cd78 <pvPortMalloc+0x180>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc10:	f000 f920 	bl	800ce54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc14:	4b59      	ldr	r3, [pc, #356]	; (800cd7c <pvPortMalloc+0x184>)
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f040 8093 	bne.w	800cd48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d01d      	beq.n	800cc64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cc28:	2208      	movs	r2, #8
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d014      	beq.n	800cc64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f023 0307 	bic.w	r3, r3, #7
 800cc40:	3308      	adds	r3, #8
 800cc42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f003 0307 	and.w	r3, r3, #7
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <pvPortMalloc+0x6c>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	617b      	str	r3, [r7, #20]
}
 800cc60:	bf00      	nop
 800cc62:	e7fe      	b.n	800cc62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d06e      	beq.n	800cd48 <pvPortMalloc+0x150>
 800cc6a:	4b45      	ldr	r3, [pc, #276]	; (800cd80 <pvPortMalloc+0x188>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d869      	bhi.n	800cd48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc74:	4b43      	ldr	r3, [pc, #268]	; (800cd84 <pvPortMalloc+0x18c>)
 800cc76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc78:	4b42      	ldr	r3, [pc, #264]	; (800cd84 <pvPortMalloc+0x18c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc7e:	e004      	b.n	800cc8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d903      	bls.n	800cc9c <pvPortMalloc+0xa4>
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1f1      	bne.n	800cc80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc9c:	4b36      	ldr	r3, [pc, #216]	; (800cd78 <pvPortMalloc+0x180>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d050      	beq.n	800cd48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2208      	movs	r2, #8
 800ccac:	4413      	add	r3, r2
 800ccae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	6a3b      	ldr	r3, [r7, #32]
 800ccb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	1ad2      	subs	r2, r2, r3
 800ccc0:	2308      	movs	r3, #8
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d91f      	bls.n	800cd08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4413      	add	r3, r2
 800ccce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	f003 0307 	and.w	r3, r3, #7
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <pvPortMalloc+0xf8>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	613b      	str	r3, [r7, #16]
}
 800ccec:	bf00      	nop
 800ccee:	e7fe      	b.n	800ccee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	685a      	ldr	r2, [r3, #4]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	1ad2      	subs	r2, r2, r3
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd02:	69b8      	ldr	r0, [r7, #24]
 800cd04:	f000 f908 	bl	800cf18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd08:	4b1d      	ldr	r3, [pc, #116]	; (800cd80 <pvPortMalloc+0x188>)
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	4a1b      	ldr	r2, [pc, #108]	; (800cd80 <pvPortMalloc+0x188>)
 800cd14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd16:	4b1a      	ldr	r3, [pc, #104]	; (800cd80 <pvPortMalloc+0x188>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <pvPortMalloc+0x190>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d203      	bcs.n	800cd2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd22:	4b17      	ldr	r3, [pc, #92]	; (800cd80 <pvPortMalloc+0x188>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a18      	ldr	r2, [pc, #96]	; (800cd88 <pvPortMalloc+0x190>)
 800cd28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <pvPortMalloc+0x184>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	431a      	orrs	r2, r3
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd3e:	4b13      	ldr	r3, [pc, #76]	; (800cd8c <pvPortMalloc+0x194>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	4a11      	ldr	r2, [pc, #68]	; (800cd8c <pvPortMalloc+0x194>)
 800cd46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd48:	f7ff fa5c 	bl	800c204 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	f003 0307 	and.w	r3, r3, #7
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00a      	beq.n	800cd6c <pvPortMalloc+0x174>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	60fb      	str	r3, [r7, #12]
}
 800cd68:	bf00      	nop
 800cd6a:	e7fe      	b.n	800cd6a <pvPortMalloc+0x172>
	return pvReturn;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3728      	adds	r7, #40	; 0x28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20005b7c 	.word	0x20005b7c
 800cd7c:	20005b90 	.word	0x20005b90
 800cd80:	20005b80 	.word	0x20005b80
 800cd84:	20005b74 	.word	0x20005b74
 800cd88:	20005b84 	.word	0x20005b84
 800cd8c:	20005b88 	.word	0x20005b88

0800cd90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d04d      	beq.n	800ce3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cda2:	2308      	movs	r3, #8
 800cda4:	425b      	negs	r3, r3
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	4413      	add	r3, r2
 800cdaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	685a      	ldr	r2, [r3, #4]
 800cdb4:	4b24      	ldr	r3, [pc, #144]	; (800ce48 <vPortFree+0xb8>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4013      	ands	r3, r2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10a      	bne.n	800cdd4 <vPortFree+0x44>
	__asm volatile
 800cdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc2:	f383 8811 	msr	BASEPRI, r3
 800cdc6:	f3bf 8f6f 	isb	sy
 800cdca:	f3bf 8f4f 	dsb	sy
 800cdce:	60fb      	str	r3, [r7, #12]
}
 800cdd0:	bf00      	nop
 800cdd2:	e7fe      	b.n	800cdd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00a      	beq.n	800cdf2 <vPortFree+0x62>
	__asm volatile
 800cddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde0:	f383 8811 	msr	BASEPRI, r3
 800cde4:	f3bf 8f6f 	isb	sy
 800cde8:	f3bf 8f4f 	dsb	sy
 800cdec:	60bb      	str	r3, [r7, #8]
}
 800cdee:	bf00      	nop
 800cdf0:	e7fe      	b.n	800cdf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	4b14      	ldr	r3, [pc, #80]	; (800ce48 <vPortFree+0xb8>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d01e      	beq.n	800ce3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d11a      	bne.n	800ce3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	4b0e      	ldr	r3, [pc, #56]	; (800ce48 <vPortFree+0xb8>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	43db      	mvns	r3, r3
 800ce12:	401a      	ands	r2, r3
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce18:	f7ff f9e6 	bl	800c1e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	4b0a      	ldr	r3, [pc, #40]	; (800ce4c <vPortFree+0xbc>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4413      	add	r3, r2
 800ce26:	4a09      	ldr	r2, [pc, #36]	; (800ce4c <vPortFree+0xbc>)
 800ce28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce2a:	6938      	ldr	r0, [r7, #16]
 800ce2c:	f000 f874 	bl	800cf18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <vPortFree+0xc0>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	3301      	adds	r3, #1
 800ce36:	4a06      	ldr	r2, [pc, #24]	; (800ce50 <vPortFree+0xc0>)
 800ce38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce3a:	f7ff f9e3 	bl	800c204 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce3e:	bf00      	nop
 800ce40:	3718      	adds	r7, #24
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20005b90 	.word	0x20005b90
 800ce4c:	20005b80 	.word	0x20005b80
 800ce50:	20005b8c 	.word	0x20005b8c

0800ce54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ce5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce60:	4b27      	ldr	r3, [pc, #156]	; (800cf00 <prvHeapInit+0xac>)
 800ce62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f003 0307 	and.w	r3, r3, #7
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00c      	beq.n	800ce88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3307      	adds	r3, #7
 800ce72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f023 0307 	bic.w	r3, r3, #7
 800ce7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	4a1f      	ldr	r2, [pc, #124]	; (800cf00 <prvHeapInit+0xac>)
 800ce84:	4413      	add	r3, r2
 800ce86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce8c:	4a1d      	ldr	r2, [pc, #116]	; (800cf04 <prvHeapInit+0xb0>)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce92:	4b1c      	ldr	r3, [pc, #112]	; (800cf04 <prvHeapInit+0xb0>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cea0:	2208      	movs	r2, #8
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	1a9b      	subs	r3, r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f023 0307 	bic.w	r3, r3, #7
 800ceae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	4a15      	ldr	r2, [pc, #84]	; (800cf08 <prvHeapInit+0xb4>)
 800ceb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ceb6:	4b14      	ldr	r3, [pc, #80]	; (800cf08 <prvHeapInit+0xb4>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2200      	movs	r2, #0
 800cebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cebe:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <prvHeapInit+0xb4>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	1ad2      	subs	r2, r2, r3
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ced4:	4b0c      	ldr	r3, [pc, #48]	; (800cf08 <prvHeapInit+0xb4>)
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	4a0a      	ldr	r2, [pc, #40]	; (800cf0c <prvHeapInit+0xb8>)
 800cee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	4a09      	ldr	r2, [pc, #36]	; (800cf10 <prvHeapInit+0xbc>)
 800ceea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ceec:	4b09      	ldr	r3, [pc, #36]	; (800cf14 <prvHeapInit+0xc0>)
 800ceee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cef2:	601a      	str	r2, [r3, #0]
}
 800cef4:	bf00      	nop
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	20001f74 	.word	0x20001f74
 800cf04:	20005b74 	.word	0x20005b74
 800cf08:	20005b7c 	.word	0x20005b7c
 800cf0c:	20005b84 	.word	0x20005b84
 800cf10:	20005b80 	.word	0x20005b80
 800cf14:	20005b90 	.word	0x20005b90

0800cf18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf20:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <prvInsertBlockIntoFreeList+0xac>)
 800cf22:	60fb      	str	r3, [r7, #12]
 800cf24:	e002      	b.n	800cf2c <prvInsertBlockIntoFreeList+0x14>
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	60fb      	str	r3, [r7, #12]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d8f7      	bhi.n	800cf26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	4413      	add	r3, r2
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d108      	bne.n	800cf5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	441a      	add	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	441a      	add	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d118      	bne.n	800cfa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	4b15      	ldr	r3, [pc, #84]	; (800cfc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d00d      	beq.n	800cf96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685a      	ldr	r2, [r3, #4]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	441a      	add	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	e008      	b.n	800cfa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf96:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <prvInsertBlockIntoFreeList+0xb0>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	e003      	b.n	800cfa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d002      	beq.n	800cfb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfb6:	bf00      	nop
 800cfb8:	3714      	adds	r7, #20
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	20005b74 	.word	0x20005b74
 800cfc8:	20005b7c 	.word	0x20005b7c

0800cfcc <atan2>:
 800cfcc:	f000 bb3c 	b.w	800d648 <__ieee754_atan2>

0800cfd0 <sqrt>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	ed2d 8b02 	vpush	{d8}
 800cfd6:	ec55 4b10 	vmov	r4, r5, d0
 800cfda:	f000 f8d1 	bl	800d180 <__ieee754_sqrt>
 800cfde:	4622      	mov	r2, r4
 800cfe0:	462b      	mov	r3, r5
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	eeb0 8a40 	vmov.f32	s16, s0
 800cfea:	eef0 8a60 	vmov.f32	s17, s1
 800cfee:	f7f3 fd6d 	bl	8000acc <__aeabi_dcmpun>
 800cff2:	b990      	cbnz	r0, 800d01a <sqrt+0x4a>
 800cff4:	2200      	movs	r2, #0
 800cff6:	2300      	movs	r3, #0
 800cff8:	4620      	mov	r0, r4
 800cffa:	4629      	mov	r1, r5
 800cffc:	f7f3 fd3e 	bl	8000a7c <__aeabi_dcmplt>
 800d000:	b158      	cbz	r0, 800d01a <sqrt+0x4a>
 800d002:	f001 fc2d 	bl	800e860 <__errno>
 800d006:	2321      	movs	r3, #33	; 0x21
 800d008:	6003      	str	r3, [r0, #0]
 800d00a:	2200      	movs	r2, #0
 800d00c:	2300      	movs	r3, #0
 800d00e:	4610      	mov	r0, r2
 800d010:	4619      	mov	r1, r3
 800d012:	f7f3 fbeb 	bl	80007ec <__aeabi_ddiv>
 800d016:	ec41 0b18 	vmov	d8, r0, r1
 800d01a:	eeb0 0a48 	vmov.f32	s0, s16
 800d01e:	eef0 0a68 	vmov.f32	s1, s17
 800d022:	ecbd 8b02 	vpop	{d8}
 800d026:	bd38      	pop	{r3, r4, r5, pc}

0800d028 <cos>:
 800d028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d02a:	ec53 2b10 	vmov	r2, r3, d0
 800d02e:	4826      	ldr	r0, [pc, #152]	; (800d0c8 <cos+0xa0>)
 800d030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d034:	4281      	cmp	r1, r0
 800d036:	dc06      	bgt.n	800d046 <cos+0x1e>
 800d038:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d0c0 <cos+0x98>
 800d03c:	b005      	add	sp, #20
 800d03e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d042:	f000 b979 	b.w	800d338 <__kernel_cos>
 800d046:	4821      	ldr	r0, [pc, #132]	; (800d0cc <cos+0xa4>)
 800d048:	4281      	cmp	r1, r0
 800d04a:	dd09      	ble.n	800d060 <cos+0x38>
 800d04c:	ee10 0a10 	vmov	r0, s0
 800d050:	4619      	mov	r1, r3
 800d052:	f7f3 f8e9 	bl	8000228 <__aeabi_dsub>
 800d056:	ec41 0b10 	vmov	d0, r0, r1
 800d05a:	b005      	add	sp, #20
 800d05c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d060:	4668      	mov	r0, sp
 800d062:	f000 fbb9 	bl	800d7d8 <__ieee754_rem_pio2>
 800d066:	f000 0003 	and.w	r0, r0, #3
 800d06a:	2801      	cmp	r0, #1
 800d06c:	d00b      	beq.n	800d086 <cos+0x5e>
 800d06e:	2802      	cmp	r0, #2
 800d070:	d016      	beq.n	800d0a0 <cos+0x78>
 800d072:	b9e0      	cbnz	r0, 800d0ae <cos+0x86>
 800d074:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d078:	ed9d 0b00 	vldr	d0, [sp]
 800d07c:	f000 f95c 	bl	800d338 <__kernel_cos>
 800d080:	ec51 0b10 	vmov	r0, r1, d0
 800d084:	e7e7      	b.n	800d056 <cos+0x2e>
 800d086:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d08a:	ed9d 0b00 	vldr	d0, [sp]
 800d08e:	f000 fa1b 	bl	800d4c8 <__kernel_sin>
 800d092:	ec53 2b10 	vmov	r2, r3, d0
 800d096:	ee10 0a10 	vmov	r0, s0
 800d09a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d09e:	e7da      	b.n	800d056 <cos+0x2e>
 800d0a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0a4:	ed9d 0b00 	vldr	d0, [sp]
 800d0a8:	f000 f946 	bl	800d338 <__kernel_cos>
 800d0ac:	e7f1      	b.n	800d092 <cos+0x6a>
 800d0ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0b2:	ed9d 0b00 	vldr	d0, [sp]
 800d0b6:	2001      	movs	r0, #1
 800d0b8:	f000 fa06 	bl	800d4c8 <__kernel_sin>
 800d0bc:	e7e0      	b.n	800d080 <cos+0x58>
 800d0be:	bf00      	nop
	...
 800d0c8:	3fe921fb 	.word	0x3fe921fb
 800d0cc:	7fefffff 	.word	0x7fefffff

0800d0d0 <sin>:
 800d0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0d2:	ec53 2b10 	vmov	r2, r3, d0
 800d0d6:	4828      	ldr	r0, [pc, #160]	; (800d178 <sin+0xa8>)
 800d0d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d0dc:	4281      	cmp	r1, r0
 800d0de:	dc07      	bgt.n	800d0f0 <sin+0x20>
 800d0e0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d170 <sin+0xa0>
 800d0e4:	2000      	movs	r0, #0
 800d0e6:	b005      	add	sp, #20
 800d0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ec:	f000 b9ec 	b.w	800d4c8 <__kernel_sin>
 800d0f0:	4822      	ldr	r0, [pc, #136]	; (800d17c <sin+0xac>)
 800d0f2:	4281      	cmp	r1, r0
 800d0f4:	dd09      	ble.n	800d10a <sin+0x3a>
 800d0f6:	ee10 0a10 	vmov	r0, s0
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	f7f3 f894 	bl	8000228 <__aeabi_dsub>
 800d100:	ec41 0b10 	vmov	d0, r0, r1
 800d104:	b005      	add	sp, #20
 800d106:	f85d fb04 	ldr.w	pc, [sp], #4
 800d10a:	4668      	mov	r0, sp
 800d10c:	f000 fb64 	bl	800d7d8 <__ieee754_rem_pio2>
 800d110:	f000 0003 	and.w	r0, r0, #3
 800d114:	2801      	cmp	r0, #1
 800d116:	d00c      	beq.n	800d132 <sin+0x62>
 800d118:	2802      	cmp	r0, #2
 800d11a:	d011      	beq.n	800d140 <sin+0x70>
 800d11c:	b9f0      	cbnz	r0, 800d15c <sin+0x8c>
 800d11e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d122:	ed9d 0b00 	vldr	d0, [sp]
 800d126:	2001      	movs	r0, #1
 800d128:	f000 f9ce 	bl	800d4c8 <__kernel_sin>
 800d12c:	ec51 0b10 	vmov	r0, r1, d0
 800d130:	e7e6      	b.n	800d100 <sin+0x30>
 800d132:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d136:	ed9d 0b00 	vldr	d0, [sp]
 800d13a:	f000 f8fd 	bl	800d338 <__kernel_cos>
 800d13e:	e7f5      	b.n	800d12c <sin+0x5c>
 800d140:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d144:	ed9d 0b00 	vldr	d0, [sp]
 800d148:	2001      	movs	r0, #1
 800d14a:	f000 f9bd 	bl	800d4c8 <__kernel_sin>
 800d14e:	ec53 2b10 	vmov	r2, r3, d0
 800d152:	ee10 0a10 	vmov	r0, s0
 800d156:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d15a:	e7d1      	b.n	800d100 <sin+0x30>
 800d15c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d160:	ed9d 0b00 	vldr	d0, [sp]
 800d164:	f000 f8e8 	bl	800d338 <__kernel_cos>
 800d168:	e7f1      	b.n	800d14e <sin+0x7e>
 800d16a:	bf00      	nop
 800d16c:	f3af 8000 	nop.w
	...
 800d178:	3fe921fb 	.word	0x3fe921fb
 800d17c:	7fefffff 	.word	0x7fefffff

0800d180 <__ieee754_sqrt>:
 800d180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	ec55 4b10 	vmov	r4, r5, d0
 800d188:	4e67      	ldr	r6, [pc, #412]	; (800d328 <__ieee754_sqrt+0x1a8>)
 800d18a:	43ae      	bics	r6, r5
 800d18c:	ee10 0a10 	vmov	r0, s0
 800d190:	ee10 2a10 	vmov	r2, s0
 800d194:	4629      	mov	r1, r5
 800d196:	462b      	mov	r3, r5
 800d198:	d10d      	bne.n	800d1b6 <__ieee754_sqrt+0x36>
 800d19a:	f7f3 f9fd 	bl	8000598 <__aeabi_dmul>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	f7f3 f841 	bl	800022c <__adddf3>
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	ec45 4b10 	vmov	d0, r4, r5
 800d1b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b6:	2d00      	cmp	r5, #0
 800d1b8:	dc0b      	bgt.n	800d1d2 <__ieee754_sqrt+0x52>
 800d1ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d1be:	4326      	orrs	r6, r4
 800d1c0:	d0f5      	beq.n	800d1ae <__ieee754_sqrt+0x2e>
 800d1c2:	b135      	cbz	r5, 800d1d2 <__ieee754_sqrt+0x52>
 800d1c4:	f7f3 f830 	bl	8000228 <__aeabi_dsub>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	f7f3 fb0e 	bl	80007ec <__aeabi_ddiv>
 800d1d0:	e7eb      	b.n	800d1aa <__ieee754_sqrt+0x2a>
 800d1d2:	1509      	asrs	r1, r1, #20
 800d1d4:	f000 808d 	beq.w	800d2f2 <__ieee754_sqrt+0x172>
 800d1d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1dc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d1e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1e4:	07c9      	lsls	r1, r1, #31
 800d1e6:	bf5c      	itt	pl
 800d1e8:	005b      	lslpl	r3, r3, #1
 800d1ea:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d1ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1f2:	bf58      	it	pl
 800d1f4:	0052      	lslpl	r2, r2, #1
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d1fc:	1076      	asrs	r6, r6, #1
 800d1fe:	0052      	lsls	r2, r2, #1
 800d200:	f04f 0e16 	mov.w	lr, #22
 800d204:	46ac      	mov	ip, r5
 800d206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d20a:	eb0c 0001 	add.w	r0, ip, r1
 800d20e:	4298      	cmp	r0, r3
 800d210:	bfde      	ittt	le
 800d212:	1a1b      	suble	r3, r3, r0
 800d214:	eb00 0c01 	addle.w	ip, r0, r1
 800d218:	186d      	addle	r5, r5, r1
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	f1be 0e01 	subs.w	lr, lr, #1
 800d220:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d224:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d228:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d22c:	d1ed      	bne.n	800d20a <__ieee754_sqrt+0x8a>
 800d22e:	4674      	mov	r4, lr
 800d230:	2720      	movs	r7, #32
 800d232:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d236:	4563      	cmp	r3, ip
 800d238:	eb01 000e 	add.w	r0, r1, lr
 800d23c:	dc02      	bgt.n	800d244 <__ieee754_sqrt+0xc4>
 800d23e:	d113      	bne.n	800d268 <__ieee754_sqrt+0xe8>
 800d240:	4290      	cmp	r0, r2
 800d242:	d811      	bhi.n	800d268 <__ieee754_sqrt+0xe8>
 800d244:	2800      	cmp	r0, #0
 800d246:	eb00 0e01 	add.w	lr, r0, r1
 800d24a:	da57      	bge.n	800d2fc <__ieee754_sqrt+0x17c>
 800d24c:	f1be 0f00 	cmp.w	lr, #0
 800d250:	db54      	blt.n	800d2fc <__ieee754_sqrt+0x17c>
 800d252:	f10c 0801 	add.w	r8, ip, #1
 800d256:	eba3 030c 	sub.w	r3, r3, ip
 800d25a:	4290      	cmp	r0, r2
 800d25c:	bf88      	it	hi
 800d25e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800d262:	1a12      	subs	r2, r2, r0
 800d264:	440c      	add	r4, r1
 800d266:	46c4      	mov	ip, r8
 800d268:	005b      	lsls	r3, r3, #1
 800d26a:	3f01      	subs	r7, #1
 800d26c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d270:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d274:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d278:	d1dd      	bne.n	800d236 <__ieee754_sqrt+0xb6>
 800d27a:	4313      	orrs	r3, r2
 800d27c:	d01b      	beq.n	800d2b6 <__ieee754_sqrt+0x136>
 800d27e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d32c <__ieee754_sqrt+0x1ac>
 800d282:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d330 <__ieee754_sqrt+0x1b0>
 800d286:	e9da 0100 	ldrd	r0, r1, [sl]
 800d28a:	e9db 2300 	ldrd	r2, r3, [fp]
 800d28e:	f7f2 ffcb 	bl	8000228 <__aeabi_dsub>
 800d292:	e9da 8900 	ldrd	r8, r9, [sl]
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	4640      	mov	r0, r8
 800d29c:	4649      	mov	r1, r9
 800d29e:	f7f3 fbf7 	bl	8000a90 <__aeabi_dcmple>
 800d2a2:	b140      	cbz	r0, 800d2b6 <__ieee754_sqrt+0x136>
 800d2a4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800d2a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800d2ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800d2b0:	d126      	bne.n	800d300 <__ieee754_sqrt+0x180>
 800d2b2:	3501      	adds	r5, #1
 800d2b4:	463c      	mov	r4, r7
 800d2b6:	106a      	asrs	r2, r5, #1
 800d2b8:	0863      	lsrs	r3, r4, #1
 800d2ba:	07e9      	lsls	r1, r5, #31
 800d2bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d2c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d2c4:	bf48      	it	mi
 800d2c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d2ca:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d2ce:	461c      	mov	r4, r3
 800d2d0:	e76d      	b.n	800d1ae <__ieee754_sqrt+0x2e>
 800d2d2:	0ad3      	lsrs	r3, r2, #11
 800d2d4:	3815      	subs	r0, #21
 800d2d6:	0552      	lsls	r2, r2, #21
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0fa      	beq.n	800d2d2 <__ieee754_sqrt+0x152>
 800d2dc:	02dc      	lsls	r4, r3, #11
 800d2de:	d50a      	bpl.n	800d2f6 <__ieee754_sqrt+0x176>
 800d2e0:	f1c1 0420 	rsb	r4, r1, #32
 800d2e4:	fa22 f404 	lsr.w	r4, r2, r4
 800d2e8:	1e4d      	subs	r5, r1, #1
 800d2ea:	408a      	lsls	r2, r1
 800d2ec:	4323      	orrs	r3, r4
 800d2ee:	1b41      	subs	r1, r0, r5
 800d2f0:	e772      	b.n	800d1d8 <__ieee754_sqrt+0x58>
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	e7f0      	b.n	800d2d8 <__ieee754_sqrt+0x158>
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	3101      	adds	r1, #1
 800d2fa:	e7ef      	b.n	800d2dc <__ieee754_sqrt+0x15c>
 800d2fc:	46e0      	mov	r8, ip
 800d2fe:	e7aa      	b.n	800d256 <__ieee754_sqrt+0xd6>
 800d300:	f7f2 ff94 	bl	800022c <__adddf3>
 800d304:	e9da 8900 	ldrd	r8, r9, [sl]
 800d308:	4602      	mov	r2, r0
 800d30a:	460b      	mov	r3, r1
 800d30c:	4640      	mov	r0, r8
 800d30e:	4649      	mov	r1, r9
 800d310:	f7f3 fbb4 	bl	8000a7c <__aeabi_dcmplt>
 800d314:	b120      	cbz	r0, 800d320 <__ieee754_sqrt+0x1a0>
 800d316:	1ca0      	adds	r0, r4, #2
 800d318:	bf08      	it	eq
 800d31a:	3501      	addeq	r5, #1
 800d31c:	3402      	adds	r4, #2
 800d31e:	e7ca      	b.n	800d2b6 <__ieee754_sqrt+0x136>
 800d320:	3401      	adds	r4, #1
 800d322:	f024 0401 	bic.w	r4, r4, #1
 800d326:	e7c6      	b.n	800d2b6 <__ieee754_sqrt+0x136>
 800d328:	7ff00000 	.word	0x7ff00000
 800d32c:	20000028 	.word	0x20000028
 800d330:	20000030 	.word	0x20000030
 800d334:	00000000 	.word	0x00000000

0800d338 <__kernel_cos>:
 800d338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d33c:	ec57 6b10 	vmov	r6, r7, d0
 800d340:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d344:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d348:	ed8d 1b00 	vstr	d1, [sp]
 800d34c:	da07      	bge.n	800d35e <__kernel_cos+0x26>
 800d34e:	ee10 0a10 	vmov	r0, s0
 800d352:	4639      	mov	r1, r7
 800d354:	f7f3 fbd0 	bl	8000af8 <__aeabi_d2iz>
 800d358:	2800      	cmp	r0, #0
 800d35a:	f000 8088 	beq.w	800d46e <__kernel_cos+0x136>
 800d35e:	4632      	mov	r2, r6
 800d360:	463b      	mov	r3, r7
 800d362:	4630      	mov	r0, r6
 800d364:	4639      	mov	r1, r7
 800d366:	f7f3 f917 	bl	8000598 <__aeabi_dmul>
 800d36a:	4b51      	ldr	r3, [pc, #324]	; (800d4b0 <__kernel_cos+0x178>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	f7f3 f911 	bl	8000598 <__aeabi_dmul>
 800d376:	a340      	add	r3, pc, #256	; (adr r3, 800d478 <__kernel_cos+0x140>)
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	4682      	mov	sl, r0
 800d37e:	468b      	mov	fp, r1
 800d380:	4620      	mov	r0, r4
 800d382:	4629      	mov	r1, r5
 800d384:	f7f3 f908 	bl	8000598 <__aeabi_dmul>
 800d388:	a33d      	add	r3, pc, #244	; (adr r3, 800d480 <__kernel_cos+0x148>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f7f2 ff4d 	bl	800022c <__adddf3>
 800d392:	4622      	mov	r2, r4
 800d394:	462b      	mov	r3, r5
 800d396:	f7f3 f8ff 	bl	8000598 <__aeabi_dmul>
 800d39a:	a33b      	add	r3, pc, #236	; (adr r3, 800d488 <__kernel_cos+0x150>)
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	f7f2 ff42 	bl	8000228 <__aeabi_dsub>
 800d3a4:	4622      	mov	r2, r4
 800d3a6:	462b      	mov	r3, r5
 800d3a8:	f7f3 f8f6 	bl	8000598 <__aeabi_dmul>
 800d3ac:	a338      	add	r3, pc, #224	; (adr r3, 800d490 <__kernel_cos+0x158>)
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	f7f2 ff3b 	bl	800022c <__adddf3>
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	462b      	mov	r3, r5
 800d3ba:	f7f3 f8ed 	bl	8000598 <__aeabi_dmul>
 800d3be:	a336      	add	r3, pc, #216	; (adr r3, 800d498 <__kernel_cos+0x160>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	f7f2 ff30 	bl	8000228 <__aeabi_dsub>
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	f7f3 f8e4 	bl	8000598 <__aeabi_dmul>
 800d3d0:	a333      	add	r3, pc, #204	; (adr r3, 800d4a0 <__kernel_cos+0x168>)
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	f7f2 ff29 	bl	800022c <__adddf3>
 800d3da:	4622      	mov	r2, r4
 800d3dc:	462b      	mov	r3, r5
 800d3de:	f7f3 f8db 	bl	8000598 <__aeabi_dmul>
 800d3e2:	4622      	mov	r2, r4
 800d3e4:	462b      	mov	r3, r5
 800d3e6:	f7f3 f8d7 	bl	8000598 <__aeabi_dmul>
 800d3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	460d      	mov	r5, r1
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	4639      	mov	r1, r7
 800d3f6:	f7f3 f8cf 	bl	8000598 <__aeabi_dmul>
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	4629      	mov	r1, r5
 800d400:	4620      	mov	r0, r4
 800d402:	f7f2 ff11 	bl	8000228 <__aeabi_dsub>
 800d406:	4b2b      	ldr	r3, [pc, #172]	; (800d4b4 <__kernel_cos+0x17c>)
 800d408:	4598      	cmp	r8, r3
 800d40a:	4606      	mov	r6, r0
 800d40c:	460f      	mov	r7, r1
 800d40e:	dc10      	bgt.n	800d432 <__kernel_cos+0xfa>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4650      	mov	r0, sl
 800d416:	4659      	mov	r1, fp
 800d418:	f7f2 ff06 	bl	8000228 <__aeabi_dsub>
 800d41c:	460b      	mov	r3, r1
 800d41e:	4926      	ldr	r1, [pc, #152]	; (800d4b8 <__kernel_cos+0x180>)
 800d420:	4602      	mov	r2, r0
 800d422:	2000      	movs	r0, #0
 800d424:	f7f2 ff00 	bl	8000228 <__aeabi_dsub>
 800d428:	ec41 0b10 	vmov	d0, r0, r1
 800d42c:	b003      	add	sp, #12
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d432:	4b22      	ldr	r3, [pc, #136]	; (800d4bc <__kernel_cos+0x184>)
 800d434:	4920      	ldr	r1, [pc, #128]	; (800d4b8 <__kernel_cos+0x180>)
 800d436:	4598      	cmp	r8, r3
 800d438:	bfcc      	ite	gt
 800d43a:	4d21      	ldrgt	r5, [pc, #132]	; (800d4c0 <__kernel_cos+0x188>)
 800d43c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d440:	2400      	movs	r4, #0
 800d442:	4622      	mov	r2, r4
 800d444:	462b      	mov	r3, r5
 800d446:	2000      	movs	r0, #0
 800d448:	f7f2 feee 	bl	8000228 <__aeabi_dsub>
 800d44c:	4622      	mov	r2, r4
 800d44e:	4680      	mov	r8, r0
 800d450:	4689      	mov	r9, r1
 800d452:	462b      	mov	r3, r5
 800d454:	4650      	mov	r0, sl
 800d456:	4659      	mov	r1, fp
 800d458:	f7f2 fee6 	bl	8000228 <__aeabi_dsub>
 800d45c:	4632      	mov	r2, r6
 800d45e:	463b      	mov	r3, r7
 800d460:	f7f2 fee2 	bl	8000228 <__aeabi_dsub>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4640      	mov	r0, r8
 800d46a:	4649      	mov	r1, r9
 800d46c:	e7da      	b.n	800d424 <__kernel_cos+0xec>
 800d46e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d4a8 <__kernel_cos+0x170>
 800d472:	e7db      	b.n	800d42c <__kernel_cos+0xf4>
 800d474:	f3af 8000 	nop.w
 800d478:	be8838d4 	.word	0xbe8838d4
 800d47c:	bda8fae9 	.word	0xbda8fae9
 800d480:	bdb4b1c4 	.word	0xbdb4b1c4
 800d484:	3e21ee9e 	.word	0x3e21ee9e
 800d488:	809c52ad 	.word	0x809c52ad
 800d48c:	3e927e4f 	.word	0x3e927e4f
 800d490:	19cb1590 	.word	0x19cb1590
 800d494:	3efa01a0 	.word	0x3efa01a0
 800d498:	16c15177 	.word	0x16c15177
 800d49c:	3f56c16c 	.word	0x3f56c16c
 800d4a0:	5555554c 	.word	0x5555554c
 800d4a4:	3fa55555 	.word	0x3fa55555
 800d4a8:	00000000 	.word	0x00000000
 800d4ac:	3ff00000 	.word	0x3ff00000
 800d4b0:	3fe00000 	.word	0x3fe00000
 800d4b4:	3fd33332 	.word	0x3fd33332
 800d4b8:	3ff00000 	.word	0x3ff00000
 800d4bc:	3fe90000 	.word	0x3fe90000
 800d4c0:	3fd20000 	.word	0x3fd20000
 800d4c4:	00000000 	.word	0x00000000

0800d4c8 <__kernel_sin>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	ed2d 8b04 	vpush	{d8-d9}
 800d4d0:	eeb0 8a41 	vmov.f32	s16, s2
 800d4d4:	eef0 8a61 	vmov.f32	s17, s3
 800d4d8:	ec55 4b10 	vmov	r4, r5, d0
 800d4dc:	b083      	sub	sp, #12
 800d4de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d4e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d4e6:	9001      	str	r0, [sp, #4]
 800d4e8:	da06      	bge.n	800d4f8 <__kernel_sin+0x30>
 800d4ea:	ee10 0a10 	vmov	r0, s0
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7f3 fb02 	bl	8000af8 <__aeabi_d2iz>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d051      	beq.n	800d59c <__kernel_sin+0xd4>
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	462b      	mov	r3, r5
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	4629      	mov	r1, r5
 800d500:	f7f3 f84a 	bl	8000598 <__aeabi_dmul>
 800d504:	4682      	mov	sl, r0
 800d506:	468b      	mov	fp, r1
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f3 f842 	bl	8000598 <__aeabi_dmul>
 800d514:	a341      	add	r3, pc, #260	; (adr r3, 800d61c <__kernel_sin+0x154>)
 800d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51a:	4680      	mov	r8, r0
 800d51c:	4689      	mov	r9, r1
 800d51e:	4650      	mov	r0, sl
 800d520:	4659      	mov	r1, fp
 800d522:	f7f3 f839 	bl	8000598 <__aeabi_dmul>
 800d526:	a33f      	add	r3, pc, #252	; (adr r3, 800d624 <__kernel_sin+0x15c>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	f7f2 fe7c 	bl	8000228 <__aeabi_dsub>
 800d530:	4652      	mov	r2, sl
 800d532:	465b      	mov	r3, fp
 800d534:	f7f3 f830 	bl	8000598 <__aeabi_dmul>
 800d538:	a33c      	add	r3, pc, #240	; (adr r3, 800d62c <__kernel_sin+0x164>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f2 fe75 	bl	800022c <__adddf3>
 800d542:	4652      	mov	r2, sl
 800d544:	465b      	mov	r3, fp
 800d546:	f7f3 f827 	bl	8000598 <__aeabi_dmul>
 800d54a:	a33a      	add	r3, pc, #232	; (adr r3, 800d634 <__kernel_sin+0x16c>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f2 fe6a 	bl	8000228 <__aeabi_dsub>
 800d554:	4652      	mov	r2, sl
 800d556:	465b      	mov	r3, fp
 800d558:	f7f3 f81e 	bl	8000598 <__aeabi_dmul>
 800d55c:	a337      	add	r3, pc, #220	; (adr r3, 800d63c <__kernel_sin+0x174>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe63 	bl	800022c <__adddf3>
 800d566:	9b01      	ldr	r3, [sp, #4]
 800d568:	4606      	mov	r6, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	b9eb      	cbnz	r3, 800d5aa <__kernel_sin+0xe2>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	4650      	mov	r0, sl
 800d574:	4659      	mov	r1, fp
 800d576:	f7f3 f80f 	bl	8000598 <__aeabi_dmul>
 800d57a:	a325      	add	r3, pc, #148	; (adr r3, 800d610 <__kernel_sin+0x148>)
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f7f2 fe52 	bl	8000228 <__aeabi_dsub>
 800d584:	4642      	mov	r2, r8
 800d586:	464b      	mov	r3, r9
 800d588:	f7f3 f806 	bl	8000598 <__aeabi_dmul>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4620      	mov	r0, r4
 800d592:	4629      	mov	r1, r5
 800d594:	f7f2 fe4a 	bl	800022c <__adddf3>
 800d598:	4604      	mov	r4, r0
 800d59a:	460d      	mov	r5, r1
 800d59c:	ec45 4b10 	vmov	d0, r4, r5
 800d5a0:	b003      	add	sp, #12
 800d5a2:	ecbd 8b04 	vpop	{d8-d9}
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	4b1b      	ldr	r3, [pc, #108]	; (800d618 <__kernel_sin+0x150>)
 800d5ac:	ec51 0b18 	vmov	r0, r1, d8
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f7f2 fff1 	bl	8000598 <__aeabi_dmul>
 800d5b6:	4632      	mov	r2, r6
 800d5b8:	ec41 0b19 	vmov	d9, r0, r1
 800d5bc:	463b      	mov	r3, r7
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f2 ffe9 	bl	8000598 <__aeabi_dmul>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	ec51 0b19 	vmov	r0, r1, d9
 800d5ce:	f7f2 fe2b 	bl	8000228 <__aeabi_dsub>
 800d5d2:	4652      	mov	r2, sl
 800d5d4:	465b      	mov	r3, fp
 800d5d6:	f7f2 ffdf 	bl	8000598 <__aeabi_dmul>
 800d5da:	ec53 2b18 	vmov	r2, r3, d8
 800d5de:	f7f2 fe23 	bl	8000228 <__aeabi_dsub>
 800d5e2:	a30b      	add	r3, pc, #44	; (adr r3, 800d610 <__kernel_sin+0x148>)
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	460f      	mov	r7, r1
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	4649      	mov	r1, r9
 800d5f0:	f7f2 ffd2 	bl	8000598 <__aeabi_dmul>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	f7f2 fe16 	bl	800022c <__adddf3>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4620      	mov	r0, r4
 800d606:	4629      	mov	r1, r5
 800d608:	f7f2 fe0e 	bl	8000228 <__aeabi_dsub>
 800d60c:	e7c4      	b.n	800d598 <__kernel_sin+0xd0>
 800d60e:	bf00      	nop
 800d610:	55555549 	.word	0x55555549
 800d614:	3fc55555 	.word	0x3fc55555
 800d618:	3fe00000 	.word	0x3fe00000
 800d61c:	5acfd57c 	.word	0x5acfd57c
 800d620:	3de5d93a 	.word	0x3de5d93a
 800d624:	8a2b9ceb 	.word	0x8a2b9ceb
 800d628:	3e5ae5e6 	.word	0x3e5ae5e6
 800d62c:	57b1fe7d 	.word	0x57b1fe7d
 800d630:	3ec71de3 	.word	0x3ec71de3
 800d634:	19c161d5 	.word	0x19c161d5
 800d638:	3f2a01a0 	.word	0x3f2a01a0
 800d63c:	1110f8a6 	.word	0x1110f8a6
 800d640:	3f811111 	.word	0x3f811111
 800d644:	00000000 	.word	0x00000000

0800d648 <__ieee754_atan2>:
 800d648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d64c:	ec57 6b11 	vmov	r6, r7, d1
 800d650:	4273      	negs	r3, r6
 800d652:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800d7d0 <__ieee754_atan2+0x188>
 800d656:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d65a:	4333      	orrs	r3, r6
 800d65c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d660:	4543      	cmp	r3, r8
 800d662:	ec51 0b10 	vmov	r0, r1, d0
 800d666:	ee11 5a10 	vmov	r5, s2
 800d66a:	d80a      	bhi.n	800d682 <__ieee754_atan2+0x3a>
 800d66c:	4244      	negs	r4, r0
 800d66e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d672:	4304      	orrs	r4, r0
 800d674:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d678:	4544      	cmp	r4, r8
 800d67a:	ee10 9a10 	vmov	r9, s0
 800d67e:	468e      	mov	lr, r1
 800d680:	d907      	bls.n	800d692 <__ieee754_atan2+0x4a>
 800d682:	4632      	mov	r2, r6
 800d684:	463b      	mov	r3, r7
 800d686:	f7f2 fdd1 	bl	800022c <__adddf3>
 800d68a:	ec41 0b10 	vmov	d0, r0, r1
 800d68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d692:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d696:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d69a:	4334      	orrs	r4, r6
 800d69c:	d103      	bne.n	800d6a6 <__ieee754_atan2+0x5e>
 800d69e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a2:	f000 baa1 	b.w	800dbe8 <atan>
 800d6a6:	17bc      	asrs	r4, r7, #30
 800d6a8:	f004 0402 	and.w	r4, r4, #2
 800d6ac:	ea53 0909 	orrs.w	r9, r3, r9
 800d6b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d6b4:	d107      	bne.n	800d6c6 <__ieee754_atan2+0x7e>
 800d6b6:	2c02      	cmp	r4, #2
 800d6b8:	d05f      	beq.n	800d77a <__ieee754_atan2+0x132>
 800d6ba:	2c03      	cmp	r4, #3
 800d6bc:	d1e5      	bne.n	800d68a <__ieee754_atan2+0x42>
 800d6be:	a140      	add	r1, pc, #256	; (adr r1, 800d7c0 <__ieee754_atan2+0x178>)
 800d6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c4:	e7e1      	b.n	800d68a <__ieee754_atan2+0x42>
 800d6c6:	4315      	orrs	r5, r2
 800d6c8:	d106      	bne.n	800d6d8 <__ieee754_atan2+0x90>
 800d6ca:	f1be 0f00 	cmp.w	lr, #0
 800d6ce:	da5f      	bge.n	800d790 <__ieee754_atan2+0x148>
 800d6d0:	a13d      	add	r1, pc, #244	; (adr r1, 800d7c8 <__ieee754_atan2+0x180>)
 800d6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6d6:	e7d8      	b.n	800d68a <__ieee754_atan2+0x42>
 800d6d8:	4542      	cmp	r2, r8
 800d6da:	d10f      	bne.n	800d6fc <__ieee754_atan2+0xb4>
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d6e2:	d107      	bne.n	800d6f4 <__ieee754_atan2+0xac>
 800d6e4:	2c02      	cmp	r4, #2
 800d6e6:	d84c      	bhi.n	800d782 <__ieee754_atan2+0x13a>
 800d6e8:	4b33      	ldr	r3, [pc, #204]	; (800d7b8 <__ieee754_atan2+0x170>)
 800d6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6f2:	e7ca      	b.n	800d68a <__ieee754_atan2+0x42>
 800d6f4:	2c02      	cmp	r4, #2
 800d6f6:	d848      	bhi.n	800d78a <__ieee754_atan2+0x142>
 800d6f8:	4b30      	ldr	r3, [pc, #192]	; (800d7bc <__ieee754_atan2+0x174>)
 800d6fa:	e7f6      	b.n	800d6ea <__ieee754_atan2+0xa2>
 800d6fc:	4543      	cmp	r3, r8
 800d6fe:	d0e4      	beq.n	800d6ca <__ieee754_atan2+0x82>
 800d700:	1a9b      	subs	r3, r3, r2
 800d702:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d706:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d70a:	da1e      	bge.n	800d74a <__ieee754_atan2+0x102>
 800d70c:	2f00      	cmp	r7, #0
 800d70e:	da01      	bge.n	800d714 <__ieee754_atan2+0xcc>
 800d710:	323c      	adds	r2, #60	; 0x3c
 800d712:	db1e      	blt.n	800d752 <__ieee754_atan2+0x10a>
 800d714:	4632      	mov	r2, r6
 800d716:	463b      	mov	r3, r7
 800d718:	f7f3 f868 	bl	80007ec <__aeabi_ddiv>
 800d71c:	ec41 0b10 	vmov	d0, r0, r1
 800d720:	f000 fc02 	bl	800df28 <fabs>
 800d724:	f000 fa60 	bl	800dbe8 <atan>
 800d728:	ec51 0b10 	vmov	r0, r1, d0
 800d72c:	2c01      	cmp	r4, #1
 800d72e:	d013      	beq.n	800d758 <__ieee754_atan2+0x110>
 800d730:	2c02      	cmp	r4, #2
 800d732:	d015      	beq.n	800d760 <__ieee754_atan2+0x118>
 800d734:	2c00      	cmp	r4, #0
 800d736:	d0a8      	beq.n	800d68a <__ieee754_atan2+0x42>
 800d738:	a317      	add	r3, pc, #92	; (adr r3, 800d798 <__ieee754_atan2+0x150>)
 800d73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73e:	f7f2 fd73 	bl	8000228 <__aeabi_dsub>
 800d742:	a317      	add	r3, pc, #92	; (adr r3, 800d7a0 <__ieee754_atan2+0x158>)
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	e014      	b.n	800d774 <__ieee754_atan2+0x12c>
 800d74a:	a117      	add	r1, pc, #92	; (adr r1, 800d7a8 <__ieee754_atan2+0x160>)
 800d74c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d750:	e7ec      	b.n	800d72c <__ieee754_atan2+0xe4>
 800d752:	2000      	movs	r0, #0
 800d754:	2100      	movs	r1, #0
 800d756:	e7e9      	b.n	800d72c <__ieee754_atan2+0xe4>
 800d758:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d75c:	4619      	mov	r1, r3
 800d75e:	e794      	b.n	800d68a <__ieee754_atan2+0x42>
 800d760:	a30d      	add	r3, pc, #52	; (adr r3, 800d798 <__ieee754_atan2+0x150>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 fd5f 	bl	8000228 <__aeabi_dsub>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	a10c      	add	r1, pc, #48	; (adr r1, 800d7a0 <__ieee754_atan2+0x158>)
 800d770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d774:	f7f2 fd58 	bl	8000228 <__aeabi_dsub>
 800d778:	e787      	b.n	800d68a <__ieee754_atan2+0x42>
 800d77a:	a109      	add	r1, pc, #36	; (adr r1, 800d7a0 <__ieee754_atan2+0x158>)
 800d77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d780:	e783      	b.n	800d68a <__ieee754_atan2+0x42>
 800d782:	a10b      	add	r1, pc, #44	; (adr r1, 800d7b0 <__ieee754_atan2+0x168>)
 800d784:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d788:	e77f      	b.n	800d68a <__ieee754_atan2+0x42>
 800d78a:	2000      	movs	r0, #0
 800d78c:	2100      	movs	r1, #0
 800d78e:	e77c      	b.n	800d68a <__ieee754_atan2+0x42>
 800d790:	a105      	add	r1, pc, #20	; (adr r1, 800d7a8 <__ieee754_atan2+0x160>)
 800d792:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d796:	e778      	b.n	800d68a <__ieee754_atan2+0x42>
 800d798:	33145c07 	.word	0x33145c07
 800d79c:	3ca1a626 	.word	0x3ca1a626
 800d7a0:	54442d18 	.word	0x54442d18
 800d7a4:	400921fb 	.word	0x400921fb
 800d7a8:	54442d18 	.word	0x54442d18
 800d7ac:	3ff921fb 	.word	0x3ff921fb
 800d7b0:	54442d18 	.word	0x54442d18
 800d7b4:	3fe921fb 	.word	0x3fe921fb
 800d7b8:	0800ef38 	.word	0x0800ef38
 800d7bc:	0800ef50 	.word	0x0800ef50
 800d7c0:	54442d18 	.word	0x54442d18
 800d7c4:	c00921fb 	.word	0xc00921fb
 800d7c8:	54442d18 	.word	0x54442d18
 800d7cc:	bff921fb 	.word	0xbff921fb
 800d7d0:	7ff00000 	.word	0x7ff00000
 800d7d4:	00000000 	.word	0x00000000

0800d7d8 <__ieee754_rem_pio2>:
 800d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7dc:	ed2d 8b02 	vpush	{d8}
 800d7e0:	ec55 4b10 	vmov	r4, r5, d0
 800d7e4:	4bca      	ldr	r3, [pc, #808]	; (800db10 <__ieee754_rem_pio2+0x338>)
 800d7e6:	b08b      	sub	sp, #44	; 0x2c
 800d7e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d7ec:	4598      	cmp	r8, r3
 800d7ee:	4682      	mov	sl, r0
 800d7f0:	9502      	str	r5, [sp, #8]
 800d7f2:	dc08      	bgt.n	800d806 <__ieee754_rem_pio2+0x2e>
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	ed80 0b00 	vstr	d0, [r0]
 800d7fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d800:	f04f 0b00 	mov.w	fp, #0
 800d804:	e028      	b.n	800d858 <__ieee754_rem_pio2+0x80>
 800d806:	4bc3      	ldr	r3, [pc, #780]	; (800db14 <__ieee754_rem_pio2+0x33c>)
 800d808:	4598      	cmp	r8, r3
 800d80a:	dc78      	bgt.n	800d8fe <__ieee754_rem_pio2+0x126>
 800d80c:	9b02      	ldr	r3, [sp, #8]
 800d80e:	4ec2      	ldr	r6, [pc, #776]	; (800db18 <__ieee754_rem_pio2+0x340>)
 800d810:	2b00      	cmp	r3, #0
 800d812:	ee10 0a10 	vmov	r0, s0
 800d816:	a3b0      	add	r3, pc, #704	; (adr r3, 800dad8 <__ieee754_rem_pio2+0x300>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	4629      	mov	r1, r5
 800d81e:	dd39      	ble.n	800d894 <__ieee754_rem_pio2+0xbc>
 800d820:	f7f2 fd02 	bl	8000228 <__aeabi_dsub>
 800d824:	45b0      	cmp	r8, r6
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
 800d82a:	d01b      	beq.n	800d864 <__ieee754_rem_pio2+0x8c>
 800d82c:	a3ac      	add	r3, pc, #688	; (adr r3, 800dae0 <__ieee754_rem_pio2+0x308>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fcf9 	bl	8000228 <__aeabi_dsub>
 800d836:	4602      	mov	r2, r0
 800d838:	460b      	mov	r3, r1
 800d83a:	e9ca 2300 	strd	r2, r3, [sl]
 800d83e:	4620      	mov	r0, r4
 800d840:	4629      	mov	r1, r5
 800d842:	f7f2 fcf1 	bl	8000228 <__aeabi_dsub>
 800d846:	a3a6      	add	r3, pc, #664	; (adr r3, 800dae0 <__ieee754_rem_pio2+0x308>)
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f7f2 fcec 	bl	8000228 <__aeabi_dsub>
 800d850:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d854:	f04f 0b01 	mov.w	fp, #1
 800d858:	4658      	mov	r0, fp
 800d85a:	b00b      	add	sp, #44	; 0x2c
 800d85c:	ecbd 8b02 	vpop	{d8}
 800d860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d864:	a3a0      	add	r3, pc, #640	; (adr r3, 800dae8 <__ieee754_rem_pio2+0x310>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	f7f2 fcdd 	bl	8000228 <__aeabi_dsub>
 800d86e:	a3a0      	add	r3, pc, #640	; (adr r3, 800daf0 <__ieee754_rem_pio2+0x318>)
 800d870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d874:	4604      	mov	r4, r0
 800d876:	460d      	mov	r5, r1
 800d878:	f7f2 fcd6 	bl	8000228 <__aeabi_dsub>
 800d87c:	4602      	mov	r2, r0
 800d87e:	460b      	mov	r3, r1
 800d880:	e9ca 2300 	strd	r2, r3, [sl]
 800d884:	4620      	mov	r0, r4
 800d886:	4629      	mov	r1, r5
 800d888:	f7f2 fcce 	bl	8000228 <__aeabi_dsub>
 800d88c:	a398      	add	r3, pc, #608	; (adr r3, 800daf0 <__ieee754_rem_pio2+0x318>)
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	e7db      	b.n	800d84c <__ieee754_rem_pio2+0x74>
 800d894:	f7f2 fcca 	bl	800022c <__adddf3>
 800d898:	45b0      	cmp	r8, r6
 800d89a:	4604      	mov	r4, r0
 800d89c:	460d      	mov	r5, r1
 800d89e:	d016      	beq.n	800d8ce <__ieee754_rem_pio2+0xf6>
 800d8a0:	a38f      	add	r3, pc, #572	; (adr r3, 800dae0 <__ieee754_rem_pio2+0x308>)
 800d8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a6:	f7f2 fcc1 	bl	800022c <__adddf3>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	e9ca 2300 	strd	r2, r3, [sl]
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	f7f2 fcb7 	bl	8000228 <__aeabi_dsub>
 800d8ba:	a389      	add	r3, pc, #548	; (adr r3, 800dae0 <__ieee754_rem_pio2+0x308>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	f7f2 fcb4 	bl	800022c <__adddf3>
 800d8c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d8c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d8cc:	e7c4      	b.n	800d858 <__ieee754_rem_pio2+0x80>
 800d8ce:	a386      	add	r3, pc, #536	; (adr r3, 800dae8 <__ieee754_rem_pio2+0x310>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fcaa 	bl	800022c <__adddf3>
 800d8d8:	a385      	add	r3, pc, #532	; (adr r3, 800daf0 <__ieee754_rem_pio2+0x318>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	4604      	mov	r4, r0
 800d8e0:	460d      	mov	r5, r1
 800d8e2:	f7f2 fca3 	bl	800022c <__adddf3>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	e9ca 2300 	strd	r2, r3, [sl]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f2 fc99 	bl	8000228 <__aeabi_dsub>
 800d8f6:	a37e      	add	r3, pc, #504	; (adr r3, 800daf0 <__ieee754_rem_pio2+0x318>)
 800d8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fc:	e7e0      	b.n	800d8c0 <__ieee754_rem_pio2+0xe8>
 800d8fe:	4b87      	ldr	r3, [pc, #540]	; (800db1c <__ieee754_rem_pio2+0x344>)
 800d900:	4598      	cmp	r8, r3
 800d902:	f300 80d8 	bgt.w	800dab6 <__ieee754_rem_pio2+0x2de>
 800d906:	f000 fb0f 	bl	800df28 <fabs>
 800d90a:	ec55 4b10 	vmov	r4, r5, d0
 800d90e:	ee10 0a10 	vmov	r0, s0
 800d912:	a379      	add	r3, pc, #484	; (adr r3, 800daf8 <__ieee754_rem_pio2+0x320>)
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	4629      	mov	r1, r5
 800d91a:	f7f2 fe3d 	bl	8000598 <__aeabi_dmul>
 800d91e:	4b80      	ldr	r3, [pc, #512]	; (800db20 <__ieee754_rem_pio2+0x348>)
 800d920:	2200      	movs	r2, #0
 800d922:	f7f2 fc83 	bl	800022c <__adddf3>
 800d926:	f7f3 f8e7 	bl	8000af8 <__aeabi_d2iz>
 800d92a:	4683      	mov	fp, r0
 800d92c:	f7f2 fdca 	bl	80004c4 <__aeabi_i2d>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	ec43 2b18 	vmov	d8, r2, r3
 800d938:	a367      	add	r3, pc, #412	; (adr r3, 800dad8 <__ieee754_rem_pio2+0x300>)
 800d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93e:	f7f2 fe2b 	bl	8000598 <__aeabi_dmul>
 800d942:	4602      	mov	r2, r0
 800d944:	460b      	mov	r3, r1
 800d946:	4620      	mov	r0, r4
 800d948:	4629      	mov	r1, r5
 800d94a:	f7f2 fc6d 	bl	8000228 <__aeabi_dsub>
 800d94e:	a364      	add	r3, pc, #400	; (adr r3, 800dae0 <__ieee754_rem_pio2+0x308>)
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	4606      	mov	r6, r0
 800d956:	460f      	mov	r7, r1
 800d958:	ec51 0b18 	vmov	r0, r1, d8
 800d95c:	f7f2 fe1c 	bl	8000598 <__aeabi_dmul>
 800d960:	f1bb 0f1f 	cmp.w	fp, #31
 800d964:	4604      	mov	r4, r0
 800d966:	460d      	mov	r5, r1
 800d968:	dc0d      	bgt.n	800d986 <__ieee754_rem_pio2+0x1ae>
 800d96a:	4b6e      	ldr	r3, [pc, #440]	; (800db24 <__ieee754_rem_pio2+0x34c>)
 800d96c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d974:	4543      	cmp	r3, r8
 800d976:	d006      	beq.n	800d986 <__ieee754_rem_pio2+0x1ae>
 800d978:	4622      	mov	r2, r4
 800d97a:	462b      	mov	r3, r5
 800d97c:	4630      	mov	r0, r6
 800d97e:	4639      	mov	r1, r7
 800d980:	f7f2 fc52 	bl	8000228 <__aeabi_dsub>
 800d984:	e00e      	b.n	800d9a4 <__ieee754_rem_pio2+0x1cc>
 800d986:	462b      	mov	r3, r5
 800d988:	4622      	mov	r2, r4
 800d98a:	4630      	mov	r0, r6
 800d98c:	4639      	mov	r1, r7
 800d98e:	f7f2 fc4b 	bl	8000228 <__aeabi_dsub>
 800d992:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d996:	9303      	str	r3, [sp, #12]
 800d998:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d99c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d9a0:	2b10      	cmp	r3, #16
 800d9a2:	dc02      	bgt.n	800d9aa <__ieee754_rem_pio2+0x1d2>
 800d9a4:	e9ca 0100 	strd	r0, r1, [sl]
 800d9a8:	e039      	b.n	800da1e <__ieee754_rem_pio2+0x246>
 800d9aa:	a34f      	add	r3, pc, #316	; (adr r3, 800dae8 <__ieee754_rem_pio2+0x310>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	ec51 0b18 	vmov	r0, r1, d8
 800d9b4:	f7f2 fdf0 	bl	8000598 <__aeabi_dmul>
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	460d      	mov	r5, r1
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	4639      	mov	r1, r7
 800d9c4:	f7f2 fc30 	bl	8000228 <__aeabi_dsub>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	4639      	mov	r1, r7
 800d9d4:	f7f2 fc28 	bl	8000228 <__aeabi_dsub>
 800d9d8:	4622      	mov	r2, r4
 800d9da:	462b      	mov	r3, r5
 800d9dc:	f7f2 fc24 	bl	8000228 <__aeabi_dsub>
 800d9e0:	a343      	add	r3, pc, #268	; (adr r3, 800daf0 <__ieee754_rem_pio2+0x318>)
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	460d      	mov	r5, r1
 800d9ea:	ec51 0b18 	vmov	r0, r1, d8
 800d9ee:	f7f2 fdd3 	bl	8000598 <__aeabi_dmul>
 800d9f2:	4622      	mov	r2, r4
 800d9f4:	462b      	mov	r3, r5
 800d9f6:	f7f2 fc17 	bl	8000228 <__aeabi_dsub>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4604      	mov	r4, r0
 800da00:	460d      	mov	r5, r1
 800da02:	4640      	mov	r0, r8
 800da04:	4649      	mov	r1, r9
 800da06:	f7f2 fc0f 	bl	8000228 <__aeabi_dsub>
 800da0a:	9a03      	ldr	r2, [sp, #12]
 800da0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	2b31      	cmp	r3, #49	; 0x31
 800da14:	dc24      	bgt.n	800da60 <__ieee754_rem_pio2+0x288>
 800da16:	e9ca 0100 	strd	r0, r1, [sl]
 800da1a:	4646      	mov	r6, r8
 800da1c:	464f      	mov	r7, r9
 800da1e:	e9da 8900 	ldrd	r8, r9, [sl]
 800da22:	4630      	mov	r0, r6
 800da24:	4642      	mov	r2, r8
 800da26:	464b      	mov	r3, r9
 800da28:	4639      	mov	r1, r7
 800da2a:	f7f2 fbfd 	bl	8000228 <__aeabi_dsub>
 800da2e:	462b      	mov	r3, r5
 800da30:	4622      	mov	r2, r4
 800da32:	f7f2 fbf9 	bl	8000228 <__aeabi_dsub>
 800da36:	9b02      	ldr	r3, [sp, #8]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da3e:	f6bf af0b 	bge.w	800d858 <__ieee754_rem_pio2+0x80>
 800da42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800da46:	f8ca 3004 	str.w	r3, [sl, #4]
 800da4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da4e:	f8ca 8000 	str.w	r8, [sl]
 800da52:	f8ca 0008 	str.w	r0, [sl, #8]
 800da56:	f8ca 300c 	str.w	r3, [sl, #12]
 800da5a:	f1cb 0b00 	rsb	fp, fp, #0
 800da5e:	e6fb      	b.n	800d858 <__ieee754_rem_pio2+0x80>
 800da60:	a327      	add	r3, pc, #156	; (adr r3, 800db00 <__ieee754_rem_pio2+0x328>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	ec51 0b18 	vmov	r0, r1, d8
 800da6a:	f7f2 fd95 	bl	8000598 <__aeabi_dmul>
 800da6e:	4604      	mov	r4, r0
 800da70:	460d      	mov	r5, r1
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	4640      	mov	r0, r8
 800da78:	4649      	mov	r1, r9
 800da7a:	f7f2 fbd5 	bl	8000228 <__aeabi_dsub>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	4640      	mov	r0, r8
 800da88:	4649      	mov	r1, r9
 800da8a:	f7f2 fbcd 	bl	8000228 <__aeabi_dsub>
 800da8e:	4622      	mov	r2, r4
 800da90:	462b      	mov	r3, r5
 800da92:	f7f2 fbc9 	bl	8000228 <__aeabi_dsub>
 800da96:	a31c      	add	r3, pc, #112	; (adr r3, 800db08 <__ieee754_rem_pio2+0x330>)
 800da98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9c:	4604      	mov	r4, r0
 800da9e:	460d      	mov	r5, r1
 800daa0:	ec51 0b18 	vmov	r0, r1, d8
 800daa4:	f7f2 fd78 	bl	8000598 <__aeabi_dmul>
 800daa8:	4622      	mov	r2, r4
 800daaa:	462b      	mov	r3, r5
 800daac:	f7f2 fbbc 	bl	8000228 <__aeabi_dsub>
 800dab0:	4604      	mov	r4, r0
 800dab2:	460d      	mov	r5, r1
 800dab4:	e760      	b.n	800d978 <__ieee754_rem_pio2+0x1a0>
 800dab6:	4b1c      	ldr	r3, [pc, #112]	; (800db28 <__ieee754_rem_pio2+0x350>)
 800dab8:	4598      	cmp	r8, r3
 800daba:	dd37      	ble.n	800db2c <__ieee754_rem_pio2+0x354>
 800dabc:	ee10 2a10 	vmov	r2, s0
 800dac0:	462b      	mov	r3, r5
 800dac2:	4620      	mov	r0, r4
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7f2 fbaf 	bl	8000228 <__aeabi_dsub>
 800daca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dace:	e9ca 0100 	strd	r0, r1, [sl]
 800dad2:	e695      	b.n	800d800 <__ieee754_rem_pio2+0x28>
 800dad4:	f3af 8000 	nop.w
 800dad8:	54400000 	.word	0x54400000
 800dadc:	3ff921fb 	.word	0x3ff921fb
 800dae0:	1a626331 	.word	0x1a626331
 800dae4:	3dd0b461 	.word	0x3dd0b461
 800dae8:	1a600000 	.word	0x1a600000
 800daec:	3dd0b461 	.word	0x3dd0b461
 800daf0:	2e037073 	.word	0x2e037073
 800daf4:	3ba3198a 	.word	0x3ba3198a
 800daf8:	6dc9c883 	.word	0x6dc9c883
 800dafc:	3fe45f30 	.word	0x3fe45f30
 800db00:	2e000000 	.word	0x2e000000
 800db04:	3ba3198a 	.word	0x3ba3198a
 800db08:	252049c1 	.word	0x252049c1
 800db0c:	397b839a 	.word	0x397b839a
 800db10:	3fe921fb 	.word	0x3fe921fb
 800db14:	4002d97b 	.word	0x4002d97b
 800db18:	3ff921fb 	.word	0x3ff921fb
 800db1c:	413921fb 	.word	0x413921fb
 800db20:	3fe00000 	.word	0x3fe00000
 800db24:	0800ef68 	.word	0x0800ef68
 800db28:	7fefffff 	.word	0x7fefffff
 800db2c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800db30:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800db34:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800db38:	4620      	mov	r0, r4
 800db3a:	460d      	mov	r5, r1
 800db3c:	f7f2 ffdc 	bl	8000af8 <__aeabi_d2iz>
 800db40:	f7f2 fcc0 	bl	80004c4 <__aeabi_i2d>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4620      	mov	r0, r4
 800db4a:	4629      	mov	r1, r5
 800db4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db50:	f7f2 fb6a 	bl	8000228 <__aeabi_dsub>
 800db54:	4b21      	ldr	r3, [pc, #132]	; (800dbdc <__ieee754_rem_pio2+0x404>)
 800db56:	2200      	movs	r2, #0
 800db58:	f7f2 fd1e 	bl	8000598 <__aeabi_dmul>
 800db5c:	460d      	mov	r5, r1
 800db5e:	4604      	mov	r4, r0
 800db60:	f7f2 ffca 	bl	8000af8 <__aeabi_d2iz>
 800db64:	f7f2 fcae 	bl	80004c4 <__aeabi_i2d>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4620      	mov	r0, r4
 800db6e:	4629      	mov	r1, r5
 800db70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800db74:	f7f2 fb58 	bl	8000228 <__aeabi_dsub>
 800db78:	4b18      	ldr	r3, [pc, #96]	; (800dbdc <__ieee754_rem_pio2+0x404>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	f7f2 fd0c 	bl	8000598 <__aeabi_dmul>
 800db80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800db84:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800db88:	2703      	movs	r7, #3
 800db8a:	2400      	movs	r4, #0
 800db8c:	2500      	movs	r5, #0
 800db8e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800db92:	4622      	mov	r2, r4
 800db94:	462b      	mov	r3, r5
 800db96:	46b9      	mov	r9, r7
 800db98:	3f01      	subs	r7, #1
 800db9a:	f7f2 ff65 	bl	8000a68 <__aeabi_dcmpeq>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d1f5      	bne.n	800db8e <__ieee754_rem_pio2+0x3b6>
 800dba2:	4b0f      	ldr	r3, [pc, #60]	; (800dbe0 <__ieee754_rem_pio2+0x408>)
 800dba4:	9301      	str	r3, [sp, #4]
 800dba6:	2302      	movs	r3, #2
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	4632      	mov	r2, r6
 800dbac:	464b      	mov	r3, r9
 800dbae:	4651      	mov	r1, sl
 800dbb0:	a804      	add	r0, sp, #16
 800dbb2:	f000 f9c5 	bl	800df40 <__kernel_rem_pio2>
 800dbb6:	9b02      	ldr	r3, [sp, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	4683      	mov	fp, r0
 800dbbc:	f6bf ae4c 	bge.w	800d858 <__ieee754_rem_pio2+0x80>
 800dbc0:	e9da 2100 	ldrd	r2, r1, [sl]
 800dbc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbc8:	e9ca 2300 	strd	r2, r3, [sl]
 800dbcc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800dbd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800dbd8:	e73f      	b.n	800da5a <__ieee754_rem_pio2+0x282>
 800dbda:	bf00      	nop
 800dbdc:	41700000 	.word	0x41700000
 800dbe0:	0800efe8 	.word	0x0800efe8
 800dbe4:	00000000 	.word	0x00000000

0800dbe8 <atan>:
 800dbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbec:	ec55 4b10 	vmov	r4, r5, d0
 800dbf0:	4bc3      	ldr	r3, [pc, #780]	; (800df00 <atan+0x318>)
 800dbf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dbf6:	429e      	cmp	r6, r3
 800dbf8:	46ab      	mov	fp, r5
 800dbfa:	dd18      	ble.n	800dc2e <atan+0x46>
 800dbfc:	4bc1      	ldr	r3, [pc, #772]	; (800df04 <atan+0x31c>)
 800dbfe:	429e      	cmp	r6, r3
 800dc00:	dc01      	bgt.n	800dc06 <atan+0x1e>
 800dc02:	d109      	bne.n	800dc18 <atan+0x30>
 800dc04:	b144      	cbz	r4, 800dc18 <atan+0x30>
 800dc06:	4622      	mov	r2, r4
 800dc08:	462b      	mov	r3, r5
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f7f2 fb0d 	bl	800022c <__adddf3>
 800dc12:	4604      	mov	r4, r0
 800dc14:	460d      	mov	r5, r1
 800dc16:	e006      	b.n	800dc26 <atan+0x3e>
 800dc18:	f1bb 0f00 	cmp.w	fp, #0
 800dc1c:	f300 8131 	bgt.w	800de82 <atan+0x29a>
 800dc20:	a59b      	add	r5, pc, #620	; (adr r5, 800de90 <atan+0x2a8>)
 800dc22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc26:	ec45 4b10 	vmov	d0, r4, r5
 800dc2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2e:	4bb6      	ldr	r3, [pc, #728]	; (800df08 <atan+0x320>)
 800dc30:	429e      	cmp	r6, r3
 800dc32:	dc14      	bgt.n	800dc5e <atan+0x76>
 800dc34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dc38:	429e      	cmp	r6, r3
 800dc3a:	dc0d      	bgt.n	800dc58 <atan+0x70>
 800dc3c:	a396      	add	r3, pc, #600	; (adr r3, 800de98 <atan+0x2b0>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	ee10 0a10 	vmov	r0, s0
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f2 faf0 	bl	800022c <__adddf3>
 800dc4c:	4baf      	ldr	r3, [pc, #700]	; (800df0c <atan+0x324>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f7f2 ff32 	bl	8000ab8 <__aeabi_dcmpgt>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d1e6      	bne.n	800dc26 <atan+0x3e>
 800dc58:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dc5c:	e02b      	b.n	800dcb6 <atan+0xce>
 800dc5e:	f000 f963 	bl	800df28 <fabs>
 800dc62:	4bab      	ldr	r3, [pc, #684]	; (800df10 <atan+0x328>)
 800dc64:	429e      	cmp	r6, r3
 800dc66:	ec55 4b10 	vmov	r4, r5, d0
 800dc6a:	f300 80bf 	bgt.w	800ddec <atan+0x204>
 800dc6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dc72:	429e      	cmp	r6, r3
 800dc74:	f300 80a0 	bgt.w	800ddb8 <atan+0x1d0>
 800dc78:	ee10 2a10 	vmov	r2, s0
 800dc7c:	ee10 0a10 	vmov	r0, s0
 800dc80:	462b      	mov	r3, r5
 800dc82:	4629      	mov	r1, r5
 800dc84:	f7f2 fad2 	bl	800022c <__adddf3>
 800dc88:	4ba0      	ldr	r3, [pc, #640]	; (800df0c <atan+0x324>)
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f7f2 facc 	bl	8000228 <__aeabi_dsub>
 800dc90:	2200      	movs	r2, #0
 800dc92:	4606      	mov	r6, r0
 800dc94:	460f      	mov	r7, r1
 800dc96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	f7f2 fac5 	bl	800022c <__adddf3>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	4630      	mov	r0, r6
 800dca8:	4639      	mov	r1, r7
 800dcaa:	f7f2 fd9f 	bl	80007ec <__aeabi_ddiv>
 800dcae:	f04f 0a00 	mov.w	sl, #0
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	460d      	mov	r5, r1
 800dcb6:	4622      	mov	r2, r4
 800dcb8:	462b      	mov	r3, r5
 800dcba:	4620      	mov	r0, r4
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	f7f2 fc6b 	bl	8000598 <__aeabi_dmul>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4680      	mov	r8, r0
 800dcc8:	4689      	mov	r9, r1
 800dcca:	f7f2 fc65 	bl	8000598 <__aeabi_dmul>
 800dcce:	a374      	add	r3, pc, #464	; (adr r3, 800dea0 <atan+0x2b8>)
 800dcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	460f      	mov	r7, r1
 800dcd8:	f7f2 fc5e 	bl	8000598 <__aeabi_dmul>
 800dcdc:	a372      	add	r3, pc, #456	; (adr r3, 800dea8 <atan+0x2c0>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	f7f2 faa3 	bl	800022c <__adddf3>
 800dce6:	4632      	mov	r2, r6
 800dce8:	463b      	mov	r3, r7
 800dcea:	f7f2 fc55 	bl	8000598 <__aeabi_dmul>
 800dcee:	a370      	add	r3, pc, #448	; (adr r3, 800deb0 <atan+0x2c8>)
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	f7f2 fa9a 	bl	800022c <__adddf3>
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	463b      	mov	r3, r7
 800dcfc:	f7f2 fc4c 	bl	8000598 <__aeabi_dmul>
 800dd00:	a36d      	add	r3, pc, #436	; (adr r3, 800deb8 <atan+0x2d0>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	f7f2 fa91 	bl	800022c <__adddf3>
 800dd0a:	4632      	mov	r2, r6
 800dd0c:	463b      	mov	r3, r7
 800dd0e:	f7f2 fc43 	bl	8000598 <__aeabi_dmul>
 800dd12:	a36b      	add	r3, pc, #428	; (adr r3, 800dec0 <atan+0x2d8>)
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	f7f2 fa88 	bl	800022c <__adddf3>
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	463b      	mov	r3, r7
 800dd20:	f7f2 fc3a 	bl	8000598 <__aeabi_dmul>
 800dd24:	a368      	add	r3, pc, #416	; (adr r3, 800dec8 <atan+0x2e0>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	f7f2 fa7f 	bl	800022c <__adddf3>
 800dd2e:	4642      	mov	r2, r8
 800dd30:	464b      	mov	r3, r9
 800dd32:	f7f2 fc31 	bl	8000598 <__aeabi_dmul>
 800dd36:	a366      	add	r3, pc, #408	; (adr r3, 800ded0 <atan+0x2e8>)
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	4680      	mov	r8, r0
 800dd3e:	4689      	mov	r9, r1
 800dd40:	4630      	mov	r0, r6
 800dd42:	4639      	mov	r1, r7
 800dd44:	f7f2 fc28 	bl	8000598 <__aeabi_dmul>
 800dd48:	a363      	add	r3, pc, #396	; (adr r3, 800ded8 <atan+0x2f0>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fa6b 	bl	8000228 <__aeabi_dsub>
 800dd52:	4632      	mov	r2, r6
 800dd54:	463b      	mov	r3, r7
 800dd56:	f7f2 fc1f 	bl	8000598 <__aeabi_dmul>
 800dd5a:	a361      	add	r3, pc, #388	; (adr r3, 800dee0 <atan+0x2f8>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	f7f2 fa62 	bl	8000228 <__aeabi_dsub>
 800dd64:	4632      	mov	r2, r6
 800dd66:	463b      	mov	r3, r7
 800dd68:	f7f2 fc16 	bl	8000598 <__aeabi_dmul>
 800dd6c:	a35e      	add	r3, pc, #376	; (adr r3, 800dee8 <atan+0x300>)
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	f7f2 fa59 	bl	8000228 <__aeabi_dsub>
 800dd76:	4632      	mov	r2, r6
 800dd78:	463b      	mov	r3, r7
 800dd7a:	f7f2 fc0d 	bl	8000598 <__aeabi_dmul>
 800dd7e:	a35c      	add	r3, pc, #368	; (adr r3, 800def0 <atan+0x308>)
 800dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd84:	f7f2 fa50 	bl	8000228 <__aeabi_dsub>
 800dd88:	4632      	mov	r2, r6
 800dd8a:	463b      	mov	r3, r7
 800dd8c:	f7f2 fc04 	bl	8000598 <__aeabi_dmul>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	4640      	mov	r0, r8
 800dd96:	4649      	mov	r1, r9
 800dd98:	f7f2 fa48 	bl	800022c <__adddf3>
 800dd9c:	4622      	mov	r2, r4
 800dd9e:	462b      	mov	r3, r5
 800dda0:	f7f2 fbfa 	bl	8000598 <__aeabi_dmul>
 800dda4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	d14b      	bne.n	800de46 <atan+0x25e>
 800ddae:	4620      	mov	r0, r4
 800ddb0:	4629      	mov	r1, r5
 800ddb2:	f7f2 fa39 	bl	8000228 <__aeabi_dsub>
 800ddb6:	e72c      	b.n	800dc12 <atan+0x2a>
 800ddb8:	ee10 0a10 	vmov	r0, s0
 800ddbc:	4b53      	ldr	r3, [pc, #332]	; (800df0c <atan+0x324>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7f2 fa31 	bl	8000228 <__aeabi_dsub>
 800ddc6:	4b51      	ldr	r3, [pc, #324]	; (800df0c <atan+0x324>)
 800ddc8:	4606      	mov	r6, r0
 800ddca:	460f      	mov	r7, r1
 800ddcc:	2200      	movs	r2, #0
 800ddce:	4620      	mov	r0, r4
 800ddd0:	4629      	mov	r1, r5
 800ddd2:	f7f2 fa2b 	bl	800022c <__adddf3>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4630      	mov	r0, r6
 800dddc:	4639      	mov	r1, r7
 800ddde:	f7f2 fd05 	bl	80007ec <__aeabi_ddiv>
 800dde2:	f04f 0a01 	mov.w	sl, #1
 800dde6:	4604      	mov	r4, r0
 800dde8:	460d      	mov	r5, r1
 800ddea:	e764      	b.n	800dcb6 <atan+0xce>
 800ddec:	4b49      	ldr	r3, [pc, #292]	; (800df14 <atan+0x32c>)
 800ddee:	429e      	cmp	r6, r3
 800ddf0:	da1d      	bge.n	800de2e <atan+0x246>
 800ddf2:	ee10 0a10 	vmov	r0, s0
 800ddf6:	4b48      	ldr	r3, [pc, #288]	; (800df18 <atan+0x330>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	f7f2 fa14 	bl	8000228 <__aeabi_dsub>
 800de00:	4b45      	ldr	r3, [pc, #276]	; (800df18 <atan+0x330>)
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	2200      	movs	r2, #0
 800de08:	4620      	mov	r0, r4
 800de0a:	4629      	mov	r1, r5
 800de0c:	f7f2 fbc4 	bl	8000598 <__aeabi_dmul>
 800de10:	4b3e      	ldr	r3, [pc, #248]	; (800df0c <atan+0x324>)
 800de12:	2200      	movs	r2, #0
 800de14:	f7f2 fa0a 	bl	800022c <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4630      	mov	r0, r6
 800de1e:	4639      	mov	r1, r7
 800de20:	f7f2 fce4 	bl	80007ec <__aeabi_ddiv>
 800de24:	f04f 0a02 	mov.w	sl, #2
 800de28:	4604      	mov	r4, r0
 800de2a:	460d      	mov	r5, r1
 800de2c:	e743      	b.n	800dcb6 <atan+0xce>
 800de2e:	462b      	mov	r3, r5
 800de30:	ee10 2a10 	vmov	r2, s0
 800de34:	4939      	ldr	r1, [pc, #228]	; (800df1c <atan+0x334>)
 800de36:	2000      	movs	r0, #0
 800de38:	f7f2 fcd8 	bl	80007ec <__aeabi_ddiv>
 800de3c:	f04f 0a03 	mov.w	sl, #3
 800de40:	4604      	mov	r4, r0
 800de42:	460d      	mov	r5, r1
 800de44:	e737      	b.n	800dcb6 <atan+0xce>
 800de46:	4b36      	ldr	r3, [pc, #216]	; (800df20 <atan+0x338>)
 800de48:	4e36      	ldr	r6, [pc, #216]	; (800df24 <atan+0x33c>)
 800de4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	f7f2 f9e9 	bl	8000228 <__aeabi_dsub>
 800de56:	4622      	mov	r2, r4
 800de58:	462b      	mov	r3, r5
 800de5a:	f7f2 f9e5 	bl	8000228 <__aeabi_dsub>
 800de5e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	e9d6 0100 	ldrd	r0, r1, [r6]
 800de6a:	f7f2 f9dd 	bl	8000228 <__aeabi_dsub>
 800de6e:	f1bb 0f00 	cmp.w	fp, #0
 800de72:	4604      	mov	r4, r0
 800de74:	460d      	mov	r5, r1
 800de76:	f6bf aed6 	bge.w	800dc26 <atan+0x3e>
 800de7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de7e:	461d      	mov	r5, r3
 800de80:	e6d1      	b.n	800dc26 <atan+0x3e>
 800de82:	a51d      	add	r5, pc, #116	; (adr r5, 800def8 <atan+0x310>)
 800de84:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de88:	e6cd      	b.n	800dc26 <atan+0x3e>
 800de8a:	bf00      	nop
 800de8c:	f3af 8000 	nop.w
 800de90:	54442d18 	.word	0x54442d18
 800de94:	bff921fb 	.word	0xbff921fb
 800de98:	8800759c 	.word	0x8800759c
 800de9c:	7e37e43c 	.word	0x7e37e43c
 800dea0:	e322da11 	.word	0xe322da11
 800dea4:	3f90ad3a 	.word	0x3f90ad3a
 800dea8:	24760deb 	.word	0x24760deb
 800deac:	3fa97b4b 	.word	0x3fa97b4b
 800deb0:	a0d03d51 	.word	0xa0d03d51
 800deb4:	3fb10d66 	.word	0x3fb10d66
 800deb8:	c54c206e 	.word	0xc54c206e
 800debc:	3fb745cd 	.word	0x3fb745cd
 800dec0:	920083ff 	.word	0x920083ff
 800dec4:	3fc24924 	.word	0x3fc24924
 800dec8:	5555550d 	.word	0x5555550d
 800decc:	3fd55555 	.word	0x3fd55555
 800ded0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ded4:	bfa2b444 	.word	0xbfa2b444
 800ded8:	52defd9a 	.word	0x52defd9a
 800dedc:	3fadde2d 	.word	0x3fadde2d
 800dee0:	af749a6d 	.word	0xaf749a6d
 800dee4:	3fb3b0f2 	.word	0x3fb3b0f2
 800dee8:	fe231671 	.word	0xfe231671
 800deec:	3fbc71c6 	.word	0x3fbc71c6
 800def0:	9998ebc4 	.word	0x9998ebc4
 800def4:	3fc99999 	.word	0x3fc99999
 800def8:	54442d18 	.word	0x54442d18
 800defc:	3ff921fb 	.word	0x3ff921fb
 800df00:	440fffff 	.word	0x440fffff
 800df04:	7ff00000 	.word	0x7ff00000
 800df08:	3fdbffff 	.word	0x3fdbffff
 800df0c:	3ff00000 	.word	0x3ff00000
 800df10:	3ff2ffff 	.word	0x3ff2ffff
 800df14:	40038000 	.word	0x40038000
 800df18:	3ff80000 	.word	0x3ff80000
 800df1c:	bff00000 	.word	0xbff00000
 800df20:	0800f110 	.word	0x0800f110
 800df24:	0800f0f0 	.word	0x0800f0f0

0800df28 <fabs>:
 800df28:	ec51 0b10 	vmov	r0, r1, d0
 800df2c:	ee10 2a10 	vmov	r2, s0
 800df30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df34:	ec43 2b10 	vmov	d0, r2, r3
 800df38:	4770      	bx	lr
 800df3a:	0000      	movs	r0, r0
 800df3c:	0000      	movs	r0, r0
	...

0800df40 <__kernel_rem_pio2>:
 800df40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df44:	ed2d 8b02 	vpush	{d8}
 800df48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800df4c:	f112 0f14 	cmn.w	r2, #20
 800df50:	9306      	str	r3, [sp, #24]
 800df52:	9104      	str	r1, [sp, #16]
 800df54:	4bc2      	ldr	r3, [pc, #776]	; (800e260 <__kernel_rem_pio2+0x320>)
 800df56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800df58:	9009      	str	r0, [sp, #36]	; 0x24
 800df5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	9b06      	ldr	r3, [sp, #24]
 800df62:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800df66:	bfa8      	it	ge
 800df68:	1ed4      	subge	r4, r2, #3
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	bfb2      	itee	lt
 800df6e:	2400      	movlt	r4, #0
 800df70:	2318      	movge	r3, #24
 800df72:	fb94 f4f3 	sdivge	r4, r4, r3
 800df76:	f06f 0317 	mvn.w	r3, #23
 800df7a:	fb04 3303 	mla	r3, r4, r3, r3
 800df7e:	eb03 0a02 	add.w	sl, r3, r2
 800df82:	9b00      	ldr	r3, [sp, #0]
 800df84:	9a05      	ldr	r2, [sp, #20]
 800df86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e250 <__kernel_rem_pio2+0x310>
 800df8a:	eb03 0802 	add.w	r8, r3, r2
 800df8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800df90:	1aa7      	subs	r7, r4, r2
 800df92:	ae20      	add	r6, sp, #128	; 0x80
 800df94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800df98:	2500      	movs	r5, #0
 800df9a:	4545      	cmp	r5, r8
 800df9c:	dd13      	ble.n	800dfc6 <__kernel_rem_pio2+0x86>
 800df9e:	9b06      	ldr	r3, [sp, #24]
 800dfa0:	aa20      	add	r2, sp, #128	; 0x80
 800dfa2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dfa6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dfaa:	f04f 0800 	mov.w	r8, #0
 800dfae:	9b00      	ldr	r3, [sp, #0]
 800dfb0:	4598      	cmp	r8, r3
 800dfb2:	dc31      	bgt.n	800e018 <__kernel_rem_pio2+0xd8>
 800dfb4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e250 <__kernel_rem_pio2+0x310>
 800dfb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dfbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dfc0:	462f      	mov	r7, r5
 800dfc2:	2600      	movs	r6, #0
 800dfc4:	e01b      	b.n	800dffe <__kernel_rem_pio2+0xbe>
 800dfc6:	42ef      	cmn	r7, r5
 800dfc8:	d407      	bmi.n	800dfda <__kernel_rem_pio2+0x9a>
 800dfca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dfce:	f7f2 fa79 	bl	80004c4 <__aeabi_i2d>
 800dfd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dfd6:	3501      	adds	r5, #1
 800dfd8:	e7df      	b.n	800df9a <__kernel_rem_pio2+0x5a>
 800dfda:	ec51 0b18 	vmov	r0, r1, d8
 800dfde:	e7f8      	b.n	800dfd2 <__kernel_rem_pio2+0x92>
 800dfe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfe4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dfe8:	f7f2 fad6 	bl	8000598 <__aeabi_dmul>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dff4:	f7f2 f91a 	bl	800022c <__adddf3>
 800dff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dffc:	3601      	adds	r6, #1
 800dffe:	9b05      	ldr	r3, [sp, #20]
 800e000:	429e      	cmp	r6, r3
 800e002:	f1a7 0708 	sub.w	r7, r7, #8
 800e006:	ddeb      	ble.n	800dfe0 <__kernel_rem_pio2+0xa0>
 800e008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e00c:	f108 0801 	add.w	r8, r8, #1
 800e010:	ecab 7b02 	vstmia	fp!, {d7}
 800e014:	3508      	adds	r5, #8
 800e016:	e7ca      	b.n	800dfae <__kernel_rem_pio2+0x6e>
 800e018:	9b00      	ldr	r3, [sp, #0]
 800e01a:	aa0c      	add	r2, sp, #48	; 0x30
 800e01c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e020:	930b      	str	r3, [sp, #44]	; 0x2c
 800e022:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e024:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e028:	9c00      	ldr	r4, [sp, #0]
 800e02a:	930a      	str	r3, [sp, #40]	; 0x28
 800e02c:	00e3      	lsls	r3, r4, #3
 800e02e:	9308      	str	r3, [sp, #32]
 800e030:	ab98      	add	r3, sp, #608	; 0x260
 800e032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e036:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e03a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e03e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e040:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e044:	46c3      	mov	fp, r8
 800e046:	46a1      	mov	r9, r4
 800e048:	f1b9 0f00 	cmp.w	r9, #0
 800e04c:	f1a5 0508 	sub.w	r5, r5, #8
 800e050:	dc77      	bgt.n	800e142 <__kernel_rem_pio2+0x202>
 800e052:	ec47 6b10 	vmov	d0, r6, r7
 800e056:	4650      	mov	r0, sl
 800e058:	f000 fac2 	bl	800e5e0 <scalbn>
 800e05c:	ec57 6b10 	vmov	r6, r7, d0
 800e060:	2200      	movs	r2, #0
 800e062:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e066:	ee10 0a10 	vmov	r0, s0
 800e06a:	4639      	mov	r1, r7
 800e06c:	f7f2 fa94 	bl	8000598 <__aeabi_dmul>
 800e070:	ec41 0b10 	vmov	d0, r0, r1
 800e074:	f000 fb34 	bl	800e6e0 <floor>
 800e078:	4b7a      	ldr	r3, [pc, #488]	; (800e264 <__kernel_rem_pio2+0x324>)
 800e07a:	ec51 0b10 	vmov	r0, r1, d0
 800e07e:	2200      	movs	r2, #0
 800e080:	f7f2 fa8a 	bl	8000598 <__aeabi_dmul>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4630      	mov	r0, r6
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 f8cc 	bl	8000228 <__aeabi_dsub>
 800e090:	460f      	mov	r7, r1
 800e092:	4606      	mov	r6, r0
 800e094:	f7f2 fd30 	bl	8000af8 <__aeabi_d2iz>
 800e098:	9002      	str	r0, [sp, #8]
 800e09a:	f7f2 fa13 	bl	80004c4 <__aeabi_i2d>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 f8bf 	bl	8000228 <__aeabi_dsub>
 800e0aa:	f1ba 0f00 	cmp.w	sl, #0
 800e0ae:	4606      	mov	r6, r0
 800e0b0:	460f      	mov	r7, r1
 800e0b2:	dd6d      	ble.n	800e190 <__kernel_rem_pio2+0x250>
 800e0b4:	1e61      	subs	r1, r4, #1
 800e0b6:	ab0c      	add	r3, sp, #48	; 0x30
 800e0b8:	9d02      	ldr	r5, [sp, #8]
 800e0ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e0be:	f1ca 0018 	rsb	r0, sl, #24
 800e0c2:	fa43 f200 	asr.w	r2, r3, r0
 800e0c6:	4415      	add	r5, r2
 800e0c8:	4082      	lsls	r2, r0
 800e0ca:	1a9b      	subs	r3, r3, r2
 800e0cc:	aa0c      	add	r2, sp, #48	; 0x30
 800e0ce:	9502      	str	r5, [sp, #8]
 800e0d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e0d4:	f1ca 0217 	rsb	r2, sl, #23
 800e0d8:	fa43 fb02 	asr.w	fp, r3, r2
 800e0dc:	f1bb 0f00 	cmp.w	fp, #0
 800e0e0:	dd65      	ble.n	800e1ae <__kernel_rem_pio2+0x26e>
 800e0e2:	9b02      	ldr	r3, [sp, #8]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	9302      	str	r3, [sp, #8]
 800e0ea:	4615      	mov	r5, r2
 800e0ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e0f0:	4294      	cmp	r4, r2
 800e0f2:	f300 809f 	bgt.w	800e234 <__kernel_rem_pio2+0x2f4>
 800e0f6:	f1ba 0f00 	cmp.w	sl, #0
 800e0fa:	dd07      	ble.n	800e10c <__kernel_rem_pio2+0x1cc>
 800e0fc:	f1ba 0f01 	cmp.w	sl, #1
 800e100:	f000 80c1 	beq.w	800e286 <__kernel_rem_pio2+0x346>
 800e104:	f1ba 0f02 	cmp.w	sl, #2
 800e108:	f000 80c7 	beq.w	800e29a <__kernel_rem_pio2+0x35a>
 800e10c:	f1bb 0f02 	cmp.w	fp, #2
 800e110:	d14d      	bne.n	800e1ae <__kernel_rem_pio2+0x26e>
 800e112:	4632      	mov	r2, r6
 800e114:	463b      	mov	r3, r7
 800e116:	4954      	ldr	r1, [pc, #336]	; (800e268 <__kernel_rem_pio2+0x328>)
 800e118:	2000      	movs	r0, #0
 800e11a:	f7f2 f885 	bl	8000228 <__aeabi_dsub>
 800e11e:	4606      	mov	r6, r0
 800e120:	460f      	mov	r7, r1
 800e122:	2d00      	cmp	r5, #0
 800e124:	d043      	beq.n	800e1ae <__kernel_rem_pio2+0x26e>
 800e126:	4650      	mov	r0, sl
 800e128:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e258 <__kernel_rem_pio2+0x318>
 800e12c:	f000 fa58 	bl	800e5e0 <scalbn>
 800e130:	4630      	mov	r0, r6
 800e132:	4639      	mov	r1, r7
 800e134:	ec53 2b10 	vmov	r2, r3, d0
 800e138:	f7f2 f876 	bl	8000228 <__aeabi_dsub>
 800e13c:	4606      	mov	r6, r0
 800e13e:	460f      	mov	r7, r1
 800e140:	e035      	b.n	800e1ae <__kernel_rem_pio2+0x26e>
 800e142:	4b4a      	ldr	r3, [pc, #296]	; (800e26c <__kernel_rem_pio2+0x32c>)
 800e144:	2200      	movs	r2, #0
 800e146:	4630      	mov	r0, r6
 800e148:	4639      	mov	r1, r7
 800e14a:	f7f2 fa25 	bl	8000598 <__aeabi_dmul>
 800e14e:	f7f2 fcd3 	bl	8000af8 <__aeabi_d2iz>
 800e152:	f7f2 f9b7 	bl	80004c4 <__aeabi_i2d>
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	ec43 2b18 	vmov	d8, r2, r3
 800e15e:	4b44      	ldr	r3, [pc, #272]	; (800e270 <__kernel_rem_pio2+0x330>)
 800e160:	2200      	movs	r2, #0
 800e162:	f7f2 fa19 	bl	8000598 <__aeabi_dmul>
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	4630      	mov	r0, r6
 800e16c:	4639      	mov	r1, r7
 800e16e:	f7f2 f85b 	bl	8000228 <__aeabi_dsub>
 800e172:	f7f2 fcc1 	bl	8000af8 <__aeabi_d2iz>
 800e176:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e17a:	f84b 0b04 	str.w	r0, [fp], #4
 800e17e:	ec51 0b18 	vmov	r0, r1, d8
 800e182:	f7f2 f853 	bl	800022c <__adddf3>
 800e186:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e18a:	4606      	mov	r6, r0
 800e18c:	460f      	mov	r7, r1
 800e18e:	e75b      	b.n	800e048 <__kernel_rem_pio2+0x108>
 800e190:	d106      	bne.n	800e1a0 <__kernel_rem_pio2+0x260>
 800e192:	1e63      	subs	r3, r4, #1
 800e194:	aa0c      	add	r2, sp, #48	; 0x30
 800e196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e19a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e19e:	e79d      	b.n	800e0dc <__kernel_rem_pio2+0x19c>
 800e1a0:	4b34      	ldr	r3, [pc, #208]	; (800e274 <__kernel_rem_pio2+0x334>)
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f7f2 fc7e 	bl	8000aa4 <__aeabi_dcmpge>
 800e1a8:	2800      	cmp	r0, #0
 800e1aa:	d140      	bne.n	800e22e <__kernel_rem_pio2+0x2ee>
 800e1ac:	4683      	mov	fp, r0
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	f7f2 fc57 	bl	8000a68 <__aeabi_dcmpeq>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f000 80c1 	beq.w	800e342 <__kernel_rem_pio2+0x402>
 800e1c0:	1e65      	subs	r5, r4, #1
 800e1c2:	462b      	mov	r3, r5
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	9900      	ldr	r1, [sp, #0]
 800e1c8:	428b      	cmp	r3, r1
 800e1ca:	da6d      	bge.n	800e2a8 <__kernel_rem_pio2+0x368>
 800e1cc:	2a00      	cmp	r2, #0
 800e1ce:	f000 808a 	beq.w	800e2e6 <__kernel_rem_pio2+0x3a6>
 800e1d2:	ab0c      	add	r3, sp, #48	; 0x30
 800e1d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e1d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 80ae 	beq.w	800e33e <__kernel_rem_pio2+0x3fe>
 800e1e2:	4650      	mov	r0, sl
 800e1e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e258 <__kernel_rem_pio2+0x318>
 800e1e8:	f000 f9fa 	bl	800e5e0 <scalbn>
 800e1ec:	1c6b      	adds	r3, r5, #1
 800e1ee:	00da      	lsls	r2, r3, #3
 800e1f0:	9205      	str	r2, [sp, #20]
 800e1f2:	ec57 6b10 	vmov	r6, r7, d0
 800e1f6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e1f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e26c <__kernel_rem_pio2+0x32c>
 800e1fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e200:	462c      	mov	r4, r5
 800e202:	f04f 0800 	mov.w	r8, #0
 800e206:	2c00      	cmp	r4, #0
 800e208:	f280 80d4 	bge.w	800e3b4 <__kernel_rem_pio2+0x474>
 800e20c:	462c      	mov	r4, r5
 800e20e:	2c00      	cmp	r4, #0
 800e210:	f2c0 8102 	blt.w	800e418 <__kernel_rem_pio2+0x4d8>
 800e214:	4b18      	ldr	r3, [pc, #96]	; (800e278 <__kernel_rem_pio2+0x338>)
 800e216:	461e      	mov	r6, r3
 800e218:	ab70      	add	r3, sp, #448	; 0x1c0
 800e21a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e21e:	1b2b      	subs	r3, r5, r4
 800e220:	f04f 0900 	mov.w	r9, #0
 800e224:	f04f 0a00 	mov.w	sl, #0
 800e228:	2700      	movs	r7, #0
 800e22a:	9306      	str	r3, [sp, #24]
 800e22c:	e0e6      	b.n	800e3fc <__kernel_rem_pio2+0x4bc>
 800e22e:	f04f 0b02 	mov.w	fp, #2
 800e232:	e756      	b.n	800e0e2 <__kernel_rem_pio2+0x1a2>
 800e234:	f8d8 3000 	ldr.w	r3, [r8]
 800e238:	bb05      	cbnz	r5, 800e27c <__kernel_rem_pio2+0x33c>
 800e23a:	b123      	cbz	r3, 800e246 <__kernel_rem_pio2+0x306>
 800e23c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e240:	f8c8 3000 	str.w	r3, [r8]
 800e244:	2301      	movs	r3, #1
 800e246:	3201      	adds	r2, #1
 800e248:	f108 0804 	add.w	r8, r8, #4
 800e24c:	461d      	mov	r5, r3
 800e24e:	e74f      	b.n	800e0f0 <__kernel_rem_pio2+0x1b0>
	...
 800e25c:	3ff00000 	.word	0x3ff00000
 800e260:	0800f170 	.word	0x0800f170
 800e264:	40200000 	.word	0x40200000
 800e268:	3ff00000 	.word	0x3ff00000
 800e26c:	3e700000 	.word	0x3e700000
 800e270:	41700000 	.word	0x41700000
 800e274:	3fe00000 	.word	0x3fe00000
 800e278:	0800f130 	.word	0x0800f130
 800e27c:	1acb      	subs	r3, r1, r3
 800e27e:	f8c8 3000 	str.w	r3, [r8]
 800e282:	462b      	mov	r3, r5
 800e284:	e7df      	b.n	800e246 <__kernel_rem_pio2+0x306>
 800e286:	1e62      	subs	r2, r4, #1
 800e288:	ab0c      	add	r3, sp, #48	; 0x30
 800e28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e28e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e292:	a90c      	add	r1, sp, #48	; 0x30
 800e294:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e298:	e738      	b.n	800e10c <__kernel_rem_pio2+0x1cc>
 800e29a:	1e62      	subs	r2, r4, #1
 800e29c:	ab0c      	add	r3, sp, #48	; 0x30
 800e29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e2a6:	e7f4      	b.n	800e292 <__kernel_rem_pio2+0x352>
 800e2a8:	a90c      	add	r1, sp, #48	; 0x30
 800e2aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	430a      	orrs	r2, r1
 800e2b2:	e788      	b.n	800e1c6 <__kernel_rem_pio2+0x286>
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e2ba:	2900      	cmp	r1, #0
 800e2bc:	d0fa      	beq.n	800e2b4 <__kernel_rem_pio2+0x374>
 800e2be:	9a08      	ldr	r2, [sp, #32]
 800e2c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e2c4:	446a      	add	r2, sp
 800e2c6:	3a98      	subs	r2, #152	; 0x98
 800e2c8:	9208      	str	r2, [sp, #32]
 800e2ca:	9a06      	ldr	r2, [sp, #24]
 800e2cc:	a920      	add	r1, sp, #128	; 0x80
 800e2ce:	18a2      	adds	r2, r4, r2
 800e2d0:	18e3      	adds	r3, r4, r3
 800e2d2:	f104 0801 	add.w	r8, r4, #1
 800e2d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e2da:	9302      	str	r3, [sp, #8]
 800e2dc:	9b02      	ldr	r3, [sp, #8]
 800e2de:	4543      	cmp	r3, r8
 800e2e0:	da04      	bge.n	800e2ec <__kernel_rem_pio2+0x3ac>
 800e2e2:	461c      	mov	r4, r3
 800e2e4:	e6a2      	b.n	800e02c <__kernel_rem_pio2+0xec>
 800e2e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e7e4      	b.n	800e2b6 <__kernel_rem_pio2+0x376>
 800e2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e2f2:	f7f2 f8e7 	bl	80004c4 <__aeabi_i2d>
 800e2f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2fc:	46ab      	mov	fp, r5
 800e2fe:	461c      	mov	r4, r3
 800e300:	f04f 0900 	mov.w	r9, #0
 800e304:	2600      	movs	r6, #0
 800e306:	2700      	movs	r7, #0
 800e308:	9b05      	ldr	r3, [sp, #20]
 800e30a:	4599      	cmp	r9, r3
 800e30c:	dd06      	ble.n	800e31c <__kernel_rem_pio2+0x3dc>
 800e30e:	9b08      	ldr	r3, [sp, #32]
 800e310:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e314:	f108 0801 	add.w	r8, r8, #1
 800e318:	9308      	str	r3, [sp, #32]
 800e31a:	e7df      	b.n	800e2dc <__kernel_rem_pio2+0x39c>
 800e31c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e320:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e324:	f7f2 f938 	bl	8000598 <__aeabi_dmul>
 800e328:	4602      	mov	r2, r0
 800e32a:	460b      	mov	r3, r1
 800e32c:	4630      	mov	r0, r6
 800e32e:	4639      	mov	r1, r7
 800e330:	f7f1 ff7c 	bl	800022c <__adddf3>
 800e334:	f109 0901 	add.w	r9, r9, #1
 800e338:	4606      	mov	r6, r0
 800e33a:	460f      	mov	r7, r1
 800e33c:	e7e4      	b.n	800e308 <__kernel_rem_pio2+0x3c8>
 800e33e:	3d01      	subs	r5, #1
 800e340:	e747      	b.n	800e1d2 <__kernel_rem_pio2+0x292>
 800e342:	ec47 6b10 	vmov	d0, r6, r7
 800e346:	f1ca 0000 	rsb	r0, sl, #0
 800e34a:	f000 f949 	bl	800e5e0 <scalbn>
 800e34e:	ec57 6b10 	vmov	r6, r7, d0
 800e352:	4ba0      	ldr	r3, [pc, #640]	; (800e5d4 <__kernel_rem_pio2+0x694>)
 800e354:	ee10 0a10 	vmov	r0, s0
 800e358:	2200      	movs	r2, #0
 800e35a:	4639      	mov	r1, r7
 800e35c:	f7f2 fba2 	bl	8000aa4 <__aeabi_dcmpge>
 800e360:	b1f8      	cbz	r0, 800e3a2 <__kernel_rem_pio2+0x462>
 800e362:	4b9d      	ldr	r3, [pc, #628]	; (800e5d8 <__kernel_rem_pio2+0x698>)
 800e364:	2200      	movs	r2, #0
 800e366:	4630      	mov	r0, r6
 800e368:	4639      	mov	r1, r7
 800e36a:	f7f2 f915 	bl	8000598 <__aeabi_dmul>
 800e36e:	f7f2 fbc3 	bl	8000af8 <__aeabi_d2iz>
 800e372:	4680      	mov	r8, r0
 800e374:	f7f2 f8a6 	bl	80004c4 <__aeabi_i2d>
 800e378:	4b96      	ldr	r3, [pc, #600]	; (800e5d4 <__kernel_rem_pio2+0x694>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	f7f2 f90c 	bl	8000598 <__aeabi_dmul>
 800e380:	460b      	mov	r3, r1
 800e382:	4602      	mov	r2, r0
 800e384:	4639      	mov	r1, r7
 800e386:	4630      	mov	r0, r6
 800e388:	f7f1 ff4e 	bl	8000228 <__aeabi_dsub>
 800e38c:	f7f2 fbb4 	bl	8000af8 <__aeabi_d2iz>
 800e390:	1c65      	adds	r5, r4, #1
 800e392:	ab0c      	add	r3, sp, #48	; 0x30
 800e394:	f10a 0a18 	add.w	sl, sl, #24
 800e398:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e39c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e3a0:	e71f      	b.n	800e1e2 <__kernel_rem_pio2+0x2a2>
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	f7f2 fba7 	bl	8000af8 <__aeabi_d2iz>
 800e3aa:	ab0c      	add	r3, sp, #48	; 0x30
 800e3ac:	4625      	mov	r5, r4
 800e3ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e3b2:	e716      	b.n	800e1e2 <__kernel_rem_pio2+0x2a2>
 800e3b4:	ab0c      	add	r3, sp, #48	; 0x30
 800e3b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e3ba:	f7f2 f883 	bl	80004c4 <__aeabi_i2d>
 800e3be:	4632      	mov	r2, r6
 800e3c0:	463b      	mov	r3, r7
 800e3c2:	f7f2 f8e9 	bl	8000598 <__aeabi_dmul>
 800e3c6:	4642      	mov	r2, r8
 800e3c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e3cc:	464b      	mov	r3, r9
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	f7f2 f8e1 	bl	8000598 <__aeabi_dmul>
 800e3d6:	3c01      	subs	r4, #1
 800e3d8:	4606      	mov	r6, r0
 800e3da:	460f      	mov	r7, r1
 800e3dc:	e713      	b.n	800e206 <__kernel_rem_pio2+0x2c6>
 800e3de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e3e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e3e6:	f7f2 f8d7 	bl	8000598 <__aeabi_dmul>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	4648      	mov	r0, r9
 800e3f0:	4651      	mov	r1, sl
 800e3f2:	f7f1 ff1b 	bl	800022c <__adddf3>
 800e3f6:	3701      	adds	r7, #1
 800e3f8:	4681      	mov	r9, r0
 800e3fa:	468a      	mov	sl, r1
 800e3fc:	9b00      	ldr	r3, [sp, #0]
 800e3fe:	429f      	cmp	r7, r3
 800e400:	dc02      	bgt.n	800e408 <__kernel_rem_pio2+0x4c8>
 800e402:	9b06      	ldr	r3, [sp, #24]
 800e404:	429f      	cmp	r7, r3
 800e406:	ddea      	ble.n	800e3de <__kernel_rem_pio2+0x49e>
 800e408:	9a06      	ldr	r2, [sp, #24]
 800e40a:	ab48      	add	r3, sp, #288	; 0x120
 800e40c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e410:	e9c6 9a00 	strd	r9, sl, [r6]
 800e414:	3c01      	subs	r4, #1
 800e416:	e6fa      	b.n	800e20e <__kernel_rem_pio2+0x2ce>
 800e418:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	dc0b      	bgt.n	800e436 <__kernel_rem_pio2+0x4f6>
 800e41e:	2b00      	cmp	r3, #0
 800e420:	dc39      	bgt.n	800e496 <__kernel_rem_pio2+0x556>
 800e422:	d05d      	beq.n	800e4e0 <__kernel_rem_pio2+0x5a0>
 800e424:	9b02      	ldr	r3, [sp, #8]
 800e426:	f003 0007 	and.w	r0, r3, #7
 800e42a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e42e:	ecbd 8b02 	vpop	{d8}
 800e432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e436:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e438:	2b03      	cmp	r3, #3
 800e43a:	d1f3      	bne.n	800e424 <__kernel_rem_pio2+0x4e4>
 800e43c:	9b05      	ldr	r3, [sp, #20]
 800e43e:	9500      	str	r5, [sp, #0]
 800e440:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e444:	eb0d 0403 	add.w	r4, sp, r3
 800e448:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e44c:	46a2      	mov	sl, r4
 800e44e:	9b00      	ldr	r3, [sp, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	f1aa 0a08 	sub.w	sl, sl, #8
 800e456:	dc69      	bgt.n	800e52c <__kernel_rem_pio2+0x5ec>
 800e458:	46aa      	mov	sl, r5
 800e45a:	f1ba 0f01 	cmp.w	sl, #1
 800e45e:	f1a4 0408 	sub.w	r4, r4, #8
 800e462:	f300 8083 	bgt.w	800e56c <__kernel_rem_pio2+0x62c>
 800e466:	9c05      	ldr	r4, [sp, #20]
 800e468:	ab48      	add	r3, sp, #288	; 0x120
 800e46a:	441c      	add	r4, r3
 800e46c:	2000      	movs	r0, #0
 800e46e:	2100      	movs	r1, #0
 800e470:	2d01      	cmp	r5, #1
 800e472:	f300 809a 	bgt.w	800e5aa <__kernel_rem_pio2+0x66a>
 800e476:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e47a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e47e:	f1bb 0f00 	cmp.w	fp, #0
 800e482:	f040 8098 	bne.w	800e5b6 <__kernel_rem_pio2+0x676>
 800e486:	9b04      	ldr	r3, [sp, #16]
 800e488:	e9c3 7800 	strd	r7, r8, [r3]
 800e48c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e490:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e494:	e7c6      	b.n	800e424 <__kernel_rem_pio2+0x4e4>
 800e496:	9e05      	ldr	r6, [sp, #20]
 800e498:	ab48      	add	r3, sp, #288	; 0x120
 800e49a:	441e      	add	r6, r3
 800e49c:	462c      	mov	r4, r5
 800e49e:	2000      	movs	r0, #0
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	2c00      	cmp	r4, #0
 800e4a4:	da33      	bge.n	800e50e <__kernel_rem_pio2+0x5ce>
 800e4a6:	f1bb 0f00 	cmp.w	fp, #0
 800e4aa:	d036      	beq.n	800e51a <__kernel_rem_pio2+0x5da>
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4b2:	9c04      	ldr	r4, [sp, #16]
 800e4b4:	e9c4 2300 	strd	r2, r3, [r4]
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e4c0:	f7f1 feb2 	bl	8000228 <__aeabi_dsub>
 800e4c4:	ae4a      	add	r6, sp, #296	; 0x128
 800e4c6:	2401      	movs	r4, #1
 800e4c8:	42a5      	cmp	r5, r4
 800e4ca:	da29      	bge.n	800e520 <__kernel_rem_pio2+0x5e0>
 800e4cc:	f1bb 0f00 	cmp.w	fp, #0
 800e4d0:	d002      	beq.n	800e4d8 <__kernel_rem_pio2+0x598>
 800e4d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	9b04      	ldr	r3, [sp, #16]
 800e4da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e4de:	e7a1      	b.n	800e424 <__kernel_rem_pio2+0x4e4>
 800e4e0:	9c05      	ldr	r4, [sp, #20]
 800e4e2:	ab48      	add	r3, sp, #288	; 0x120
 800e4e4:	441c      	add	r4, r3
 800e4e6:	2000      	movs	r0, #0
 800e4e8:	2100      	movs	r1, #0
 800e4ea:	2d00      	cmp	r5, #0
 800e4ec:	da09      	bge.n	800e502 <__kernel_rem_pio2+0x5c2>
 800e4ee:	f1bb 0f00 	cmp.w	fp, #0
 800e4f2:	d002      	beq.n	800e4fa <__kernel_rem_pio2+0x5ba>
 800e4f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	9b04      	ldr	r3, [sp, #16]
 800e4fc:	e9c3 0100 	strd	r0, r1, [r3]
 800e500:	e790      	b.n	800e424 <__kernel_rem_pio2+0x4e4>
 800e502:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e506:	f7f1 fe91 	bl	800022c <__adddf3>
 800e50a:	3d01      	subs	r5, #1
 800e50c:	e7ed      	b.n	800e4ea <__kernel_rem_pio2+0x5aa>
 800e50e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e512:	f7f1 fe8b 	bl	800022c <__adddf3>
 800e516:	3c01      	subs	r4, #1
 800e518:	e7c3      	b.n	800e4a2 <__kernel_rem_pio2+0x562>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	e7c8      	b.n	800e4b2 <__kernel_rem_pio2+0x572>
 800e520:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e524:	f7f1 fe82 	bl	800022c <__adddf3>
 800e528:	3401      	adds	r4, #1
 800e52a:	e7cd      	b.n	800e4c8 <__kernel_rem_pio2+0x588>
 800e52c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e530:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e534:	9b00      	ldr	r3, [sp, #0]
 800e536:	3b01      	subs	r3, #1
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	4632      	mov	r2, r6
 800e53c:	463b      	mov	r3, r7
 800e53e:	4640      	mov	r0, r8
 800e540:	4649      	mov	r1, r9
 800e542:	f7f1 fe73 	bl	800022c <__adddf3>
 800e546:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e54a:	4602      	mov	r2, r0
 800e54c:	460b      	mov	r3, r1
 800e54e:	4640      	mov	r0, r8
 800e550:	4649      	mov	r1, r9
 800e552:	f7f1 fe69 	bl	8000228 <__aeabi_dsub>
 800e556:	4632      	mov	r2, r6
 800e558:	463b      	mov	r3, r7
 800e55a:	f7f1 fe67 	bl	800022c <__adddf3>
 800e55e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e562:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e566:	ed8a 7b00 	vstr	d7, [sl]
 800e56a:	e770      	b.n	800e44e <__kernel_rem_pio2+0x50e>
 800e56c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e570:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e574:	4640      	mov	r0, r8
 800e576:	4632      	mov	r2, r6
 800e578:	463b      	mov	r3, r7
 800e57a:	4649      	mov	r1, r9
 800e57c:	f7f1 fe56 	bl	800022c <__adddf3>
 800e580:	e9cd 0100 	strd	r0, r1, [sp]
 800e584:	4602      	mov	r2, r0
 800e586:	460b      	mov	r3, r1
 800e588:	4640      	mov	r0, r8
 800e58a:	4649      	mov	r1, r9
 800e58c:	f7f1 fe4c 	bl	8000228 <__aeabi_dsub>
 800e590:	4632      	mov	r2, r6
 800e592:	463b      	mov	r3, r7
 800e594:	f7f1 fe4a 	bl	800022c <__adddf3>
 800e598:	ed9d 7b00 	vldr	d7, [sp]
 800e59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e5a0:	ed84 7b00 	vstr	d7, [r4]
 800e5a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e5a8:	e757      	b.n	800e45a <__kernel_rem_pio2+0x51a>
 800e5aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e5ae:	f7f1 fe3d 	bl	800022c <__adddf3>
 800e5b2:	3d01      	subs	r5, #1
 800e5b4:	e75c      	b.n	800e470 <__kernel_rem_pio2+0x530>
 800e5b6:	9b04      	ldr	r3, [sp, #16]
 800e5b8:	9a04      	ldr	r2, [sp, #16]
 800e5ba:	601f      	str	r7, [r3, #0]
 800e5bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e5c0:	605c      	str	r4, [r3, #4]
 800e5c2:	609d      	str	r5, [r3, #8]
 800e5c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e5c8:	60d3      	str	r3, [r2, #12]
 800e5ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5ce:	6110      	str	r0, [r2, #16]
 800e5d0:	6153      	str	r3, [r2, #20]
 800e5d2:	e727      	b.n	800e424 <__kernel_rem_pio2+0x4e4>
 800e5d4:	41700000 	.word	0x41700000
 800e5d8:	3e700000 	.word	0x3e700000
 800e5dc:	00000000 	.word	0x00000000

0800e5e0 <scalbn>:
 800e5e0:	b570      	push	{r4, r5, r6, lr}
 800e5e2:	ec55 4b10 	vmov	r4, r5, d0
 800e5e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	462b      	mov	r3, r5
 800e5ee:	b999      	cbnz	r1, 800e618 <scalbn+0x38>
 800e5f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e5f4:	4323      	orrs	r3, r4
 800e5f6:	d03f      	beq.n	800e678 <scalbn+0x98>
 800e5f8:	4b35      	ldr	r3, [pc, #212]	; (800e6d0 <scalbn+0xf0>)
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	ee10 0a10 	vmov	r0, s0
 800e600:	2200      	movs	r2, #0
 800e602:	f7f1 ffc9 	bl	8000598 <__aeabi_dmul>
 800e606:	4b33      	ldr	r3, [pc, #204]	; (800e6d4 <scalbn+0xf4>)
 800e608:	429e      	cmp	r6, r3
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
 800e60e:	da10      	bge.n	800e632 <scalbn+0x52>
 800e610:	a327      	add	r3, pc, #156	; (adr r3, 800e6b0 <scalbn+0xd0>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	e01f      	b.n	800e658 <scalbn+0x78>
 800e618:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e61c:	4291      	cmp	r1, r2
 800e61e:	d10c      	bne.n	800e63a <scalbn+0x5a>
 800e620:	ee10 2a10 	vmov	r2, s0
 800e624:	4620      	mov	r0, r4
 800e626:	4629      	mov	r1, r5
 800e628:	f7f1 fe00 	bl	800022c <__adddf3>
 800e62c:	4604      	mov	r4, r0
 800e62e:	460d      	mov	r5, r1
 800e630:	e022      	b.n	800e678 <scalbn+0x98>
 800e632:	460b      	mov	r3, r1
 800e634:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e638:	3936      	subs	r1, #54	; 0x36
 800e63a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e63e:	4296      	cmp	r6, r2
 800e640:	dd0d      	ble.n	800e65e <scalbn+0x7e>
 800e642:	2d00      	cmp	r5, #0
 800e644:	a11c      	add	r1, pc, #112	; (adr r1, 800e6b8 <scalbn+0xd8>)
 800e646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e64a:	da02      	bge.n	800e652 <scalbn+0x72>
 800e64c:	a11c      	add	r1, pc, #112	; (adr r1, 800e6c0 <scalbn+0xe0>)
 800e64e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e652:	a319      	add	r3, pc, #100	; (adr r3, 800e6b8 <scalbn+0xd8>)
 800e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e658:	f7f1 ff9e 	bl	8000598 <__aeabi_dmul>
 800e65c:	e7e6      	b.n	800e62c <scalbn+0x4c>
 800e65e:	1872      	adds	r2, r6, r1
 800e660:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e664:	428a      	cmp	r2, r1
 800e666:	dcec      	bgt.n	800e642 <scalbn+0x62>
 800e668:	2a00      	cmp	r2, #0
 800e66a:	dd08      	ble.n	800e67e <scalbn+0x9e>
 800e66c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e670:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e674:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e678:	ec45 4b10 	vmov	d0, r4, r5
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e682:	da08      	bge.n	800e696 <scalbn+0xb6>
 800e684:	2d00      	cmp	r5, #0
 800e686:	a10a      	add	r1, pc, #40	; (adr r1, 800e6b0 <scalbn+0xd0>)
 800e688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e68c:	dac0      	bge.n	800e610 <scalbn+0x30>
 800e68e:	a10e      	add	r1, pc, #56	; (adr r1, 800e6c8 <scalbn+0xe8>)
 800e690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e694:	e7bc      	b.n	800e610 <scalbn+0x30>
 800e696:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e69a:	3236      	adds	r2, #54	; 0x36
 800e69c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e6a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	4b0c      	ldr	r3, [pc, #48]	; (800e6d8 <scalbn+0xf8>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	e7d5      	b.n	800e658 <scalbn+0x78>
 800e6ac:	f3af 8000 	nop.w
 800e6b0:	c2f8f359 	.word	0xc2f8f359
 800e6b4:	01a56e1f 	.word	0x01a56e1f
 800e6b8:	8800759c 	.word	0x8800759c
 800e6bc:	7e37e43c 	.word	0x7e37e43c
 800e6c0:	8800759c 	.word	0x8800759c
 800e6c4:	fe37e43c 	.word	0xfe37e43c
 800e6c8:	c2f8f359 	.word	0xc2f8f359
 800e6cc:	81a56e1f 	.word	0x81a56e1f
 800e6d0:	43500000 	.word	0x43500000
 800e6d4:	ffff3cb0 	.word	0xffff3cb0
 800e6d8:	3c900000 	.word	0x3c900000
 800e6dc:	00000000 	.word	0x00000000

0800e6e0 <floor>:
 800e6e0:	ec51 0b10 	vmov	r0, r1, d0
 800e6e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e6f0:	2e13      	cmp	r6, #19
 800e6f2:	ee10 5a10 	vmov	r5, s0
 800e6f6:	ee10 8a10 	vmov	r8, s0
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	dc31      	bgt.n	800e762 <floor+0x82>
 800e6fe:	2e00      	cmp	r6, #0
 800e700:	da14      	bge.n	800e72c <floor+0x4c>
 800e702:	a333      	add	r3, pc, #204	; (adr r3, 800e7d0 <floor+0xf0>)
 800e704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e708:	f7f1 fd90 	bl	800022c <__adddf3>
 800e70c:	2200      	movs	r2, #0
 800e70e:	2300      	movs	r3, #0
 800e710:	f7f2 f9d2 	bl	8000ab8 <__aeabi_dcmpgt>
 800e714:	b138      	cbz	r0, 800e726 <floor+0x46>
 800e716:	2c00      	cmp	r4, #0
 800e718:	da53      	bge.n	800e7c2 <floor+0xe2>
 800e71a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e71e:	4325      	orrs	r5, r4
 800e720:	d052      	beq.n	800e7c8 <floor+0xe8>
 800e722:	4c2d      	ldr	r4, [pc, #180]	; (800e7d8 <floor+0xf8>)
 800e724:	2500      	movs	r5, #0
 800e726:	4621      	mov	r1, r4
 800e728:	4628      	mov	r0, r5
 800e72a:	e024      	b.n	800e776 <floor+0x96>
 800e72c:	4f2b      	ldr	r7, [pc, #172]	; (800e7dc <floor+0xfc>)
 800e72e:	4137      	asrs	r7, r6
 800e730:	ea01 0307 	and.w	r3, r1, r7
 800e734:	4303      	orrs	r3, r0
 800e736:	d01e      	beq.n	800e776 <floor+0x96>
 800e738:	a325      	add	r3, pc, #148	; (adr r3, 800e7d0 <floor+0xf0>)
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	f7f1 fd75 	bl	800022c <__adddf3>
 800e742:	2200      	movs	r2, #0
 800e744:	2300      	movs	r3, #0
 800e746:	f7f2 f9b7 	bl	8000ab8 <__aeabi_dcmpgt>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d0eb      	beq.n	800e726 <floor+0x46>
 800e74e:	2c00      	cmp	r4, #0
 800e750:	bfbe      	ittt	lt
 800e752:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e756:	4133      	asrlt	r3, r6
 800e758:	18e4      	addlt	r4, r4, r3
 800e75a:	ea24 0407 	bic.w	r4, r4, r7
 800e75e:	2500      	movs	r5, #0
 800e760:	e7e1      	b.n	800e726 <floor+0x46>
 800e762:	2e33      	cmp	r6, #51	; 0x33
 800e764:	dd0b      	ble.n	800e77e <floor+0x9e>
 800e766:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e76a:	d104      	bne.n	800e776 <floor+0x96>
 800e76c:	ee10 2a10 	vmov	r2, s0
 800e770:	460b      	mov	r3, r1
 800e772:	f7f1 fd5b 	bl	800022c <__adddf3>
 800e776:	ec41 0b10 	vmov	d0, r0, r1
 800e77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e77e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e782:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e786:	40df      	lsrs	r7, r3
 800e788:	4238      	tst	r0, r7
 800e78a:	d0f4      	beq.n	800e776 <floor+0x96>
 800e78c:	a310      	add	r3, pc, #64	; (adr r3, 800e7d0 <floor+0xf0>)
 800e78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e792:	f7f1 fd4b 	bl	800022c <__adddf3>
 800e796:	2200      	movs	r2, #0
 800e798:	2300      	movs	r3, #0
 800e79a:	f7f2 f98d 	bl	8000ab8 <__aeabi_dcmpgt>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	d0c1      	beq.n	800e726 <floor+0x46>
 800e7a2:	2c00      	cmp	r4, #0
 800e7a4:	da0a      	bge.n	800e7bc <floor+0xdc>
 800e7a6:	2e14      	cmp	r6, #20
 800e7a8:	d101      	bne.n	800e7ae <floor+0xce>
 800e7aa:	3401      	adds	r4, #1
 800e7ac:	e006      	b.n	800e7bc <floor+0xdc>
 800e7ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	40b3      	lsls	r3, r6
 800e7b6:	441d      	add	r5, r3
 800e7b8:	45a8      	cmp	r8, r5
 800e7ba:	d8f6      	bhi.n	800e7aa <floor+0xca>
 800e7bc:	ea25 0507 	bic.w	r5, r5, r7
 800e7c0:	e7b1      	b.n	800e726 <floor+0x46>
 800e7c2:	2500      	movs	r5, #0
 800e7c4:	462c      	mov	r4, r5
 800e7c6:	e7ae      	b.n	800e726 <floor+0x46>
 800e7c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e7cc:	e7ab      	b.n	800e726 <floor+0x46>
 800e7ce:	bf00      	nop
 800e7d0:	8800759c 	.word	0x8800759c
 800e7d4:	7e37e43c 	.word	0x7e37e43c
 800e7d8:	bff00000 	.word	0xbff00000
 800e7dc:	000fffff 	.word	0x000fffff

0800e7e0 <realloc>:
 800e7e0:	4b02      	ldr	r3, [pc, #8]	; (800e7ec <realloc+0xc>)
 800e7e2:	460a      	mov	r2, r1
 800e7e4:	4601      	mov	r1, r0
 800e7e6:	6818      	ldr	r0, [r3, #0]
 800e7e8:	f000 b802 	b.w	800e7f0 <_realloc_r>
 800e7ec:	20000084 	.word	0x20000084

0800e7f0 <_realloc_r>:
 800e7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	4614      	mov	r4, r2
 800e7f8:	460e      	mov	r6, r1
 800e7fa:	b921      	cbnz	r1, 800e806 <_realloc_r+0x16>
 800e7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	4611      	mov	r1, r2
 800e802:	f000 b8d3 	b.w	800e9ac <_malloc_r>
 800e806:	b92a      	cbnz	r2, 800e814 <_realloc_r+0x24>
 800e808:	f000 f864 	bl	800e8d4 <_free_r>
 800e80c:	4625      	mov	r5, r4
 800e80e:	4628      	mov	r0, r5
 800e810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e814:	f000 f956 	bl	800eac4 <_malloc_usable_size_r>
 800e818:	4284      	cmp	r4, r0
 800e81a:	4607      	mov	r7, r0
 800e81c:	d802      	bhi.n	800e824 <_realloc_r+0x34>
 800e81e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e822:	d812      	bhi.n	800e84a <_realloc_r+0x5a>
 800e824:	4621      	mov	r1, r4
 800e826:	4640      	mov	r0, r8
 800e828:	f000 f8c0 	bl	800e9ac <_malloc_r>
 800e82c:	4605      	mov	r5, r0
 800e82e:	2800      	cmp	r0, #0
 800e830:	d0ed      	beq.n	800e80e <_realloc_r+0x1e>
 800e832:	42bc      	cmp	r4, r7
 800e834:	4622      	mov	r2, r4
 800e836:	4631      	mov	r1, r6
 800e838:	bf28      	it	cs
 800e83a:	463a      	movcs	r2, r7
 800e83c:	f000 f83c 	bl	800e8b8 <memcpy>
 800e840:	4631      	mov	r1, r6
 800e842:	4640      	mov	r0, r8
 800e844:	f000 f846 	bl	800e8d4 <_free_r>
 800e848:	e7e1      	b.n	800e80e <_realloc_r+0x1e>
 800e84a:	4635      	mov	r5, r6
 800e84c:	e7df      	b.n	800e80e <_realloc_r+0x1e>

0800e84e <memset>:
 800e84e:	4402      	add	r2, r0
 800e850:	4603      	mov	r3, r0
 800e852:	4293      	cmp	r3, r2
 800e854:	d100      	bne.n	800e858 <memset+0xa>
 800e856:	4770      	bx	lr
 800e858:	f803 1b01 	strb.w	r1, [r3], #1
 800e85c:	e7f9      	b.n	800e852 <memset+0x4>
	...

0800e860 <__errno>:
 800e860:	4b01      	ldr	r3, [pc, #4]	; (800e868 <__errno+0x8>)
 800e862:	6818      	ldr	r0, [r3, #0]
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	20000084 	.word	0x20000084

0800e86c <__libc_init_array>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	4d0d      	ldr	r5, [pc, #52]	; (800e8a4 <__libc_init_array+0x38>)
 800e870:	4c0d      	ldr	r4, [pc, #52]	; (800e8a8 <__libc_init_array+0x3c>)
 800e872:	1b64      	subs	r4, r4, r5
 800e874:	10a4      	asrs	r4, r4, #2
 800e876:	2600      	movs	r6, #0
 800e878:	42a6      	cmp	r6, r4
 800e87a:	d109      	bne.n	800e890 <__libc_init_array+0x24>
 800e87c:	4d0b      	ldr	r5, [pc, #44]	; (800e8ac <__libc_init_array+0x40>)
 800e87e:	4c0c      	ldr	r4, [pc, #48]	; (800e8b0 <__libc_init_array+0x44>)
 800e880:	f000 f938 	bl	800eaf4 <_init>
 800e884:	1b64      	subs	r4, r4, r5
 800e886:	10a4      	asrs	r4, r4, #2
 800e888:	2600      	movs	r6, #0
 800e88a:	42a6      	cmp	r6, r4
 800e88c:	d105      	bne.n	800e89a <__libc_init_array+0x2e>
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	f855 3b04 	ldr.w	r3, [r5], #4
 800e894:	4798      	blx	r3
 800e896:	3601      	adds	r6, #1
 800e898:	e7ee      	b.n	800e878 <__libc_init_array+0xc>
 800e89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e89e:	4798      	blx	r3
 800e8a0:	3601      	adds	r6, #1
 800e8a2:	e7f2      	b.n	800e88a <__libc_init_array+0x1e>
 800e8a4:	0800f188 	.word	0x0800f188
 800e8a8:	0800f188 	.word	0x0800f188
 800e8ac:	0800f188 	.word	0x0800f188
 800e8b0:	0800f190 	.word	0x0800f190

0800e8b4 <__retarget_lock_acquire_recursive>:
 800e8b4:	4770      	bx	lr

0800e8b6 <__retarget_lock_release_recursive>:
 800e8b6:	4770      	bx	lr

0800e8b8 <memcpy>:
 800e8b8:	440a      	add	r2, r1
 800e8ba:	4291      	cmp	r1, r2
 800e8bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e8c0:	d100      	bne.n	800e8c4 <memcpy+0xc>
 800e8c2:	4770      	bx	lr
 800e8c4:	b510      	push	{r4, lr}
 800e8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ce:	4291      	cmp	r1, r2
 800e8d0:	d1f9      	bne.n	800e8c6 <memcpy+0xe>
 800e8d2:	bd10      	pop	{r4, pc}

0800e8d4 <_free_r>:
 800e8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8d6:	2900      	cmp	r1, #0
 800e8d8:	d044      	beq.n	800e964 <_free_r+0x90>
 800e8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8de:	9001      	str	r0, [sp, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e8e6:	bfb8      	it	lt
 800e8e8:	18e4      	addlt	r4, r4, r3
 800e8ea:	f000 f8df 	bl	800eaac <__malloc_lock>
 800e8ee:	4a1e      	ldr	r2, [pc, #120]	; (800e968 <_free_r+0x94>)
 800e8f0:	9801      	ldr	r0, [sp, #4]
 800e8f2:	6813      	ldr	r3, [r2, #0]
 800e8f4:	b933      	cbnz	r3, 800e904 <_free_r+0x30>
 800e8f6:	6063      	str	r3, [r4, #4]
 800e8f8:	6014      	str	r4, [r2, #0]
 800e8fa:	b003      	add	sp, #12
 800e8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e900:	f000 b8da 	b.w	800eab8 <__malloc_unlock>
 800e904:	42a3      	cmp	r3, r4
 800e906:	d908      	bls.n	800e91a <_free_r+0x46>
 800e908:	6825      	ldr	r5, [r4, #0]
 800e90a:	1961      	adds	r1, r4, r5
 800e90c:	428b      	cmp	r3, r1
 800e90e:	bf01      	itttt	eq
 800e910:	6819      	ldreq	r1, [r3, #0]
 800e912:	685b      	ldreq	r3, [r3, #4]
 800e914:	1949      	addeq	r1, r1, r5
 800e916:	6021      	streq	r1, [r4, #0]
 800e918:	e7ed      	b.n	800e8f6 <_free_r+0x22>
 800e91a:	461a      	mov	r2, r3
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	b10b      	cbz	r3, 800e924 <_free_r+0x50>
 800e920:	42a3      	cmp	r3, r4
 800e922:	d9fa      	bls.n	800e91a <_free_r+0x46>
 800e924:	6811      	ldr	r1, [r2, #0]
 800e926:	1855      	adds	r5, r2, r1
 800e928:	42a5      	cmp	r5, r4
 800e92a:	d10b      	bne.n	800e944 <_free_r+0x70>
 800e92c:	6824      	ldr	r4, [r4, #0]
 800e92e:	4421      	add	r1, r4
 800e930:	1854      	adds	r4, r2, r1
 800e932:	42a3      	cmp	r3, r4
 800e934:	6011      	str	r1, [r2, #0]
 800e936:	d1e0      	bne.n	800e8fa <_free_r+0x26>
 800e938:	681c      	ldr	r4, [r3, #0]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	6053      	str	r3, [r2, #4]
 800e93e:	440c      	add	r4, r1
 800e940:	6014      	str	r4, [r2, #0]
 800e942:	e7da      	b.n	800e8fa <_free_r+0x26>
 800e944:	d902      	bls.n	800e94c <_free_r+0x78>
 800e946:	230c      	movs	r3, #12
 800e948:	6003      	str	r3, [r0, #0]
 800e94a:	e7d6      	b.n	800e8fa <_free_r+0x26>
 800e94c:	6825      	ldr	r5, [r4, #0]
 800e94e:	1961      	adds	r1, r4, r5
 800e950:	428b      	cmp	r3, r1
 800e952:	bf04      	itt	eq
 800e954:	6819      	ldreq	r1, [r3, #0]
 800e956:	685b      	ldreq	r3, [r3, #4]
 800e958:	6063      	str	r3, [r4, #4]
 800e95a:	bf04      	itt	eq
 800e95c:	1949      	addeq	r1, r1, r5
 800e95e:	6021      	streq	r1, [r4, #0]
 800e960:	6054      	str	r4, [r2, #4]
 800e962:	e7ca      	b.n	800e8fa <_free_r+0x26>
 800e964:	b003      	add	sp, #12
 800e966:	bd30      	pop	{r4, r5, pc}
 800e968:	20005cd4 	.word	0x20005cd4

0800e96c <sbrk_aligned>:
 800e96c:	b570      	push	{r4, r5, r6, lr}
 800e96e:	4e0e      	ldr	r6, [pc, #56]	; (800e9a8 <sbrk_aligned+0x3c>)
 800e970:	460c      	mov	r4, r1
 800e972:	6831      	ldr	r1, [r6, #0]
 800e974:	4605      	mov	r5, r0
 800e976:	b911      	cbnz	r1, 800e97e <sbrk_aligned+0x12>
 800e978:	f000 f8ac 	bl	800ead4 <_sbrk_r>
 800e97c:	6030      	str	r0, [r6, #0]
 800e97e:	4621      	mov	r1, r4
 800e980:	4628      	mov	r0, r5
 800e982:	f000 f8a7 	bl	800ead4 <_sbrk_r>
 800e986:	1c43      	adds	r3, r0, #1
 800e988:	d00a      	beq.n	800e9a0 <sbrk_aligned+0x34>
 800e98a:	1cc4      	adds	r4, r0, #3
 800e98c:	f024 0403 	bic.w	r4, r4, #3
 800e990:	42a0      	cmp	r0, r4
 800e992:	d007      	beq.n	800e9a4 <sbrk_aligned+0x38>
 800e994:	1a21      	subs	r1, r4, r0
 800e996:	4628      	mov	r0, r5
 800e998:	f000 f89c 	bl	800ead4 <_sbrk_r>
 800e99c:	3001      	adds	r0, #1
 800e99e:	d101      	bne.n	800e9a4 <sbrk_aligned+0x38>
 800e9a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}
 800e9a8:	20005cd8 	.word	0x20005cd8

0800e9ac <_malloc_r>:
 800e9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9b0:	1ccd      	adds	r5, r1, #3
 800e9b2:	f025 0503 	bic.w	r5, r5, #3
 800e9b6:	3508      	adds	r5, #8
 800e9b8:	2d0c      	cmp	r5, #12
 800e9ba:	bf38      	it	cc
 800e9bc:	250c      	movcc	r5, #12
 800e9be:	2d00      	cmp	r5, #0
 800e9c0:	4607      	mov	r7, r0
 800e9c2:	db01      	blt.n	800e9c8 <_malloc_r+0x1c>
 800e9c4:	42a9      	cmp	r1, r5
 800e9c6:	d905      	bls.n	800e9d4 <_malloc_r+0x28>
 800e9c8:	230c      	movs	r3, #12
 800e9ca:	603b      	str	r3, [r7, #0]
 800e9cc:	2600      	movs	r6, #0
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800eaa8 <_malloc_r+0xfc>
 800e9d8:	f000 f868 	bl	800eaac <__malloc_lock>
 800e9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800e9e0:	461c      	mov	r4, r3
 800e9e2:	bb5c      	cbnz	r4, 800ea3c <_malloc_r+0x90>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4638      	mov	r0, r7
 800e9e8:	f7ff ffc0 	bl	800e96c <sbrk_aligned>
 800e9ec:	1c43      	adds	r3, r0, #1
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	d155      	bne.n	800ea9e <_malloc_r+0xf2>
 800e9f2:	f8d8 4000 	ldr.w	r4, [r8]
 800e9f6:	4626      	mov	r6, r4
 800e9f8:	2e00      	cmp	r6, #0
 800e9fa:	d145      	bne.n	800ea88 <_malloc_r+0xdc>
 800e9fc:	2c00      	cmp	r4, #0
 800e9fe:	d048      	beq.n	800ea92 <_malloc_r+0xe6>
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	4631      	mov	r1, r6
 800ea04:	4638      	mov	r0, r7
 800ea06:	eb04 0903 	add.w	r9, r4, r3
 800ea0a:	f000 f863 	bl	800ead4 <_sbrk_r>
 800ea0e:	4581      	cmp	r9, r0
 800ea10:	d13f      	bne.n	800ea92 <_malloc_r+0xe6>
 800ea12:	6821      	ldr	r1, [r4, #0]
 800ea14:	1a6d      	subs	r5, r5, r1
 800ea16:	4629      	mov	r1, r5
 800ea18:	4638      	mov	r0, r7
 800ea1a:	f7ff ffa7 	bl	800e96c <sbrk_aligned>
 800ea1e:	3001      	adds	r0, #1
 800ea20:	d037      	beq.n	800ea92 <_malloc_r+0xe6>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	442b      	add	r3, r5
 800ea26:	6023      	str	r3, [r4, #0]
 800ea28:	f8d8 3000 	ldr.w	r3, [r8]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d038      	beq.n	800eaa2 <_malloc_r+0xf6>
 800ea30:	685a      	ldr	r2, [r3, #4]
 800ea32:	42a2      	cmp	r2, r4
 800ea34:	d12b      	bne.n	800ea8e <_malloc_r+0xe2>
 800ea36:	2200      	movs	r2, #0
 800ea38:	605a      	str	r2, [r3, #4]
 800ea3a:	e00f      	b.n	800ea5c <_malloc_r+0xb0>
 800ea3c:	6822      	ldr	r2, [r4, #0]
 800ea3e:	1b52      	subs	r2, r2, r5
 800ea40:	d41f      	bmi.n	800ea82 <_malloc_r+0xd6>
 800ea42:	2a0b      	cmp	r2, #11
 800ea44:	d917      	bls.n	800ea76 <_malloc_r+0xca>
 800ea46:	1961      	adds	r1, r4, r5
 800ea48:	42a3      	cmp	r3, r4
 800ea4a:	6025      	str	r5, [r4, #0]
 800ea4c:	bf18      	it	ne
 800ea4e:	6059      	strne	r1, [r3, #4]
 800ea50:	6863      	ldr	r3, [r4, #4]
 800ea52:	bf08      	it	eq
 800ea54:	f8c8 1000 	streq.w	r1, [r8]
 800ea58:	5162      	str	r2, [r4, r5]
 800ea5a:	604b      	str	r3, [r1, #4]
 800ea5c:	4638      	mov	r0, r7
 800ea5e:	f104 060b 	add.w	r6, r4, #11
 800ea62:	f000 f829 	bl	800eab8 <__malloc_unlock>
 800ea66:	f026 0607 	bic.w	r6, r6, #7
 800ea6a:	1d23      	adds	r3, r4, #4
 800ea6c:	1af2      	subs	r2, r6, r3
 800ea6e:	d0ae      	beq.n	800e9ce <_malloc_r+0x22>
 800ea70:	1b9b      	subs	r3, r3, r6
 800ea72:	50a3      	str	r3, [r4, r2]
 800ea74:	e7ab      	b.n	800e9ce <_malloc_r+0x22>
 800ea76:	42a3      	cmp	r3, r4
 800ea78:	6862      	ldr	r2, [r4, #4]
 800ea7a:	d1dd      	bne.n	800ea38 <_malloc_r+0x8c>
 800ea7c:	f8c8 2000 	str.w	r2, [r8]
 800ea80:	e7ec      	b.n	800ea5c <_malloc_r+0xb0>
 800ea82:	4623      	mov	r3, r4
 800ea84:	6864      	ldr	r4, [r4, #4]
 800ea86:	e7ac      	b.n	800e9e2 <_malloc_r+0x36>
 800ea88:	4634      	mov	r4, r6
 800ea8a:	6876      	ldr	r6, [r6, #4]
 800ea8c:	e7b4      	b.n	800e9f8 <_malloc_r+0x4c>
 800ea8e:	4613      	mov	r3, r2
 800ea90:	e7cc      	b.n	800ea2c <_malloc_r+0x80>
 800ea92:	230c      	movs	r3, #12
 800ea94:	603b      	str	r3, [r7, #0]
 800ea96:	4638      	mov	r0, r7
 800ea98:	f000 f80e 	bl	800eab8 <__malloc_unlock>
 800ea9c:	e797      	b.n	800e9ce <_malloc_r+0x22>
 800ea9e:	6025      	str	r5, [r4, #0]
 800eaa0:	e7dc      	b.n	800ea5c <_malloc_r+0xb0>
 800eaa2:	605b      	str	r3, [r3, #4]
 800eaa4:	deff      	udf	#255	; 0xff
 800eaa6:	bf00      	nop
 800eaa8:	20005cd4 	.word	0x20005cd4

0800eaac <__malloc_lock>:
 800eaac:	4801      	ldr	r0, [pc, #4]	; (800eab4 <__malloc_lock+0x8>)
 800eaae:	f7ff bf01 	b.w	800e8b4 <__retarget_lock_acquire_recursive>
 800eab2:	bf00      	nop
 800eab4:	20005cd0 	.word	0x20005cd0

0800eab8 <__malloc_unlock>:
 800eab8:	4801      	ldr	r0, [pc, #4]	; (800eac0 <__malloc_unlock+0x8>)
 800eaba:	f7ff befc 	b.w	800e8b6 <__retarget_lock_release_recursive>
 800eabe:	bf00      	nop
 800eac0:	20005cd0 	.word	0x20005cd0

0800eac4 <_malloc_usable_size_r>:
 800eac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eac8:	1f18      	subs	r0, r3, #4
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	bfbc      	itt	lt
 800eace:	580b      	ldrlt	r3, [r1, r0]
 800ead0:	18c0      	addlt	r0, r0, r3
 800ead2:	4770      	bx	lr

0800ead4 <_sbrk_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	4d06      	ldr	r5, [pc, #24]	; (800eaf0 <_sbrk_r+0x1c>)
 800ead8:	2300      	movs	r3, #0
 800eada:	4604      	mov	r4, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	602b      	str	r3, [r5, #0]
 800eae0:	f7f7 fb18 	bl	8006114 <_sbrk>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_sbrk_r+0x1a>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_sbrk_r+0x1a>
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	20005ccc 	.word	0x20005ccc

0800eaf4 <_init>:
 800eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf6:	bf00      	nop
 800eaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eafa:	bc08      	pop	{r3}
 800eafc:	469e      	mov	lr, r3
 800eafe:	4770      	bx	lr

0800eb00 <_fini>:
 800eb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb02:	bf00      	nop
 800eb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb06:	bc08      	pop	{r3}
 800eb08:	469e      	mov	lr, r3
 800eb0a:	4770      	bx	lr
