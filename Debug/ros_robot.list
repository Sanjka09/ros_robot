
ros_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f44c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800f620  0800f620  0001f620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd70  0800fd70  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd70  0800fd70  0001fd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd78  0800fd78  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fd78  0800fd78  0001fd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd80  0800fd80  0001fd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800fd84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cc4  20000088  0800fe0c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d4c  0800fe0c  00025d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd54  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd6  00000000  00000000  0003fe4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  00043e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136f  00000000  00000000  00045710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ea0  00000000  00000000  00046a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c192  00000000  00000000  0006c91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e546e  00000000  00000000  00088ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007290  00000000  00000000  0016df20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001751b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f604 	.word	0x0800f604

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800f604 	.word	0x0800f604

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	200000f8 	.word	0x200000f8

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b0a4      	sub	sp, #144	; 0x90
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f005 ff6b 	bl	8006d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f8a3 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fc4d 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8a:	f000 fc13 	bl	80016b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e8e:	f000 fbe7 	bl	8001660 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000e92:	f000 f909 	bl	80010a8 <MX_CAN1_Init>
  MX_UART4_Init();
 8000e96:	f000 fbb9 	bl	800160c <MX_UART4_Init>
  MX_SPI2_Init();
 8000e9a:	f000 f98f 	bl	80011bc <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e9e:	f000 f9c3 	bl	8001228 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ea2:	f000 fab3 	bl	800140c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ea6:	f000 fb05 	bl	80014b4 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000eaa:	f000 fa2d 	bl	8001308 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
  //HAL_UART_Receive_IT(&huart4, RxData, 1);
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000eae:	213c      	movs	r1, #60	; 0x3c
 8000eb0:	4839      	ldr	r0, [pc, #228]	; (8000f98 <main+0x120>)
 8000eb2:	f009 f8fe 	bl	800a0b2 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4838      	ldr	r0, [pc, #224]	; (8000f9c <main+0x124>)
 8000eba:	f008 ff33 	bl	8009d24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4836      	ldr	r0, [pc, #216]	; (8000f9c <main+0x124>)
 8000ec2:	f008 ff2f 	bl	8009d24 <HAL_TIM_PWM_Start>
//  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4835      	ldr	r0, [pc, #212]	; (8000fa0 <main+0x128>)
 8000eca:	f008 ff2b 	bl	8009d24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4833      	ldr	r0, [pc, #204]	; (8000fa0 <main+0x128>)
 8000ed2:	f008 ff27 	bl	8009d24 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WheelControl */
  osThreadDef(WheelControl, Wheel_task, osPriorityNormal, 0, 128);
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <main+0x12c>)
 8000ed8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000edc:	461d      	mov	r5, r3
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WheelControlHandle = osThreadCreate(osThread(WheelControl), NULL);
 8000eea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00b fbc2 	bl	800c67a <osThreadCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <main+0x130>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Joystick */
  osThreadDef(Joystick, task2_joystick, osPriorityNormal, 0, 2048);
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <main+0x134>)
 8000efe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  JoystickHandle = osThreadCreate(osThread(Joystick), NULL);
 8000f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00b fbaf 	bl	800c67a <osThreadCreate>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <main+0x138>)
 8000f20:	6013      	str	r3, [r2, #0]

  /* definition and creation of up_down_control */
  osThreadDef(up_down_control, DC_motor, osPriorityNormal, 0, 512);
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <main+0x13c>)
 8000f24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f28:	461d      	mov	r5, r3
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  up_down_controlHandle = osThreadCreate(osThread(up_down_control), NULL);
 8000f36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00b fb9c 	bl	800c67a <osThreadCreate>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <main+0x140>)
 8000f46:	6013      	str	r3, [r2, #0]

  /* definition and creation of Target_pos */
  osThreadDef(Target_pos, Colorcheck, osPriorityNormal, 0, 512);
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <main+0x144>)
 8000f4a:	f107 0420 	add.w	r4, r7, #32
 8000f4e:	461d      	mov	r5, r3
 8000f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Target_posHandle = osThreadCreate(osThread(Target_pos), NULL);
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00b fb89 	bl	800c67a <osThreadCreate>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <main+0x148>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Color */
  osThreadDef(Color, StartTask05, osPriorityNormal, 0, 128);
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <main+0x14c>)
 8000f70:	1d3c      	adds	r4, r7, #4
 8000f72:	461d      	mov	r5, r3
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorHandle = osThreadCreate(osThread(Color), NULL);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00b fb78 	bl	800c67a <osThreadCreate>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <main+0x150>)
 8000f8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f90:	f00b fb6c 	bl	800c66c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <main+0x11c>
 8000f96:	bf00      	nop
 8000f98:	20000408 	.word	0x20000408
 8000f9c:	200003c0 	.word	0x200003c0
 8000fa0:	20000450 	.word	0x20000450
 8000fa4:	0800f630 	.word	0x0800f630
 8000fa8:	200006a8 	.word	0x200006a8
 8000fac:	0800f658 	.word	0x0800f658
 8000fb0:	200006ac 	.word	0x200006ac
 8000fb4:	0800f684 	.word	0x0800f684
 8000fb8:	200006b0 	.word	0x200006b0
 8000fbc:	0800f6ac 	.word	0x0800f6ac
 8000fc0:	200006b4 	.word	0x200006b4
 8000fc4:	0800f6d0 	.word	0x0800f6d0
 8000fc8:	200006b8 	.word	0x200006b8

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	; 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2234      	movs	r2, #52	; 0x34
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00e f9bf 	bl	800f35e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <SystemClock_Config+0xd4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <SystemClock_Config+0xd4>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <SystemClock_Config+0xd4>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <SystemClock_Config+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <SystemClock_Config+0xd8>)
 800101a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SystemClock_Config+0xd8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4618      	mov	r0, r3
 800105a:	f007 ff95 	bl	8008f88 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001064:	f002 f968 	bl	8003338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001074:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f007 fc02 	bl	8008890 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001092:	f002 f951 	bl	8003338 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010ac:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ae:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <MX_CAN1_Init+0xfc>)
 80010b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010c6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010fa:	f005 fe93 	bl	8006e24 <HAL_CAN_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001104:	f002 f918 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  M1.ID=0x201;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_CAN1_Init+0x100>)
 800110a:	f240 2201 	movw	r2, #513	; 0x201
 800110e:	809a      	strh	r2, [r3, #4]
  M2.ID=0X202;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_CAN1_Init+0x104>)
 8001112:	f240 2202 	movw	r2, #514	; 0x202
 8001116:	809a      	strh	r2, [r3, #4]
  M3.ID=0x203;
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <MX_CAN1_Init+0x108>)
 800111a:	f240 2203 	movw	r2, #515	; 0x203
 800111e:	809a      	strh	r2, [r3, #4]
  M4.ID=0x204;
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_CAN1_Init+0x10c>)
 8001122:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001126:	809a      	strh	r2, [r3, #4]
  sFilterConfig.FilterBank = 0;
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_CAN1_Init+0x110>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001136:	2201      	movs	r2, #1
 8001138:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x205;
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_CAN1_Init+0x110>)
 800113c:	f240 2205 	movw	r2, #517	; 0x205
 8001140:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x200;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_CAN1_Init+0x110>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_CAN1_Init+0x110>)
 800115e:	2201      	movs	r2, #1
 8001160:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001164:	220e      	movs	r2, #14
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001168:	4913      	ldr	r1, [pc, #76]	; (80011b8 <MX_CAN1_Init+0x110>)
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_CAN1_Init+0xf8>)
 800116c:	f005 ff56 	bl	800701c <HAL_CAN_ConfigFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_CAN1_Init+0xd2>
    	Error_Handler();
 8001176:	f002 f8df 	bl	8003338 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_CAN1_Init+0xf8>)
 800117c:	f006 f82e 	bl	80071dc <HAL_CAN_Start>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_CAN1_Init+0xe2>
    	Error_Handler();
 8001186:	f002 f8d7 	bl	8003338 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800118a:	2102      	movs	r1, #2
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_CAN1_Init+0xf8>)
 800118e:	f006 fa7f 	bl	8007690 <HAL_CAN_ActivateNotification>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_CAN1_Init+0xf4>
    	Error_Handler();
 8001198:	f002 f8ce 	bl	8003338 <Error_Handler>
  }


  /* USER CODE END CAN1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200002f8 	.word	0x200002f8
 80011a4:	40006400 	.word	0x40006400
 80011a8:	200007bc 	.word	0x200007bc
 80011ac:	200007c4 	.word	0x200007c4
 80011b0:	200007cc 	.word	0x200007cc
 80011b4:	200007d4 	.word	0x200007d4
 80011b8:	20000810 	.word	0x20000810

080011bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI2_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_SPI2_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI2_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI2_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI2_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI2_Init+0x64>)
 80011dc:	2202      	movs	r2, #2
 80011de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI2_Init+0x64>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI2_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI2_Init+0x64>)
 80011f0:	2238      	movs	r2, #56	; 0x38
 80011f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI2_Init+0x64>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI2_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI2_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI2_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI2_Init+0x64>)
 800120e:	f008 f959 	bl	80094c4 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001218:	f002 f88e 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000320 	.word	0x20000320
 8001224:	40003800 	.word	0x40003800

08001228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <MX_TIM3_Init+0xdc>)
 8001256:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_TIM3_Init+0xd8>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_TIM3_Init+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_TIM3_Init+0xd8>)
 800127a:	f008 fc39 	bl	8009af0 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001284:	f002 f858 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4619      	mov	r1, r3
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001296:	f009 f9e9 	bl	800a66c <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f002 f84a 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM3_Init+0xd8>)
 80012a6:	f008 fe05 	bl	8009eb4 <HAL_TIM_IC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b0:	f002 f842 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_TIM3_Init+0xd8>)
 80012c4:	f009 ff08 	bl	800b0d8 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012ce:	f002 f833 	bl	8003338 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012d6:	2301      	movs	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM3_Init+0xd8>)
 80012ea:	f009 f860 	bl	800a3ae <HAL_TIM_IC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80012f4:	f002 f820 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000378 	.word	0x20000378
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 0320 	add.w	r3, r7, #32
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <MX_TIM4_Init+0xfc>)
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <MX_TIM4_Init+0x100>)
 800133c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001340:	f240 227f 	movw	r2, #639	; 0x27f
 8001344:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_TIM4_Init+0xfc>)
 800134e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001352:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_TIM4_Init+0xfc>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001360:	4828      	ldr	r0, [pc, #160]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001362:	f008 fbc5 	bl	8009af0 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800136c:	f001 ffe4 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	4619      	mov	r1, r3
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <MX_TIM4_Init+0xfc>)
 800137e:	f009 f975 	bl	800a66c <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001388:	f001 ffd6 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800138c:	481d      	ldr	r0, [pc, #116]	; (8001404 <MX_TIM4_Init+0xfc>)
 800138e:	f008 fc6f 	bl	8009c70 <HAL_TIM_PWM_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001398:	f001 ffce 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	4619      	mov	r1, r3
 80013aa:	4816      	ldr	r0, [pc, #88]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013ac:	f009 fe94 	bl	800b0d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013b6:	f001 ffbf 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ba:	2360      	movs	r3, #96	; 0x60
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013d2:	f009 f889 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013dc:	f001 ffac 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2204      	movs	r2, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013e8:	f009 f87e 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80013f2:	f001 ffa1 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013f8:	f005 f976 	bl	80066e8 <HAL_TIM_MspPostInit>

}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200003c0 	.word	0x200003c0
 8001408:	40000800 	.word	0x40000800

0800140c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00d ff9f 	bl	800f35e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_TIM5_Init+0xa0>)
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800142c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM5_Init+0xa0>)
 800143c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001440:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM5_Init+0xa0>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800144e:	2303      	movs	r3, #3
 8001450:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM5_Init+0xa0>)
 800147a:	f008 fd74 	bl	8009f66 <HAL_TIM_Encoder_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001484:	f001 ff58 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001496:	f009 fe1f 	bl	800b0d8 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80014a0:	f001 ff4a 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000408 	.word	0x20000408
 80014b0:	40000c00 	.word	0x40000c00

080014b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b096      	sub	sp, #88	; 0x58
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2220      	movs	r2, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00d ff36 	bl	800f35e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <MX_TIM8_Init+0x150>)
 80014f4:	4a44      	ldr	r2, [pc, #272]	; (8001608 <MX_TIM8_Init+0x154>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 26500-1;
 80014f8:	4b42      	ldr	r3, [pc, #264]	; (8001604 <MX_TIM8_Init+0x150>)
 80014fa:	f246 7283 	movw	r2, #26499	; 0x6783
 80014fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <MX_TIM8_Init+0x150>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <MX_TIM8_Init+0x150>)
 8001508:	2263      	movs	r2, #99	; 0x63
 800150a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <MX_TIM8_Init+0x150>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <MX_TIM8_Init+0x150>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <MX_TIM8_Init+0x150>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800151e:	4839      	ldr	r0, [pc, #228]	; (8001604 <MX_TIM8_Init+0x150>)
 8001520:	f008 fae6 	bl	8009af0 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800152a:	f001 ff05 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001538:	4619      	mov	r1, r3
 800153a:	4832      	ldr	r0, [pc, #200]	; (8001604 <MX_TIM8_Init+0x150>)
 800153c:	f009 f896 	bl	800a66c <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001546:	f001 fef7 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800154a:	482e      	ldr	r0, [pc, #184]	; (8001604 <MX_TIM8_Init+0x150>)
 800154c:	f008 fb90 	bl	8009c70 <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001556:	f001 feef 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <MX_TIM8_Init+0x150>)
 800156a:	f009 fdb5 	bl	800b0d8 <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001574:	f001 fee0 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <MX_TIM8_Init+0x150>)
 800159e:	f008 ffa3 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015a8:	f001 fec6 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	2204      	movs	r2, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM8_Init+0x150>)
 80015b6:	f008 ff97 	bl	800a4e8 <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80015c0:	f001 feba 	bl	8003338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <MX_TIM8_Init+0x150>)
 80015e8:	f009 fdf2 	bl	800b1d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015f2:	f001 fea1 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <MX_TIM8_Init+0x150>)
 80015f8:	f005 f876 	bl	80066e8 <HAL_TIM_MspPostInit>

}
 80015fc:	bf00      	nop
 80015fe:	3758      	adds	r7, #88	; 0x58
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000450 	.word	0x20000450
 8001608:	40010400 	.word	0x40010400

0800160c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_UART4_Init+0x4c>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_UART4_Init+0x50>)
 8001614:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_UART4_Init+0x4c>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_UART4_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_UART4_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_UART4_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_UART4_Init+0x4c>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_UART4_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_UART4_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_UART4_Init+0x4c>)
 8001644:	f009 fe2a 	bl	800b29c <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800164e:	f001 fe73 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000498 	.word	0x20000498
 800165c:	40004c00 	.word	0x40004c00

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART2_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001698:	f009 fe00 	bl	800b29c <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f001 fe49 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200004e0 	.word	0x200004e0
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_DMA_Init+0x6c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_DMA_Init+0x6c>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_DMA_Init+0x6c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	200d      	movs	r0, #13
 80016dc:	f006 fae6 	bl	8007cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016e0:	200d      	movs	r0, #13
 80016e2:	f006 faff 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	200f      	movs	r0, #15
 80016ec:	f006 fade 	bl	8007cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016f0:	200f      	movs	r0, #15
 80016f2:	f006 faf7 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	2010      	movs	r0, #16
 80016fc:	f006 fad6 	bl	8007cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001700:	2010      	movs	r0, #16
 8001702:	f006 faef 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	2011      	movs	r0, #17
 800170c:	f006 face 	bl	8007cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001710:	2011      	movs	r0, #17
 8001712:	f006 fae7 	bl	8007ce4 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <MX_GPIO_Init+0x174>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a55      	ldr	r2, [pc, #340]	; (8001898 <MX_GPIO_Init+0x174>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b53      	ldr	r3, [pc, #332]	; (8001898 <MX_GPIO_Init+0x174>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <MX_GPIO_Init+0x174>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a4e      	ldr	r2, [pc, #312]	; (8001898 <MX_GPIO_Init+0x174>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <MX_GPIO_Init+0x174>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b48      	ldr	r3, [pc, #288]	; (8001898 <MX_GPIO_Init+0x174>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a47      	ldr	r2, [pc, #284]	; (8001898 <MX_GPIO_Init+0x174>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b45      	ldr	r3, [pc, #276]	; (8001898 <MX_GPIO_Init+0x174>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <MX_GPIO_Init+0x174>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <MX_GPIO_Init+0x174>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <MX_GPIO_Init+0x174>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S2_Pin|S3_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80017b0:	483a      	ldr	r0, [pc, #232]	; (800189c <MX_GPIO_Init+0x178>)
 80017b2:	f007 f853 	bl	800885c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2102      	movs	r1, #2
 80017ba:	4839      	ldr	r0, [pc, #228]	; (80018a0 <MX_GPIO_Init+0x17c>)
 80017bc:	f007 f84e 	bl	800885c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017c6:	4837      	ldr	r0, [pc, #220]	; (80018a4 <MX_GPIO_Init+0x180>)
 80017c8:	f007 f848 	bl	800885c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP1_Pin DOWN2_Pin DOWN1_Pin BALL1_Pin */
  GPIO_InitStruct.Pin = UP1_Pin|DOWN2_Pin|DOWN1_Pin|BALL1_Pin;
 80017cc:	230f      	movs	r3, #15
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4831      	ldr	r0, [pc, #196]	; (80018a4 <MX_GPIO_Init+0x180>)
 80017e0:	f006 fe90 	bl	8008504 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL2_Pin */
  GPIO_InitStruct.Pin = BALL2_Pin;
 80017e4:	2310      	movs	r3, #16
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BALL2_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4829      	ldr	r0, [pc, #164]	; (800189c <MX_GPIO_Init+0x178>)
 80017f8:	f006 fe84 	bl	8008504 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S3_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin|IN4_Pin|IN3_Pin;
 80017fc:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4821      	ldr	r0, [pc, #132]	; (800189c <MX_GPIO_Init+0x178>)
 8001816:	f006 fe75 	bl	8008504 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP2_Pin IR_Pin */
  GPIO_InitStruct.Pin = UP2_Pin|IR_Pin;
 800181a:	f240 2301 	movw	r3, #513	; 0x201
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	481c      	ldr	r0, [pc, #112]	; (80018a0 <MX_GPIO_Init+0x17c>)
 8001830:	f006 fe68 	bl	8008504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001834:	2302      	movs	r3, #2
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	; (80018a0 <MX_GPIO_Init+0x17c>)
 800184c:	f006 fe5a 	bl	8008504 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 8001850:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_GPIO_Init+0x180>)
 800186a:	f006 fe4b 	bl	8008504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_GPIO_Init+0x17c>)
 800188c:	f006 fe3a 	bl	8008504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800

080018a8 <MotorUp>:
//		  }
//	  }
//}

void MotorUp(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MotorUp+0x20>)
 80018b4:	f006 ffd2 	bl	800885c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018be:	4802      	ldr	r0, [pc, #8]	; (80018c8 <MotorUp+0x20>)
 80018c0:	f006 ffcc 	bl	800885c <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020800 	.word	0x40020800

080018cc <MotorDown>:

void MotorDown(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MotorDown+0x20>)
 80018d8:	f006 ffc0 	bl	800885c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <MotorDown+0x20>)
 80018e4:	f006 ffba 	bl	800885c <HAL_GPIO_WritePin>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020800 	.word	0x40020800

080018f0 <MotorStop>:

void MotorStop(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	TIM8 -> CCR1 = 1;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MotorStop+0x28>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <MotorStop+0x2c>)
 8001902:	f006 ffab 	bl	800885c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <MotorStop+0x2c>)
 800190e:	f006 ffa5 	bl	800885c <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40010400 	.word	0x40010400
 800191c:	40020800 	.word	0x40020800

08001920 <calculatePID>:

void calculatePID()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	cTime = HAL_GetTick();
 8001924:	f005 fa4e 	bl	8006dc4 <HAL_GetTick>
 8001928:	ee07 0a90 	vmov	s15, r0
 800192c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <calculatePID+0x11c>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
	Motor.my_pos = ((int32_t)TIM5->CNT)/100;
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <calculatePID+0x120>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <calculatePID+0x124>)
 800193c:	fb82 1203 	smull	r1, r2, r2, r3
 8001940:	1152      	asrs	r2, r2, #5
 8001942:	17db      	asrs	r3, r3, #31
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <calculatePID+0x128>)
 8001948:	6053      	str	r3, [r2, #4]
	dTime = (cTime - pTime)/10000;
 800194a:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <calculatePID+0x11c>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <calculatePID+0x12c>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001a50 <calculatePID+0x130>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <calculatePID+0x134>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
	DC_pid.error = Motor.target_pos - Motor.my_pos;
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <calculatePID+0x128>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <calculatePID+0x128>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <calculatePID+0x138>)
 8001974:	60d3      	str	r3, [r2, #12]
	DC_pid.I_error += (DC_pid.error * dTime);
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <calculatePID+0x138>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <calculatePID+0x138>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <calculatePID+0x134>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a0:	ee17 2a90 	vmov	r2, s15
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <calculatePID+0x138>)
 80019a6:	611a      	str	r2, [r3, #16]
	DC_pid.D_error = (DC_pid.error - DC_pid.lastError)/dTime;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <calculatePID+0x138>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <calculatePID+0x138>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <calculatePID+0x134>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c8:	ee17 2a90 	vmov	r2, s15
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <calculatePID+0x138>)
 80019ce:	615a      	str	r2, [r3, #20]
	Motor.ControlSignal = (DC_pid.KP*DC_pid.error) + (DC_pid.I_error*DC_pid.KI) + (DC_pid.D_error*DC_pid.KD);
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <calculatePID+0x138>)
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <calculatePID+0x138>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <calculatePID+0x138>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <calculatePID+0x138>)
 80019f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <calculatePID+0x138>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <calculatePID+0x138>)
 8001a0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <calculatePID+0x128>)
 8001a1c:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f005 f9db 	bl	8006ddc <HAL_Delay>
	pTime = cTime;
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <calculatePID+0x11c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <calculatePID+0x12c>)
 8001a2c:	6013      	str	r3, [r2, #0]
	DC_pid.lastError = DC_pid.error;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <calculatePID+0x138>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <calculatePID+0x138>)
 8001a34:	6193      	str	r3, [r2, #24]
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200006e0 	.word	0x200006e0
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	51eb851f 	.word	0x51eb851f
 8001a48:	200007dc 	.word	0x200007dc
 8001a4c:	200006e4 	.word	0x200006e4
 8001a50:	461c4000 	.word	0x461c4000
 8001a54:	200006e8 	.word	0x200006e8
 8001a58:	200007a0 	.word	0x200007a0

08001a5c <motorspeed>:

void motorspeed(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if(Motor.ControlSignal<0)
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <motorspeed+0xa0>)
 8001a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d504      	bpl.n	8001a7a <motorspeed+0x1e>
		motor_dir = -1;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <motorspeed+0xa4>)
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e00e      	b.n	8001a98 <motorspeed+0x3c>
	else if(Motor.ControlSignal>0)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <motorspeed+0xa0>)
 8001a7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd03      	ble.n	8001a92 <motorspeed+0x36>
		motor_dir = 1;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <motorspeed+0xa4>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e002      	b.n	8001a98 <motorspeed+0x3c>
	else
		motor_dir = 0;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <motorspeed+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
	Motor.PWM = (int)fabs(Motor.ControlSignal);
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <motorspeed+0xa0>)
 8001a9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a9e:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa6:	ee17 2a90 	vmov	r2, s15
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <motorspeed+0xa0>)
 8001aac:	60da      	str	r2, [r3, #12]
	if(Motor.PWM > 300)
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <motorspeed+0xa0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ab6:	dd02      	ble.n	8001abe <motorspeed+0x62>
		TIM8 -> CCR1 = 1;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <motorspeed+0xa8>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
//	TIM8 -> CCR2 = 50;
	if(Motor.PWM < 300 && DC_pid.error != 0){
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <motorspeed+0xa0>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ac6:	da06      	bge.n	8001ad6 <motorspeed+0x7a>
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <motorspeed+0xac>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <motorspeed+0x7a>
		TIM8 -> CCR1 = 60;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <motorspeed+0xa8>)
 8001ad2:	223c      	movs	r2, #60	; 0x3c
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(motor_dir == 1){
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <motorspeed+0xa4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <motorspeed+0x88>
		MotorUp();
 8001ade:	f7ff fee3 	bl	80018a8 <MotorUp>
	}else if(motor_dir == (-1)){
		MotorDown();
	}else{
		MotorStop();
	}
}
 8001ae2:	e009      	b.n	8001af8 <motorspeed+0x9c>
	}else if(motor_dir == (-1)){
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <motorspeed+0xa4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aec:	d102      	bne.n	8001af4 <motorspeed+0x98>
		MotorDown();
 8001aee:	f7ff feed 	bl	80018cc <MotorDown>
}
 8001af2:	e001      	b.n	8001af8 <motorspeed+0x9c>
		MotorStop();
 8001af4:	f7ff fefc 	bl	80018f0 <MotorStop>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200007dc 	.word	0x200007dc
 8001b00:	200006f0 	.word	0x200006f0
 8001b04:	40010400 	.word	0x40010400
 8001b08:	200007a0 	.word	0x200007a0

08001b0c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
//	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8001b14:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b16:	4a60      	ldr	r2, [pc, #384]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4860      	ldr	r0, [pc, #384]	; (8001c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001b1c:	f005 fc96 	bl	800744c <HAL_CAN_GetRxMessage>
	if(rxHeader.StdId == 0x201){
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f240 2201 	movw	r2, #513	; 0x201
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d126      	bne.n	8001b7a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		M1.en_speed = rxData[2] << 8;
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b36:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed + rxData[3];
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b42:	78db      	ldrb	r3, [r3, #3]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b4e:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed * 1.5;
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcb4 	bl	80004c4 <__aeabi_i2d>
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001b62:	f7fe fd19 	bl	8000598 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe ffc3 	bl	8000af8 <__aeabi_d2iz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b78:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x202){
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f240 2202 	movw	r2, #514	; 0x202
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d126      	bne.n	8001bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		M2.en_speed = rxData[2] << 8;
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001b90:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed + rxData[3];
 8001b92:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001b94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001ba8:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed * 1.5;
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001bac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc87 	bl	80004c4 <__aeabi_i2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001bbc:	f7fe fcec 	bl	8000598 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff96 	bl	8000af8 <__aeabi_d2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001bd2:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x203){
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f240 2203 	movw	r2, #515	; 0x203
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d126      	bne.n	8001c2e <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
		M3.en_speed = rxData[2] << 8;
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001be2:	789b      	ldrb	r3, [r3, #2]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001bea:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed + rxData[3];
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001bee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001bf6:	78db      	ldrb	r3, [r3, #3]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001c02:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed * 1.5;
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001c06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fc5a 	bl	80004c4 <__aeabi_i2d>
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ff69 	bl	8000af8 <__aeabi_d2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001c2c:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x204){
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001c36:	d129      	bne.n	8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		M4.en_speed = rxData[2] << 8;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c3a:	789b      	ldrb	r3, [r3, #2]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c42:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed + rxData[3];
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c4e:	78db      	ldrb	r3, [r3, #3]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c5a:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed * 1.5;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc2e 	bl	80004c4 <__aeabi_i2d>
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001c6e:	f7fe fc93 	bl	8000598 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff3d 	bl	8000af8 <__aeabi_d2iz>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c84:	80da      	strh	r2, [r3, #6]
		vel_up = 1;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000728 	.word	0x20000728
 8001c98:	20000838 	.word	0x20000838
 8001c9c:	200002f8 	.word	0x200002f8
 8001ca0:	200007bc 	.word	0x200007bc
 8001ca4:	3ff80000 	.word	0x3ff80000
 8001ca8:	200007c4 	.word	0x200007c4
 8001cac:	200007cc 	.word	0x200007cc
 8001cb0:	200007d4 	.word	0x200007d4
 8001cb4:	200006ec 	.word	0x200006ec

08001cb8 <can_transmit>:
void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	817b      	strh	r3, [r7, #10]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	813b      	strh	r3, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef tx_header;
//    uint8_t             data[8];
//    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	613b      	str	r3, [r7, #16]
    tx_header.IDE   = CAN_ID_STD;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
    tx_header.RTR   = CAN_RTR_DATA;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    tx_header.DLC   = CAN_DATA_SIZE;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	623b      	str	r3, [r7, #32]
    tx_header.TransmitGlobalTime = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[0] = msg1 >> 8;
 8001ce8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001cec:	121b      	asrs	r3, r3, #8
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <can_transmit+0xb8>)
 8001cf4:	701a      	strb	r2, [r3, #0]
    data[1] = msg1;
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <can_transmit+0xb8>)
 8001cfc:	705a      	strb	r2, [r3, #1]
    data[2] = msg2 >> 8;
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	121b      	asrs	r3, r3, #8
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <can_transmit+0xb8>)
 8001d0a:	709a      	strb	r2, [r3, #2]
    data[3] = msg2;
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <can_transmit+0xb8>)
 8001d12:	70da      	strb	r2, [r3, #3]
    data[4] = msg3 >> 8;
 8001d14:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d18:	121b      	asrs	r3, r3, #8
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <can_transmit+0xb8>)
 8001d20:	711a      	strb	r2, [r3, #4]
    data[5] = msg3;
 8001d22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <can_transmit+0xb8>)
 8001d28:	715a      	strb	r2, [r3, #5]
    data[6] = msg4 >> 8;
 8001d2a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001d2e:	121b      	asrs	r3, r3, #8
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <can_transmit+0xb8>)
 8001d36:	719a      	strb	r2, [r3, #6]
    data[7] = msg4;
 8001d38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <can_transmit+0xb8>)
 8001d3e:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK){
 8001d40:	f107 0110 	add.w	r1, r7, #16
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <can_transmit+0xbc>)
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <can_transmit+0xb8>)
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f005 fa8b 	bl	8007264 <HAL_CAN_AddTxMessage>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <can_transmit+0xb0>
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 8001d54:	bf00      	nop
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <can_transmit+0xbc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f005 fb51 	bl	8007404 <HAL_CAN_IsTxMessagePending>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f6      	bne.n	8001d56 <can_transmit+0x9e>
    }
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000071c 	.word	0x2000071c
 8001d74:	20000724 	.word	0x20000724

08001d78 <Wheel_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Wheel_task */
void Wheel_task(void const * argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	M1_pid.KP = 1.5;
 8001d80:	4ba9      	ldr	r3, [pc, #676]	; (8002028 <Wheel_task+0x2b0>)
 8001d82:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d86:	601a      	str	r2, [r3, #0]
	M1_pid.KI = 0.0005;
 8001d88:	4ba7      	ldr	r3, [pc, #668]	; (8002028 <Wheel_task+0x2b0>)
 8001d8a:	4aa8      	ldr	r2, [pc, #672]	; (800202c <Wheel_task+0x2b4>)
 8001d8c:	605a      	str	r2, [r3, #4]
	M1_pid.KD = 0.01;
 8001d8e:	4ba6      	ldr	r3, [pc, #664]	; (8002028 <Wheel_task+0x2b0>)
 8001d90:	4aa7      	ldr	r2, [pc, #668]	; (8002030 <Wheel_task+0x2b8>)
 8001d92:	609a      	str	r2, [r3, #8]

	M2_pid.KP = 1.5;
 8001d94:	4ba7      	ldr	r3, [pc, #668]	; (8002034 <Wheel_task+0x2bc>)
 8001d96:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d9a:	601a      	str	r2, [r3, #0]
	M2_pid.KI = 0.0005;
 8001d9c:	4ba5      	ldr	r3, [pc, #660]	; (8002034 <Wheel_task+0x2bc>)
 8001d9e:	4aa3      	ldr	r2, [pc, #652]	; (800202c <Wheel_task+0x2b4>)
 8001da0:	605a      	str	r2, [r3, #4]
	M2_pid.KD = 0.01;
 8001da2:	4ba4      	ldr	r3, [pc, #656]	; (8002034 <Wheel_task+0x2bc>)
 8001da4:	4aa2      	ldr	r2, [pc, #648]	; (8002030 <Wheel_task+0x2b8>)
 8001da6:	609a      	str	r2, [r3, #8]

	M3_pid.KP = 1.5;
 8001da8:	4ba3      	ldr	r3, [pc, #652]	; (8002038 <Wheel_task+0x2c0>)
 8001daa:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001dae:	601a      	str	r2, [r3, #0]
	M3_pid.KI = 0.0005;
 8001db0:	4ba1      	ldr	r3, [pc, #644]	; (8002038 <Wheel_task+0x2c0>)
 8001db2:	4a9e      	ldr	r2, [pc, #632]	; (800202c <Wheel_task+0x2b4>)
 8001db4:	605a      	str	r2, [r3, #4]
	M3_pid.KD = 0.01;
 8001db6:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <Wheel_task+0x2c0>)
 8001db8:	4a9d      	ldr	r2, [pc, #628]	; (8002030 <Wheel_task+0x2b8>)
 8001dba:	609a      	str	r2, [r3, #8]

	M4_pid.KP = 1.5;
 8001dbc:	4b9f      	ldr	r3, [pc, #636]	; (800203c <Wheel_task+0x2c4>)
 8001dbe:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001dc2:	601a      	str	r2, [r3, #0]
	M4_pid.KI = 0.0005;
 8001dc4:	4b9d      	ldr	r3, [pc, #628]	; (800203c <Wheel_task+0x2c4>)
 8001dc6:	4a99      	ldr	r2, [pc, #612]	; (800202c <Wheel_task+0x2b4>)
 8001dc8:	605a      	str	r2, [r3, #4]
	M4_pid.KD = 0.01;
 8001dca:	4b9c      	ldr	r3, [pc, #624]	; (800203c <Wheel_task+0x2c4>)
 8001dcc:	4a98      	ldr	r2, [pc, #608]	; (8002030 <Wheel_task+0x2b8>)
 8001dce:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {

  if(vel_up==1){
 8001dd0:	4b9b      	ldr	r3, [pc, #620]	; (8002040 <Wheel_task+0x2c8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 814f 	bne.w	8002078 <Wheel_task+0x300>
	  vel_up=0;
 8001dda:	4b99      	ldr	r3, [pc, #612]	; (8002040 <Wheel_task+0x2c8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
		  M1_pid.error=M1.setpoint-M1.en_speed;
 8001de0:	4b98      	ldr	r3, [pc, #608]	; (8002044 <Wheel_task+0x2cc>)
 8001de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b96      	ldr	r3, [pc, #600]	; (8002044 <Wheel_task+0x2cc>)
 8001dea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a8d      	ldr	r2, [pc, #564]	; (8002028 <Wheel_task+0x2b0>)
 8001df2:	60d3      	str	r3, [r2, #12]
		  M1_pid.I_error+=M1_pid.error;
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <Wheel_task+0x2b0>)
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <Wheel_task+0x2b0>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a8a      	ldr	r2, [pc, #552]	; (8002028 <Wheel_task+0x2b0>)
 8001e00:	6113      	str	r3, [r2, #16]
		  M1_pid.D_error=M1_pid.lastError-M1_pid.error;
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <Wheel_task+0x2b0>)
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <Wheel_task+0x2b0>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <Wheel_task+0x2b0>)
 8001e0e:	6153      	str	r3, [r2, #20]
		  M1_pid.lastError=M1_pid.error;
 8001e10:	4b85      	ldr	r3, [pc, #532]	; (8002028 <Wheel_task+0x2b0>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a84      	ldr	r2, [pc, #528]	; (8002028 <Wheel_task+0x2b0>)
 8001e16:	6193      	str	r3, [r2, #24]
		  M1.Out=M1_pid.KP*M1_pid.error+M1_pid.KI*M1_pid.I_error+M1_pid.KD*M1_pid.D_error;
 8001e18:	4b83      	ldr	r3, [pc, #524]	; (8002028 <Wheel_task+0x2b0>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <Wheel_task+0x2b0>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <Wheel_task+0x2b0>)
 8001e30:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <Wheel_task+0x2b0>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	4b77      	ldr	r3, [pc, #476]	; (8002028 <Wheel_task+0x2b0>)
 8001e4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e4e:	4b76      	ldr	r3, [pc, #472]	; (8002028 <Wheel_task+0x2b0>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e66:	ee17 3a90 	vmov	r3, s15
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b75      	ldr	r3, [pc, #468]	; (8002044 <Wheel_task+0x2cc>)
 8001e6e:	805a      	strh	r2, [r3, #2]

		  M2_pid.error=M2.setpoint-M2.en_speed;
 8001e70:	4b75      	ldr	r3, [pc, #468]	; (8002048 <Wheel_task+0x2d0>)
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b73      	ldr	r3, [pc, #460]	; (8002048 <Wheel_task+0x2d0>)
 8001e7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <Wheel_task+0x2bc>)
 8001e82:	60d3      	str	r3, [r2, #12]
		  M2_pid.I_error+=M2_pid.error;
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <Wheel_task+0x2bc>)
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <Wheel_task+0x2bc>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <Wheel_task+0x2bc>)
 8001e90:	6113      	str	r3, [r2, #16]
		  M2_pid.D_error=M2_pid.lastError-M2_pid.error;
 8001e92:	4b68      	ldr	r3, [pc, #416]	; (8002034 <Wheel_task+0x2bc>)
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <Wheel_task+0x2bc>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a65      	ldr	r2, [pc, #404]	; (8002034 <Wheel_task+0x2bc>)
 8001e9e:	6153      	str	r3, [r2, #20]
		  M2_pid.lastError=M2_pid.error;
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <Wheel_task+0x2bc>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <Wheel_task+0x2bc>)
 8001ea6:	6193      	str	r3, [r2, #24]
		  M2.Out=M2_pid.KP*M2_pid.error+M2_pid.KI*M2_pid.I_error+M2_pid.KD*M2_pid.D_error;
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <Wheel_task+0x2bc>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	4b61      	ldr	r3, [pc, #388]	; (8002034 <Wheel_task+0x2bc>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <Wheel_task+0x2bc>)
 8001ec0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ec4:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <Wheel_task+0x2bc>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <Wheel_task+0x2bc>)
 8001eda:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ede:	4b55      	ldr	r3, [pc, #340]	; (8002034 <Wheel_task+0x2bc>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <Wheel_task+0x2d0>)
 8001efe:	805a      	strh	r2, [r3, #2]


		  M3_pid.error=M3.setpoint-M3.en_speed;
 8001f00:	4b52      	ldr	r3, [pc, #328]	; (800204c <Wheel_task+0x2d4>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <Wheel_task+0x2d4>)
 8001f0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a49      	ldr	r2, [pc, #292]	; (8002038 <Wheel_task+0x2c0>)
 8001f12:	60d3      	str	r3, [r2, #12]
		  M3_pid.I_error+=M3_pid.error;
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <Wheel_task+0x2c0>)
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <Wheel_task+0x2c0>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a46      	ldr	r2, [pc, #280]	; (8002038 <Wheel_task+0x2c0>)
 8001f20:	6113      	str	r3, [r2, #16]
		  M3_pid.D_error=M3_pid.lastError-M3_pid.error;
 8001f22:	4b45      	ldr	r3, [pc, #276]	; (8002038 <Wheel_task+0x2c0>)
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <Wheel_task+0x2c0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a42      	ldr	r2, [pc, #264]	; (8002038 <Wheel_task+0x2c0>)
 8001f2e:	6153      	str	r3, [r2, #20]
		  M3_pid.lastError=M3_pid.error;
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <Wheel_task+0x2c0>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a40      	ldr	r2, [pc, #256]	; (8002038 <Wheel_task+0x2c0>)
 8001f36:	6193      	str	r3, [r2, #24]
		  M3.Out=M3_pid.KP*M3_pid.error+M3_pid.KI*M3_pid.I_error+M3_pid.KD*M3_pid.D_error;
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <Wheel_task+0x2c0>)
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <Wheel_task+0x2c0>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <Wheel_task+0x2c0>)
 8001f50:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <Wheel_task+0x2c0>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <Wheel_task+0x2c0>)
 8001f6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <Wheel_task+0x2c0>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f86:	ee17 3a90 	vmov	r3, s15
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	; (800204c <Wheel_task+0x2d4>)
 8001f8e:	805a      	strh	r2, [r3, #2]


		  M4_pid.error=M4.setpoint-M4.en_speed;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <Wheel_task+0x2d8>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <Wheel_task+0x2d8>)
 8001f9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <Wheel_task+0x2c4>)
 8001fa2:	60d3      	str	r3, [r2, #12]
		  M4_pid.I_error+=M4_pid.error;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <Wheel_task+0x2c4>)
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <Wheel_task+0x2c4>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <Wheel_task+0x2c4>)
 8001fb0:	6113      	str	r3, [r2, #16]
		  M4_pid.D_error=M4_pid.lastError-M4_pid.error;
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <Wheel_task+0x2c4>)
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <Wheel_task+0x2c4>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <Wheel_task+0x2c4>)
 8001fbe:	6153      	str	r3, [r2, #20]
		  M4_pid.lastError=M4_pid.error;
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <Wheel_task+0x2c4>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <Wheel_task+0x2c4>)
 8001fc6:	6193      	str	r3, [r2, #24]
		  M4.Out=M4_pid.KP*M4_pid.error+M4_pid.KI*M4_pid.I_error+M4_pid.KD*M4_pid.D_error;
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <Wheel_task+0x2c4>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <Wheel_task+0x2c4>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <Wheel_task+0x2c4>)
 8001fe0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <Wheel_task+0x2c4>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <Wheel_task+0x2c4>)
 8001ffa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <Wheel_task+0x2c4>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002016:	ee17 3a90 	vmov	r3, s15
 800201a:	b21a      	sxth	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <Wheel_task+0x2d8>)
 800201e:	805a      	strh	r2, [r3, #2]

		  can_transmit(&hcan1, FIRST_GROUP_ID, M1.Out, M2.Out, M3.Out, M4.Out);
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <Wheel_task+0x2cc>)
 8002022:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002026:	e015      	b.n	8002054 <Wheel_task+0x2dc>
 8002028:	20000730 	.word	0x20000730
 800202c:	3a03126f 	.word	0x3a03126f
 8002030:	3c23d70a 	.word	0x3c23d70a
 8002034:	2000074c 	.word	0x2000074c
 8002038:	20000768 	.word	0x20000768
 800203c:	20000784 	.word	0x20000784
 8002040:	200006ec 	.word	0x200006ec
 8002044:	200007bc 	.word	0x200007bc
 8002048:	200007c4 	.word	0x200007c4
 800204c:	200007cc 	.word	0x200007cc
 8002050:	200007d4 	.word	0x200007d4
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <Wheel_task+0x308>)
 8002056:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <Wheel_task+0x30c>)
 800205c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <Wheel_task+0x310>)
 8002062:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002066:	9201      	str	r2, [sp, #4]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <Wheel_task+0x314>)
 8002074:	f7ff fe20 	bl	8001cb8 <can_transmit>
 }

    osDelay(5);
 8002078:	2005      	movs	r0, #5
 800207a:	f00a fb4a 	bl	800c712 <osDelay>
  if(vel_up==1){
 800207e:	e6a7      	b.n	8001dd0 <Wheel_task+0x58>
 8002080:	200007c4 	.word	0x200007c4
 8002084:	200007cc 	.word	0x200007cc
 8002088:	200007d4 	.word	0x200007d4
 800208c:	200002f8 	.word	0x200002f8

08002090 <task2_joystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_joystick */
void task2_joystick(void const * argument)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b0a0      	sub	sp, #128	; 0x80
 8002096:	af02      	add	r7, sp, #8
 8002098:	6778      	str	r0, [r7, #116]	; 0x74
  /* USER CODE BEGIN task2_joystick */

  /* Infinite loop */
  for(;;)
  {
	  spi_enable;
 800209a:	2200      	movs	r2, #0
 800209c:	2102      	movs	r1, #2
 800209e:	4886      	ldr	r0, [pc, #536]	; (80022b8 <task2_joystick+0x228>)
 80020a0:	f006 fbdc 	bl	800885c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi2, HC_PS2_TX, HC_PS2_RX, 9, 10);
 80020a4:	230a      	movs	r3, #10
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2309      	movs	r3, #9
 80020aa:	4a84      	ldr	r2, [pc, #528]	; (80022bc <task2_joystick+0x22c>)
 80020ac:	4984      	ldr	r1, [pc, #528]	; (80022c0 <task2_joystick+0x230>)
 80020ae:	4885      	ldr	r0, [pc, #532]	; (80022c4 <task2_joystick+0x234>)
 80020b0:	f007 fa91 	bl	80095d6 <HAL_SPI_TransmitReceive>
	  spi_disable;
 80020b4:	2201      	movs	r2, #1
 80020b6:	2102      	movs	r1, #2
 80020b8:	487f      	ldr	r0, [pc, #508]	; (80022b8 <task2_joystick+0x228>)
 80020ba:	f006 fbcf 	bl	800885c <HAL_GPIO_WritePin>
	  PS2.LY=-(HC_PS2_RX[8]-127);
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <task2_joystick+0x22c>)
 80020c0:	7a1b      	ldrb	r3, [r3, #8]
 80020c2:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80020c6:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <task2_joystick+0x238>)
 80020c8:	601a      	str	r2, [r3, #0]
	  PS2.LX=left_joy;  //(HC_PS2_RX[7]-127);
 80020ca:	4b80      	ldr	r3, [pc, #512]	; (80022cc <task2_joystick+0x23c>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe fd10 	bl	8000af8 <__aeabi_d2iz>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <task2_joystick+0x238>)
 80020dc:	605a      	str	r2, [r3, #4]
	  //PS2.RY=HC_PS2_RX[6]-128;
	 // PS2.RX=HC_PS2_RX[5]-128;
	  PS2.RX = right_joy;
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <task2_joystick+0x240>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <task2_joystick+0x238>)
 80020e4:	60da      	str	r2, [r3, #12]
	  PS2.X=PS2.LX/(float)128;
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <task2_joystick+0x238>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80022d4 <task2_joystick+0x244>
 80020f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020fa:	ee16 0a90 	vmov	r0, s13
 80020fe:	f7fe f9f3 	bl	80004e8 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4970      	ldr	r1, [pc, #448]	; (80022c8 <task2_joystick+0x238>)
 8002108:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  PS2.Y=PS2.LY/(float)128;
 800210c:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <task2_joystick+0x238>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80022d4 <task2_joystick+0x244>
 800211c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002120:	ee16 0a90 	vmov	r0, s13
 8002124:	f7fe f9e0 	bl	80004e8 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4966      	ldr	r1, [pc, #408]	; (80022c8 <task2_joystick+0x238>)
 800212e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <task2_joystick+0x238>)
 8002134:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002138:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <task2_joystick+0x238>)
 800213a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800213e:	f7fe fa2b 	bl	8000598 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4614      	mov	r4, r2
 8002148:	461d      	mov	r5, r3
 800214a:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <task2_joystick+0x238>)
 800214c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002150:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <task2_joystick+0x238>)
 8002152:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002156:	f7fe fa1f 	bl	8000598 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe f863 	bl	800022c <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	ec43 2b17 	vmov	d7, r2, r3
 800216e:	eeb0 0a47 	vmov.f32	s0, s14
 8002172:	eef0 0a67 	vmov.f32	s1, s15
 8002176:	f00b fd79 	bl	800dc6c <sqrt>
 800217a:	eeb0 7a40 	vmov.f32	s14, s0
 800217e:	eef0 7a60 	vmov.f32	s15, s1
 8002182:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <task2_joystick+0x248>)
 8002184:	ed83 7b00 	vstr	d7, [r3]
	  degree_a=atan2(PS2.Y,PS2.X);
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <task2_joystick+0x238>)
 800218a:	ed93 7b06 	vldr	d7, [r3, #24]
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <task2_joystick+0x238>)
 8002190:	ed93 6b04 	vldr	d6, [r3, #16]
 8002194:	eeb0 1a46 	vmov.f32	s2, s12
 8002198:	eef0 1a66 	vmov.f32	s3, s13
 800219c:	eeb0 0a47 	vmov.f32	s0, s14
 80021a0:	eef0 0a67 	vmov.f32	s1, s15
 80021a4:	f00b fc9a 	bl	800dadc <atan2>
 80021a8:	eeb0 7a40 	vmov.f32	s14, s0
 80021ac:	eef0 7a60 	vmov.f32	s15, s1
 80021b0:	4b4a      	ldr	r3, [pc, #296]	; (80022dc <task2_joystick+0x24c>)
 80021b2:	ed83 7b00 	vstr	d7, [r3]
	  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 80021b6:	4b49      	ldr	r3, [pc, #292]	; (80022dc <task2_joystick+0x24c>)
 80021b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021bc:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <task2_joystick+0x250>)
 80021be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <task2_joystick+0x254>)
 80021c8:	f7fe fb10 	bl	80007ec <__aeabi_ddiv>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4620      	mov	r0, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	f7fe f828 	bl	8000228 <__aeabi_dsub>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	ec43 2b17 	vmov	d7, r2, r3
 80021e0:	eeb0 0a47 	vmov.f32	s0, s14
 80021e4:	eef0 0a67 	vmov.f32	s1, s15
 80021e8:	f00b ff6e 	bl	800e0c8 <sin>
 80021ec:	ec51 0b10 	vmov	r0, r1, d0
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <task2_joystick+0x248>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f9cf 	bl	8000598 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <task2_joystick+0x258>)
 8002208:	f7fe f9c6 	bl	8000598 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	4b35      	ldr	r3, [pc, #212]	; (80022ec <task2_joystick+0x25c>)
 8002216:	e9c3 0100 	strd	r0, r1, [r3]
	  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <task2_joystick+0x24c>)
 800221c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002220:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <task2_joystick+0x250>)
 8002222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <task2_joystick+0x254>)
 800222c:	f7fe fade 	bl	80007ec <__aeabi_ddiv>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fd fff6 	bl	8000228 <__aeabi_dsub>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	ec43 2b17 	vmov	d7, r2, r3
 8002244:	eeb0 0a47 	vmov.f32	s0, s14
 8002248:	eef0 0a67 	vmov.f32	s1, s15
 800224c:	f00b fedc 	bl	800e008 <cos>
 8002250:	ec51 0b10 	vmov	r0, r1, d0
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <task2_joystick+0x248>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe f99d 	bl	8000598 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <task2_joystick+0x258>)
 800226c:	f7fe f994 	bl	8000598 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <task2_joystick+0x260>)
 800227a:	e9c3 0100 	strd	r0, r1, [r3]
	  if(HC_PS2_RX[4]==251){
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <task2_joystick+0x22c>)
 8002280:	791b      	ldrb	r3, [r3, #4]
 8002282:	2bfb      	cmp	r3, #251	; 0xfb
 8002284:	d103      	bne.n	800228e <task2_joystick+0x1fe>
		  BLDC = 1;
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <task2_joystick+0x264>)
 8002288:	2301      	movs	r3, #1
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e042      	b.n	8002314 <task2_joystick+0x284>
	  }else if(HC_PS2_RX[4]==254){
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <task2_joystick+0x22c>)
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	2bfe      	cmp	r3, #254	; 0xfe
 8002294:	d103      	bne.n	800229e <task2_joystick+0x20e>
		  BLDC = 2;
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <task2_joystick+0x264>)
 8002298:	2302      	movs	r3, #2
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e03a      	b.n	8002314 <task2_joystick+0x284>
	  }else if(HC_PS2_RX[4]==247){
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <task2_joystick+0x22c>)
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	2bf7      	cmp	r3, #247	; 0xf7
 80022a4:	d12c      	bne.n	8002300 <task2_joystick+0x270>
		  yellow=1;
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <task2_joystick+0x268>)
 80022a8:	2301      	movs	r3, #1
 80022aa:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 1800;
 80022ac:	4a13      	ldr	r2, [pc, #76]	; (80022fc <task2_joystick+0x26c>)
 80022ae:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e02e      	b.n	8002314 <task2_joystick+0x284>
 80022b6:	bf00      	nop
 80022b8:	40020400 	.word	0x40020400
 80022bc:	20000704 	.word	0x20000704
 80022c0:	20000008 	.word	0x20000008
 80022c4:	20000320 	.word	0x20000320
 80022c8:	200007f0 	.word	0x200007f0
 80022cc:	20001dd0 	.word	0x20001dd0
 80022d0:	20001dc8 	.word	0x20001dc8
 80022d4:	43000000 	.word	0x43000000
 80022d8:	200006d0 	.word	0x200006d0
 80022dc:	200006d8 	.word	0x200006d8
 80022e0:	20000000 	.word	0x20000000
 80022e4:	40100000 	.word	0x40100000
 80022e8:	40d00000 	.word	0x40d00000
 80022ec:	200006c0 	.word	0x200006c0
 80022f0:	200006c8 	.word	0x200006c8
 80022f4:	20000700 	.word	0x20000700
 80022f8:	200006f8 	.word	0x200006f8
 80022fc:	200007dc 	.word	0x200007dc
	  }else if(HC_PS2_RX[4]==253){
 8002300:	4b9d      	ldr	r3, [pc, #628]	; (8002578 <task2_joystick+0x4e8>)
 8002302:	791b      	ldrb	r3, [r3, #4]
 8002304:	2bfd      	cmp	r3, #253	; 0xfd
 8002306:	d105      	bne.n	8002314 <task2_joystick+0x284>
		  yellow=2;
 8002308:	4a9c      	ldr	r2, [pc, #624]	; (800257c <task2_joystick+0x4ec>)
 800230a:	2302      	movs	r3, #2
 800230c:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 0;
 800230e:	4a9c      	ldr	r2, [pc, #624]	; (8002580 <task2_joystick+0x4f0>)
 8002310:	2300      	movs	r3, #0
 8002312:	6013      	str	r3, [r2, #0]
	  }
	  if((abs(PS2.LY) > 5 || abs(PS2.LX)>5 )&& abs(PS2.RX)<=5){
 8002314:	4b9b      	ldr	r3, [pc, #620]	; (8002584 <task2_joystick+0x4f4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	bfb8      	it	lt
 800231c:	425b      	neglt	r3, r3
 800231e:	2b05      	cmp	r3, #5
 8002320:	dc07      	bgt.n	8002332 <task2_joystick+0x2a2>
 8002322:	4b98      	ldr	r3, [pc, #608]	; (8002584 <task2_joystick+0x4f4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	bfb8      	it	lt
 800232a:	425b      	neglt	r3, r3
 800232c:	2b05      	cmp	r3, #5
 800232e:	f340 81f2 	ble.w	8002716 <task2_joystick+0x686>
 8002332:	4b94      	ldr	r3, [pc, #592]	; (8002584 <task2_joystick+0x4f4>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f113 0f05 	cmn.w	r3, #5
 800233a:	f2c0 81ec 	blt.w	8002716 <task2_joystick+0x686>
 800233e:	4b91      	ldr	r3, [pc, #580]	; (8002584 <task2_joystick+0x4f4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b05      	cmp	r3, #5
 8002344:	f300 81e7 	bgt.w	8002716 <task2_joystick+0x686>
		  if(ML>12000 || MR>12000){
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <task2_joystick+0x4f8>)
 800234a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234e:	a386      	add	r3, pc, #536	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fbb0 	bl	8000ab8 <__aeabi_dcmpgt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <task2_joystick+0x2e4>
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <task2_joystick+0x4fc>)
 8002360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002364:	a380      	add	r3, pc, #512	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fe fba5 	bl	8000ab8 <__aeabi_dcmpgt>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d048      	beq.n	8002406 <task2_joystick+0x376>
			  if(ML > MR){
 8002374:	4b84      	ldr	r3, [pc, #528]	; (8002588 <task2_joystick+0x4f8>)
 8002376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <task2_joystick+0x4fc>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe fb9a 	bl	8000ab8 <__aeabi_dcmpgt>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01e      	beq.n	80023c8 <task2_joystick+0x338>
				  MR=MR/ML*12000;
 800238a:	4b80      	ldr	r3, [pc, #512]	; (800258c <task2_joystick+0x4fc>)
 800238c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002390:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <task2_joystick+0x4f8>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe fa29 	bl	80007ec <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	a371      	add	r3, pc, #452	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f8f6 	bl	8000598 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	4b75      	ldr	r3, [pc, #468]	; (800258c <task2_joystick+0x4fc>)
 80023b6:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 80023ba:	4973      	ldr	r1, [pc, #460]	; (8002588 <task2_joystick+0x4f8>)
 80023bc:	a36a      	add	r3, pc, #424	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 80023c6:	e171      	b.n	80026ac <task2_joystick+0x61c>

			  }
			  else{
				  ML=(ML/MR)*12000;
 80023c8:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <task2_joystick+0x4f8>)
 80023ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <task2_joystick+0x4fc>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe fa0a 	bl	80007ec <__aeabi_ddiv>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	a361      	add	r3, pc, #388	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	4b65      	ldr	r3, [pc, #404]	; (8002588 <task2_joystick+0x4f8>)
 80023f4:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 80023f8:	4964      	ldr	r1, [pc, #400]	; (800258c <task2_joystick+0x4fc>)
 80023fa:	a35b      	add	r3, pc, #364	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002404:	e152      	b.n	80026ac <task2_joystick+0x61c>
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <task2_joystick+0x4f8>)
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	a358      	add	r3, pc, #352	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe fb33 	bl	8000a7c <__aeabi_dcmplt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <task2_joystick+0x3a2>
 800241c:	4b5b      	ldr	r3, [pc, #364]	; (800258c <task2_joystick+0x4fc>)
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	a353      	add	r3, pc, #332	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe fb28 	bl	8000a7c <__aeabi_dcmplt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d054      	beq.n	80024dc <task2_joystick+0x44c>
			  if(ML < MR){
 8002432:	4b55      	ldr	r3, [pc, #340]	; (8002588 <task2_joystick+0x4f8>)
 8002434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <task2_joystick+0x4fc>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f7fe fb1d 	bl	8000a7c <__aeabi_dcmplt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d024      	beq.n	8002492 <task2_joystick+0x402>
				  MR=-MR/ML*12000;
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <task2_joystick+0x4fc>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002450:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002454:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <task2_joystick+0x4f8>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002460:	f7fe f9c4 	bl	80007ec <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	a33e      	add	r3, pc, #248	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f891 	bl	8000598 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <task2_joystick+0x4fc>)
 8002480:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002484:	4940      	ldr	r1, [pc, #256]	; (8002588 <task2_joystick+0x4f8>)
 8002486:	a33a      	add	r3, pc, #232	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002490:	e10c      	b.n	80026ac <task2_joystick+0x61c>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <task2_joystick+0x4f8>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	663a      	str	r2, [r7, #96]	; 0x60
 800249a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800249e:	667b      	str	r3, [r7, #100]	; 0x64
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <task2_joystick+0x4fc>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024aa:	f7fe f99f 	bl	80007ec <__aeabi_ddiv>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	a32c      	add	r3, pc, #176	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f86c 	bl	8000598 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <task2_joystick+0x4f8>)
 80024ca:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 80024ce:	492f      	ldr	r1, [pc, #188]	; (800258c <task2_joystick+0x4fc>)
 80024d0:	a327      	add	r3, pc, #156	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 80024da:	e0e7      	b.n	80026ac <task2_joystick+0x61c>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <task2_joystick+0x4f8>)
 80024de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e2:	a321      	add	r3, pc, #132	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe fae6 	bl	8000ab8 <__aeabi_dcmpgt>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <task2_joystick+0x478>
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <task2_joystick+0x4fc>)
 80024f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f8:	a31d      	add	r3, pc, #116	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe fabd 	bl	8000a7c <__aeabi_dcmplt>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d068      	beq.n	80025da <task2_joystick+0x54a>
			  if(ML > -MR){
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <task2_joystick+0x4fc>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	4690      	mov	r8, r2
 8002510:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <task2_joystick+0x4f8>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	4640      	mov	r0, r8
 800251c:	4649      	mov	r1, r9
 800251e:	f7fe faad 	bl	8000a7c <__aeabi_dcmplt>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d033      	beq.n	8002590 <task2_joystick+0x500>
				  MR=MR/ML*12000;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <task2_joystick+0x4fc>)
 800252a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <task2_joystick+0x4f8>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f95a 	bl	80007ec <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a309      	add	r3, pc, #36	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f827 	bl	8000598 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <task2_joystick+0x4fc>)
 8002554:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002558:	490b      	ldr	r1, [pc, #44]	; (8002588 <task2_joystick+0x4f8>)
 800255a:	a303      	add	r3, pc, #12	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002564:	e0a2      	b.n	80026ac <task2_joystick+0x61c>
 8002566:	bf00      	nop
 8002568:	00000000 	.word	0x00000000
 800256c:	40c77000 	.word	0x40c77000
 8002570:	00000000 	.word	0x00000000
 8002574:	c0c77000 	.word	0xc0c77000
 8002578:	20000704 	.word	0x20000704
 800257c:	200006f8 	.word	0x200006f8
 8002580:	200007dc 	.word	0x200007dc
 8002584:	200007f0 	.word	0x200007f0
 8002588:	200006c0 	.word	0x200006c0
 800258c:	200006c8 	.word	0x200006c8

			  }
			  else{
				  ML=-ML/MR*12000;
 8002590:	4b93      	ldr	r3, [pc, #588]	; (80027e0 <task2_joystick+0x750>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	65ba      	str	r2, [r7, #88]	; 0x58
 8002598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800259e:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <task2_joystick+0x754>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025a8:	f7fe f920 	bl	80007ec <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	a386      	add	r3, pc, #536	; (adr r3, 80027d0 <task2_joystick+0x740>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f7fd ffed 	bl	8000598 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	4b86      	ldr	r3, [pc, #536]	; (80027e0 <task2_joystick+0x750>)
 80025c8:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 80025cc:	4985      	ldr	r1, [pc, #532]	; (80027e4 <task2_joystick+0x754>)
 80025ce:	a382      	add	r3, pc, #520	; (adr r3, 80027d8 <task2_joystick+0x748>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 80025d8:	e068      	b.n	80026ac <task2_joystick+0x61c>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <task2_joystick+0x754>)
 80025dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e0:	a37b      	add	r3, pc, #492	; (adr r3, 80027d0 <task2_joystick+0x740>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe fa67 	bl	8000ab8 <__aeabi_dcmpgt>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <task2_joystick+0x576>
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <task2_joystick+0x750>)
 80025f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f6:	a378      	add	r3, pc, #480	; (adr r3, 80027d8 <task2_joystick+0x748>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe fa3e 	bl	8000a7c <__aeabi_dcmplt>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d052      	beq.n	80026ac <task2_joystick+0x61c>
			  if(MR > -ML){
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <task2_joystick+0x750>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	4692      	mov	sl, r2
 800260e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002612:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <task2_joystick+0x754>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	4650      	mov	r0, sl
 800261a:	4659      	mov	r1, fp
 800261c:	f7fe fa2e 	bl	8000a7c <__aeabi_dcmplt>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01e      	beq.n	8002664 <task2_joystick+0x5d4>
				  ML=ML/MR*12000;
 8002626:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <task2_joystick+0x750>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	4b6d      	ldr	r3, [pc, #436]	; (80027e4 <task2_joystick+0x754>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fe f8db 	bl	80007ec <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	a364      	add	r3, pc, #400	; (adr r3, 80027d0 <task2_joystick+0x740>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ffa8 	bl	8000598 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <task2_joystick+0x750>)
 8002652:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002656:	4963      	ldr	r1, [pc, #396]	; (80027e4 <task2_joystick+0x754>)
 8002658:	a35d      	add	r3, pc, #372	; (adr r3, 80027d0 <task2_joystick+0x740>)
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
 8002662:	e023      	b.n	80026ac <task2_joystick+0x61c>

			  }
			  else{
				  MR=-MR/ML*12000;
 8002664:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <task2_joystick+0x754>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	653a      	str	r2, [r7, #80]	; 0x50
 800266c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002670:	657b      	str	r3, [r7, #84]	; 0x54
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <task2_joystick+0x750>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800267c:	f7fe f8b6 	bl	80007ec <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	a351      	add	r3, pc, #324	; (adr r3, 80027d0 <task2_joystick+0x740>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd ff83 	bl	8000598 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <task2_joystick+0x754>)
 800269c:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 80026a0:	494f      	ldr	r1, [pc, #316]	; (80027e0 <task2_joystick+0x750>)
 80026a2:	a34d      	add	r3, pc, #308	; (adr r3, 80027d8 <task2_joystick+0x748>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <task2_joystick+0x754>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80026b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026be:	f7fe fa1b 	bl	8000af8 <__aeabi_d2iz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <task2_joystick+0x758>)
 80026c8:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <task2_joystick+0x750>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa10 	bl	8000af8 <__aeabi_d2iz>
 80026d8:	4603      	mov	r3, r0
 80026da:	b21b      	sxth	r3, r3
 80026dc:	4a43      	ldr	r2, [pc, #268]	; (80027ec <task2_joystick+0x75c>)
 80026de:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 80026e0:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <task2_joystick+0x750>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	643a      	str	r2, [r7, #64]	; 0x40
 80026e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
 80026ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026f2:	f7fe fa01 	bl	8000af8 <__aeabi_d2iz>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4a3d      	ldr	r2, [pc, #244]	; (80027f0 <task2_joystick+0x760>)
 80026fc:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <task2_joystick+0x754>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe f9f6 	bl	8000af8 <__aeabi_d2iz>
 800270c:	4603      	mov	r3, r0
 800270e:	b21b      	sxth	r3, r3
 8002710:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <task2_joystick+0x764>)
 8002712:	8013      	strh	r3, [r2, #0]
 8002714:	e3a9      	b.n	8002e6a <task2_joystick+0xdda>
	  }
	  else if(abs(PS2.LY)<=5 && abs(PS2.LX)<=5 && abs(PS2.RX)>5){
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <task2_joystick+0x768>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f113 0f05 	cmn.w	r3, #5
 800271e:	db6f      	blt.n	8002800 <task2_joystick+0x770>
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <task2_joystick+0x768>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b05      	cmp	r3, #5
 8002726:	dc6b      	bgt.n	8002800 <task2_joystick+0x770>
 8002728:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <task2_joystick+0x768>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f113 0f05 	cmn.w	r3, #5
 8002730:	db66      	blt.n	8002800 <task2_joystick+0x770>
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <task2_joystick+0x768>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b05      	cmp	r3, #5
 8002738:	dc62      	bgt.n	8002800 <task2_joystick+0x770>
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <task2_joystick+0x768>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	bfb8      	it	lt
 8002742:	425b      	neglt	r3, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	dd5b      	ble.n	8002800 <task2_joystick+0x770>
		  M1.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <task2_joystick+0x768>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	049b      	lsls	r3, r3, #18
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4619      	mov	r1, r3
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <task2_joystick+0x76c>)
 8002758:	fb83 2301 	smull	r2, r3, r3, r1
 800275c:	115a      	asrs	r2, r3, #5
 800275e:	17cb      	asrs	r3, r1, #31
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	b21b      	sxth	r3, r3
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <task2_joystick+0x758>)
 8002766:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <task2_joystick+0x768>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	049b      	lsls	r3, r3, #18
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	039b      	lsls	r3, r3, #14
 8002774:	4619      	mov	r1, r3
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <task2_joystick+0x76c>)
 8002778:	fb83 2301 	smull	r2, r3, r3, r1
 800277c:	115a      	asrs	r2, r3, #5
 800277e:	17cb      	asrs	r3, r1, #31
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b21b      	sxth	r3, r3
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <task2_joystick+0x75c>)
 8002786:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <task2_joystick+0x768>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	039b      	lsls	r3, r3, #14
 8002794:	4619      	mov	r1, r3
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <task2_joystick+0x76c>)
 8002798:	fb83 2301 	smull	r2, r3, r3, r1
 800279c:	115a      	asrs	r2, r3, #5
 800279e:	17cb      	asrs	r3, r1, #31
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <task2_joystick+0x764>)
 80027a6:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <task2_joystick+0x768>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	049b      	lsls	r3, r3, #18
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	039b      	lsls	r3, r3, #14
 80027b4:	4619      	mov	r1, r3
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <task2_joystick+0x76c>)
 80027b8:	fb83 2301 	smull	r2, r3, r3, r1
 80027bc:	115a      	asrs	r2, r3, #5
 80027be:	17cb      	asrs	r3, r1, #31
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <task2_joystick+0x760>)
 80027c6:	8013      	strh	r3, [r2, #0]
 80027c8:	e34f      	b.n	8002e6a <task2_joystick+0xdda>
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40c77000 	.word	0x40c77000
 80027d8:	00000000 	.word	0x00000000
 80027dc:	c0c77000 	.word	0xc0c77000
 80027e0:	200006c0 	.word	0x200006c0
 80027e4:	200006c8 	.word	0x200006c8
 80027e8:	200007bc 	.word	0x200007bc
 80027ec:	200007c4 	.word	0x200007c4
 80027f0:	200007d4 	.word	0x200007d4
 80027f4:	200007cc 	.word	0x200007cc
 80027f8:	200007f0 	.word	0x200007f0
 80027fc:	10624dd3 	.word	0x10624dd3
	  }
	  else if((abs(PS2.LY)>5 || abs(PS2.LX)>5) && abs(PS2.RX)>5){
 8002800:	4ba3      	ldr	r3, [pc, #652]	; (8002a90 <task2_joystick+0xa00>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	bfb8      	it	lt
 8002808:	425b      	neglt	r3, r3
 800280a:	2b05      	cmp	r3, #5
 800280c:	dc07      	bgt.n	800281e <task2_joystick+0x78e>
 800280e:	4ba0      	ldr	r3, [pc, #640]	; (8002a90 <task2_joystick+0xa00>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	bfb8      	it	lt
 8002816:	425b      	neglt	r3, r3
 8002818:	2b05      	cmp	r3, #5
 800281a:	f340 831a 	ble.w	8002e52 <task2_joystick+0xdc2>
 800281e:	4b9c      	ldr	r3, [pc, #624]	; (8002a90 <task2_joystick+0xa00>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	bfb8      	it	lt
 8002826:	425b      	neglt	r3, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	f340 8312 	ble.w	8002e52 <task2_joystick+0xdc2>
		  PS2.X=PS2.LX/(float)128;
 800282e:	4b98      	ldr	r3, [pc, #608]	; (8002a90 <task2_joystick+0xa00>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002a94 <task2_joystick+0xa04>
 800283e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002842:	ee16 0a90 	vmov	r0, s13
 8002846:	f7fd fe4f 	bl	80004e8 <__aeabi_f2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4990      	ldr	r1, [pc, #576]	; (8002a90 <task2_joystick+0xa00>)
 8002850:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PS2.Y=PS2.LY/(float)128;
 8002854:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <task2_joystick+0xa00>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002860:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002a94 <task2_joystick+0xa04>
 8002864:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002868:	ee16 0a90 	vmov	r0, s13
 800286c:	f7fd fe3c 	bl	80004e8 <__aeabi_f2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4986      	ldr	r1, [pc, #536]	; (8002a90 <task2_joystick+0xa00>)
 8002876:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <task2_joystick+0xa00>)
 800287c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <task2_joystick+0xa00>)
 8002882:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002886:	f7fd fe87 	bl	8000598 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4614      	mov	r4, r2
 8002890:	461d      	mov	r5, r3
 8002892:	4b7f      	ldr	r3, [pc, #508]	; (8002a90 <task2_joystick+0xa00>)
 8002894:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002898:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <task2_joystick+0xa00>)
 800289a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800289e:	f7fd fe7b 	bl	8000598 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fd fcbf 	bl	800022c <__adddf3>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	ec43 2b17 	vmov	d7, r2, r3
 80028b6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ba:	eef0 0a67 	vmov.f32	s1, s15
 80028be:	f00b f9d5 	bl	800dc6c <sqrt>
 80028c2:	eeb0 7a40 	vmov.f32	s14, s0
 80028c6:	eef0 7a60 	vmov.f32	s15, s1
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <task2_joystick+0xa08>)
 80028cc:	ed83 7b00 	vstr	d7, [r3]
//				  speed=1;
//			  }
//			  if(speed<=-1){
//				  speed=-1;
//			  }
		  degree_a=atan2(PS2.Y,PS2.X);
 80028d0:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <task2_joystick+0xa00>)
 80028d2:	ed93 7b06 	vldr	d7, [r3, #24]
 80028d6:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <task2_joystick+0xa00>)
 80028d8:	ed93 6b04 	vldr	d6, [r3, #16]
 80028dc:	eeb0 1a46 	vmov.f32	s2, s12
 80028e0:	eef0 1a66 	vmov.f32	s3, s13
 80028e4:	eeb0 0a47 	vmov.f32	s0, s14
 80028e8:	eef0 0a67 	vmov.f32	s1, s15
 80028ec:	f00b f8f6 	bl	800dadc <atan2>
 80028f0:	eeb0 7a40 	vmov.f32	s14, s0
 80028f4:	eef0 7a60 	vmov.f32	s15, s1
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <task2_joystick+0xa0c>)
 80028fa:	ed83 7b00 	vstr	d7, [r3]
		  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <task2_joystick+0xa0c>)
 8002900:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <task2_joystick+0xa10>)
 8002906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <task2_joystick+0xa14>)
 8002910:	f7fd ff6c 	bl	80007ec <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fc84 	bl	8000228 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ec43 2b17 	vmov	d7, r2, r3
 8002928:	eeb0 0a47 	vmov.f32	s0, s14
 800292c:	eef0 0a67 	vmov.f32	s1, s15
 8002930:	f00b fbca 	bl	800e0c8 <sin>
 8002934:	ec51 0b10 	vmov	r0, r1, d0
 8002938:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <task2_joystick+0xa08>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fe2b 	bl	8000598 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <task2_joystick+0xa18>)
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <task2_joystick+0xa1c>)
 800295e:	e9c3 0100 	strd	r0, r1, [r3]
		  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002962:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <task2_joystick+0xa0c>)
 8002964:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002968:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <task2_joystick+0xa10>)
 800296a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <task2_joystick+0xa14>)
 8002974:	f7fd ff3a 	bl	80007ec <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fc52 	bl	8000228 <__aeabi_dsub>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	ec43 2b17 	vmov	d7, r2, r3
 800298c:	eeb0 0a47 	vmov.f32	s0, s14
 8002990:	eef0 0a67 	vmov.f32	s1, s15
 8002994:	f00b fb38 	bl	800e008 <cos>
 8002998:	ec51 0b10 	vmov	r0, r1, d0
 800299c:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <task2_joystick+0xa08>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fdf9 	bl	8000598 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <task2_joystick+0xa18>)
 80029b4:	f7fd fdf0 	bl	8000598 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <task2_joystick+0xa20>)
 80029c2:	e9c3 0100 	strd	r0, r1, [r3]
		  if(ML>12000 || MR>12000){
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <task2_joystick+0xa1c>)
 80029c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029cc:	a32e      	add	r3, pc, #184	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fe f871 	bl	8000ab8 <__aeabi_dcmpgt>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <task2_joystick+0x962>
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <task2_joystick+0xa20>)
 80029de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e2:	a329      	add	r3, pc, #164	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fe f866 	bl	8000ab8 <__aeabi_dcmpgt>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d060      	beq.n	8002ab4 <task2_joystick+0xa24>
			  if(ML > MR){
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <task2_joystick+0xa1c>)
 80029f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <task2_joystick+0xa20>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fe f85b 	bl	8000ab8 <__aeabi_dcmpgt>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01e      	beq.n	8002a46 <task2_joystick+0x9b6>
				  MR=MR/ML*12000;
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <task2_joystick+0xa20>)
 8002a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <task2_joystick+0xa1c>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd feea 	bl	80007ec <__aeabi_ddiv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	a319      	add	r3, pc, #100	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fdb7 	bl	8000598 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <task2_joystick+0xa20>)
 8002a34:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002a38:	491c      	ldr	r1, [pc, #112]	; (8002aac <task2_joystick+0xa1c>)
 8002a3a:	a313      	add	r3, pc, #76	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002a44:	e184      	b.n	8002d50 <task2_joystick+0xcc0>

			  }
			  else{
				  ML=ML/MR*12000;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <task2_joystick+0xa1c>)
 8002a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <task2_joystick+0xa20>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fecb 	bl	80007ec <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	a30a      	add	r3, pc, #40	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fd98 	bl	8000598 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <task2_joystick+0xa1c>)
 8002a72:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <task2_joystick+0xa20>)
 8002a78:	a303      	add	r3, pc, #12	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002a82:	e165      	b.n	8002d50 <task2_joystick+0xcc0>
 8002a84:	f3af 8000 	nop.w
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40c77000 	.word	0x40c77000
 8002a90:	200007f0 	.word	0x200007f0
 8002a94:	43000000 	.word	0x43000000
 8002a98:	200006d0 	.word	0x200006d0
 8002a9c:	200006d8 	.word	0x200006d8
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	40100000 	.word	0x40100000
 8002aa8:	40d00000 	.word	0x40d00000
 8002aac:	200006c0 	.word	0x200006c0
 8002ab0:	200006c8 	.word	0x200006c8
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <task2_joystick+0xc70>)
 8002ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aba:	a38d      	add	r3, pc, #564	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd ffdc 	bl	8000a7c <__aeabi_dcmplt>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <task2_joystick+0xa50>
 8002aca:	4b8e      	ldr	r3, [pc, #568]	; (8002d04 <task2_joystick+0xc74>)
 8002acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad0:	a387      	add	r3, pc, #540	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd ffd1 	bl	8000a7c <__aeabi_dcmplt>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d054      	beq.n	8002b8a <task2_joystick+0xafa>
			  if(ML < MR){
 8002ae0:	4b87      	ldr	r3, [pc, #540]	; (8002d00 <task2_joystick+0xc70>)
 8002ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae6:	4b87      	ldr	r3, [pc, #540]	; (8002d04 <task2_joystick+0xc74>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd ffc6 	bl	8000a7c <__aeabi_dcmplt>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <task2_joystick+0xab0>
				  MR=-MR/ML*12000;
 8002af6:	4b83      	ldr	r3, [pc, #524]	; (8002d04 <task2_joystick+0xc74>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002afe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <task2_joystick+0xc70>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b0e:	f7fd fe6d 	bl	80007ec <__aeabi_ddiv>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	a377      	add	r3, pc, #476	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fd3a 	bl	8000598 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <task2_joystick+0xc74>)
 8002b2e:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002b32:	4973      	ldr	r1, [pc, #460]	; (8002d00 <task2_joystick+0xc70>)
 8002b34:	a36e      	add	r3, pc, #440	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002b3e:	e107      	b.n	8002d50 <task2_joystick+0xcc0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <task2_joystick+0xc70>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	633a      	str	r2, [r7, #48]	; 0x30
 8002b48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <task2_joystick+0xc74>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b58:	f7fd fe48 	bl	80007ec <__aeabi_ddiv>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	a364      	add	r3, pc, #400	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <task2_joystick+0xc70>)
 8002b78:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002b7c:	4961      	ldr	r1, [pc, #388]	; (8002d04 <task2_joystick+0xc74>)
 8002b7e:	a35c      	add	r3, pc, #368	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002b88:	e0e2      	b.n	8002d50 <task2_joystick+0xcc0>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <task2_joystick+0xc70>)
 8002b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b90:	a359      	add	r3, pc, #356	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd ff8f 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <task2_joystick+0xb26>
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <task2_joystick+0xc74>)
 8002ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba6:	a352      	add	r3, pc, #328	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd ff66 	bl	8000a7c <__aeabi_dcmplt>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d054      	beq.n	8002c60 <task2_joystick+0xbd0>
			  if(ML > -MR){
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <task2_joystick+0xc74>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <task2_joystick+0xc70>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bce:	f7fd ff55 	bl	8000a7c <__aeabi_dcmplt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01e      	beq.n	8002c16 <task2_joystick+0xb86>
				  MR=MR/ML*12000;
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <task2_joystick+0xc74>)
 8002bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <task2_joystick+0xc70>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe02 	bl	80007ec <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	a341      	add	r3, pc, #260	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fccf 	bl	8000598 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <task2_joystick+0xc74>)
 8002c04:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002c08:	493d      	ldr	r1, [pc, #244]	; (8002d00 <task2_joystick+0xc70>)
 8002c0a:	a33b      	add	r3, pc, #236	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002c14:	e09c      	b.n	8002d50 <task2_joystick+0xcc0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <task2_joystick+0xc70>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	623a      	str	r2, [r7, #32]
 8002c1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <task2_joystick+0xc74>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c2e:	f7fd fddd 	bl	80007ec <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	a32f      	add	r3, pc, #188	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd fcaa 	bl	8000598 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <task2_joystick+0xc70>)
 8002c4e:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002c52:	492c      	ldr	r1, [pc, #176]	; (8002d04 <task2_joystick+0xc74>)
 8002c54:	a326      	add	r3, pc, #152	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002c5e:	e077      	b.n	8002d50 <task2_joystick+0xcc0>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <task2_joystick+0xc74>)
 8002c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c66:	a324      	add	r3, pc, #144	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd ff24 	bl	8000ab8 <__aeabi_dcmpgt>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <task2_joystick+0xbfc>
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <task2_joystick+0xc70>)
 8002c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7c:	a31c      	add	r3, pc, #112	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fefb 	bl	8000a7c <__aeabi_dcmplt>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d061      	beq.n	8002d50 <task2_joystick+0xcc0>
			  if(MR > -ML){
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <task2_joystick+0xc70>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	61ba      	str	r2, [r7, #24]
 8002c94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <task2_joystick+0xc74>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ca4:	f7fd feea 	bl	8000a7c <__aeabi_dcmplt>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d02c      	beq.n	8002d08 <task2_joystick+0xc78>
				  ML=ML/MR*12000;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <task2_joystick+0xc70>)
 8002cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <task2_joystick+0xc74>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fd97 	bl	80007ec <__aeabi_ddiv>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	a30c      	add	r3, pc, #48	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc64 	bl	8000598 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <task2_joystick+0xc70>)
 8002cda:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002cde:	4909      	ldr	r1, [pc, #36]	; (8002d04 <task2_joystick+0xc74>)
 8002ce0:	a305      	add	r3, pc, #20	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
 8002cea:	e031      	b.n	8002d50 <task2_joystick+0xcc0>
 8002cec:	f3af 8000 	nop.w
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	c0c77000 	.word	0xc0c77000
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40c77000 	.word	0x40c77000
 8002d00:	200006c0 	.word	0x200006c0
 8002d04:	200006c8 	.word	0x200006c8

			  }
			  else{
				  MR=-MR/ML*12000;
 8002d08:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <task2_joystick+0xdf8>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	613a      	str	r2, [r7, #16]
 8002d10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <task2_joystick+0xdfc>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d20:	f7fd fd64 	bl	80007ec <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	a352      	add	r3, pc, #328	; (adr r3, 8002e78 <task2_joystick+0xde8>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc31 	bl	8000598 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <task2_joystick+0xdf8>)
 8002d40:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002d44:	4951      	ldr	r1, [pc, #324]	; (8002e8c <task2_joystick+0xdfc>)
 8002d46:	a34e      	add	r3, pc, #312	; (adr r3, 8002e80 <task2_joystick+0xdf0>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <task2_joystick+0xdf8>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	60ba      	str	r2, [r7, #8]
 8002d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d62:	f7fd fec9 	bl	8000af8 <__aeabi_d2iz>
 8002d66:	4603      	mov	r3, r0
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4a49      	ldr	r2, [pc, #292]	; (8002e90 <task2_joystick+0xe00>)
 8002d6c:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <task2_joystick+0xdfc>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd febe 	bl	8000af8 <__aeabi_d2iz>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	4a44      	ldr	r2, [pc, #272]	; (8002e94 <task2_joystick+0xe04>)
 8002d82:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <task2_joystick+0xdfc>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	603a      	str	r2, [r7, #0]
 8002d8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d96:	f7fd feaf 	bl	8000af8 <__aeabi_d2iz>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <task2_joystick+0xe08>)
 8002da0:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <task2_joystick+0xdf8>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fea4 	bl	8000af8 <__aeabi_d2iz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	4a39      	ldr	r2, [pc, #228]	; (8002e9c <task2_joystick+0xe0c>)
 8002db6:	8013      	strh	r3, [r2, #0]
		  M1.setpoint=M1.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <task2_joystick+0xe00>)
 8002dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <task2_joystick+0xe10>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0399      	lsls	r1, r3, #14
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <task2_joystick+0xe14>)
 8002dc8:	fb83 2301 	smull	r2, r3, r3, r1
 8002dcc:	121a      	asrs	r2, r3, #8
 8002dce:	17cb      	asrs	r3, r1, #31
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4403      	add	r3, r0
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <task2_joystick+0xe00>)
 8002ddc:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=M2.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <task2_joystick+0xe04>)
 8002de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de4:	b298      	uxth	r0, r3
 8002de6:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <task2_joystick+0xe10>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0399      	lsls	r1, r3, #14
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <task2_joystick+0xe14>)
 8002dee:	fb83 2301 	smull	r2, r3, r3, r1
 8002df2:	121a      	asrs	r2, r3, #8
 8002df4:	17cb      	asrs	r3, r1, #31
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4403      	add	r3, r0
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <task2_joystick+0xe04>)
 8002e02:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=M3.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <task2_joystick+0xe0c>)
 8002e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0a:	b298      	uxth	r0, r3
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <task2_joystick+0xe10>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0399      	lsls	r1, r3, #14
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <task2_joystick+0xe14>)
 8002e14:	fb83 2301 	smull	r2, r3, r3, r1
 8002e18:	121a      	asrs	r2, r3, #8
 8002e1a:	17cb      	asrs	r3, r1, #31
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4403      	add	r3, r0
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <task2_joystick+0xe0c>)
 8002e28:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=M4.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <task2_joystick+0xe08>)
 8002e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e30:	b298      	uxth	r0, r3
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <task2_joystick+0xe10>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	0399      	lsls	r1, r3, #14
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <task2_joystick+0xe14>)
 8002e3a:	fb83 2301 	smull	r2, r3, r3, r1
 8002e3e:	121a      	asrs	r2, r3, #8
 8002e40:	17cb      	asrs	r3, r1, #31
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4403      	add	r3, r0
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <task2_joystick+0xe08>)
 8002e4e:	8013      	strh	r3, [r2, #0]
 8002e50:	e00b      	b.n	8002e6a <task2_joystick+0xdda>
	  }
	  else{
		  M1.setpoint=0;
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <task2_joystick+0xe00>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=0;
 8002e58:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <task2_joystick+0xe04>)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=0;
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <task2_joystick+0xe0c>)
 8002e60:	2300      	movs	r3, #0
 8002e62:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=0;
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <task2_joystick+0xe08>)
 8002e66:	2300      	movs	r3, #0
 8002e68:	8013      	strh	r3, [r2, #0]
	  }
      osDelay(10);
 8002e6a:	200a      	movs	r0, #10
 8002e6c:	f009 fc51 	bl	800c712 <osDelay>
	  spi_enable;
 8002e70:	f7ff b913 	b.w	800209a <task2_joystick+0xa>
 8002e74:	f3af 8000 	nop.w
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	40c77000 	.word	0x40c77000
 8002e80:	00000000 	.word	0x00000000
 8002e84:	c0c77000 	.word	0xc0c77000
 8002e88:	200006c8 	.word	0x200006c8
 8002e8c:	200006c0 	.word	0x200006c0
 8002e90:	200007bc 	.word	0x200007bc
 8002e94:	200007c4 	.word	0x200007c4
 8002e98:	200007d4 	.word	0x200007d4
 8002e9c:	200007cc 	.word	0x200007cc
 8002ea0:	200007f0 	.word	0x200007f0
 8002ea4:	51eb851f 	.word	0x51eb851f

08002ea8 <DC_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DC_motor */
void DC_motor(void const * argument)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DC_motor */
	DC_pid.error = 0;
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <DC_motor+0x10c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2120      	movs	r1, #32
 8002eba:	483f      	ldr	r0, [pc, #252]	; (8002fb8 <DC_motor+0x110>)
 8002ebc:	f005 fcce 	bl	800885c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	483c      	ldr	r0, [pc, #240]	; (8002fb8 <DC_motor+0x110>)
 8002ec6:	f005 fcc9 	bl	800885c <HAL_GPIO_WritePin>
	TIM4->CCR1=920;
 8002eca:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <DC_motor+0x114>)
 8002ecc:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=920;
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <DC_motor+0x114>)
 8002ed4:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
//	TIM8 -> CCR1 = 99;
  /* Infinite loop */
  for(;;)
  {
		if(BLDC==1 || flag==1){
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <DC_motor+0x118>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d003      	beq.n	8002eea <DC_motor+0x42>
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <DC_motor+0x11c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d131      	bne.n	8002f4e <DC_motor+0xa6>
			TIM4->CCR1 = 930;
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <DC_motor+0x114>)
 8002eec:	f240 32a2 	movw	r2, #930	; 0x3a2
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 909;
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <DC_motor+0x114>)
 8002ef4:	f240 328d 	movw	r2, #909	; 0x38d
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
			flag = 1;
 8002efa:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <DC_motor+0x11c>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
			//HAL_Delay(500);
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8002f00:	bf00      	nop
 8002f02:	2108      	movs	r1, #8
 8002f04:	4830      	ldr	r0, [pc, #192]	; (8002fc8 <DC_motor+0x120>)
 8002f06:	f005 fc91 	bl	800882c <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <DC_motor+0x96>
				TIM4->CCR1 = 920;
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <DC_motor+0x114>)
 8002f12:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <DC_motor+0x114>)
 8002f1a:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
//				HAL_Delay(2000);
				flag = 0;
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <DC_motor+0x11c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
				BLDC = 0;
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <DC_motor+0x118>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
				blue = 1;
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <DC_motor+0x124>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 890;
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <DC_motor+0x128>)
 8002f34:	f240 327a 	movw	r2, #890	; 0x37a
 8002f38:	601a      	str	r2, [r3, #0]
				break;
 8002f3a:	bf00      	nop
		if(BLDC==1 || flag==1){
 8002f3c:	e036      	b.n	8002fac <DC_motor+0x104>
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8002f3e:	2110      	movs	r1, #16
 8002f40:	481d      	ldr	r0, [pc, #116]	; (8002fb8 <DC_motor+0x110>)
 8002f42:	f005 fc73 	bl	800882c <HAL_GPIO_ReadPin>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0e1      	beq.n	8002f10 <DC_motor+0x68>
		if(BLDC==1 || flag==1){
 8002f4c:	e02e      	b.n	8002fac <DC_motor+0x104>
//					Motor.target_pos = 890;
//					break;
//				}
			}
		}
		else if(BLDC==2 && flag==0){
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <DC_motor+0x118>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d12a      	bne.n	8002fac <DC_motor+0x104>
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <DC_motor+0x11c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d126      	bne.n	8002fac <DC_motor+0x104>
			TIM4->CCR1 = 915;
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <DC_motor+0x114>)
 8002f60:	f240 3293 	movw	r2, #915	; 0x393
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 925;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <DC_motor+0x114>)
 8002f68:	f240 329d 	movw	r2, #925	; 0x39d
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
			//HAL_Delay(200);
			while((HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)) == 1){
 8002f6e:	bf00      	nop
 8002f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f74:	4817      	ldr	r0, [pc, #92]	; (8002fd4 <DC_motor+0x12c>)
 8002f76:	f005 fc59 	bl	800882c <HAL_GPIO_ReadPin>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d115      	bne.n	8002fac <DC_motor+0x104>
				TIM4->CCR1 = 920;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <DC_motor+0x114>)
 8002f82:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <DC_motor+0x114>)
 8002f8a:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(2000);
 8002f90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f94:	f003 ff22 	bl	8006ddc <HAL_Delay>
				BLDC = 0;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <DC_motor+0x118>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
				yellow=2;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <DC_motor+0x130>)
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 0;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <DC_motor+0x128>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
				break;
 8002faa:	bf00      	nop
			}
		}
    osDelay(50);
 8002fac:	2032      	movs	r0, #50	; 0x32
 8002fae:	f009 fbb0 	bl	800c712 <osDelay>
		if(BLDC==1 || flag==1){
 8002fb2:	e792      	b.n	8002eda <DC_motor+0x32>
 8002fb4:	200007a0 	.word	0x200007a0
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	20000700 	.word	0x20000700
 8002fc4:	200006fc 	.word	0x200006fc
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	200006f4 	.word	0x200006f4
 8002fd0:	200007dc 	.word	0x200007dc
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	200006f8 	.word	0x200006f8

08002fdc <Colorcheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Colorcheck */
void Colorcheck(void const * argument)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Colorcheck */
	Motor.my_pos = TIM5->CNT=0;
 8002fe4:	4b52      	ldr	r3, [pc, #328]	; (8003130 <Colorcheck+0x154>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <Colorcheck+0x158>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
	DC_pid.KP = 0.7;
 8002ff0:	4b51      	ldr	r3, [pc, #324]	; (8003138 <Colorcheck+0x15c>)
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <Colorcheck+0x160>)
 8002ff4:	601a      	str	r2, [r3, #0]
	DC_pid.KI = 0.0005;
 8002ff6:	4b50      	ldr	r3, [pc, #320]	; (8003138 <Colorcheck+0x15c>)
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <Colorcheck+0x164>)
 8002ffa:	605a      	str	r2, [r3, #4]
	DC_pid.KD = 0.00003;
 8002ffc:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <Colorcheck+0x15c>)
 8002ffe:	4a51      	ldr	r2, [pc, #324]	; (8003144 <Colorcheck+0x168>)
 8003000:	609a      	str	r2, [r3, #8]
	Motor.target_pos=0;
 8003002:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <Colorcheck+0x158>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003008:	4b4f      	ldr	r3, [pc, #316]	; (8003148 <Colorcheck+0x16c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d120      	bne.n	8003052 <Colorcheck+0x76>
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <Colorcheck+0x158>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f240 327a 	movw	r2, #890	; 0x37a
 8003018:	4293      	cmp	r3, r2
 800301a:	d11a      	bne.n	8003052 <Colorcheck+0x76>
		 calculatePID();
 800301c:	f7fe fc80 	bl	8001920 <calculatePID>
		 motorspeed();
 8003020:	f7fe fd1c 	bl	8001a5c <motorspeed>
		 Motor.target_pos = 890;
 8003024:	4b43      	ldr	r3, [pc, #268]	; (8003134 <Colorcheck+0x158>)
 8003026:	f240 327a 	movw	r2, #890	; 0x37a
 800302a:	601a      	str	r2, [r3, #0]
		 while(DC_pid.error < 5 ){
 800302c:	bf00      	nop
 800302e:	4b42      	ldr	r3, [pc, #264]	; (8003138 <Colorcheck+0x15c>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b04      	cmp	r3, #4
 8003034:	dc77      	bgt.n	8003126 <Colorcheck+0x14a>
			 MotorStop();
 8003036:	f7fe fc5b 	bl	80018f0 <MotorStop>
			 TIM5->CNT=89000;
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <Colorcheck+0x154>)
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <Colorcheck+0x170>)
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=890;
 8003040:	4b3c      	ldr	r3, [pc, #240]	; (8003134 <Colorcheck+0x158>)
 8003042:	f240 327a 	movw	r2, #890	; 0x37a
 8003046:	605a      	str	r2, [r3, #4]
//			 Motor.target_pos = 0;
//			 yellow=2;
			 blue = 0;
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <Colorcheck+0x16c>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
			 break;
 800304e:	bf00      	nop
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003050:	e069      	b.n	8003126 <Colorcheck+0x14a>
		}
	 }else if(yellow==2 && Motor.target_pos == 0){//target pos = 0
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <Colorcheck+0x174>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d12a      	bne.n	80030b0 <Colorcheck+0xd4>
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <Colorcheck+0x158>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d126      	bne.n	80030b0 <Colorcheck+0xd4>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 8003062:	e00b      	b.n	800307c <Colorcheck+0xa0>
			 MotorStop();
 8003064:	f7fe fc44 	bl	80018f0 <MotorStop>
//			 Motor.target_pos=0;
			 TIM5->CNT=0;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <Colorcheck+0x154>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=0;
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <Colorcheck+0x158>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
			 yellow=0;
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <Colorcheck+0x174>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
			 break;
 800307a:	e011      	b.n	80030a0 <Colorcheck+0xc4>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 800307c:	2104      	movs	r1, #4
 800307e:	4835      	ldr	r0, [pc, #212]	; (8003154 <Colorcheck+0x178>)
 8003080:	f005 fbd4 	bl	800882c <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <Colorcheck+0xbc>
 800308a:	2102      	movs	r1, #2
 800308c:	4831      	ldr	r0, [pc, #196]	; (8003154 <Colorcheck+0x178>)
 800308e:	f005 fbcd 	bl	800882c <HAL_GPIO_ReadPin>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <Colorcheck+0xc4>
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <Colorcheck+0x15c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b63      	cmp	r3, #99	; 0x63
 800309e:	dde1      	ble.n	8003064 <Colorcheck+0x88>
		 }
		 	 Motor.target_pos= 0;
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <Colorcheck+0x158>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
			 calculatePID();
 80030a6:	f7fe fc3b 	bl	8001920 <calculatePID>
			 motorspeed();
 80030aa:	f7fe fcd7 	bl	8001a5c <motorspeed>
 80030ae:	e03b      	b.n	8003128 <Colorcheck+0x14c>
	}else if(yellow==1 && Motor.target_pos == 1800){//target pos = 1800
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <Colorcheck+0x174>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d130      	bne.n	800311a <Colorcheck+0x13e>
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <Colorcheck+0x158>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80030c0:	d12b      	bne.n	800311a <Colorcheck+0x13e>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 80030c2:	e00f      	b.n	80030e4 <Colorcheck+0x108>
			 MotorStop();
 80030c4:	f7fe fc14 	bl	80018f0 <MotorStop>
			 Motor.my_pos = 1800;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <Colorcheck+0x158>)
 80030ca:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80030ce:	605a      	str	r2, [r3, #4]
			 Motor.target_pos = 0;
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <Colorcheck+0x158>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
			 TIM5->CNT = 180000;
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <Colorcheck+0x154>)
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <Colorcheck+0x17c>)
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
			 yellow=0;
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <Colorcheck+0x174>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
			 break;
 80030e2:	e011      	b.n	8003108 <Colorcheck+0x12c>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 80030e4:	2101      	movs	r1, #1
 80030e6:	481b      	ldr	r0, [pc, #108]	; (8003154 <Colorcheck+0x178>)
 80030e8:	f005 fba0 	bl	800882c <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <Colorcheck+0x124>
 80030f2:	2101      	movs	r1, #1
 80030f4:	4819      	ldr	r0, [pc, #100]	; (800315c <Colorcheck+0x180>)
 80030f6:	f005 fb99 	bl	800882c <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <Colorcheck+0x12c>
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <Colorcheck+0x15c>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b63      	cmp	r3, #99	; 0x63
 8003106:	dddd      	ble.n	80030c4 <Colorcheck+0xe8>
		 }
		 	 Motor.target_pos = 1800;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <Colorcheck+0x158>)
 800310a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800310e:	601a      	str	r2, [r3, #0]
			 calculatePID();
 8003110:	f7fe fc06 	bl	8001920 <calculatePID>
			 motorspeed();
 8003114:	f7fe fca2 	bl	8001a5c <motorspeed>
 8003118:	e006      	b.n	8003128 <Colorcheck+0x14c>
	}else{
		 MotorStop();
 800311a:	f7fe fbe9 	bl	80018f0 <MotorStop>
		 yellow = 0;
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <Colorcheck+0x174>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e000      	b.n	8003128 <Colorcheck+0x14c>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003126:	bf00      	nop
	 }
    osDelay(5);
 8003128:	2005      	movs	r0, #5
 800312a:	f009 faf2 	bl	800c712 <osDelay>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 800312e:	e76b      	b.n	8003008 <Colorcheck+0x2c>
 8003130:	40000c00 	.word	0x40000c00
 8003134:	200007dc 	.word	0x200007dc
 8003138:	200007a0 	.word	0x200007a0
 800313c:	3f333333 	.word	0x3f333333
 8003140:	3a03126f 	.word	0x3a03126f
 8003144:	37fba882 	.word	0x37fba882
 8003148:	200006f4 	.word	0x200006f4
 800314c:	00015ba8 	.word	0x00015ba8
 8003150:	200006f8 	.word	0x200006f8
 8003154:	40020800 	.word	0x40020800
 8003158:	0002bf20 	.word	0x0002bf20
 800315c:	40020400 	.word	0x40020400

08003160 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	setup();
 8003168:	f002 fb54 	bl	8005814 <setup>
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 800316c:	2101      	movs	r1, #1
 800316e:	4861      	ldr	r0, [pc, #388]	; (80032f4 <StartTask05+0x194>)
 8003170:	f005 fb5c 	bl	800882c <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d108      	bne.n	800318c <StartTask05+0x2c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000001;
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <StartTask05+0x198>)
 800317c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b21a      	sxth	r2, r3
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <StartTask05+0x198>)
 8003188:	811a      	strh	r2, [r3, #8]
 800318a:	e007      	b.n	800319c <StartTask05+0x3c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111110;
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <StartTask05+0x198>)
 800318e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003192:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003196:	b21a      	sxth	r2, r3
 8003198:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <StartTask05+0x198>)
 800319a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin)==1){
 800319c:	2101      	movs	r1, #1
 800319e:	4857      	ldr	r0, [pc, #348]	; (80032fc <StartTask05+0x19c>)
 80031a0:	f005 fb44 	bl	800882c <HAL_GPIO_ReadPin>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <StartTask05+0x5c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000010;
 80031aa:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <StartTask05+0x198>)
 80031ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <StartTask05+0x198>)
 80031b8:	811a      	strh	r2, [r3, #8]
 80031ba:	e007      	b.n	80031cc <StartTask05+0x6c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111101;
 80031bc:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <StartTask05+0x198>)
 80031be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80031c6:	b21a      	sxth	r2, r3
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <StartTask05+0x198>)
 80031ca:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin)==1){
 80031cc:	2104      	movs	r1, #4
 80031ce:	4849      	ldr	r0, [pc, #292]	; (80032f4 <StartTask05+0x194>)
 80031d0:	f005 fb2c 	bl	800882c <HAL_GPIO_ReadPin>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <StartTask05+0x8c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000100;
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <StartTask05+0x198>)
 80031dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	b21a      	sxth	r2, r3
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <StartTask05+0x198>)
 80031e8:	811a      	strh	r2, [r3, #8]
 80031ea:	e007      	b.n	80031fc <StartTask05+0x9c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111011;
 80031ec:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <StartTask05+0x198>)
 80031ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80031f6:	b21a      	sxth	r2, r3
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <StartTask05+0x198>)
 80031fa:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin)==1){
 80031fc:	2102      	movs	r1, #2
 80031fe:	483d      	ldr	r0, [pc, #244]	; (80032f4 <StartTask05+0x194>)
 8003200:	f005 fb14 	bl	800882c <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <StartTask05+0xbc>
	  		  sensor_buff[4]=sensor_buff[4]|0b00001000;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <StartTask05+0x198>)
 800320c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	b21a      	sxth	r2, r3
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <StartTask05+0x198>)
 8003218:	811a      	strh	r2, [r3, #8]
 800321a:	e007      	b.n	800322c <StartTask05+0xcc>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11110111;
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <StartTask05+0x198>)
 800321e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003222:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8003226:	b21a      	sxth	r2, r3
 8003228:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <StartTask05+0x198>)
 800322a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==1){
 800322c:	2108      	movs	r1, #8
 800322e:	4831      	ldr	r0, [pc, #196]	; (80032f4 <StartTask05+0x194>)
 8003230:	f005 fafc 	bl	800882c <HAL_GPIO_ReadPin>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <StartTask05+0xec>
	  		  sensor_buff[4]=sensor_buff[4]|0b00010000;
 800323a:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <StartTask05+0x198>)
 800323c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <StartTask05+0x198>)
 8003248:	811a      	strh	r2, [r3, #8]
 800324a:	e007      	b.n	800325c <StartTask05+0xfc>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11101111;
 800324c:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <StartTask05+0x198>)
 800324e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003252:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003256:	b21a      	sxth	r2, r3
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <StartTask05+0x198>)
 800325a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==1){
 800325c:	2110      	movs	r1, #16
 800325e:	4828      	ldr	r0, [pc, #160]	; (8003300 <StartTask05+0x1a0>)
 8003260:	f005 fae4 	bl	800882c <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <StartTask05+0x11c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00100000;
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <StartTask05+0x198>)
 800326c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	b21a      	sxth	r2, r3
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <StartTask05+0x198>)
 8003278:	811a      	strh	r2, [r3, #8]
 800327a:	e007      	b.n	800328c <StartTask05+0x12c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11011111;
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <StartTask05+0x198>)
 800327e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003286:	b21a      	sxth	r2, r3
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <StartTask05+0x198>)
 800328a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)==1){
 800328c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003290:	481a      	ldr	r0, [pc, #104]	; (80032fc <StartTask05+0x19c>)
 8003292:	f005 facb 	bl	800882c <HAL_GPIO_ReadPin>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <StartTask05+0x14e>
	  		  sensor_buff[4]=sensor_buff[4]|0b01000000;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <StartTask05+0x198>)
 800329e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <StartTask05+0x198>)
 80032aa:	811a      	strh	r2, [r3, #8]
 80032ac:	e007      	b.n	80032be <StartTask05+0x15e>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b10111111;
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <StartTask05+0x198>)
 80032b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032b4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <StartTask05+0x198>)
 80032bc:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  sensor_buff[0]=M1.en_speed;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <StartTask05+0x1a4>)
 80032c0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <StartTask05+0x198>)
 80032c6:	801a      	strh	r2, [r3, #0]
	  	  sensor_buff[1]=M2.en_speed;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <StartTask05+0x1a8>)
 80032ca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <StartTask05+0x198>)
 80032d0:	805a      	strh	r2, [r3, #2]
	  	  sensor_buff[2]=M3.en_speed;
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <StartTask05+0x1ac>)
 80032d4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <StartTask05+0x198>)
 80032da:	809a      	strh	r2, [r3, #4]
	  	  sensor_buff[3]=M4.en_speed;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <StartTask05+0x1b0>)
 80032de:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <StartTask05+0x198>)
 80032e4:	80da      	strh	r2, [r3, #6]
	  	  loop();
 80032e6:	f002 fab1 	bl	800584c <loop>
    osDelay(10);
 80032ea:	200a      	movs	r0, #10
 80032ec:	f009 fa11 	bl	800c712 <osDelay>
	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 80032f0:	e73c      	b.n	800316c <StartTask05+0xc>
 80032f2:	bf00      	nop
 80032f4:	40020800 	.word	0x40020800
 80032f8:	20000710 	.word	0x20000710
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020000 	.word	0x40020000
 8003304:	200007bc 	.word	0x200007bc
 8003308:	200007c4 	.word	0x200007c4
 800330c:	200007cc 	.word	0x200007cc
 8003310:	200007d4 	.word	0x200007d4

08003314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003326:	f003 fd39 	bl	8006d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000

08003338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003340:	e7fe      	b.n	8003340 <Error_Handler+0x8>

08003342 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <_ZN3ros3MsgC1Ev+0x1c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	0800faf4 	.word	0x0800faf4

08003384 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
      data()
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffe8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffcf 	bl	8003342 <_ZN3ros4TimeC1Ev>
    {
    }
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	0800fadc 	.word	0x0800fadc

080033b4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	b2ca      	uxtb	r2, r1
 80033ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0a19      	lsrs	r1, r3, #8
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	b2ca      	uxtb	r2, r1
 80033e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0c19      	lsrs	r1, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3302      	adds	r3, #2
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0e19      	lsrs	r1, r3, #24
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3303      	adds	r3, #3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	4413      	add	r3, r2
 8003416:	b2ca      	uxtb	r2, r1
 8003418:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a19      	lsrs	r1, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	b2ca      	uxtb	r2, r1
 800342a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0c19      	lsrs	r1, r3, #16
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3302      	adds	r3, #2
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0e19      	lsrs	r1, r3, #24
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3303      	adds	r3, #3
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	4413      	add	r3, r2
 800344c:	b2ca      	uxtb	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
      return offset;
 8003456:	68fb      	ldr	r3, [r7, #12]
    }
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	6839      	ldr	r1, [r7, #0]
 800348a:	440b      	add	r3, r1
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3302      	adds	r3, #2
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	440b      	add	r3, r1
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3303      	adds	r3, #3
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	440b      	add	r3, r1
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	440b      	add	r3, r1
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3302      	adds	r3, #2
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	440b      	add	r3, r1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3303      	adds	r3, #3
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	440b      	add	r3, r1
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
     return offset;
 800351e:	68fb      	ldr	r3, [r7, #12]
    }
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	0800f6ec 	.word	0x0800f6ec

08003548 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	0800f6fc 	.word	0x0800f6fc

08003564 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fef8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003584:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800358a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003590:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
    {
    }
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	0800fac4 	.word	0x0800fac4
 80035a8:	0800f720 	.word	0x0800f720

080035ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8899      	ldrh	r1, [r3, #4]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	b2ca      	uxtb	r2, r1
 80035c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	889b      	ldrh	r3, [r3, #4]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	b299      	uxth	r1, r3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	b2ca      	uxtb	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3302      	adds	r3, #2
 80035e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc fe12 	bl	8000210 <strlen>
 80035ec:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	69b9      	ldr	r1, [r7, #24]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 f942 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3304      	adds	r3, #4
 8003600:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	18d0      	adds	r0, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4619      	mov	r1, r3
 8003610:	f00b feda 	bl	800f3c8 <memcpy>
      offset += length_topic_name;
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc fdf5 	bl	8000210 <strlen>
 8003626:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4413      	add	r3, r2
 800362e:	6979      	ldr	r1, [r7, #20]
 8003630:	4618      	mov	r0, r3
 8003632:	f002 f925 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3304      	adds	r3, #4
 800363a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	18d0      	adds	r0, r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4619      	mov	r1, r3
 800364a:	f00b febd 	bl	800f3c8 <memcpy>
      offset += length_message_type;
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4413      	add	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc fdd8 	bl	8000210 <strlen>
 8003660:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	4413      	add	r3, r2
 8003668:	6939      	ldr	r1, [r7, #16]
 800366a:	4618      	mov	r0, r3
 800366c:	f002 f908 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3304      	adds	r3, #4
 8003674:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	18d0      	adds	r0, r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4619      	mov	r1, r3
 8003684:	f00b fea0 	bl	800f3c8 <memcpy>
      offset += length_md5sum;
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4413      	add	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	b2ca      	uxtb	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	0a19      	lsrs	r1, r3, #8
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	b2ca      	uxtb	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	0c19      	lsrs	r1, r3, #16
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3302      	adds	r3, #2
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	b2ca      	uxtb	r2, r1
 80036c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0e19      	lsrs	r1, r3, #24
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3303      	adds	r3, #3
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	b2ca      	uxtb	r2, r1
 80036d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3304      	adds	r3, #4
 80036d6:	61fb      	str	r3, [r7, #28]
      return offset;
 80036d8:	69fb      	ldr	r3, [r7, #28]
    }
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08a      	sub	sp, #40	; 0x28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	b21a      	sxth	r2, r3
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3301      	adds	r3, #1
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	440b      	add	r3, r1
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	b21b      	sxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	b21b      	sxth	r3, r3
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	3302      	adds	r3, #2
 8003720:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	441a      	add	r2, r3
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f002 f8c5 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	3304      	adds	r3, #4
 8003738:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e00b      	b.n	8003758 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	441a      	add	r2, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	3b01      	subs	r3, #1
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	440b      	add	r3, r1
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	3301      	adds	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	429a      	cmp	r2, r3
 8003762:	d3ed      	bcc.n	8003740 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	3b01      	subs	r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3b01      	subs	r3, #1
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4413      	add	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	441a      	add	r2, r3
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f002 f892 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3304      	adds	r3, #4
 800379e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	e00b      	b.n	80037be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	441a      	add	r2, r3
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	440b      	add	r3, r1
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	3301      	adds	r3, #1
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	6a3a      	ldr	r2, [r7, #32]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3ed      	bcc.n	80037a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	3b01      	subs	r3, #1
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3b01      	subs	r3, #1
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	441a      	add	r2, r3
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f002 f85f 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	3304      	adds	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e00b      	b.n	8003824 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	441a      	add	r2, r3
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b01      	subs	r3, #1
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	440b      	add	r3, r1
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3301      	adds	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3ed      	bcc.n	800380c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	3b01      	subs	r3, #1
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	4413      	add	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	3b01      	subs	r3, #1
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	440a      	add	r2, r1
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	3301      	adds	r3, #1
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	440b      	add	r3, r1
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	4313      	orrs	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3302      	adds	r3, #2
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	440b      	add	r3, r1
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	4313      	orrs	r3, r2
 8003888:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3303      	adds	r3, #3
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	440b      	add	r3, r1
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	4313      	orrs	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3304      	adds	r3, #4
 80038a6:	61bb      	str	r3, [r7, #24]
     return offset;
 80038a8:	69bb      	ldr	r3, [r7, #24]
    }
 80038aa:	4618      	mov	r0, r3
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	0800f724 	.word	0x0800f724

080038d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	0800f740 	.word	0x0800f740

080038ec <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fd34 	bl	8003364 <_ZN3ros3MsgC1Ev>
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
      level(0),
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	711a      	strb	r2, [r3, #4]
      msg("")
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800390c:	609a      	str	r2, [r3, #8]
    {
    }
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	0800faac 	.word	0x0800faac
 800391c:	0800f720 	.word	0x0800f720

08003920 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4413      	add	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	7912      	ldrb	r2, [r2, #4]
 8003938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fc63 	bl	8000210 <strlen>
 800394a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4413      	add	r3, r2
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f001 ff93 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3304      	adds	r3, #4
 800395e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	18d0      	adds	r0, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4619      	mov	r1, r3
 800396e:	f00b fd2b 	bl	800f3c8 <memcpy>
      offset += length_msg;
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
      return offset;
 800397a:	68fb      	ldr	r3, [r7, #12]
    }
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3301      	adds	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	441a      	add	r2, r3
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 ff84 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3304      	adds	r3, #4
 80039ba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e00b      	b.n	80039da <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	441a      	add	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	440b      	add	r3, r1
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3301      	adds	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3ed      	bcc.n	80039c2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	3b01      	subs	r3, #1
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
     return offset;
 8003a0a:	693b      	ldr	r3, [r7, #16]
    }
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	0800f764 	.word	0x0800f764

08003a30 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	0800f778 	.word	0x0800f778

08003a4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fc84 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	0800fa94 	.word	0x0800fa94

08003aa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b2ca      	uxtb	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0a19      	lsrs	r1, r3, #8
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b2ca      	uxtb	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c19      	lsrs	r1, r3, #16
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	3302      	adds	r3, #2
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b2ca      	uxtb	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0e19      	lsrs	r1, r3, #24
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	3303      	adds	r3, #3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	b2ca      	uxtb	r2, r1
 8003af8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	3304      	adds	r3, #4
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	e02a      	b.n	8003b5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003b14:	6939      	ldr	r1, [r7, #16]
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b2ca      	uxtb	r2, r1
 8003b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	0a19      	lsrs	r1, r3, #8
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	b2ca      	uxtb	r2, r1
 8003b2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	0c19      	lsrs	r1, r3, #16
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	3302      	adds	r3, #2
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	b2ca      	uxtb	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	0e19      	lsrs	r1, r3, #24
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	3303      	adds	r3, #3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b2ca      	uxtb	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	3304      	adds	r3, #4
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3cf      	bcc.n	8003b06 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6919      	ldr	r1, [r3, #16]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	b2ca      	uxtb	r2, r1
 8003b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	0a19      	lsrs	r1, r3, #8
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4413      	add	r3, r2
 8003b82:	b2ca      	uxtb	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	0c19      	lsrs	r1, r3, #16
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	3302      	adds	r3, #2
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	b2ca      	uxtb	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	0e19      	lsrs	r1, r3, #24
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3303      	adds	r3, #3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	b2ca      	uxtb	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3304      	adds	r3, #4
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e02a      	b.n	8003c0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2ca      	uxtb	r2, r1
 8003bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0a19      	lsrs	r1, r3, #8
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	b2ca      	uxtb	r2, r1
 8003bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	0c19      	lsrs	r1, r3, #16
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3302      	adds	r3, #2
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	b2ca      	uxtb	r2, r1
 8003bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	0e19      	lsrs	r1, r3, #24
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	3303      	adds	r3, #3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b2ca      	uxtb	r2, r1
 8003bfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3304      	adds	r3, #4
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d3cf      	bcc.n	8003bb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69d9      	ldr	r1, [r3, #28]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	b2ca      	uxtb	r2, r1
 8003c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	0a19      	lsrs	r1, r3, #8
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	b2ca      	uxtb	r2, r1
 8003c34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	0c19      	lsrs	r1, r3, #16
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	3302      	adds	r3, #2
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	b2ca      	uxtb	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	0e19      	lsrs	r1, r3, #24
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3303      	adds	r3, #3
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	b2ca      	uxtb	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e027      	b.n	8003cb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc facc 	bl	8000210 <strlen>
 8003c78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fdfc 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	18d0      	adds	r0, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f00b fb90 	bl	800f3c8 <memcpy>
      offset += length_stringsi;
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d3d2      	bcc.n	8003c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3728      	adds	r7, #40	; 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08e      	sub	sp, #56	; 0x38
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d08:	3303      	adds	r3, #3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d90a      	bls.n	8003d3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f00b fadc 	bl	800f2f0 <realloc>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003d44:	2300      	movs	r3, #0
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
 8003d48:	e035      	b.n	8003db6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	440a      	add	r2, r1
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	3301      	adds	r3, #1
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	440b      	add	r3, r1
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	3302      	adds	r3, #2
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	440b      	add	r3, r1
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	3303      	adds	r3, #3
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	440b      	add	r3, r1
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	3301      	adds	r3, #1
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3c4      	bcc.n	8003d4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	3301      	adds	r3, #1
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	3302      	adds	r3, #2
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	3303      	adds	r3, #3
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	3304      	adds	r3, #4
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d90a      	bls.n	8003e26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f00b fa68 	bl	800f2f0 <realloc>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e30:	e035      	b.n	8003e9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3a:	6839      	ldr	r1, [r7, #0]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e48:	3301      	adds	r3, #1
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	440b      	add	r3, r1
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	440b      	add	r3, r1
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	3303      	adds	r3, #3
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	440b      	add	r3, r1
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	3304      	adds	r3, #4
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	3214      	adds	r2, #20
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d3c4      	bcc.n	8003e32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	3303      	adds	r3, #3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	3304      	adds	r3, #4
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d90a      	bls.n	8003f0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f00b f9f4 	bl	800f2f0 <realloc>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f14:	2300      	movs	r3, #0
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f18:	e03e      	b.n	8003f98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	441a      	add	r2, r3
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 fcc9 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	3304      	adds	r3, #4
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	e00b      	b.n	8003f50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	441a      	add	r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	3b01      	subs	r3, #1
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	440b      	add	r3, r1
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d3ed      	bcc.n	8003f38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	3b01      	subs	r3, #1
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	3220      	adds	r2, #32
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	3301      	adds	r3, #1
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3bb      	bcc.n	8003f1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3738      	adds	r7, #56	; 0x38
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	0800f988 	.word	0x0800f988

08003fc8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	0800f79c 	.word	0x0800f79c

08003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6891      	ldr	r1, [r2, #8]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
  };
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
  }
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	2200      	movs	r2, #0
 800406e:	805a      	strh	r2, [r3, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004076:	2200      	movs	r2, #0
 8004078:	809a      	strh	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	2200      	movs	r2, #0
 8004082:	80da      	strh	r2, [r3, #6]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408a:	461a      	mov	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	689b      	ldr	r3, [r3, #8]
	}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d2:	2200      	movs	r2, #0
 80040d4:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	6898      	ldr	r0, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e8:	4619      	mov	r1, r3
 80040ea:	f007 f997 	bl	800b41c <HAL_UART_Receive_DMA>
	}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZN11SerialClass4readEv>:



	inline int read(void)
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004112:	b29b      	uxth	r3, r3
				& buf_mask;
 8004114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004118:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004120:	885b      	ldrh	r3, [r3, #2]
 8004122:	89fa      	ldrh	r2, [r7, #14]
 8004124:	429a      	cmp	r2, r3
 8004126:	d102      	bne.n	800412e <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800412c:	e01b      	b.n	8004166 <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	885b      	ldrh	r3, [r3, #2]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	b291      	uxth	r1, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004140:	8051      	strh	r1, [r2, #2]
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 800414c:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	885b      	ldrh	r3, [r3, #2]
 8004156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	805a      	strh	r2, [r3, #2]
		return c;
 8004164:	68bb      	ldr	r3, [r7, #8]
	}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	dc35      	bgt.n	80041f2 <_ZN11SerialClass5writeEPKhi+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dd32      	ble.n	80041f2 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 800418c:	bf00      	nop
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f083 0301 	eor.w	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f6      	bne.n	800418e <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e00b      	b.n	80041be <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	4413      	add	r3, r2
 80041ac:	7819      	ldrb	r1, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4413      	add	r3, r2
 80041b4:	460a      	mov	r2, r1
 80041b6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3301      	adds	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	dbef      	blt.n	80041a6 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	b292      	uxth	r2, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f007 f8a6 	bl	800b33c <HAL_UART_Transmit_DMA>
 80041f0:	e000      	b.n	80041f4 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80041f2:	bf00      	nop
		}
	}
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
	}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	6898      	ldr	r0, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004232:	4619      	mov	r1, r3
 8004234:	f007 f8f2 	bl	800b41c <HAL_UART_Receive_DMA>
    }
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681c      	ldr	r4, [r3, #0]
 800424c:	4809      	ldr	r0, [pc, #36]	; (8004274 <HAL_UART_TxCpltCallback+0x34>)
 800424e:	f7ff ff26 	bl	800409e <_ZN11SerialClass10get_handleEv>
 8004252:	4603      	mov	r3, r0
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429c      	cmp	r4, r3
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <HAL_UART_TxCpltCallback+0x34>)
 8004266:	f7ff ffc8 	bl	80041fa <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	bf00      	nop
 8004274:	20000854 	.word	0x20000854

08004278 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8004280:	4803      	ldr	r0, [pc, #12]	; (8004290 <HAL_UART_RxCpltCallback+0x18>)
 8004282:	f7ff ffc9 	bl	8004218 <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000854 	.word	0x20000854

08004294 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
			com(&serial)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <_ZN13STM32HardwareC1Ev+0x1c>)
 80042a0:	601a      	str	r2, [r3, #0]
	{

	}
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000854 	.word	0x20000854

080042b4 <_ZN13STM32Hardware4initEv>:

	void init()
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fefa 	bl	80040ba <_ZN11SerialClass9start_dmaEv>
	}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_ZN13STM32Hardware4readEv>:

	int read()
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff0b 	bl	80040f6 <_ZN11SerialClass4readEv>
 80042e0:	4603      	mov	r3, r0
	}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff37 	bl	8004172 <_ZN11SerialClass5writeEPKhi>
	}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8004314:	f002 fd56 	bl	8006dc4 <HAL_GetTick>
 8004318:	4603      	mov	r3, r0
	}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
      data("")
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f818 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8004334:	4a05      	ldr	r2, [pc, #20]	; (800434c <_ZN8std_msgs6StringC1Ev+0x28>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800433e:	605a      	str	r2, [r3, #4]
    {
    }
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	0800fa50 	.word	0x0800fa50
 8004350:	0800f720 	.word	0x0800f720

08004354 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fb ff52 	bl	8000210 <strlen>
 800436c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4413      	add	r3, r2
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fa82 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	18d0      	adds	r0, r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4619      	mov	r1, r3
 8004390:	f00b f81a 	bl	800f3c8 <memcpy>
      offset += length_data;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
      return offset;
 800439c:	68fb      	ldr	r3, [r7, #12]
    }
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	441a      	add	r2, r3
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f001 fa7c 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3304      	adds	r3, #4
 80043ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e00b      	b.n	80043ea <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	441a      	add	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	440b      	add	r3, r1
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d3ed      	bcc.n	80043d2 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	3b01      	subs	r3, #1
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	4413      	add	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3b01      	subs	r3, #1
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
     return offset;
 800441a:	693b      	ldr	r3, [r7, #16]
    }
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <_ZN8std_msgs6String7getTypeEv+0x18>)
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	0800f7c0 	.word	0x0800f7c0

08004440 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	0800f7d0 	.word	0x0800f7d0

0800445c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ff7c 	bl	8003364 <_ZN3ros3MsgC1Ev>
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
      label(""),
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8004476:	605a      	str	r2, [r3, #4]
      size(0),
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
      stride(0)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	60da      	str	r2, [r3, #12]
    {
    }
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	0800fa38 	.word	0x0800fa38
 8004494:	0800f720 	.word	0x0800f720

08004498 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fb feb0 	bl	8000210 <strlen>
 80044b0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 f9e0 	bl	8005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3304      	adds	r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	18d0      	adds	r0, r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4619      	mov	r1, r3
 80044d4:	f00a ff78 	bl	800f3c8 <memcpy>
      offset += length_label;
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4413      	add	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	b2ca      	uxtb	r2, r1
 80044ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0a19      	lsrs	r1, r3, #8
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	b2ca      	uxtb	r2, r1
 80044fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	0c19      	lsrs	r1, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3302      	adds	r3, #2
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4413      	add	r3, r2
 800450e:	b2ca      	uxtb	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0e19      	lsrs	r1, r3, #24
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3303      	adds	r3, #3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4413      	add	r3, r2
 8004520:	b2ca      	uxtb	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3304      	adds	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	4413      	add	r3, r2
 8004534:	b2ca      	uxtb	r2, r1
 8004536:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0a19      	lsrs	r1, r3, #8
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	4413      	add	r3, r2
 8004546:	b2ca      	uxtb	r2, r1
 8004548:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	0c19      	lsrs	r1, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3302      	adds	r3, #2
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	4413      	add	r3, r2
 8004558:	b2ca      	uxtb	r2, r1
 800455a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	0e19      	lsrs	r1, r3, #24
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3303      	adds	r3, #3
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4413      	add	r3, r2
 800456a:	b2ca      	uxtb	r2, r1
 800456c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3304      	adds	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
      return offset;
 8004574:	68fb      	ldr	r3, [r7, #12]
    }
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	441a      	add	r2, r3
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f990 	bl	80058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3304      	adds	r3, #4
 80045a2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e00b      	b.n	80045c2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	441a      	add	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	440b      	add	r3, r1
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d3ed      	bcc.n	80045aa <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	3b01      	subs	r3, #1
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3301      	adds	r3, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	440b      	add	r3, r1
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3302      	adds	r3, #2
 800461e:	6839      	ldr	r1, [r7, #0]
 8004620:	440b      	add	r3, r1
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3303      	adds	r3, #3
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	440b      	add	r3, r1
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3304      	adds	r3, #4
 8004646:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4413      	add	r3, r2
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	440b      	add	r3, r1
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3302      	adds	r3, #2
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	440b      	add	r3, r1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3303      	adds	r3, #3
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	440b      	add	r3, r1
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3304      	adds	r3, #4
 800469c:	613b      	str	r3, [r7, #16]
     return offset;
 800469e:	693b      	ldr	r3, [r7, #16]
    }
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	0800f7f4 	.word	0x0800f7f4

080046c4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	0800f814 	.word	0x0800f814

080046e0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fe3a 	bl	8003364 <_ZN3ros3MsgC1Ev>
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3308      	adds	r3, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff feab 	bl	800445c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]
      data_offset(0)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
    {
    }
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	0800fa20 	.word	0x0800fa20

08004720 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	4413      	add	r3, r2
 8004738:	b2ca      	uxtb	r2, r1
 800473a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0a19      	lsrs	r1, r3, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	b2ca      	uxtb	r2, r1
 800474c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	0c19      	lsrs	r1, r3, #16
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3302      	adds	r3, #2
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4413      	add	r3, r2
 800475c:	b2ca      	uxtb	r2, r1
 800475e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0e19      	lsrs	r1, r3, #24
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3303      	adds	r3, #3
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4413      	add	r3, r2
 800476e:	b2ca      	uxtb	r2, r1
 8004770:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3304      	adds	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	e017      	b.n	80047ae <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	18d0      	adds	r0, r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	440a      	add	r2, r1
 800479c:	4611      	mov	r1, r2
 800479e:	4798      	blx	r3
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d3e2      	bcc.n	800477e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69d9      	ldr	r1, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4413      	add	r3, r2
 80047c2:	b2ca      	uxtb	r2, r1
 80047c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	0a19      	lsrs	r1, r3, #8
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	b2ca      	uxtb	r2, r1
 80047d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	0c19      	lsrs	r1, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3302      	adds	r3, #2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	b2ca      	uxtb	r2, r1
 80047e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	0e19      	lsrs	r1, r3, #24
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3303      	adds	r3, #3
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	b2ca      	uxtb	r2, r1
 80047fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	60fb      	str	r3, [r7, #12]
      return offset;
 8004802:	68fb      	ldr	r3, [r7, #12]
    }
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3301      	adds	r3, #1
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3302      	adds	r3, #2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4413      	add	r3, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3303      	adds	r3, #3
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	4413      	add	r3, r2
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3304      	adds	r3, #4
 800485e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90a      	bls.n	8004880 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f00a fd3b 	bl	800f2f0 <realloc>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e01a      	b.n	80048c2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f103 0008 	add.w	r0, r3, #8
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	4619      	mov	r1, r3
 800489a:	f7ff fe70 	bl	800457e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800489e:	4602      	mov	r2, r0
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	18d0      	adds	r0, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3308      	adds	r3, #8
 80048b4:	2210      	movs	r2, #16
 80048b6:	4619      	mov	r1, r3
 80048b8:	f00a fd86 	bl	800f3c8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3301      	adds	r3, #1
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3df      	bcc.n	800488c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	3301      	adds	r3, #1
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	440b      	add	r3, r1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3302      	adds	r3, #2
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	440b      	add	r3, r1
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3303      	adds	r3, #3
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	440b      	add	r3, r1
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3304      	adds	r3, #4
 8004920:	617b      	str	r3, [r7, #20]
     return offset;
 8004922:	697b      	ldr	r3, [r7, #20]
    }
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	0800f838 	.word	0x0800f838

08004948 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	0800f854 	.word	0x0800f854

08004964 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fcf8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8004974:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
      layout(),
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff feae 	bl	80046e0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	0800fa08 	.word	0x0800fa08

080049a4 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	1d18      	adds	r0, r3, #4
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	4413      	add	r3, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7ff feaf 	bl	8004720 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	4413      	add	r3, r2
 80049d4:	b2ca      	uxtb	r2, r1
 80049d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	0a19      	lsrs	r1, r3, #8
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3301      	adds	r3, #1
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	b2ca      	uxtb	r2, r1
 80049e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	0c19      	lsrs	r1, r3, #16
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3302      	adds	r3, #2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	b2ca      	uxtb	r2, r1
 80049fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	0e19      	lsrs	r1, r3, #24
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3303      	adds	r3, #3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4413      	add	r3, r2
 8004a0a:	b2ca      	uxtb	r2, r1
 8004a0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3304      	adds	r3, #4
 8004a12:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e01c      	b.n	8004a54 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a28:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8004a2a:	89b9      	ldrh	r1, [r7, #12]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	b2ca      	uxtb	r2, r1
 8004a34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8004a36:	89bb      	ldrh	r3, [r7, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b299      	uxth	r1, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	b2ca      	uxtb	r2, r1
 8004a46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3301      	adds	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3dd      	bcc.n	8004a1a <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 8004a5e:	697b      	ldr	r3, [r7, #20]
    }
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	1d18      	adds	r0, r3, #4
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7ff fec3 	bl	800480c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	3302      	adds	r3, #2
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3303      	adds	r3, #3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d90a      	bls.n	8004af4 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f00a fc01 	bl	800f2f0 <realloc>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e02b      	b.n	8004b58 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xf0>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	440b      	add	r3, r1
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b16:	893b      	ldrh	r3, [r7, #8]
 8004b18:	b21a      	sxth	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	440b      	add	r3, r1
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004b30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	3228      	adds	r2, #40	; 0x28
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3301      	adds	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3ce      	bcc.n	8004b00 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8004b62:	697b      	ldr	r3, [r7, #20]
    }
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	0800f878 	.word	0x0800f878

08004b88 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	0800f894 	.word	0x0800f894

08004ba4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fbd8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8004bb4:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
      x(0),
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	0800f9f0 	.word	0x0800f9f0

08004bf4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004bf4:	b480      	push	{r7}
 8004bf6:	b08b      	sub	sp, #44	; 0x2c
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004c08:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8004c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c12:	6838      	ldr	r0, [r7, #0]
 8004c14:	4401      	add	r1, r0
 8004c16:	b2d3      	uxtb	r3, r2
 8004c18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8004c1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	0a02      	lsrs	r2, r0, #8
 8004c28:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004c2c:	0a0b      	lsrs	r3, r1, #8
 8004c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c30:	3101      	adds	r1, #1
 8004c32:	6838      	ldr	r0, [r7, #0]
 8004c34:	4401      	add	r1, r0
 8004c36:	b2d3      	uxtb	r3, r2
 8004c38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8004c3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	0c02      	lsrs	r2, r0, #16
 8004c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c4c:	0c0b      	lsrs	r3, r1, #16
 8004c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c50:	3102      	adds	r1, #2
 8004c52:	6838      	ldr	r0, [r7, #0]
 8004c54:	4401      	add	r1, r0
 8004c56:	b2d3      	uxtb	r3, r2
 8004c58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8004c5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	0e02      	lsrs	r2, r0, #24
 8004c68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c6c:	0e0b      	lsrs	r3, r1, #24
 8004c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c70:	3103      	adds	r1, #3
 8004c72:	6838      	ldr	r0, [r7, #0]
 8004c74:	4401      	add	r1, r0
 8004c76:	b2d3      	uxtb	r3, r2
 8004c78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8004c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	000a      	movs	r2, r1
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c8c:	3104      	adds	r1, #4
 8004c8e:	6838      	ldr	r0, [r7, #0]
 8004c90:	4401      	add	r1, r0
 8004c92:	b2d3      	uxtb	r3, r2
 8004c94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8004c96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	0a0a      	lsrs	r2, r1, #8
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ca8:	3105      	adds	r1, #5
 8004caa:	6838      	ldr	r0, [r7, #0]
 8004cac:	4401      	add	r1, r0
 8004cae:	b2d3      	uxtb	r3, r2
 8004cb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004cb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	0c0a      	lsrs	r2, r1, #16
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc4:	3106      	adds	r1, #6
 8004cc6:	6838      	ldr	r0, [r7, #0]
 8004cc8:	4401      	add	r1, r0
 8004cca:	b2d3      	uxtb	r3, r2
 8004ccc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004cce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	0e0a      	lsrs	r2, r1, #24
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ce0:	3107      	adds	r1, #7
 8004ce2:	6838      	ldr	r0, [r7, #0]
 8004ce4:	4401      	add	r1, r0
 8004ce6:	b2d3      	uxtb	r3, r2
 8004ce8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	3308      	adds	r3, #8
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004cf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8004cfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	4401      	add	r1, r0
 8004d04:	b2d3      	uxtb	r3, r2
 8004d06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8004d08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	0a02      	lsrs	r2, r0, #8
 8004d16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004d1a:	0a0b      	lsrs	r3, r1, #8
 8004d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1e:	3101      	adds	r1, #1
 8004d20:	6838      	ldr	r0, [r7, #0]
 8004d22:	4401      	add	r1, r0
 8004d24:	b2d3      	uxtb	r3, r2
 8004d26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8004d28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	0c02      	lsrs	r2, r0, #16
 8004d36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004d3a:	0c0b      	lsrs	r3, r1, #16
 8004d3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d3e:	3102      	adds	r1, #2
 8004d40:	6838      	ldr	r0, [r7, #0]
 8004d42:	4401      	add	r1, r0
 8004d44:	b2d3      	uxtb	r3, r2
 8004d46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8004d48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	0e02      	lsrs	r2, r0, #24
 8004d56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d5a:	0e0b      	lsrs	r3, r1, #24
 8004d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d5e:	3103      	adds	r1, #3
 8004d60:	6838      	ldr	r0, [r7, #0]
 8004d62:	4401      	add	r1, r0
 8004d64:	b2d3      	uxtb	r3, r2
 8004d66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8004d68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	000a      	movs	r2, r1
 8004d76:	2300      	movs	r3, #0
 8004d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d7a:	3104      	adds	r1, #4
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	4401      	add	r1, r0
 8004d80:	b2d3      	uxtb	r3, r2
 8004d82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004d84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	0a0a      	lsrs	r2, r1, #8
 8004d92:	2300      	movs	r3, #0
 8004d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d96:	3105      	adds	r1, #5
 8004d98:	6838      	ldr	r0, [r7, #0]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	b2d3      	uxtb	r3, r2
 8004d9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004da0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	0c0a      	lsrs	r2, r1, #16
 8004dae:	2300      	movs	r3, #0
 8004db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db2:	3106      	adds	r1, #6
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	4401      	add	r1, r0
 8004db8:	b2d3      	uxtb	r3, r2
 8004dba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004dbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	0e0a      	lsrs	r2, r1, #24
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dce:	3107      	adds	r1, #7
 8004dd0:	6838      	ldr	r0, [r7, #0]
 8004dd2:	4401      	add	r1, r0
 8004dd4:	b2d3      	uxtb	r3, r2
 8004dd6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	3308      	adds	r3, #8
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004de4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8004de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dee:	6838      	ldr	r0, [r7, #0]
 8004df0:	4401      	add	r1, r0
 8004df2:	b2d3      	uxtb	r3, r2
 8004df4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8004df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	0a02      	lsrs	r2, r0, #8
 8004e04:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e08:	0a0b      	lsrs	r3, r1, #8
 8004e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e0c:	3101      	adds	r1, #1
 8004e0e:	6838      	ldr	r0, [r7, #0]
 8004e10:	4401      	add	r1, r0
 8004e12:	b2d3      	uxtb	r3, r2
 8004e14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8004e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	0c02      	lsrs	r2, r0, #16
 8004e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e28:	0c0b      	lsrs	r3, r1, #16
 8004e2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e2c:	3102      	adds	r1, #2
 8004e2e:	6838      	ldr	r0, [r7, #0]
 8004e30:	4401      	add	r1, r0
 8004e32:	b2d3      	uxtb	r3, r2
 8004e34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8004e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	0e02      	lsrs	r2, r0, #24
 8004e44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004e48:	0e0b      	lsrs	r3, r1, #24
 8004e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e4c:	3103      	adds	r1, #3
 8004e4e:	6838      	ldr	r0, [r7, #0]
 8004e50:	4401      	add	r1, r0
 8004e52:	b2d3      	uxtb	r3, r2
 8004e54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8004e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	000a      	movs	r2, r1
 8004e64:	2300      	movs	r3, #0
 8004e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e68:	3104      	adds	r1, #4
 8004e6a:	6838      	ldr	r0, [r7, #0]
 8004e6c:	4401      	add	r1, r0
 8004e6e:	b2d3      	uxtb	r3, r2
 8004e70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	0a0a      	lsrs	r2, r1, #8
 8004e80:	2300      	movs	r3, #0
 8004e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e84:	3105      	adds	r1, #5
 8004e86:	6838      	ldr	r0, [r7, #0]
 8004e88:	4401      	add	r1, r0
 8004e8a:	b2d3      	uxtb	r3, r2
 8004e8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004e8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	0c0a      	lsrs	r2, r1, #16
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ea0:	3106      	adds	r1, #6
 8004ea2:	6838      	ldr	r0, [r7, #0]
 8004ea4:	4401      	add	r1, r0
 8004ea6:	b2d3      	uxtb	r3, r2
 8004ea8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8004eaa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	0e0a      	lsrs	r2, r1, #24
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ebc:	3107      	adds	r1, #7
 8004ebe:	6838      	ldr	r0, [r7, #0]
 8004ec0:	4401      	add	r1, r0
 8004ec2:	b2d3      	uxtb	r3, r2
 8004ec4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	3308      	adds	r3, #8
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004ece:	4618      	mov	r0, r3
 8004ed0:	372c      	adds	r7, #44	; 0x2c
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004eda:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004ede:	b0eb      	sub	sp, #428	; 0x1ac
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8004ee6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004efc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004f00:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004f04:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f08:	4413      	add	r3, r2
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2200      	movs	r2, #0
 8004f10:	461c      	mov	r4, r3
 8004f12:	4615      	mov	r5, r2
 8004f14:	ea40 0804 	orr.w	r8, r0, r4
 8004f18:	ea41 0905 	orr.w	r9, r1, r5
 8004f1c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f20:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004f24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f2e:	4413      	add	r3, r2
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2200      	movs	r2, #0
 8004f36:	469a      	mov	sl, r3
 8004f38:	4693      	mov	fp, r2
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8004f46:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8004f4a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004f4e:	ea40 0402 	orr.w	r4, r0, r2
 8004f52:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8004f56:	430b      	orrs	r3, r1
 8004f58:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004f5c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004f60:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004f64:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004f68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004f6c:	1c9a      	adds	r2, r3, #2
 8004f6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f72:	4413      	add	r3, r2
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004f7e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8004f8e:	464c      	mov	r4, r9
 8004f90:	0423      	lsls	r3, r4, #16
 8004f92:	4644      	mov	r4, r8
 8004f94:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004f98:	4644      	mov	r4, r8
 8004f9a:	0422      	lsls	r2, r4, #16
 8004f9c:	ea40 0402 	orr.w	r4, r0, r2
 8004fa0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004faa:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004fae:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004fb2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004fb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004fba:	1cda      	adds	r2, r3, #3
 8004fbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004fc0:	4413      	add	r3, r2
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004fcc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004fd0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004fd4:	4623      	mov	r3, r4
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8004fdc:	4623      	mov	r3, r4
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004fe4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8004fe8:	4623      	mov	r3, r4
 8004fea:	4303      	orrs	r3, r0
 8004fec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004ff8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8004ffc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005000:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005004:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800500e:	4413      	add	r3, r2
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2200      	movs	r2, #0
 8005016:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800501a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800502a:	0023      	movs	r3, r4
 800502c:	2200      	movs	r2, #0
 800502e:	ea40 0402 	orr.w	r4, r0, r2
 8005032:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8005036:	430b      	orrs	r3, r1
 8005038:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800503c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8005040:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005044:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005048:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800504c:	1d5a      	adds	r2, r3, #5
 800504e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005052:	4413      	add	r3, r2
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2200      	movs	r2, #0
 800505a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800505e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800506e:	0223      	lsls	r3, r4, #8
 8005070:	2200      	movs	r2, #0
 8005072:	ea40 0402 	orr.w	r4, r0, r2
 8005076:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800507a:	430b      	orrs	r3, r1
 800507c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005080:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8005084:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005088:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800508c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005090:	1d9a      	adds	r2, r3, #6
 8005092:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050a2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80050b2:	0423      	lsls	r3, r4, #16
 80050b4:	2200      	movs	r2, #0
 80050b6:	ea40 0402 	orr.w	r4, r0, r2
 80050ba:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80050be:	430b      	orrs	r3, r1
 80050c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80050c4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80050c8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80050cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80050d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80050d4:	1dda      	adds	r2, r3, #7
 80050d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80050da:	4413      	add	r3, r2
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80050e6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80050f6:	0623      	lsls	r3, r4, #24
 80050f8:	2200      	movs	r2, #0
 80050fa:	ea40 0402 	orr.w	r4, r0, r2
 80050fe:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8005102:	430b      	orrs	r3, r1
 8005104:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005108:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800510c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8005110:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8005114:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005118:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800511c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005120:	3308      	adds	r3, #8
 8005122:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005132:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005136:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800513a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2200      	movs	r2, #0
 8005146:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800514a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800514e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8005152:	4623      	mov	r3, r4
 8005154:	4303      	orrs	r3, r0
 8005156:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800515a:	462b      	mov	r3, r5
 800515c:	430b      	orrs	r3, r1
 800515e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005162:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8005166:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800516a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800516e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005178:	4413      	add	r3, r2
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005184:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8005194:	464c      	mov	r4, r9
 8005196:	0223      	lsls	r3, r4, #8
 8005198:	4644      	mov	r4, r8
 800519a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800519e:	4644      	mov	r4, r8
 80051a0:	0222      	lsls	r2, r4, #8
 80051a2:	ea40 0402 	orr.w	r4, r0, r2
 80051a6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80051aa:	430b      	orrs	r3, r1
 80051ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051b0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80051b4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80051b8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80051bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80051c6:	4413      	add	r3, r2
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80051e2:	464c      	mov	r4, r9
 80051e4:	0423      	lsls	r3, r4, #16
 80051e6:	4644      	mov	r4, r8
 80051e8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80051ec:	4644      	mov	r4, r8
 80051ee:	0422      	lsls	r2, r4, #16
 80051f0:	ea40 0402 	orr.w	r4, r0, r2
 80051f4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80051f8:	430b      	orrs	r3, r1
 80051fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051fe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8005202:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005206:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800520a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800520e:	1cda      	adds	r2, r3, #3
 8005210:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005214:	4413      	add	r3, r2
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2200      	movs	r2, #0
 800521c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005220:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005224:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8005228:	4623      	mov	r3, r4
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005230:	4623      	mov	r3, r4
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005238:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800523c:	4623      	mov	r3, r4
 800523e:	4303      	orrs	r3, r0
 8005240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005244:	462b      	mov	r3, r5
 8005246:	430b      	orrs	r3, r1
 8005248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800524c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8005250:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005254:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005258:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800525c:	1d1a      	adds	r2, r3, #4
 800525e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005262:	4413      	add	r3, r2
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2200      	movs	r2, #0
 800526a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800526e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800527e:	0023      	movs	r3, r4
 8005280:	2200      	movs	r2, #0
 8005282:	ea40 0402 	orr.w	r4, r0, r2
 8005286:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800528a:	430b      	orrs	r3, r1
 800528c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005290:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8005294:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005298:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800529c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80052a0:	1d5a      	adds	r2, r3, #5
 80052a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80052a6:	4413      	add	r3, r2
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052b2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80052c2:	0223      	lsls	r3, r4, #8
 80052c4:	2200      	movs	r2, #0
 80052c6:	ea40 0402 	orr.w	r4, r0, r2
 80052ca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80052ce:	430b      	orrs	r3, r1
 80052d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052d4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80052d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80052dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80052e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80052e4:	1d9a      	adds	r2, r3, #6
 80052e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80052ea:	4413      	add	r3, r2
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005306:	0423      	lsls	r3, r4, #16
 8005308:	2200      	movs	r2, #0
 800530a:	ea40 0402 	orr.w	r4, r0, r2
 800530e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005312:	430b      	orrs	r3, r1
 8005314:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005318:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800531c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005320:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005324:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005328:	1dda      	adds	r2, r3, #7
 800532a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800532e:	4413      	add	r3, r2
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800533a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800534a:	0623      	lsls	r3, r4, #24
 800534c:	2200      	movs	r2, #0
 800534e:	ea40 0402 	orr.w	r4, r0, r2
 8005352:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8005356:	430b      	orrs	r3, r1
 8005358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800535c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8005360:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8005364:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005368:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800536c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8005370:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005374:	3308      	adds	r3, #8
 8005376:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005386:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800538a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800538e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005392:	4413      	add	r3, r2
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800539e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80053a2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80053a6:	4623      	mov	r3, r4
 80053a8:	4303      	orrs	r3, r0
 80053aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ac:	462b      	mov	r3, r5
 80053ae:	430b      	orrs	r3, r1
 80053b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053b2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80053b6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80053ba:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80053be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80053c8:	4413      	add	r3, r2
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	673b      	str	r3, [r7, #112]	; 0x70
 80053d2:	677a      	str	r2, [r7, #116]	; 0x74
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053e0:	464c      	mov	r4, r9
 80053e2:	0223      	lsls	r3, r4, #8
 80053e4:	4644      	mov	r4, r8
 80053e6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053ea:	4644      	mov	r4, r8
 80053ec:	0222      	lsls	r2, r4, #8
 80053ee:	ea40 0402 	orr.w	r4, r0, r2
 80053f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80053f4:	430b      	orrs	r3, r1
 80053f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053f8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80053fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8005400:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005404:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800540e:	4413      	add	r3, r2
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2200      	movs	r2, #0
 8005416:	663b      	str	r3, [r7, #96]	; 0x60
 8005418:	667a      	str	r2, [r7, #100]	; 0x64
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005426:	464c      	mov	r4, r9
 8005428:	0423      	lsls	r3, r4, #16
 800542a:	4644      	mov	r4, r8
 800542c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8005430:	4644      	mov	r4, r8
 8005432:	0422      	lsls	r2, r4, #16
 8005434:	ea40 0402 	orr.w	r4, r0, r2
 8005438:	65bc      	str	r4, [r7, #88]	; 0x58
 800543a:	430b      	orrs	r3, r1
 800543c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800543e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8005442:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005446:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800544a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800544e:	1cda      	adds	r2, r3, #3
 8005450:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005454:	4413      	add	r3, r2
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2200      	movs	r2, #0
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
 800545e:	657a      	str	r2, [r7, #84]	; 0x54
 8005460:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8005464:	4623      	mov	r3, r4
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	64fb      	str	r3, [r7, #76]	; 0x4c
 800546a:	4623      	mov	r3, r4
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005470:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005474:	4623      	mov	r3, r4
 8005476:	4303      	orrs	r3, r0
 8005478:	643b      	str	r3, [r7, #64]	; 0x40
 800547a:	462b      	mov	r3, r5
 800547c:	430b      	orrs	r3, r1
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
 8005480:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8005484:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005488:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800548c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005490:	1d1a      	adds	r2, r3, #4
 8005492:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005496:	4413      	add	r3, r2
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2200      	movs	r2, #0
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80054ac:	0023      	movs	r3, r4
 80054ae:	2200      	movs	r2, #0
 80054b0:	ea40 0402 	orr.w	r4, r0, r2
 80054b4:	633c      	str	r4, [r7, #48]	; 0x30
 80054b6:	430b      	orrs	r3, r1
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80054be:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80054c2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80054c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80054ca:	1d5a      	adds	r2, r3, #5
 80054cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80054d0:	4413      	add	r3, r2
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2200      	movs	r2, #0
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80054e6:	0223      	lsls	r3, r4, #8
 80054e8:	2200      	movs	r2, #0
 80054ea:	ea40 0402 	orr.w	r4, r0, r2
 80054ee:	623c      	str	r4, [r7, #32]
 80054f0:	430b      	orrs	r3, r1
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80054f8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80054fc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8005500:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005504:	3306      	adds	r3, #6
 8005506:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800550a:	4413      	add	r3, r2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2200      	movs	r2, #0
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	61fa      	str	r2, [r7, #28]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	69bc      	ldr	r4, [r7, #24]
 8005520:	0423      	lsls	r3, r4, #16
 8005522:	2200      	movs	r2, #0
 8005524:	ea40 0402 	orr.w	r4, r0, r2
 8005528:	613c      	str	r4, [r7, #16]
 800552a:	430b      	orrs	r3, r1
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005532:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8005536:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800553a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800553e:	3307      	adds	r3, #7
 8005540:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2200      	movs	r2, #0
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	60fa      	str	r2, [r7, #12]
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	68bc      	ldr	r4, [r7, #8]
 800555a:	0623      	lsls	r3, r4, #24
 800555c:	2200      	movs	r2, #0
 800555e:	ea40 0402 	orr.w	r4, r0, r2
 8005562:	603c      	str	r4, [r7, #0]
 8005564:	430b      	orrs	r3, r1
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	e9d7 3400 	ldrd	r3, r4, [r7]
 800556c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8005570:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8005574:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8005578:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 800557c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005580:	3308      	adds	r3, #8
 8005582:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8005586:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800558a:	4618      	mov	r0, r3
 800558c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005596:	4770      	bx	lr

08005598 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	0800f8b8 	.word	0x0800f8b8

080055b4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	0800f8d0 	.word	0x0800f8d0

080055d0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fd fec2 	bl	8003364 <_ZN3ros3MsgC1Ev>
 80055e0:	4a08      	ldr	r2, [pc, #32]	; (8005604 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	601a      	str	r2, [r3, #0]
      linear(),
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3308      	adds	r3, #8
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fada 	bl	8004ba4 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3328      	adds	r3, #40	; 0x28
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fad5 	bl	8004ba4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4618      	mov	r0, r3
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	0800f9d8 	.word	0x0800f9d8

08005608 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f103 0008 	add.w	r0, r3, #8
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4413      	add	r3, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f7ff fae6 	bl	8004bf4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	4413      	add	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	4413      	add	r3, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f7ff fad9 	bl	8004bf4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8005642:	4602      	mov	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
      return offset;
 800564a:	68fb      	ldr	r3, [r7, #12]
    }
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f103 0008 	add.w	r0, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	4413      	add	r3, r2
 800566e:	4619      	mov	r1, r3
 8005670:	f7ff fc33 	bl	8004eda <_ZN13geometry_msgs7Vector311deserializeEPh>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	4413      	add	r3, r2
 8005688:	4619      	mov	r1, r3
 800568a:	f7ff fc26 	bl	8004eda <_ZN13geometry_msgs7Vector311deserializeEPh>
 800568e:	4602      	mov	r2, r0
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
     return offset;
 8005696:	68fb      	ldr	r3, [r7, #12]
    }
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	0800f8f4 	.word	0x0800f8f4

080056bc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	4b03      	ldr	r3, [pc, #12]	; (80056d4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	0800f908 	.word	0x0800f908

080056d8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	0800fa80 	.word	0x0800fa80

080056f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff ffe8 	bl	80056d8 <_ZN3ros15NodeHandleBase_C1Ev>
 8005708:	4a33      	ldr	r2, [pc, #204]	; (80057d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3304      	adds	r3, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fdbe 	bl	8004294 <_ZN13STM32HardwareC1Ev>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	60da      	str	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	615a      	str	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3318      	adds	r3, #24
 8005734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f009 fe0f 	bl	800f35e <memset>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8005746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f009 fe06 	bl	800f35e <memset>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8005758:	2264      	movs	r2, #100	; 0x64
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f009 fdfe 	bl	800f35e <memset>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8005768:	2264      	movs	r2, #100	; 0x64
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f009 fdf6 	bl	800f35e <memset>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe f93f 	bl	8003a4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	0800f9c4 	.word	0x0800f9c4

080057dc <_Z9call_backRKN13geometry_msgs5TwistE>:
char hello[] = "Hello world from STM32!";
extern int16_t sensor_buff[5];
int right_joy;
double left_joy;
//extern int16_t sensor_buff[5];
void call_back(const geometry_msgs::Twist& cmd_vel){
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	right_joy = cmd_vel.angular.z;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	f7fb f983 	bl	8000af8 <__aeabi_d2iz>
 80057f2:	4603      	mov	r3, r0
 80057f4:	4a05      	ldr	r2, [pc, #20]	; (800580c <_Z9call_backRKN13geometry_msgs5TwistE+0x30>)
 80057f6:	6013      	str	r3, [r2, #0]
	left_joy = cmd_vel.linear.x;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80057fe:	4904      	ldr	r1, [pc, #16]	; (8005810 <_Z9call_backRKN13geometry_msgs5TwistE+0x34>)
 8005800:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20001dc8 	.word	0x20001dc8
 8005810:	20001dd0 	.word	0x20001dd0

08005814 <setup>:

ros::Publisher chatter("chatter", &str_msg);
ros::Publisher sensor("sensor", &Sensor_data);
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);

void setup(void){
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	nh.initNode();
 8005818:	4808      	ldr	r0, [pc, #32]	; (800583c <setup+0x28>)
 800581a:	f000 f8ab 	bl	8005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 800581e:	4908      	ldr	r1, [pc, #32]	; (8005840 <setup+0x2c>)
 8005820:	4806      	ldr	r0, [pc, #24]	; (800583c <setup+0x28>)
 8005822:	f000 f8c4 	bl	80059ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensor);
 8005826:	4907      	ldr	r1, [pc, #28]	; (8005844 <setup+0x30>)
 8005828:	4804      	ldr	r0, [pc, #16]	; (800583c <setup+0x28>)
 800582a:	f000 f8c0 	bl	80059ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(joy);
 800582e:	4906      	ldr	r1, [pc, #24]	; (8005848 <setup+0x34>)
 8005830:	4802      	ldr	r0, [pc, #8]	; (800583c <setup+0x28>)
 8005832:	f000 f8ea 	bl	8005a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20001860 	.word	0x20001860
 8005840:	20001dd8 	.word	0x20001dd8
 8005844:	20001dec 	.word	0x20001dec
 8005848:	20001e00 	.word	0x20001e00

0800584c <loop>:

void loop(void){
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0

//	str_msg.data = hello;
//	chatter.publish(&str_msg);
//	nh.spinOnce();
//	HAL_Delay(1);
	    Sensor_data.data_length =5;
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <loop+0x24>)
 8005852:	2205      	movs	r2, #5
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
		Sensor_data.data= sensor_buff;
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <loop+0x24>)
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <loop+0x28>)
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
		sensor.publish(&Sensor_data);
 800585c:	4904      	ldr	r1, [pc, #16]	; (8005870 <loop+0x24>)
 800585e:	4806      	ldr	r0, [pc, #24]	; (8005878 <loop+0x2c>)
 8005860:	f7fe fbd7 	bl	8004012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8005864:	4805      	ldr	r0, [pc, #20]	; (800587c <loop+0x30>)
 8005866:	f000 f8fd 	bl	8005a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20001d98 	.word	0x20001d98
 8005874:	20000710 	.word	0x20000710
 8005878:	20001dec 	.word	0x20001dec
 800587c:	20001860 	.word	0x20001860

08005880 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	e00c      	b.n	80058aa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	fa22 f103 	lsr.w	r1, r2, r3
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	b2ca      	uxtb	r2, r1
 80058a2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d9ef      	bls.n	8005890 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e010      	b.n	80058f6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	440a      	add	r2, r1
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	4611      	mov	r1, r2
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	00d2      	lsls	r2, r2, #3
 80058e6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d9eb      	bls.n	80058d4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	4a04      	ldr	r2, [pc, #16]	; (8005928 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	0800fa68 	.word	0x0800fa68

0800592c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ffe5 	bl	800590c <_ZN3ros11Subscriber_C1Ev>
 8005942:	4a0b      	ldr	r2, [pc, #44]	; (8005970 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3310      	adds	r3, #16
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fe3f 	bl	80055d0 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]
  };
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	0800f9ac 	.word	0x0800f9ac

08005974 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3304      	adds	r3, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fc97 	bl	80042b4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e01b      	b.n	80059f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80059c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d110      	bne.n	80059f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	60da      	str	r2, [r3, #12]
        return true;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e006      	b.n	80059fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b18      	cmp	r3, #24
 80059fa:	dde0      	ble.n	80059be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80059fc:	2300      	movs	r3, #0
  }
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e01a      	b.n	8005a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10e      	bne.n	8005a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	605a      	str	r2, [r3, #4]
        return true;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e006      	b.n	8005a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b18      	cmp	r3, #24
 8005a54:	dde1      	ble.n	8005a1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8005a56:	2300      	movs	r3, #0
  }
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3304      	adds	r3, #4
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe fc4b 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8005a76:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d903      	bls.n	8005a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d903      	bls.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d013      	beq.n	8005ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fc25 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bf8c      	ite	hi
 8005ad0:	2301      	movhi	r3, #1
 8005ad2:	2300      	movls	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8005ada:	f06f 0301 	mvn.w	r3, #1
 8005ade:	e190      	b.n	8005e02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fbf2 	bl	80042ce <_ZN13STM32Hardware4readEv>
 8005aea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f2c0 8170 	blt.w	8005dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b0a:	2b07      	cmp	r3, #7
 8005b0c:	d11d      	bne.n	8005b4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	b2d1      	uxtb	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	4413      	add	r3, r2
 8005b24:	460a      	mov	r2, r1
 8005b26:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005b2e:	1e5a      	subs	r2, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1b7      	bne.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2208      	movs	r2, #8
 8005b44:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005b48:	e7b2      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d128      	bne.n	8005ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2bff      	cmp	r3, #255	; 0xff
 8005b58:	d10d      	bne.n	8005b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f103 0214 	add.w	r2, r3, #20
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8005b74:	e79c      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fbc6 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	bf8c      	ite	hi
 8005b8e:	2301      	movhi	r3, #1
 8005b90:	2300      	movls	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d08b      	beq.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8005ba0:	f06f 0301 	mvn.w	r3, #1
 8005ba4:	e12d      	b.n	8005e02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d118      	bne.n	8005be2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2bfe      	cmp	r3, #254	; 0xfe
 8005bb4:	d107      	bne.n	8005bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005bc4:	e774      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f af6b 	bne.w	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f915 	bl	8005e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005be0:	e766      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d113      	bne.n	8005c14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005c12:	e74d      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d110      	bne.n	8005c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005c3e:	e737      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d116      	bne.n	8005c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8005c50:	425a      	negs	r2, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	bf58      	it	pl
 8005c58:	4253      	negpl	r3, r2
 8005c5a:	2bff      	cmp	r3, #255	; 0xff
 8005c5c:	d107      	bne.n	8005c6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005c6c:	e720      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005c76:	e71b      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c7e:	2b05      	cmp	r3, #5
 8005c80:	d10f      	bne.n	8005ca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005ca0:	e706      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005ca8:	2b06      	cmp	r3, #6
 8005caa:	d117      	bne.n	8005cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	441a      	add	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2207      	movs	r2, #7
 8005cc2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f47f aeef 	bne.w	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005cda:	e6e9      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	f47f aee4 	bne.w	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8005cf6:	425a      	negs	r2, r3
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	bf58      	it	pl
 8005cfe:	4253      	negpl	r3, r2
 8005d00:	2bff      	cmp	r3, #255	; 0xff
 8005d02:	f47f aed5 	bne.w	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d110      	bne.n	8005d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f87a 	bl	8005e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f894 	bl	8005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d30:	e067      	b.n	8005e02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d38:	2b0a      	cmp	r3, #10
 8005d3a:	d106      	bne.n	8005d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3318      	adds	r3, #24
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f95e 	bl	8006004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8005d48:	e6b2      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d10d      	bne.n	8005d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f7fd ffb2 	bl	8003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8005d6e:	e69f      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d76:	2b0b      	cmp	r3, #11
 8005d78:	d104      	bne.n	8005d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8005d82:	e695      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005d8a:	3b64      	subs	r3, #100	; 0x64
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f43f ae89 	beq.w	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005da4:	3b64      	subs	r3, #100	; 0x64
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	6858      	ldr	r0, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005db8:	3b64      	subs	r3, #100	; 0x64
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	3218      	adds	r2, #24
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4798      	blx	r3
    while (true)
 8005dd2:	e66d      	b.n	8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005dd4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00f      	beq.n	8005e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d906      	bls.n	8005e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f809 	bl	8005e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8005e00:	2300      	movs	r3, #0
  }
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd fab4 	bl	8003384 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f107 020c 	add.w	r2, r7, #12
 8005e26:	210a      	movs	r1, #10
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
    rt_time = hardware_.time();
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe fa6b 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8005e36:	4602      	mov	r2, r0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
  }
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8005e44:	b590      	push	{r4, r7, lr}
 8005e46:	b08b      	sub	sp, #44	; 0x2c
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005e4c:	f107 030c 	add.w	r3, r7, #12
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fd fb87 	bl	8003564 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	e05a      	b.n	8005f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e60:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d04f      	beq.n	8005f0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e70:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e82:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e92:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	4798      	blx	r3
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebc:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec4:	6859      	ldr	r1, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4608      	mov	r0, r1
 8005edc:	4798      	blx	r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681c      	ldr	r4, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe f89d 	bl	800403a <_ZN3ros9Publisher15getEndpointTypeEv>
 8005f00:	4601      	mov	r1, r0
 8005f02:	f107 030c 	add.w	r3, r7, #12
 8005f06:	461a      	mov	r2, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	3301      	adds	r3, #1
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b18      	cmp	r3, #24
 8005f16:	dda1      	ble.n	8005e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1c:	e067      	b.n	8005fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d05b      	beq.n	8005fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3308      	adds	r3, #8
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4798      	blx	r3
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	4798      	blx	r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fae:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681c      	ldr	r4, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4608      	mov	r0, r1
 8005fda:	4798      	blx	r3
 8005fdc:	4601      	mov	r1, r0
 8005fde:	f107 030c 	add.w	r3, r7, #12
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	3301      	adds	r3, #1
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2b18      	cmp	r3, #24
 8005ff2:	dd94      	ble.n	8005f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8005ffc:	bf00      	nop
 8005ffe:	372c      	adds	r7, #44	; 0x2c
 8006000:	46bd      	mov	sp, r7
 8006002:	bd90      	pop	{r4, r7, pc}

08006004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd f9b6 	bl	8003384 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe f975 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8006022:	4602      	mov	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800602c:	f107 0308 	add.w	r3, r7, #8
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fd fa16 	bl	8003464 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	4914      	ldr	r1, [pc, #80]	; (8006090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800603e:	fba1 1303 	umull	r1, r3, r1, r3
 8006042:	099b      	lsrs	r3, r3, #6
 8006044:	4413      	add	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	4b10      	ldr	r3, [pc, #64]	; (8006090 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800604e:	fba3 0302 	umull	r0, r3, r3, r2
 8006052:	099b      	lsrs	r3, r3, #6
 8006054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006058:	fb00 f303 	mul.w	r3, r0, r3
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	4a0d      	ldr	r2, [pc, #52]	; (8006094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8006060:	fb02 f303 	mul.w	r3, r2, r3
 8006064:	440b      	add	r3, r1
 8006066:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006068:	f107 0308 	add.w	r3, r7, #8
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8a5 	bl	80061c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3304      	adds	r3, #4
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe f946 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	10624dd3 	.word	0x10624dd3
 8006094:	000f4240 	.word	0x000f4240

08006098 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b63      	cmp	r3, #99	; 0x63
 80060a8:	dd09      	ble.n	80060be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80060b0:	f083 0301 	eor.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e079      	b.n	80061b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80060ca:	3207      	adds	r2, #7
 80060cc:	4611      	mov	r1, r2
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	22fe      	movs	r2, #254	; 0xfe
 80060e0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800610a:	4413      	add	r3, r2
 800610c:	b2db      	uxtb	r3, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	b21b      	sxth	r3, r3
 8006126:	121b      	asrs	r3, r3, #8
 8006128:	b21b      	sxth	r3, r3
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006136:	2305      	movs	r3, #5
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e00c      	b.n	8006156 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	4413      	add	r3, r2
 8006142:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	3301      	adds	r3, #1
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	3306      	adds	r3, #6
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	429a      	cmp	r2, r3
 800615e:	dded      	ble.n	800613c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	3307      	adds	r3, #7
 8006164:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	425a      	negs	r2, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	bf58      	it	pl
 8006170:	4253      	negpl	r3, r2
 8006172:	b2da      	uxtb	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	1c59      	adds	r1, r3, #1
 8006178:	6179      	str	r1, [r7, #20]
 800617a:	43d2      	mvns	r2, r2
 800617c:	b2d1      	uxtb	r1, r2
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	460a      	mov	r2, r1
 8006184:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618e:	dc0a      	bgt.n	80061a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	1d18      	adds	r0, r3, #4
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4619      	mov	r1, r3
 800619e:	f7fe f8a4 	bl	80042ea <_ZN13STM32Hardware5writeEPhi>
      return l;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	e005      	b.n	80061b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80061a6:	4905      	ldr	r1, [pc, #20]	; (80061bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f847 	bl	800623c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	0800f92c 	.word	0x0800f92c

080061c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe f89c 	bl	800430c <_ZN13STM32Hardware4timeEv>
 80061d4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4914      	ldr	r1, [pc, #80]	; (8006230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80061de:	fba1 1303 	umull	r1, r3, r1, r3
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6859      	ldr	r1, [r3, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80061f4:	fba3 0302 	umull	r0, r3, r3, r2
 80061f8:	099b      	lsrs	r3, r3, #6
 80061fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061fe:	fb00 f303 	mul.w	r3, r0, r3
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	4a0b      	ldr	r2, [pc, #44]	; (8006234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8006206:	fb02 f303 	mul.w	r3, r2, r3
 800620a:	1aca      	subs	r2, r1, r3
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800620e:	4413      	add	r3, r2
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f103 020c 	add.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3310      	adds	r3, #16
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 fd43 	bl	8006cac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	10624dd3 	.word	0x10624dd3
 8006234:	000f4240 	.word	0x000f4240
 8006238:	3b9aca00 	.word	0x3b9aca00

0800623c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	2103      	movs	r1, #3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f804 	bl	8006258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	460b      	mov	r3, r1
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8006266:	f107 0314 	add.w	r3, r7, #20
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd fb3e 	bl	80038ec <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006270:	7afb      	ldrb	r3, [r7, #11]
 8006272:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f107 0214 	add.w	r2, r7, #20
 8006282:	2107      	movs	r1, #7
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	4798      	blx	r3
  }
 8006288:	bf00      	nop
 800628a:	3720      	adds	r7, #32
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <_Z41__static_initialization_and_destruction_0ii>:
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d123      	bne.n	80062e8 <_Z41__static_initialization_and_destruction_0ii+0x58>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d11e      	bne.n	80062e8 <_Z41__static_initialization_and_destruction_0ii+0x58>
SerialClass serial(huart2);
 80062aa:	4911      	ldr	r1, [pc, #68]	; (80062f0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80062ac:	4811      	ldr	r0, [pc, #68]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80062ae:	f7fd fed0 	bl	8004052 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 80062b2:	4811      	ldr	r0, [pc, #68]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80062b4:	f7ff fa20 	bl	80056f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80062b8:	4810      	ldr	r0, [pc, #64]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80062ba:	f7fe f833 	bl	8004324 <_ZN8std_msgs6StringC1Ev>
std_msgs::Int16MultiArray Sensor_data;
 80062be:	4810      	ldr	r0, [pc, #64]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80062c0:	f7fe fb50 	bl	8004964 <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80062c4:	2300      	movs	r3, #0
 80062c6:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80062c8:	490e      	ldr	r1, [pc, #56]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80062ca:	480f      	ldr	r0, [pc, #60]	; (8006308 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80062cc:	f7fd fe8a 	bl	8003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensor("sensor", &Sensor_data);
 80062d0:	2300      	movs	r3, #0
 80062d2:	4a0b      	ldr	r2, [pc, #44]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80062d4:	490d      	ldr	r1, [pc, #52]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80062d6:	480e      	ldr	r0, [pc, #56]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80062d8:	f7fd fe84 	bl	8003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber <geometry_msgs::Twist> joy("cmd_vel", &call_back);
 80062dc:	2301      	movs	r3, #1
 80062de:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80062e0:	490d      	ldr	r1, [pc, #52]	; (8006318 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80062e2:	480e      	ldr	r0, [pc, #56]	; (800631c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80062e4:	f7ff fb22 	bl	800592c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	200004e0 	.word	0x200004e0
 80062f4:	20000854 	.word	0x20000854
 80062f8:	20001860 	.word	0x20001860
 80062fc:	20001d90 	.word	0x20001d90
 8006300:	20001d98 	.word	0x20001d98
 8006304:	0800f968 	.word	0x0800f968
 8006308:	20001dd8 	.word	0x20001dd8
 800630c:	0800f970 	.word	0x0800f970
 8006310:	20001dec 	.word	0x20001dec
 8006314:	080057dd 	.word	0x080057dd
 8006318:	0800f978 	.word	0x0800f978
 800631c:	20001e00 	.word	0x20001e00

08006320 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3310      	adds	r3, #16
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff f98f 	bl	8005654 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	3210      	adds	r2, #16
 800633e:	4610      	mov	r0, r2
 8006340:	4798      	blx	r3
  }
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3310      	adds	r3, #16
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff f996 	bl	80056a0 <_ZN13geometry_msgs5Twist7getTypeEv>
 8006374:	4603      	mov	r3, r0
  }
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3310      	adds	r3, #16
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff f996 	bl	80056bc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8006390:	4603      	mov	r3, r0
  }
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
    return configured_;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <_GLOBAL__sub_I_serial>:
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80063bc:	2001      	movs	r0, #1
 80063be:	f7ff ff67 	bl	8006290 <_Z41__static_initialization_and_destruction_0ii>
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_MspInit+0x54>)
 80063d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <HAL_MspInit+0x54>)
 80063d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d8:	6453      	str	r3, [r2, #68]	; 0x44
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <HAL_MspInit+0x54>)
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_MspInit+0x54>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	4a0a      	ldr	r2, [pc, #40]	; (8006418 <HAL_MspInit+0x54>)
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063f4:	6413      	str	r3, [r2, #64]	; 0x40
 80063f6:	4b08      	ldr	r3, [pc, #32]	; (8006418 <HAL_MspInit+0x54>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006402:	2200      	movs	r2, #0
 8006404:	210f      	movs	r1, #15
 8006406:	f06f 0001 	mvn.w	r0, #1
 800640a:	f001 fc4f 	bl	8007cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40023800 	.word	0x40023800

0800641c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006424:	f107 0314 	add.w	r3, r7, #20
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <HAL_CAN_MspInit+0x94>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d134      	bne.n	80064a8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <HAL_CAN_MspInit+0x98>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_CAN_MspInit+0x98>)
 8006448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800644c:	6413      	str	r3, [r2, #64]	; 0x40
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <HAL_CAN_MspInit+0x98>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <HAL_CAN_MspInit+0x98>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006462:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_CAN_MspInit+0x98>)
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	6313      	str	r3, [r2, #48]	; 0x30
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <HAL_CAN_MspInit+0x98>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006476:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800647a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006488:	2309      	movs	r3, #9
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	4619      	mov	r1, r3
 8006492:	4809      	ldr	r0, [pc, #36]	; (80064b8 <HAL_CAN_MspInit+0x9c>)
 8006494:	f002 f836 	bl	8008504 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8006498:	2200      	movs	r2, #0
 800649a:	2105      	movs	r1, #5
 800649c:	2014      	movs	r0, #20
 800649e:	f001 fc05 	bl	8007cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80064a2:	2014      	movs	r0, #20
 80064a4:	f001 fc1e 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80064a8:	bf00      	nop
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40006400 	.word	0x40006400
 80064b4:	40023800 	.word	0x40023800
 80064b8:	40020000 	.word	0x40020000

080064bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	605a      	str	r2, [r3, #4]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	60da      	str	r2, [r3, #12]
 80064d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a22      	ldr	r2, [pc, #136]	; (8006564 <HAL_SPI_MspInit+0xa8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d13d      	bne.n	800655a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	4b21      	ldr	r3, [pc, #132]	; (8006568 <HAL_SPI_MspInit+0xac>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	4a20      	ldr	r2, [pc, #128]	; (8006568 <HAL_SPI_MspInit+0xac>)
 80064e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064ec:	6413      	str	r3, [r2, #64]	; 0x40
 80064ee:	4b1e      	ldr	r3, [pc, #120]	; (8006568 <HAL_SPI_MspInit+0xac>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <HAL_SPI_MspInit+0xac>)
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	4a19      	ldr	r2, [pc, #100]	; (8006568 <HAL_SPI_MspInit+0xac>)
 8006504:	f043 0302 	orr.w	r3, r3, #2
 8006508:	6313      	str	r3, [r2, #48]	; 0x30
 800650a:	4b17      	ldr	r3, [pc, #92]	; (8006568 <HAL_SPI_MspInit+0xac>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006516:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800651a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651c:	2302      	movs	r3, #2
 800651e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006520:	2300      	movs	r3, #0
 8006522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006524:	2303      	movs	r3, #3
 8006526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006528:	2305      	movs	r3, #5
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	4619      	mov	r1, r3
 8006532:	480e      	ldr	r0, [pc, #56]	; (800656c <HAL_SPI_MspInit+0xb0>)
 8006534:	f001 ffe6 	bl	8008504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800653c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800653e:	2302      	movs	r3, #2
 8006540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006542:	2301      	movs	r3, #1
 8006544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006546:	2303      	movs	r3, #3
 8006548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800654a:	2305      	movs	r3, #5
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800654e:	f107 0314 	add.w	r3, r7, #20
 8006552:	4619      	mov	r1, r3
 8006554:	4805      	ldr	r0, [pc, #20]	; (800656c <HAL_SPI_MspInit+0xb0>)
 8006556:	f001 ffd5 	bl	8008504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800655a:	bf00      	nop
 800655c:	3728      	adds	r7, #40	; 0x28
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	40003800 	.word	0x40003800
 8006568:	40023800 	.word	0x40023800
 800656c:	40020400 	.word	0x40020400

08006570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08c      	sub	sp, #48	; 0x30
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006578:	f107 031c 	add.w	r3, r7, #28
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	605a      	str	r2, [r3, #4]
 8006582:	609a      	str	r2, [r3, #8]
 8006584:	60da      	str	r2, [r3, #12]
 8006586:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <HAL_TIM_Base_MspInit+0xd4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d12c      	bne.n	80065ec <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	4b2c      	ldr	r3, [pc, #176]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	6413      	str	r3, [r2, #64]	; 0x40
 80065a2:	4b29      	ldr	r3, [pc, #164]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	4b25      	ldr	r3, [pc, #148]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 80065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b6:	4a24      	ldr	r2, [pc, #144]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	6313      	str	r3, [r2, #48]	; 0x30
 80065be:	4b22      	ldr	r3, [pc, #136]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ce:	2302      	movs	r3, #2
 80065d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d6:	2300      	movs	r3, #0
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80065da:	2302      	movs	r3, #2
 80065dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065de:	f107 031c 	add.w	r3, r7, #28
 80065e2:	4619      	mov	r1, r3
 80065e4:	4819      	ldr	r0, [pc, #100]	; (800664c <HAL_TIM_Base_MspInit+0xdc>)
 80065e6:	f001 ff8d 	bl	8008504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80065ea:	e026      	b.n	800663a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_TIM_Base_MspInit+0xe0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 8006600:	f043 0304 	orr.w	r3, r3, #4
 8006604:	6413      	str	r3, [r2, #64]	; 0x40
 8006606:	4b10      	ldr	r3, [pc, #64]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f003 0304 	and.w	r3, r3, #4
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
}
 8006612:	e012      	b.n	800663a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a0e      	ldr	r2, [pc, #56]	; (8006654 <HAL_TIM_Base_MspInit+0xe4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d10d      	bne.n	800663a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 8006624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006626:	4a08      	ldr	r2, [pc, #32]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 8006628:	f043 0302 	orr.w	r3, r3, #2
 800662c:	6453      	str	r3, [r2, #68]	; 0x44
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <HAL_TIM_Base_MspInit+0xd8>)
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
}
 800663a:	bf00      	nop
 800663c:	3730      	adds	r7, #48	; 0x30
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	40000400 	.word	0x40000400
 8006648:	40023800 	.word	0x40023800
 800664c:	40020000 	.word	0x40020000
 8006650:	40000800 	.word	0x40000800
 8006654:	40010400 	.word	0x40010400

08006658 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <HAL_TIM_Encoder_MspInit+0x84>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d12b      	bne.n	80066d2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	4b18      	ldr	r3, [pc, #96]	; (80066e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8006684:	f043 0308 	orr.w	r3, r3, #8
 8006688:	6413      	str	r3, [r2, #64]	; 0x40
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	4a10      	ldr	r2, [pc, #64]	; (80066e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	6313      	str	r3, [r2, #48]	; 0x30
 80066a6:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80066b2:	2303      	movs	r3, #3
 80066b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b6:	2302      	movs	r3, #2
 80066b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80066c2:	2302      	movs	r3, #2
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	4619      	mov	r1, r3
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80066ce:	f001 ff19 	bl	8008504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80066d2:	bf00      	nop
 80066d4:	3728      	adds	r7, #40	; 0x28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40023800 	.word	0x40023800
 80066e4:	40020000 	.word	0x40020000

080066e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f0:	f107 0314 	add.w	r3, r7, #20
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	60da      	str	r2, [r3, #12]
 80066fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a24      	ldr	r2, [pc, #144]	; (8006798 <HAL_TIM_MspPostInit+0xb0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d11e      	bne.n	8006748 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]
 800670e:	4b23      	ldr	r3, [pc, #140]	; (800679c <HAL_TIM_MspPostInit+0xb4>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_TIM_MspPostInit+0xb4>)
 8006714:	f043 0302 	orr.w	r3, r3, #2
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	4b20      	ldr	r3, [pc, #128]	; (800679c <HAL_TIM_MspPostInit+0xb4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006726:	23c0      	movs	r3, #192	; 0xc0
 8006728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672a:	2302      	movs	r3, #2
 800672c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006732:	2300      	movs	r3, #0
 8006734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006736:	2302      	movs	r3, #2
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800673a:	f107 0314 	add.w	r3, r7, #20
 800673e:	4619      	mov	r1, r3
 8006740:	4817      	ldr	r0, [pc, #92]	; (80067a0 <HAL_TIM_MspPostInit+0xb8>)
 8006742:	f001 fedf 	bl	8008504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006746:	e022      	b.n	800678e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <HAL_TIM_MspPostInit+0xbc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d11d      	bne.n	800678e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <HAL_TIM_MspPostInit+0xb4>)
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	4a10      	ldr	r2, [pc, #64]	; (800679c <HAL_TIM_MspPostInit+0xb4>)
 800675c:	f043 0304 	orr.w	r3, r3, #4
 8006760:	6313      	str	r3, [r2, #48]	; 0x30
 8006762:	4b0e      	ldr	r3, [pc, #56]	; (800679c <HAL_TIM_MspPostInit+0xb4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800676e:	23c0      	movs	r3, #192	; 0xc0
 8006770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006772:	2302      	movs	r3, #2
 8006774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800677a:	2300      	movs	r3, #0
 800677c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800677e:	2303      	movs	r3, #3
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006782:	f107 0314 	add.w	r3, r7, #20
 8006786:	4619      	mov	r1, r3
 8006788:	4807      	ldr	r0, [pc, #28]	; (80067a8 <HAL_TIM_MspPostInit+0xc0>)
 800678a:	f001 febb 	bl	8008504 <HAL_GPIO_Init>
}
 800678e:	bf00      	nop
 8006790:	3728      	adds	r7, #40	; 0x28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	40000800 	.word	0x40000800
 800679c:	40023800 	.word	0x40023800
 80067a0:	40020400 	.word	0x40020400
 80067a4:	40010400 	.word	0x40010400
 80067a8:	40020800 	.word	0x40020800

080067ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067b4:	f107 031c 	add.w	r3, r7, #28
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	609a      	str	r2, [r3, #8]
 80067c0:	60da      	str	r2, [r3, #12]
 80067c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a9a      	ldr	r2, [pc, #616]	; (8006a34 <HAL_UART_MspInit+0x288>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	f040 8095 	bne.w	80068fa <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]
 80067d4:	4b98      	ldr	r3, [pc, #608]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	4a97      	ldr	r2, [pc, #604]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 80067da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067de:	6413      	str	r3, [r2, #64]	; 0x40
 80067e0:	4b95      	ldr	r3, [pc, #596]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	4b91      	ldr	r3, [pc, #580]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	4a90      	ldr	r2, [pc, #576]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 80067f6:	f043 0304 	orr.w	r3, r3, #4
 80067fa:	6313      	str	r3, [r2, #48]	; 0x30
 80067fc:	4b8e      	ldr	r3, [pc, #568]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006808:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800680c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680e:	2302      	movs	r3, #2
 8006810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006812:	2300      	movs	r3, #0
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006816:	2303      	movs	r3, #3
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800681a:	2308      	movs	r3, #8
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800681e:	f107 031c 	add.w	r3, r7, #28
 8006822:	4619      	mov	r1, r3
 8006824:	4885      	ldr	r0, [pc, #532]	; (8006a3c <HAL_UART_MspInit+0x290>)
 8006826:	f001 fe6d 	bl	8008504 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800682a:	4b85      	ldr	r3, [pc, #532]	; (8006a40 <HAL_UART_MspInit+0x294>)
 800682c:	4a85      	ldr	r2, [pc, #532]	; (8006a44 <HAL_UART_MspInit+0x298>)
 800682e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006830:	4b83      	ldr	r3, [pc, #524]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006836:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006838:	4b81      	ldr	r3, [pc, #516]	; (8006a40 <HAL_UART_MspInit+0x294>)
 800683a:	2200      	movs	r2, #0
 800683c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800683e:	4b80      	ldr	r3, [pc, #512]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006840:	2200      	movs	r2, #0
 8006842:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006844:	4b7e      	ldr	r3, [pc, #504]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006846:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800684a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800684c:	4b7c      	ldr	r3, [pc, #496]	; (8006a40 <HAL_UART_MspInit+0x294>)
 800684e:	2200      	movs	r2, #0
 8006850:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006852:	4b7b      	ldr	r3, [pc, #492]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006854:	2200      	movs	r2, #0
 8006856:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8006858:	4b79      	ldr	r3, [pc, #484]	; (8006a40 <HAL_UART_MspInit+0x294>)
 800685a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800685e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006860:	4b77      	ldr	r3, [pc, #476]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006866:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006868:	4b75      	ldr	r3, [pc, #468]	; (8006a40 <HAL_UART_MspInit+0x294>)
 800686a:	2200      	movs	r2, #0
 800686c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800686e:	4874      	ldr	r0, [pc, #464]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006870:	f001 fa46 	bl	8007d00 <HAL_DMA_Init>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800687a:	f7fc fd5d 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a6f      	ldr	r2, [pc, #444]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006882:	63da      	str	r2, [r3, #60]	; 0x3c
 8006884:	4a6e      	ldr	r2, [pc, #440]	; (8006a40 <HAL_UART_MspInit+0x294>)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800688a:	4b6f      	ldr	r3, [pc, #444]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 800688c:	4a6f      	ldr	r2, [pc, #444]	; (8006a4c <HAL_UART_MspInit+0x2a0>)
 800688e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8006890:	4b6d      	ldr	r3, [pc, #436]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 8006892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006896:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006898:	4b6b      	ldr	r3, [pc, #428]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 800689a:	2240      	movs	r2, #64	; 0x40
 800689c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800689e:	4b6a      	ldr	r3, [pc, #424]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80068a4:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068aa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068ac:	4b66      	ldr	r3, [pc, #408]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068ae:	2200      	movs	r2, #0
 80068b0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068b2:	4b65      	ldr	r3, [pc, #404]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80068b8:	4b63      	ldr	r3, [pc, #396]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068ba:	2200      	movs	r2, #0
 80068bc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80068be:	4b62      	ldr	r3, [pc, #392]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068c4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068c6:	4b60      	ldr	r3, [pc, #384]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80068cc:	485e      	ldr	r0, [pc, #376]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068ce:	f001 fa17 	bl	8007d00 <HAL_DMA_Init>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 80068d8:	f7fc fd2e 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a5a      	ldr	r2, [pc, #360]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
 80068e2:	4a59      	ldr	r2, [pc, #356]	; (8006a48 <HAL_UART_MspInit+0x29c>)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80068e8:	2200      	movs	r2, #0
 80068ea:	2105      	movs	r1, #5
 80068ec:	2034      	movs	r0, #52	; 0x34
 80068ee:	f001 f9dd 	bl	8007cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80068f2:	2034      	movs	r0, #52	; 0x34
 80068f4:	f001 f9f6 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80068f8:	e098      	b.n	8006a2c <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART2)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a54      	ldr	r2, [pc, #336]	; (8006a50 <HAL_UART_MspInit+0x2a4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	f040 8093 	bne.w	8006a2c <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	4a4a      	ldr	r2, [pc, #296]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 8006910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006914:	6413      	str	r3, [r2, #64]	; 0x40
 8006916:	4b48      	ldr	r3, [pc, #288]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006922:	2300      	movs	r3, #0
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	4b44      	ldr	r3, [pc, #272]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	4a43      	ldr	r2, [pc, #268]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 800692c:	f043 0301 	orr.w	r3, r3, #1
 8006930:	6313      	str	r3, [r2, #48]	; 0x30
 8006932:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <HAL_UART_MspInit+0x28c>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800693e:	230c      	movs	r3, #12
 8006940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006942:	2302      	movs	r3, #2
 8006944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006946:	2300      	movs	r3, #0
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800694a:	2303      	movs	r3, #3
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800694e:	2307      	movs	r3, #7
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006952:	f107 031c 	add.w	r3, r7, #28
 8006956:	4619      	mov	r1, r3
 8006958:	483e      	ldr	r0, [pc, #248]	; (8006a54 <HAL_UART_MspInit+0x2a8>)
 800695a:	f001 fdd3 	bl	8008504 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800695e:	4b3e      	ldr	r3, [pc, #248]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 8006960:	4a3e      	ldr	r2, [pc, #248]	; (8006a5c <HAL_UART_MspInit+0x2b0>)
 8006962:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006964:	4b3c      	ldr	r3, [pc, #240]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 8006966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800696a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800696c:	4b3a      	ldr	r3, [pc, #232]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 8006974:	2200      	movs	r2, #0
 8006976:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006978:	4b37      	ldr	r3, [pc, #220]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 800697a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800697e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006980:	4b35      	ldr	r3, [pc, #212]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 8006982:	2200      	movs	r2, #0
 8006984:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006986:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800698c:	4b32      	ldr	r3, [pc, #200]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 800698e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006992:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006994:	4b30      	ldr	r3, [pc, #192]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 8006996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800699a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800699c:	4b2e      	ldr	r3, [pc, #184]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 800699e:	2200      	movs	r2, #0
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80069a2:	482d      	ldr	r0, [pc, #180]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 80069a4:	f001 f9ac 	bl	8007d00 <HAL_DMA_Init>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_UART_MspInit+0x206>
      Error_Handler();
 80069ae:	f7fc fcc3 	bl	8003338 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a28      	ldr	r2, [pc, #160]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 80069b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80069b8:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <HAL_UART_MspInit+0x2ac>)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80069be:	4b28      	ldr	r3, [pc, #160]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069c0:	4a28      	ldr	r2, [pc, #160]	; (8006a64 <HAL_UART_MspInit+0x2b8>)
 80069c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80069c4:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069cc:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069ce:	2240      	movs	r2, #64	; 0x40
 80069d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069d2:	4b23      	ldr	r3, [pc, #140]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069d8:	4b21      	ldr	r3, [pc, #132]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069de:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069e0:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069e6:	4b1e      	ldr	r3, [pc, #120]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80069ec:	4b1c      	ldr	r3, [pc, #112]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80069f2:	4b1b      	ldr	r3, [pc, #108]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069fa:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006a00:	4817      	ldr	r0, [pc, #92]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 8006a02:	f001 f97d 	bl	8007d00 <HAL_DMA_Init>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8006a0c:	f7fc fc94 	bl	8003338 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <HAL_UART_MspInit+0x2b4>)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2105      	movs	r1, #5
 8006a20:	2026      	movs	r0, #38	; 0x26
 8006a22:	f001 f943 	bl	8007cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006a26:	2026      	movs	r0, #38	; 0x26
 8006a28:	f001 f95c 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
}
 8006a2c:	bf00      	nop
 8006a2e:	3730      	adds	r7, #48	; 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40004c00 	.word	0x40004c00
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40020800 	.word	0x40020800
 8006a40:	20000528 	.word	0x20000528
 8006a44:	40026040 	.word	0x40026040
 8006a48:	20000588 	.word	0x20000588
 8006a4c:	40026070 	.word	0x40026070
 8006a50:	40004400 	.word	0x40004400
 8006a54:	40020000 	.word	0x40020000
 8006a58:	200005e8 	.word	0x200005e8
 8006a5c:	40026088 	.word	0x40026088
 8006a60:	20000648 	.word	0x20000648
 8006a64:	400260a0 	.word	0x400260a0

08006a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08c      	sub	sp, #48	; 0x30
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60bb      	str	r3, [r7, #8]
 8006a7c:	4b2f      	ldr	r3, [pc, #188]	; (8006b3c <HAL_InitTick+0xd4>)
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	4a2e      	ldr	r2, [pc, #184]	; (8006b3c <HAL_InitTick+0xd4>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6453      	str	r3, [r2, #68]	; 0x44
 8006a88:	4b2c      	ldr	r3, [pc, #176]	; (8006b3c <HAL_InitTick+0xd4>)
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006a94:	f107 020c 	add.w	r2, r7, #12
 8006a98:	f107 0310 	add.w	r3, r7, #16
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 f810 	bl	8008ac4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006aa4:	f001 fffa 	bl	8008a9c <HAL_RCC_GetPCLK2Freq>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	4a23      	ldr	r2, [pc, #140]	; (8006b40 <HAL_InitTick+0xd8>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	0c9b      	lsrs	r3, r3, #18
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006abc:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <HAL_InitTick+0xdc>)
 8006abe:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <HAL_InitTick+0xe0>)
 8006ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006ac2:	4b20      	ldr	r3, [pc, #128]	; (8006b44 <HAL_InitTick+0xdc>)
 8006ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006aca:	4a1e      	ldr	r2, [pc, #120]	; (8006b44 <HAL_InitTick+0xdc>)
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006ad0:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <HAL_InitTick+0xdc>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ad6:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <HAL_InitTick+0xdc>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_InitTick+0xdc>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006ae2:	4818      	ldr	r0, [pc, #96]	; (8006b44 <HAL_InitTick+0xdc>)
 8006ae4:	f003 f804 	bl	8009af0 <HAL_TIM_Base_Init>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d11b      	bne.n	8006b2e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006af6:	4813      	ldr	r0, [pc, #76]	; (8006b44 <HAL_InitTick+0xdc>)
 8006af8:	f003 f84a 	bl	8009b90 <HAL_TIM_Base_Start_IT>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d111      	bne.n	8006b2e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006b0a:	2019      	movs	r0, #25
 8006b0c:	f001 f8ea 	bl	8007ce4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b0f      	cmp	r3, #15
 8006b14:	d808      	bhi.n	8006b28 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006b16:	2200      	movs	r2, #0
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	2019      	movs	r0, #25
 8006b1c:	f001 f8c6 	bl	8007cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <HAL_InitTick+0xe4>)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e002      	b.n	8006b2e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3730      	adds	r7, #48	; 0x30
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	431bde83 	.word	0x431bde83
 8006b44:	20001e60 	.word	0x20001e60
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	20000018 	.word	0x20000018

08006b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006b54:	e7fe      	b.n	8006b54 <NMI_Handler+0x4>

08006b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b56:	b480      	push	{r7}
 8006b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b5a:	e7fe      	b.n	8006b5a <HardFault_Handler+0x4>

08006b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b60:	e7fe      	b.n	8006b60 <MemManage_Handler+0x4>

08006b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b62:	b480      	push	{r7}
 8006b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b66:	e7fe      	b.n	8006b66 <BusFault_Handler+0x4>

08006b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b6c:	e7fe      	b.n	8006b6c <UsageFault_Handler+0x4>

08006b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b72:	bf00      	nop
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006b80:	4802      	ldr	r0, [pc, #8]	; (8006b8c <DMA1_Stream2_IRQHandler+0x10>)
 8006b82:	f001 fa55 	bl	8008030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000528 	.word	0x20000528

08006b90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006b94:	4802      	ldr	r0, [pc, #8]	; (8006ba0 <DMA1_Stream4_IRQHandler+0x10>)
 8006b96:	f001 fa4b 	bl	8008030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000588 	.word	0x20000588

08006ba4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006ba8:	4802      	ldr	r0, [pc, #8]	; (8006bb4 <DMA1_Stream5_IRQHandler+0x10>)
 8006baa:	f001 fa41 	bl	8008030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200005e8 	.word	0x200005e8

08006bb8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006bbc:	4802      	ldr	r0, [pc, #8]	; (8006bc8 <DMA1_Stream6_IRQHandler+0x10>)
 8006bbe:	f001 fa37 	bl	8008030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000648 	.word	0x20000648

08006bcc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006bd0:	4802      	ldr	r0, [pc, #8]	; (8006bdc <CAN1_RX0_IRQHandler+0x10>)
 8006bd2:	f000 fd83 	bl	80076dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006bd6:	bf00      	nop
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200002f8 	.word	0x200002f8

08006be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006be4:	4802      	ldr	r0, [pc, #8]	; (8006bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006be6:	f003 faf2 	bl	800a1ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20001e60 	.word	0x20001e60

08006bf4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006bf8:	4802      	ldr	r0, [pc, #8]	; (8006c04 <USART2_IRQHandler+0x10>)
 8006bfa:	f004 fc35 	bl	800b468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200004e0 	.word	0x200004e0

08006c08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006c0c:	4802      	ldr	r0, [pc, #8]	; (8006c18 <UART4_IRQHandler+0x10>)
 8006c0e:	f004 fc2b 	bl	800b468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006c12:	bf00      	nop
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000498 	.word	0x20000498

08006c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <_sbrk+0x5c>)
 8006c26:	4b15      	ldr	r3, [pc, #84]	; (8006c7c <_sbrk+0x60>)
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <_sbrk+0x64>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <_sbrk+0x64>)
 8006c3a:	4a12      	ldr	r2, [pc, #72]	; (8006c84 <_sbrk+0x68>)
 8006c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c3e:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <_sbrk+0x64>)
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4413      	add	r3, r2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d207      	bcs.n	8006c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c4c:	f008 fb90 	bl	800f370 <__errno>
 8006c50:	4603      	mov	r3, r0
 8006c52:	220c      	movs	r2, #12
 8006c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c5a:	e009      	b.n	8006c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c5c:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <_sbrk+0x64>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c62:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <_sbrk+0x64>)
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	4a05      	ldr	r2, [pc, #20]	; (8006c80 <_sbrk+0x64>)
 8006c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20020000 	.word	0x20020000
 8006c7c:	00000400 	.word	0x00000400
 8006c80:	20001ea8 	.word	0x20001ea8
 8006c84:	20005d50 	.word	0x20005d50

08006c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <SystemInit+0x20>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	4a05      	ldr	r2, [pc, #20]	; (8006ca8 <SystemInit+0x20>)
 8006c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c9c:	bf00      	nop
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	e000ed00 	.word	0xe000ed00

08006cac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	0a5a      	lsrs	r2, r3, #9
 8006cbc:	490f      	ldr	r1, [pc, #60]	; (8006cfc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006cbe:	fba1 1202 	umull	r1, r2, r1, r2
 8006cc2:	09d2      	lsrs	r2, r2, #7
 8006cc4:	490e      	ldr	r1, [pc, #56]	; (8006d00 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006cc6:	fb01 f202 	mul.w	r2, r1, r2
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	0a5b      	lsrs	r3, r3, #9
 8006cd4:	4a09      	ldr	r2, [pc, #36]	; (8006cfc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	09db      	lsrs	r3, r3, #7
 8006cdc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	601a      	str	r2, [r3, #0]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	00044b83 	.word	0x00044b83
 8006d00:	3b9aca00 	.word	0x3b9aca00

08006d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006d08:	f7ff ffbe 	bl	8006c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d0c:	480c      	ldr	r0, [pc, #48]	; (8006d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006d0e:	490d      	ldr	r1, [pc, #52]	; (8006d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006d10:	4a0d      	ldr	r2, [pc, #52]	; (8006d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d14:	e002      	b.n	8006d1c <LoopCopyDataInit>

08006d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d1a:	3304      	adds	r3, #4

08006d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d20:	d3f9      	bcc.n	8006d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d22:	4a0a      	ldr	r2, [pc, #40]	; (8006d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006d24:	4c0a      	ldr	r4, [pc, #40]	; (8006d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d28:	e001      	b.n	8006d2e <LoopFillZerobss>

08006d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d2c:	3204      	adds	r2, #4

08006d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d30:	d3fb      	bcc.n	8006d2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006d32:	f008 fb23 	bl	800f37c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006d36:	f7fa f89f 	bl	8000e78 <main>
  bx  lr    
 8006d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006d44:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8006d48:	0800fd84 	.word	0x0800fd84
  ldr r2, =_sbss
 8006d4c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006d50:	20005d4c 	.word	0x20005d4c

08006d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d54:	e7fe      	b.n	8006d54 <ADC_IRQHandler>
	...

08006d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <HAL_Init+0x40>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0d      	ldr	r2, [pc, #52]	; (8006d98 <HAL_Init+0x40>)
 8006d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d68:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <HAL_Init+0x40>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <HAL_Init+0x40>)
 8006d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d74:	4b08      	ldr	r3, [pc, #32]	; (8006d98 <HAL_Init+0x40>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <HAL_Init+0x40>)
 8006d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d80:	2003      	movs	r0, #3
 8006d82:	f000 ff88 	bl	8007c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d86:	200f      	movs	r0, #15
 8006d88:	f7ff fe6e 	bl	8006a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d8c:	f7ff fb1a 	bl	80063c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	40023c00 	.word	0x40023c00

08006d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <HAL_IncTick+0x20>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <HAL_IncTick+0x24>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4413      	add	r3, r2
 8006dac:	4a04      	ldr	r2, [pc, #16]	; (8006dc0 <HAL_IncTick+0x24>)
 8006dae:	6013      	str	r3, [r2, #0]
}
 8006db0:	bf00      	nop
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	2000001c 	.word	0x2000001c
 8006dc0:	20001eac 	.word	0x20001eac

08006dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <HAL_GetTick+0x14>)
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20001eac 	.word	0x20001eac

08006ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006de4:	f7ff ffee 	bl	8006dc4 <HAL_GetTick>
 8006de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006df4:	d005      	beq.n	8006e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <HAL_Delay+0x44>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e02:	bf00      	nop
 8006e04:	f7ff ffde 	bl	8006dc4 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d8f7      	bhi.n	8006e04 <HAL_Delay+0x28>
  {
  }
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000001c 	.word	0x2000001c

08006e24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0ed      	b.n	8007012 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff faea 	bl	800641c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e58:	f7ff ffb4 	bl	8006dc4 <HAL_GetTick>
 8006e5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e5e:	e012      	b.n	8006e86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e60:	f7ff ffb0 	bl	8006dc4 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b0a      	cmp	r3, #10
 8006e6c:	d90b      	bls.n	8006e86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2205      	movs	r2, #5
 8006e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e0c5      	b.n	8007012 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0e5      	beq.n	8006e60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0202 	bic.w	r2, r2, #2
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ea4:	f7ff ff8e 	bl	8006dc4 <HAL_GetTick>
 8006ea8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006eaa:	e012      	b.n	8006ed2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006eac:	f7ff ff8a 	bl	8006dc4 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b0a      	cmp	r3, #10
 8006eb8:	d90b      	bls.n	8006ed2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2205      	movs	r2, #5
 8006eca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e09f      	b.n	8007012 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e5      	bne.n	8006eac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	7e1b      	ldrb	r3, [r3, #24]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d108      	bne.n	8006efa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	e007      	b.n	8006f0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7e5b      	ldrb	r3, [r3, #25]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d108      	bne.n	8006f24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e007      	b.n	8006f34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	7e9b      	ldrb	r3, [r3, #26]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d108      	bne.n	8006f4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0220 	orr.w	r2, r2, #32
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e007      	b.n	8006f5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0220 	bic.w	r2, r2, #32
 8006f5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7edb      	ldrb	r3, [r3, #27]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d108      	bne.n	8006f78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0210 	bic.w	r2, r2, #16
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e007      	b.n	8006f88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0210 	orr.w	r2, r2, #16
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	7f1b      	ldrb	r3, [r3, #28]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d108      	bne.n	8006fa2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0208 	orr.w	r2, r2, #8
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e007      	b.n	8006fb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0208 	bic.w	r2, r2, #8
 8006fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7f5b      	ldrb	r3, [r3, #29]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d108      	bne.n	8006fcc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0204 	orr.w	r2, r2, #4
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e007      	b.n	8006fdc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	ea42 0103 	orr.w	r1, r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007032:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d003      	beq.n	8007042 <HAL_CAN_ConfigFilter+0x26>
 800703a:	7cfb      	ldrb	r3, [r7, #19]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f040 80be 	bne.w	80071be <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007042:	4b65      	ldr	r3, [pc, #404]	; (80071d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8007044:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800704c:	f043 0201 	orr.w	r2, r3, #1
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800705c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	431a      	orrs	r2, r3
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	2201      	movs	r2, #1
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	43db      	mvns	r3, r3
 8007094:	401a      	ands	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d123      	bne.n	80070ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	401a      	ands	r2, r3
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	3248      	adds	r2, #72	; 0x48
 80070cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070e2:	6979      	ldr	r1, [r7, #20]
 80070e4:	3348      	adds	r3, #72	; 0x48
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	440b      	add	r3, r1
 80070ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d122      	bne.n	800713a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	431a      	orrs	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007114:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	3248      	adds	r2, #72	; 0x48
 800711a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800712e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007130:	6979      	ldr	r1, [r7, #20]
 8007132:	3348      	adds	r3, #72	; 0x48
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	440b      	add	r3, r1
 8007138:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	43db      	mvns	r3, r3
 800714c:	401a      	ands	r2, r3
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007154:	e007      	b.n	8007166 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	431a      	orrs	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	43db      	mvns	r3, r3
 8007178:	401a      	ands	r2, r3
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007180:	e007      	b.n	8007192 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	431a      	orrs	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071b0:	f023 0201 	bic.w	r2, r3, #1
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e006      	b.n	80071cc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40006400 	.word	0x40006400

080071dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d12e      	bne.n	800724e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007208:	f7ff fddc 	bl	8006dc4 <HAL_GetTick>
 800720c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800720e:	e012      	b.n	8007236 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007210:	f7ff fdd8 	bl	8006dc4 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b0a      	cmp	r3, #10
 800721c:	d90b      	bls.n	8007236 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2205      	movs	r2, #5
 800722e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e012      	b.n	800725c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e5      	bne.n	8007210 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	e006      	b.n	800725c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
  }
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
 8007270:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007278:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007282:	7ffb      	ldrb	r3, [r7, #31]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d003      	beq.n	8007290 <HAL_CAN_AddTxMessage+0x2c>
 8007288:	7ffb      	ldrb	r3, [r7, #31]
 800728a:	2b02      	cmp	r3, #2
 800728c:	f040 80ad 	bne.w	80073ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10a      	bne.n	80072b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8095 	beq.w	80073da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	0e1b      	lsrs	r3, r3, #24
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072ba:	2201      	movs	r2, #1
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	409a      	lsls	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10d      	bne.n	80072e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6809      	ldr	r1, [r1, #0]
 80072da:	431a      	orrs	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3318      	adds	r3, #24
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	440b      	add	r3, r1
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e00f      	b.n	8007308 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072f8:	68f9      	ldr	r1, [r7, #12]
 80072fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80072fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3318      	adds	r3, #24
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	440b      	add	r3, r1
 8007306:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6819      	ldr	r1, [r3, #0]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	3318      	adds	r3, #24
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	440b      	add	r3, r1
 8007318:	3304      	adds	r3, #4
 800731a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	7d1b      	ldrb	r3, [r3, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d111      	bne.n	8007348 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	3318      	adds	r3, #24
 800732c:	011b      	lsls	r3, r3, #4
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	6811      	ldr	r1, [r2, #0]
 8007338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	3318      	adds	r3, #24
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	440b      	add	r3, r1
 8007344:	3304      	adds	r3, #4
 8007346:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3307      	adds	r3, #7
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	061a      	lsls	r2, r3, #24
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3306      	adds	r3, #6
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3305      	adds	r3, #5
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	4313      	orrs	r3, r2
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	3204      	adds	r2, #4
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	4610      	mov	r0, r2
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	6811      	ldr	r1, [r2, #0]
 8007370:	ea43 0200 	orr.w	r2, r3, r0
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	440b      	add	r3, r1
 800737a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800737e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3303      	adds	r3, #3
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	061a      	lsls	r2, r3, #24
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3302      	adds	r3, #2
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3301      	adds	r3, #1
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	4313      	orrs	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	4610      	mov	r0, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	ea43 0200 	orr.w	r2, r3, r0
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	440b      	add	r3, r1
 80073b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80073b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	3318      	adds	r3, #24
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	4413      	add	r3, r2
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	6811      	ldr	r1, [r2, #0]
 80073c8:	f043 0201 	orr.w	r2, r3, #1
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	3318      	adds	r3, #24
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	440b      	add	r3, r1
 80073d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e00e      	b.n	80073f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e006      	b.n	80073f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
  }
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3724      	adds	r7, #36	; 0x24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007418:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d002      	beq.n	8007426 <HAL_CAN_IsTxMessagePending+0x22>
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d10b      	bne.n	800743e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	069b      	lsls	r3, r3, #26
 8007430:	401a      	ands	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	069b      	lsls	r3, r3, #26
 8007436:	429a      	cmp	r2, r3
 8007438:	d001      	beq.n	800743e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800743a:	2301      	movs	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007460:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d003      	beq.n	8007470 <HAL_CAN_GetRxMessage+0x24>
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	2b02      	cmp	r3, #2
 800746c:	f040 8103 	bne.w	8007676 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10e      	bne.n	8007494 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d116      	bne.n	80074b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0f7      	b.n	8007684 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d107      	bne.n	80074b2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e0e8      	b.n	8007684 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	331b      	adds	r3, #27
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	4413      	add	r3, r2
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0204 	and.w	r2, r3, #4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	331b      	adds	r3, #27
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	4413      	add	r3, r2
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	0d5b      	lsrs	r3, r3, #21
 80074e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	e00b      	b.n	8007502 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	331b      	adds	r3, #27
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	4413      	add	r3, r2
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	08db      	lsrs	r3, r3, #3
 80074fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	331b      	adds	r3, #27
 800750a:	011b      	lsls	r3, r3, #4
 800750c:	4413      	add	r3, r2
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0202 	and.w	r2, r3, #2
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	331b      	adds	r3, #27
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	4413      	add	r3, r2
 8007524:	3304      	adds	r3, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2208      	movs	r2, #8
 8007534:	611a      	str	r2, [r3, #16]
 8007536:	e00b      	b.n	8007550 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	331b      	adds	r3, #27
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 020f 	and.w	r2, r3, #15
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	331b      	adds	r3, #27
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	4413      	add	r3, r2
 800755c:	3304      	adds	r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	b2da      	uxtb	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	331b      	adds	r3, #27
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	4413      	add	r3, r2
 800758a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	4413      	add	r3, r2
 80075a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	0a1a      	lsrs	r2, r3, #8
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	0c1a      	lsrs	r2, r3, #16
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	3302      	adds	r3, #2
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	0e1a      	lsrs	r2, r3, #24
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	3303      	adds	r3, #3
 80075e0:	b2d2      	uxtb	r2, r2
 80075e2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	3304      	adds	r3, #4
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	4413      	add	r3, r2
 8007606:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	0a1a      	lsrs	r2, r3, #8
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	3305      	adds	r3, #5
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	4413      	add	r3, r2
 8007620:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	0c1a      	lsrs	r2, r3, #16
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	3306      	adds	r3, #6
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	4413      	add	r3, r2
 800763a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	0e1a      	lsrs	r2, r3, #24
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	3307      	adds	r3, #7
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d108      	bne.n	8007662 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0220 	orr.w	r2, r2, #32
 800765e:	60da      	str	r2, [r3, #12]
 8007660:	e007      	b.n	8007672 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0220 	orr.w	r2, r2, #32
 8007670:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e006      	b.n	8007684 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	371c      	adds	r7, #28
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d002      	beq.n	80076ae <HAL_CAN_ActivateNotification+0x1e>
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d109      	bne.n	80076c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6959      	ldr	r1, [r3, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	e006      	b.n	80076d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
  }
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80076e4:	2300      	movs	r3, #0
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d07c      	beq.n	800781c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d023      	beq.n	8007774 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2201      	movs	r2, #1
 8007732:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f983 	bl	8007a4a <HAL_CAN_TxMailbox0CompleteCallback>
 8007744:	e016      	b.n	8007774 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
 8007758:	e00c      	b.n	8007774 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	e002      	b.n	8007774 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f989 	bl	8007a86 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d024      	beq.n	80077c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007786:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f963 	bl	8007a5e <HAL_CAN_TxMailbox1CompleteCallback>
 8007798:	e016      	b.n	80077c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077aa:	627b      	str	r3, [r7, #36]	; 0x24
 80077ac:	e00c      	b.n	80077c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d004      	beq.n	80077c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077be:	627b      	str	r3, [r7, #36]	; 0x24
 80077c0:	e002      	b.n	80077c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f969 	bl	8007a9a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d024      	beq.n	800781c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f943 	bl	8007a72 <HAL_CAN_TxMailbox2CompleteCallback>
 80077ec:	e016      	b.n	800781c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007800:	e00c      	b.n	800781c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d004      	beq.n	8007816 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
 8007814:	e002      	b.n	800781c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f949 	bl	8007aae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00c      	beq.n	8007840 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007836:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2210      	movs	r2, #16
 800783e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2208      	movs	r2, #8
 800785a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f930 	bl	8007ac2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fa f946 	bl	8001b0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800789a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2210      	movs	r2, #16
 80078a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f003 0308 	and.w	r3, r3, #8
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f912 	bl	8007aea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f8f9 	bl	8007ad6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00b      	beq.n	8007906 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f003 0310 	and.w	r3, r3, #16
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2210      	movs	r2, #16
 80078fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f8fc 	bl	8007afe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d006      	beq.n	8007928 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2208      	movs	r2, #8
 8007920:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f8f5 	bl	8007b12 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d07b      	beq.n	8007a2a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d072      	beq.n	8007a22 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	f043 0302 	orr.w	r3, r3, #2
 8007972:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	f043 0304 	orr.w	r3, r3, #4
 800798e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007996:	2b00      	cmp	r3, #0
 8007998:	d043      	beq.n	8007a22 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d03e      	beq.n	8007a22 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079aa:	2b60      	cmp	r3, #96	; 0x60
 80079ac:	d02b      	beq.n	8007a06 <HAL_CAN_IRQHandler+0x32a>
 80079ae:	2b60      	cmp	r3, #96	; 0x60
 80079b0:	d82e      	bhi.n	8007a10 <HAL_CAN_IRQHandler+0x334>
 80079b2:	2b50      	cmp	r3, #80	; 0x50
 80079b4:	d022      	beq.n	80079fc <HAL_CAN_IRQHandler+0x320>
 80079b6:	2b50      	cmp	r3, #80	; 0x50
 80079b8:	d82a      	bhi.n	8007a10 <HAL_CAN_IRQHandler+0x334>
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	d019      	beq.n	80079f2 <HAL_CAN_IRQHandler+0x316>
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d826      	bhi.n	8007a10 <HAL_CAN_IRQHandler+0x334>
 80079c2:	2b30      	cmp	r3, #48	; 0x30
 80079c4:	d010      	beq.n	80079e8 <HAL_CAN_IRQHandler+0x30c>
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	d822      	bhi.n	8007a10 <HAL_CAN_IRQHandler+0x334>
 80079ca:	2b10      	cmp	r3, #16
 80079cc:	d002      	beq.n	80079d4 <HAL_CAN_IRQHandler+0x2f8>
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d005      	beq.n	80079de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80079d2:	e01d      	b.n	8007a10 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	f043 0308 	orr.w	r3, r3, #8
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079dc:	e019      	b.n	8007a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	f043 0310 	orr.w	r3, r3, #16
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079e6:	e014      	b.n	8007a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	f043 0320 	orr.w	r3, r3, #32
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079f0:	e00f      	b.n	8007a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079fa:	e00a      	b.n	8007a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a04:	e005      	b.n	8007a12 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a0e:	e000      	b.n	8007a12 <HAL_CAN_IRQHandler+0x336>
            break;
 8007a10:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	699a      	ldr	r2, [r3, #24]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a20:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2204      	movs	r2, #4
 8007a28:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d008      	beq.n	8007a42 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f872 	bl	8007b26 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007a42:	bf00      	nop
 8007a44:	3728      	adds	r7, #40	; 0x28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b083      	sub	sp, #12
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <__NVIC_SetPriorityGrouping+0x44>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b58:	4013      	ands	r3, r2
 8007b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b6e:	4a04      	ldr	r2, [pc, #16]	; (8007b80 <__NVIC_SetPriorityGrouping+0x44>)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	60d3      	str	r3, [r2, #12]
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <__NVIC_GetPriorityGrouping+0x18>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	0a1b      	lsrs	r3, r3, #8
 8007b8e:	f003 0307 	and.w	r3, r3, #7
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	e000ed00 	.word	0xe000ed00

08007ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	db0b      	blt.n	8007bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	f003 021f 	and.w	r2, r3, #31
 8007bb8:	4907      	ldr	r1, [pc, #28]	; (8007bd8 <__NVIC_EnableIRQ+0x38>)
 8007bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bca:	bf00      	nop
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	e000e100 	.word	0xe000e100

08007bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	6039      	str	r1, [r7, #0]
 8007be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db0a      	blt.n	8007c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	490c      	ldr	r1, [pc, #48]	; (8007c28 <__NVIC_SetPriority+0x4c>)
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	0112      	lsls	r2, r2, #4
 8007bfc:	b2d2      	uxtb	r2, r2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c04:	e00a      	b.n	8007c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	4908      	ldr	r1, [pc, #32]	; (8007c2c <__NVIC_SetPriority+0x50>)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	3b04      	subs	r3, #4
 8007c14:	0112      	lsls	r2, r2, #4
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	440b      	add	r3, r1
 8007c1a:	761a      	strb	r2, [r3, #24]
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	e000e100 	.word	0xe000e100
 8007c2c:	e000ed00 	.word	0xe000ed00

08007c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b089      	sub	sp, #36	; 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f1c3 0307 	rsb	r3, r3, #7
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	bf28      	it	cs
 8007c4e:	2304      	movcs	r3, #4
 8007c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	3304      	adds	r3, #4
 8007c56:	2b06      	cmp	r3, #6
 8007c58:	d902      	bls.n	8007c60 <NVIC_EncodePriority+0x30>
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3b03      	subs	r3, #3
 8007c5e:	e000      	b.n	8007c62 <NVIC_EncodePriority+0x32>
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6e:	43da      	mvns	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	401a      	ands	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c82:	43d9      	mvns	r1, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c88:	4313      	orrs	r3, r2
         );
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3724      	adds	r7, #36	; 0x24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff ff4c 	bl	8007b3c <__NVIC_SetPriorityGrouping>
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007cbe:	f7ff ff61 	bl	8007b84 <__NVIC_GetPriorityGrouping>
 8007cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	6978      	ldr	r0, [r7, #20]
 8007cca:	f7ff ffb1 	bl	8007c30 <NVIC_EncodePriority>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff ff80 	bl	8007bdc <__NVIC_SetPriority>
}
 8007cdc:	bf00      	nop
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff ff54 	bl	8007ba0 <__NVIC_EnableIRQ>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d0c:	f7ff f85a 	bl	8006dc4 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e099      	b.n	8007e50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0201 	bic.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d3c:	e00f      	b.n	8007d5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d3e:	f7ff f841 	bl	8006dc4 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b05      	cmp	r3, #5
 8007d4a:	d908      	bls.n	8007d5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2203      	movs	r2, #3
 8007d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e078      	b.n	8007e50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e8      	bne.n	8007d3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4b38      	ldr	r3, [pc, #224]	; (8007e58 <HAL_DMA_Init+0x158>)
 8007d78:	4013      	ands	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d107      	bne.n	8007dc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 0307 	bic.w	r3, r3, #7
 8007dde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d117      	bne.n	8007e22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00e      	beq.n	8007e22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fb01 	bl	800840c <DMA_CheckFifoParam>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2240      	movs	r2, #64	; 0x40
 8007e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e016      	b.n	8007e50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fab8 	bl	80083a0 <DMA_CalcBaseAndBitshift>
 8007e30:	4603      	mov	r3, r0
 8007e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e38:	223f      	movs	r2, #63	; 0x3f
 8007e3a:	409a      	lsls	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	f010803f 	.word	0xf010803f

08007e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d101      	bne.n	8007e82 <HAL_DMA_Start_IT+0x26>
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e040      	b.n	8007f04 <HAL_DMA_Start_IT+0xa8>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d12f      	bne.n	8007ef6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fa4a 	bl	8008344 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb4:	223f      	movs	r2, #63	; 0x3f
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0216 	orr.w	r2, r2, #22
 8007eca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0208 	orr.w	r2, r2, #8
 8007ee2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e005      	b.n	8007f02 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
 8007f00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007f1a:	f7fe ff53 	bl	8006dc4 <HAL_GetTick>
 8007f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d008      	beq.n	8007f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2280      	movs	r2, #128	; 0x80
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e052      	b.n	8007fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0216 	bic.w	r2, r2, #22
 8007f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695a      	ldr	r2, [r3, #20]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d103      	bne.n	8007f6e <HAL_DMA_Abort+0x62>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0208 	bic.w	r2, r2, #8
 8007f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0201 	bic.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f8e:	e013      	b.n	8007fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f90:	f7fe ff18 	bl	8006dc4 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b05      	cmp	r3, #5
 8007f9c:	d90c      	bls.n	8007fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e015      	b.n	8007fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1e4      	bne.n	8007f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fca:	223f      	movs	r2, #63	; 0x3f
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d004      	beq.n	800800a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2280      	movs	r2, #128	; 0x80
 8008004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e00c      	b.n	8008024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2205      	movs	r2, #5
 800800e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800803c:	4b8e      	ldr	r3, [pc, #568]	; (8008278 <HAL_DMA_IRQHandler+0x248>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a8e      	ldr	r2, [pc, #568]	; (800827c <HAL_DMA_IRQHandler+0x24c>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	0a9b      	lsrs	r3, r3, #10
 8008048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	2208      	movs	r2, #8
 800805c:	409a      	lsls	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4013      	ands	r3, r2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d01a      	beq.n	800809c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d013      	beq.n	800809c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0204 	bic.w	r2, r2, #4
 8008082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008088:	2208      	movs	r2, #8
 800808a:	409a      	lsls	r2, r3
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008094:	f043 0201 	orr.w	r2, r3, #1
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	2201      	movs	r2, #1
 80080a2:	409a      	lsls	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080be:	2201      	movs	r2, #1
 80080c0:	409a      	lsls	r2, r3
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ca:	f043 0202 	orr.w	r2, r3, #2
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	2204      	movs	r2, #4
 80080d8:	409a      	lsls	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d012      	beq.n	8008108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f4:	2204      	movs	r2, #4
 80080f6:	409a      	lsls	r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008100:	f043 0204 	orr.w	r2, r3, #4
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810c:	2210      	movs	r2, #16
 800810e:	409a      	lsls	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d043      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d03c      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812a:	2210      	movs	r2, #16
 800812c:	409a      	lsls	r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d018      	beq.n	8008172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d108      	bne.n	8008160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d024      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
 800815e:	e01f      	b.n	80081a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008164:	2b00      	cmp	r3, #0
 8008166:	d01b      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
 8008170:	e016      	b.n	80081a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817c:	2b00      	cmp	r3, #0
 800817e:	d107      	bne.n	8008190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0208 	bic.w	r2, r2, #8
 800818e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d003      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a4:	2220      	movs	r2, #32
 80081a6:	409a      	lsls	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 808f 	beq.w	80082d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 8087 	beq.w	80082d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	2220      	movs	r2, #32
 80081c8:	409a      	lsls	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b05      	cmp	r3, #5
 80081d8:	d136      	bne.n	8008248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0216 	bic.w	r2, r2, #22
 80081e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695a      	ldr	r2, [r3, #20]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <HAL_DMA_IRQHandler+0x1da>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f022 0208 	bic.w	r2, r2, #8
 8008218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821e:	223f      	movs	r2, #63	; 0x3f
 8008220:	409a      	lsls	r2, r3
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800823a:	2b00      	cmp	r3, #0
 800823c:	d07e      	beq.n	800833c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
        }
        return;
 8008246:	e079      	b.n	800833c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d01d      	beq.n	8008292 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10d      	bne.n	8008280 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	2b00      	cmp	r3, #0
 800826a:	d031      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	4798      	blx	r3
 8008274:	e02c      	b.n	80082d0 <HAL_DMA_IRQHandler+0x2a0>
 8008276:	bf00      	nop
 8008278:	20000014 	.word	0x20000014
 800827c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d023      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	4798      	blx	r3
 8008290:	e01e      	b.n	80082d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10f      	bne.n	80082c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0210 	bic.w	r2, r2, #16
 80082ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d032      	beq.n	800833e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d022      	beq.n	800832a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2205      	movs	r2, #5
 80082e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0201 	bic.w	r2, r2, #1
 80082fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	3301      	adds	r3, #1
 8008300:	60bb      	str	r3, [r7, #8]
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	429a      	cmp	r2, r3
 8008306:	d307      	bcc.n	8008318 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f2      	bne.n	80082fc <HAL_DMA_IRQHandler+0x2cc>
 8008316:	e000      	b.n	800831a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008318:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
 800833a:	e000      	b.n	800833e <HAL_DMA_IRQHandler+0x30e>
        return;
 800833c:	bf00      	nop
    }
  }
}
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d108      	bne.n	8008384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008382:	e007      	b.n	8008394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	60da      	str	r2, [r3, #12]
}
 8008394:	bf00      	nop
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	3b10      	subs	r3, #16
 80083b0:	4a14      	ldr	r2, [pc, #80]	; (8008404 <DMA_CalcBaseAndBitshift+0x64>)
 80083b2:	fba2 2303 	umull	r2, r3, r2, r3
 80083b6:	091b      	lsrs	r3, r3, #4
 80083b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083ba:	4a13      	ldr	r2, [pc, #76]	; (8008408 <DMA_CalcBaseAndBitshift+0x68>)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d909      	bls.n	80083e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	1d1a      	adds	r2, r3, #4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	659a      	str	r2, [r3, #88]	; 0x58
 80083e0:	e007      	b.n	80083f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80083ea:	f023 0303 	bic.w	r3, r3, #3
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	aaaaaaab 	.word	0xaaaaaaab
 8008408:	0800fb1c 	.word	0x0800fb1c

0800840c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d11f      	bne.n	8008466 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	2b03      	cmp	r3, #3
 800842a:	d856      	bhi.n	80084da <DMA_CheckFifoParam+0xce>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <DMA_CheckFifoParam+0x28>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008445 	.word	0x08008445
 8008438:	08008457 	.word	0x08008457
 800843c:	08008445 	.word	0x08008445
 8008440:	080084db 	.word	0x080084db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d046      	beq.n	80084de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008454:	e043      	b.n	80084de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800845e:	d140      	bne.n	80084e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008464:	e03d      	b.n	80084e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800846e:	d121      	bne.n	80084b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b03      	cmp	r3, #3
 8008474:	d837      	bhi.n	80084e6 <DMA_CheckFifoParam+0xda>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <DMA_CheckFifoParam+0x70>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	0800848d 	.word	0x0800848d
 8008480:	08008493 	.word	0x08008493
 8008484:	0800848d 	.word	0x0800848d
 8008488:	080084a5 	.word	0x080084a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
      break;
 8008490:	e030      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d025      	beq.n	80084ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a2:	e022      	b.n	80084ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084ac:	d11f      	bne.n	80084ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084b2:	e01c      	b.n	80084ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d903      	bls.n	80084c2 <DMA_CheckFifoParam+0xb6>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d003      	beq.n	80084c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80084c0:	e018      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	73fb      	strb	r3, [r7, #15]
      break;
 80084c6:	e015      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00e      	beq.n	80084f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
      break;
 80084d8:	e00b      	b.n	80084f2 <DMA_CheckFifoParam+0xe6>
      break;
 80084da:	bf00      	nop
 80084dc:	e00a      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      break;
 80084de:	bf00      	nop
 80084e0:	e008      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      break;
 80084e2:	bf00      	nop
 80084e4:	e006      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      break;
 80084e6:	bf00      	nop
 80084e8:	e004      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      break;
 80084ea:	bf00      	nop
 80084ec:	e002      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80084ee:	bf00      	nop
 80084f0:	e000      	b.n	80084f4 <DMA_CheckFifoParam+0xe8>
      break;
 80084f2:	bf00      	nop
    }
  } 
  
  return status; 
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008504:	b480      	push	{r7}
 8008506:	b089      	sub	sp, #36	; 0x24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008512:	2300      	movs	r3, #0
 8008514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008516:	2300      	movs	r3, #0
 8008518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	e165      	b.n	80087ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008520:	2201      	movs	r2, #1
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4013      	ands	r3, r2
 8008532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	429a      	cmp	r2, r3
 800853a:	f040 8154 	bne.w	80087e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	2b01      	cmp	r3, #1
 8008548:	d005      	beq.n	8008556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008552:	2b02      	cmp	r3, #2
 8008554:	d130      	bne.n	80085b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	2203      	movs	r2, #3
 8008562:	fa02 f303 	lsl.w	r3, r2, r3
 8008566:	43db      	mvns	r3, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	4013      	ands	r3, r2
 800856c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68da      	ldr	r2, [r3, #12]
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	fa02 f303 	lsl.w	r3, r2, r3
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	4313      	orrs	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800858c:	2201      	movs	r2, #1
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	43db      	mvns	r3, r3
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	4013      	ands	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	f003 0201 	and.w	r2, r3, #1
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d017      	beq.n	80085f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	2203      	movs	r2, #3
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	43db      	mvns	r3, r3
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	4013      	ands	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	fa02 f303 	lsl.w	r3, r2, r3
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f003 0303 	and.w	r3, r3, #3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d123      	bne.n	8008648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	08da      	lsrs	r2, r3, #3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3208      	adds	r2, #8
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f003 0307 	and.w	r3, r3, #7
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	220f      	movs	r2, #15
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	43db      	mvns	r3, r3
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	4013      	ands	r3, r2
 8008622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	691a      	ldr	r2, [r3, #16]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	4313      	orrs	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	08da      	lsrs	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3208      	adds	r2, #8
 8008642:	69b9      	ldr	r1, [r7, #24]
 8008644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	2203      	movs	r2, #3
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	43db      	mvns	r3, r3
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	4013      	ands	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f003 0203 	and.w	r2, r3, #3
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	fa02 f303 	lsl.w	r3, r2, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	4313      	orrs	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80ae 	beq.w	80087e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	4b5d      	ldr	r3, [pc, #372]	; (8008804 <HAL_GPIO_Init+0x300>)
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	4a5c      	ldr	r2, [pc, #368]	; (8008804 <HAL_GPIO_Init+0x300>)
 8008694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008698:	6453      	str	r3, [r2, #68]	; 0x44
 800869a:	4b5a      	ldr	r3, [pc, #360]	; (8008804 <HAL_GPIO_Init+0x300>)
 800869c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086a6:	4a58      	ldr	r2, [pc, #352]	; (8008808 <HAL_GPIO_Init+0x304>)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	089b      	lsrs	r3, r3, #2
 80086ac:	3302      	adds	r3, #2
 80086ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	220f      	movs	r2, #15
 80086be:	fa02 f303 	lsl.w	r3, r2, r3
 80086c2:	43db      	mvns	r3, r3
 80086c4:	69ba      	ldr	r2, [r7, #24]
 80086c6:	4013      	ands	r3, r2
 80086c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a4f      	ldr	r2, [pc, #316]	; (800880c <HAL_GPIO_Init+0x308>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d025      	beq.n	800871e <HAL_GPIO_Init+0x21a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a4e      	ldr	r2, [pc, #312]	; (8008810 <HAL_GPIO_Init+0x30c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d01f      	beq.n	800871a <HAL_GPIO_Init+0x216>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a4d      	ldr	r2, [pc, #308]	; (8008814 <HAL_GPIO_Init+0x310>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d019      	beq.n	8008716 <HAL_GPIO_Init+0x212>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a4c      	ldr	r2, [pc, #304]	; (8008818 <HAL_GPIO_Init+0x314>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d013      	beq.n	8008712 <HAL_GPIO_Init+0x20e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a4b      	ldr	r2, [pc, #300]	; (800881c <HAL_GPIO_Init+0x318>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00d      	beq.n	800870e <HAL_GPIO_Init+0x20a>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a4a      	ldr	r2, [pc, #296]	; (8008820 <HAL_GPIO_Init+0x31c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <HAL_GPIO_Init+0x206>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a49      	ldr	r2, [pc, #292]	; (8008824 <HAL_GPIO_Init+0x320>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d101      	bne.n	8008706 <HAL_GPIO_Init+0x202>
 8008702:	2306      	movs	r3, #6
 8008704:	e00c      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 8008706:	2307      	movs	r3, #7
 8008708:	e00a      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 800870a:	2305      	movs	r3, #5
 800870c:	e008      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 800870e:	2304      	movs	r3, #4
 8008710:	e006      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 8008712:	2303      	movs	r3, #3
 8008714:	e004      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 8008716:	2302      	movs	r3, #2
 8008718:	e002      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 800871a:	2301      	movs	r3, #1
 800871c:	e000      	b.n	8008720 <HAL_GPIO_Init+0x21c>
 800871e:	2300      	movs	r3, #0
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	f002 0203 	and.w	r2, r2, #3
 8008726:	0092      	lsls	r2, r2, #2
 8008728:	4093      	lsls	r3, r2
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008730:	4935      	ldr	r1, [pc, #212]	; (8008808 <HAL_GPIO_Init+0x304>)
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	089b      	lsrs	r3, r3, #2
 8008736:	3302      	adds	r3, #2
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800873e:	4b3a      	ldr	r3, [pc, #232]	; (8008828 <HAL_GPIO_Init+0x324>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	43db      	mvns	r3, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	4013      	ands	r3, r2
 800874c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	4313      	orrs	r3, r2
 8008760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008762:	4a31      	ldr	r2, [pc, #196]	; (8008828 <HAL_GPIO_Init+0x324>)
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008768:	4b2f      	ldr	r3, [pc, #188]	; (8008828 <HAL_GPIO_Init+0x324>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	43db      	mvns	r3, r3
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	4013      	ands	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800878c:	4a26      	ldr	r2, [pc, #152]	; (8008828 <HAL_GPIO_Init+0x324>)
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008792:	4b25      	ldr	r3, [pc, #148]	; (8008828 <HAL_GPIO_Init+0x324>)
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	43db      	mvns	r3, r3
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	4013      	ands	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80087b6:	4a1c      	ldr	r2, [pc, #112]	; (8008828 <HAL_GPIO_Init+0x324>)
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087bc:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <HAL_GPIO_Init+0x324>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	43db      	mvns	r3, r3
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	4013      	ands	r3, r2
 80087ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4313      	orrs	r3, r2
 80087de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087e0:	4a11      	ldr	r2, [pc, #68]	; (8008828 <HAL_GPIO_Init+0x324>)
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	3301      	adds	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	f67f ae96 	bls.w	8008520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop
 80087f8:	3724      	adds	r7, #36	; 0x24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	40023800 	.word	0x40023800
 8008808:	40013800 	.word	0x40013800
 800880c:	40020000 	.word	0x40020000
 8008810:	40020400 	.word	0x40020400
 8008814:	40020800 	.word	0x40020800
 8008818:	40020c00 	.word	0x40020c00
 800881c:	40021000 	.word	0x40021000
 8008820:	40021400 	.word	0x40021400
 8008824:	40021800 	.word	0x40021800
 8008828:	40013c00 	.word	0x40013c00

0800882c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	887b      	ldrh	r3, [r7, #2]
 800883e:	4013      	ands	r3, r2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008844:	2301      	movs	r3, #1
 8008846:	73fb      	strb	r3, [r7, #15]
 8008848:	e001      	b.n	800884e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800884e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	807b      	strh	r3, [r7, #2]
 8008868:	4613      	mov	r3, r2
 800886a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800886c:	787b      	ldrb	r3, [r7, #1]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008872:	887a      	ldrh	r2, [r7, #2]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008878:	e003      	b.n	8008882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800887a:	887b      	ldrh	r3, [r7, #2]
 800887c:	041a      	lsls	r2, r3, #16
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	619a      	str	r2, [r3, #24]
}
 8008882:	bf00      	nop
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
	...

08008890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e0cc      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088a4:	4b68      	ldr	r3, [pc, #416]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d90c      	bls.n	80088cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088b2:	4b65      	ldr	r3, [pc, #404]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088ba:	4b63      	ldr	r3, [pc, #396]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d001      	beq.n	80088cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0b8      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d020      	beq.n	800891a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d005      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088e4:	4b59      	ldr	r3, [pc, #356]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	4a58      	ldr	r2, [pc, #352]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0308 	and.w	r3, r3, #8
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088fc:	4b53      	ldr	r3, [pc, #332]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	4a52      	ldr	r2, [pc, #328]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008908:	4b50      	ldr	r3, [pc, #320]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	494d      	ldr	r1, [pc, #308]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008916:	4313      	orrs	r3, r2
 8008918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d044      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d107      	bne.n	800893e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800892e:	4b47      	ldr	r3, [pc, #284]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d119      	bne.n	800896e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e07f      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d003      	beq.n	800894e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800894a:	2b03      	cmp	r3, #3
 800894c:	d107      	bne.n	800895e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d109      	bne.n	800896e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e06f      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800895e:	4b3b      	ldr	r3, [pc, #236]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e067      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800896e:	4b37      	ldr	r3, [pc, #220]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f023 0203 	bic.w	r2, r3, #3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4934      	ldr	r1, [pc, #208]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 800897c:	4313      	orrs	r3, r2
 800897e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008980:	f7fe fa20 	bl	8006dc4 <HAL_GetTick>
 8008984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008986:	e00a      	b.n	800899e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008988:	f7fe fa1c 	bl	8006dc4 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	f241 3288 	movw	r2, #5000	; 0x1388
 8008996:	4293      	cmp	r3, r2
 8008998:	d901      	bls.n	800899e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e04f      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800899e:	4b2b      	ldr	r3, [pc, #172]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 020c 	and.w	r2, r3, #12
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d1eb      	bne.n	8008988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b0:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d20c      	bcs.n	80089d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089c6:	4b20      	ldr	r3, [pc, #128]	; (8008a48 <HAL_RCC_ClockConfig+0x1b8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d001      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e032      	b.n	8008a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089e4:	4b19      	ldr	r3, [pc, #100]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4916      	ldr	r1, [pc, #88]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0308 	and.w	r3, r3, #8
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	490e      	ldr	r1, [pc, #56]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a16:	f000 f887 	bl	8008b28 <HAL_RCC_GetSysClockFreq>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	091b      	lsrs	r3, r3, #4
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	490a      	ldr	r1, [pc, #40]	; (8008a50 <HAL_RCC_ClockConfig+0x1c0>)
 8008a28:	5ccb      	ldrb	r3, [r1, r3]
 8008a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a2e:	4a09      	ldr	r2, [pc, #36]	; (8008a54 <HAL_RCC_ClockConfig+0x1c4>)
 8008a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a32:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <HAL_RCC_ClockConfig+0x1c8>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe f816 	bl	8006a68 <HAL_InitTick>

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	40023c00 	.word	0x40023c00
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	0800fb04 	.word	0x0800fb04
 8008a54:	20000014 	.word	0x20000014
 8008a58:	20000018 	.word	0x20000018

08008a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a62:	681b      	ldr	r3, [r3, #0]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000014 	.word	0x20000014

08008a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a78:	f7ff fff0 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	0a9b      	lsrs	r3, r3, #10
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	4903      	ldr	r1, [pc, #12]	; (8008a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a8a:	5ccb      	ldrb	r3, [r1, r3]
 8008a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40023800 	.word	0x40023800
 8008a98:	0800fb14 	.word	0x0800fb14

08008a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008aa0:	f7ff ffdc 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	0b5b      	lsrs	r3, r3, #13
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	4903      	ldr	r1, [pc, #12]	; (8008ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ab2:	5ccb      	ldrb	r3, [r1, r3]
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	0800fb14 	.word	0x0800fb14

08008ac4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	220f      	movs	r2, #15
 8008ad2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ad4:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <HAL_RCC_GetClockConfig+0x5c>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 0203 	and.w	r2, r3, #3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ae0:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <HAL_RCC_GetClockConfig+0x5c>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008aec:	4b0c      	ldr	r3, [pc, #48]	; (8008b20 <HAL_RCC_GetClockConfig+0x5c>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008af8:	4b09      	ldr	r3, [pc, #36]	; (8008b20 <HAL_RCC_GetClockConfig+0x5c>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	08db      	lsrs	r3, r3, #3
 8008afe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b06:	4b07      	ldr	r3, [pc, #28]	; (8008b24 <HAL_RCC_GetClockConfig+0x60>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 020f 	and.w	r2, r3, #15
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	601a      	str	r2, [r3, #0]
}
 8008b12:	bf00      	nop
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40023800 	.word	0x40023800
 8008b24:	40023c00 	.word	0x40023c00

08008b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b2c:	b0ae      	sub	sp, #184	; 0xb8
 8008b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b4e:	4bcb      	ldr	r3, [pc, #812]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f003 030c 	and.w	r3, r3, #12
 8008b56:	2b0c      	cmp	r3, #12
 8008b58:	f200 8206 	bhi.w	8008f68 <HAL_RCC_GetSysClockFreq+0x440>
 8008b5c:	a201      	add	r2, pc, #4	; (adr r2, 8008b64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b99 	.word	0x08008b99
 8008b68:	08008f69 	.word	0x08008f69
 8008b6c:	08008f69 	.word	0x08008f69
 8008b70:	08008f69 	.word	0x08008f69
 8008b74:	08008ba1 	.word	0x08008ba1
 8008b78:	08008f69 	.word	0x08008f69
 8008b7c:	08008f69 	.word	0x08008f69
 8008b80:	08008f69 	.word	0x08008f69
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008f69 	.word	0x08008f69
 8008b8c:	08008f69 	.word	0x08008f69
 8008b90:	08008f69 	.word	0x08008f69
 8008b94:	08008d99 	.word	0x08008d99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b98:	4bb9      	ldr	r3, [pc, #740]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x358>)
 8008b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8008b9e:	e1e7      	b.n	8008f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ba0:	4bb8      	ldr	r3, [pc, #736]	; (8008e84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008ba6:	e1e3      	b.n	8008f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ba8:	4bb4      	ldr	r3, [pc, #720]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bb4:	4bb1      	ldr	r3, [pc, #708]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d071      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bc0:	4bae      	ldr	r3, [pc, #696]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	099b      	lsrs	r3, r3, #6
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bcc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008be2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008be6:	4622      	mov	r2, r4
 8008be8:	462b      	mov	r3, r5
 8008bea:	f04f 0000 	mov.w	r0, #0
 8008bee:	f04f 0100 	mov.w	r1, #0
 8008bf2:	0159      	lsls	r1, r3, #5
 8008bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bf8:	0150      	lsls	r0, r2, #5
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	4621      	mov	r1, r4
 8008c00:	1a51      	subs	r1, r2, r1
 8008c02:	6439      	str	r1, [r7, #64]	; 0x40
 8008c04:	4629      	mov	r1, r5
 8008c06:	eb63 0301 	sbc.w	r3, r3, r1
 8008c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008c18:	4649      	mov	r1, r9
 8008c1a:	018b      	lsls	r3, r1, #6
 8008c1c:	4641      	mov	r1, r8
 8008c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c22:	4641      	mov	r1, r8
 8008c24:	018a      	lsls	r2, r1, #6
 8008c26:	4641      	mov	r1, r8
 8008c28:	1a51      	subs	r1, r2, r1
 8008c2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8008c40:	4649      	mov	r1, r9
 8008c42:	00cb      	lsls	r3, r1, #3
 8008c44:	4641      	mov	r1, r8
 8008c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	00ca      	lsls	r2, r1, #3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	4619      	mov	r1, r3
 8008c52:	4603      	mov	r3, r0
 8008c54:	4622      	mov	r2, r4
 8008c56:	189b      	adds	r3, r3, r2
 8008c58:	633b      	str	r3, [r7, #48]	; 0x30
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	460a      	mov	r2, r1
 8008c5e:	eb42 0303 	adc.w	r3, r2, r3
 8008c62:	637b      	str	r3, [r7, #52]	; 0x34
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c70:	4629      	mov	r1, r5
 8008c72:	024b      	lsls	r3, r1, #9
 8008c74:	4621      	mov	r1, r4
 8008c76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	024a      	lsls	r2, r1, #9
 8008c7e:	4610      	mov	r0, r2
 8008c80:	4619      	mov	r1, r3
 8008c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008c94:	f7f7 ff58 	bl	8000b48 <__aeabi_uldivmod>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ca2:	e067      	b.n	8008d74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ca4:	4b75      	ldr	r3, [pc, #468]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	099b      	lsrs	r3, r3, #6
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cb0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8008cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cc2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8008cc6:	4622      	mov	r2, r4
 8008cc8:	462b      	mov	r3, r5
 8008cca:	f04f 0000 	mov.w	r0, #0
 8008cce:	f04f 0100 	mov.w	r1, #0
 8008cd2:	0159      	lsls	r1, r3, #5
 8008cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cd8:	0150      	lsls	r0, r2, #5
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4621      	mov	r1, r4
 8008ce0:	1a51      	subs	r1, r2, r1
 8008ce2:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	018b      	lsls	r3, r1, #6
 8008cfc:	4641      	mov	r1, r8
 8008cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d02:	4641      	mov	r1, r8
 8008d04:	018a      	lsls	r2, r1, #6
 8008d06:	4641      	mov	r1, r8
 8008d08:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d26:	4692      	mov	sl, r2
 8008d28:	469b      	mov	fp, r3
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	eb1a 0303 	adds.w	r3, sl, r3
 8008d30:	623b      	str	r3, [r7, #32]
 8008d32:	462b      	mov	r3, r5
 8008d34:	eb4b 0303 	adc.w	r3, fp, r3
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
 8008d3a:	f04f 0200 	mov.w	r2, #0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008d46:	4629      	mov	r1, r5
 8008d48:	028b      	lsls	r3, r1, #10
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d50:	4621      	mov	r1, r4
 8008d52:	028a      	lsls	r2, r1, #10
 8008d54:	4610      	mov	r0, r2
 8008d56:	4619      	mov	r1, r3
 8008d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	673b      	str	r3, [r7, #112]	; 0x70
 8008d60:	677a      	str	r2, [r7, #116]	; 0x74
 8008d62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008d66:	f7f7 feef 	bl	8000b48 <__aeabi_uldivmod>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4613      	mov	r3, r2
 8008d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d74:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	0c1b      	lsrs	r3, r3, #16
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	3301      	adds	r3, #1
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8008d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008d96:	e0eb      	b.n	8008f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d98:	4b38      	ldr	r3, [pc, #224]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008da4:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d06b      	beq.n	8008e88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008db0:	4b32      	ldr	r3, [pc, #200]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x354>)
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	099b      	lsrs	r3, r3, #6
 8008db6:	2200      	movs	r2, #0
 8008db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008dbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8008dc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008dcc:	4622      	mov	r2, r4
 8008dce:	462b      	mov	r3, r5
 8008dd0:	f04f 0000 	mov.w	r0, #0
 8008dd4:	f04f 0100 	mov.w	r1, #0
 8008dd8:	0159      	lsls	r1, r3, #5
 8008dda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008dde:	0150      	lsls	r0, r2, #5
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4621      	mov	r1, r4
 8008de6:	1a51      	subs	r1, r2, r1
 8008de8:	61b9      	str	r1, [r7, #24]
 8008dea:	4629      	mov	r1, r5
 8008dec:	eb63 0301 	sbc.w	r3, r3, r1
 8008df0:	61fb      	str	r3, [r7, #28]
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008dfe:	4659      	mov	r1, fp
 8008e00:	018b      	lsls	r3, r1, #6
 8008e02:	4651      	mov	r1, sl
 8008e04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e08:	4651      	mov	r1, sl
 8008e0a:	018a      	lsls	r2, r1, #6
 8008e0c:	4651      	mov	r1, sl
 8008e0e:	ebb2 0801 	subs.w	r8, r2, r1
 8008e12:	4659      	mov	r1, fp
 8008e14:	eb63 0901 	sbc.w	r9, r3, r1
 8008e18:	f04f 0200 	mov.w	r2, #0
 8008e1c:	f04f 0300 	mov.w	r3, #0
 8008e20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e2c:	4690      	mov	r8, r2
 8008e2e:	4699      	mov	r9, r3
 8008e30:	4623      	mov	r3, r4
 8008e32:	eb18 0303 	adds.w	r3, r8, r3
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	462b      	mov	r3, r5
 8008e3a:	eb49 0303 	adc.w	r3, r9, r3
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	024b      	lsls	r3, r1, #9
 8008e50:	4621      	mov	r1, r4
 8008e52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e56:	4621      	mov	r1, r4
 8008e58:	024a      	lsls	r2, r1, #9
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e62:	2200      	movs	r2, #0
 8008e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008e68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e6c:	f7f7 fe6c 	bl	8000b48 <__aeabi_uldivmod>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4613      	mov	r3, r2
 8008e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e7a:	e065      	b.n	8008f48 <HAL_RCC_GetSysClockFreq+0x420>
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	00f42400 	.word	0x00f42400
 8008e84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e88:	4b3d      	ldr	r3, [pc, #244]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	099b      	lsrs	r3, r3, #6
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	4611      	mov	r1, r2
 8008e94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e98:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8008e9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	f04f 0000 	mov.w	r0, #0
 8008eaa:	f04f 0100 	mov.w	r1, #0
 8008eae:	0159      	lsls	r1, r3, #5
 8008eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008eb4:	0150      	lsls	r0, r2, #5
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4641      	mov	r1, r8
 8008ebc:	1a51      	subs	r1, r2, r1
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	f04f 0200 	mov.w	r2, #0
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	018b      	lsls	r3, r1, #6
 8008ed8:	4651      	mov	r1, sl
 8008eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ede:	4651      	mov	r1, sl
 8008ee0:	018a      	lsls	r2, r1, #6
 8008ee2:	4651      	mov	r1, sl
 8008ee4:	1a54      	subs	r4, r2, r1
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	eb63 0501 	sbc.w	r5, r3, r1
 8008eec:	f04f 0200 	mov.w	r2, #0
 8008ef0:	f04f 0300 	mov.w	r3, #0
 8008ef4:	00eb      	lsls	r3, r5, #3
 8008ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008efa:	00e2      	lsls	r2, r4, #3
 8008efc:	4614      	mov	r4, r2
 8008efe:	461d      	mov	r5, r3
 8008f00:	4643      	mov	r3, r8
 8008f02:	18e3      	adds	r3, r4, r3
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	464b      	mov	r3, r9
 8008f08:	eb45 0303 	adc.w	r3, r5, r3
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	f04f 0200 	mov.w	r2, #0
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	028b      	lsls	r3, r1, #10
 8008f1e:	4621      	mov	r1, r4
 8008f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f24:	4621      	mov	r1, r4
 8008f26:	028a      	lsls	r2, r1, #10
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f30:	2200      	movs	r2, #0
 8008f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f34:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008f36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f3a:	f7f7 fe05 	bl	8000b48 <__aeabi_uldivmod>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4613      	mov	r3, r2
 8008f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008f48:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x458>)
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	0f1b      	lsrs	r3, r3, #28
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f66:	e003      	b.n	8008f70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f68:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008f6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	37b8      	adds	r7, #184	; 0xb8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f7e:	bf00      	nop
 8008f80:	40023800 	.word	0x40023800
 8008f84:	00f42400 	.word	0x00f42400

08008f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e28d      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8083 	beq.w	80090ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008fa8:	4b94      	ldr	r3, [pc, #592]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f003 030c 	and.w	r3, r3, #12
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d019      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008fb4:	4b91      	ldr	r3, [pc, #580]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008fbc:	2b08      	cmp	r3, #8
 8008fbe:	d106      	bne.n	8008fce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008fc0:	4b8e      	ldr	r3, [pc, #568]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fcc:	d00c      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fce:	4b8b      	ldr	r3, [pc, #556]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008fd6:	2b0c      	cmp	r3, #12
 8008fd8:	d112      	bne.n	8009000 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fda:	4b88      	ldr	r3, [pc, #544]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fe6:	d10b      	bne.n	8009000 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fe8:	4b84      	ldr	r3, [pc, #528]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d05b      	beq.n	80090ac <HAL_RCC_OscConfig+0x124>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d157      	bne.n	80090ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e25a      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009008:	d106      	bne.n	8009018 <HAL_RCC_OscConfig+0x90>
 800900a:	4b7c      	ldr	r3, [pc, #496]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a7b      	ldr	r2, [pc, #492]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e01d      	b.n	8009054 <HAL_RCC_OscConfig+0xcc>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009020:	d10c      	bne.n	800903c <HAL_RCC_OscConfig+0xb4>
 8009022:	4b76      	ldr	r3, [pc, #472]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a75      	ldr	r2, [pc, #468]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	4b73      	ldr	r3, [pc, #460]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a72      	ldr	r2, [pc, #456]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	e00b      	b.n	8009054 <HAL_RCC_OscConfig+0xcc>
 800903c:	4b6f      	ldr	r3, [pc, #444]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a6e      	ldr	r2, [pc, #440]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	4b6c      	ldr	r3, [pc, #432]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a6b      	ldr	r2, [pc, #428]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800904e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d013      	beq.n	8009084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905c:	f7fd feb2 	bl	8006dc4 <HAL_GetTick>
 8009060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009062:	e008      	b.n	8009076 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009064:	f7fd feae 	bl	8006dc4 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b64      	cmp	r3, #100	; 0x64
 8009070:	d901      	bls.n	8009076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e21f      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009076:	4b61      	ldr	r3, [pc, #388]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0f0      	beq.n	8009064 <HAL_RCC_OscConfig+0xdc>
 8009082:	e014      	b.n	80090ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009084:	f7fd fe9e 	bl	8006dc4 <HAL_GetTick>
 8009088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800908a:	e008      	b.n	800909e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800908c:	f7fd fe9a 	bl	8006dc4 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b64      	cmp	r3, #100	; 0x64
 8009098:	d901      	bls.n	800909e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e20b      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800909e:	4b57      	ldr	r3, [pc, #348]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1f0      	bne.n	800908c <HAL_RCC_OscConfig+0x104>
 80090aa:	e000      	b.n	80090ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d06f      	beq.n	800919a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80090ba:	4b50      	ldr	r3, [pc, #320]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 030c 	and.w	r3, r3, #12
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d017      	beq.n	80090f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090c6:	4b4d      	ldr	r3, [pc, #308]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	d105      	bne.n	80090de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090d2:	4b4a      	ldr	r3, [pc, #296]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090de:	4b47      	ldr	r3, [pc, #284]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80090e6:	2b0c      	cmp	r3, #12
 80090e8:	d11c      	bne.n	8009124 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ea:	4b44      	ldr	r3, [pc, #272]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d116      	bne.n	8009124 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090f6:	4b41      	ldr	r3, [pc, #260]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d005      	beq.n	800910e <HAL_RCC_OscConfig+0x186>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d001      	beq.n	800910e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e1d3      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800910e:	4b3b      	ldr	r3, [pc, #236]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	4937      	ldr	r1, [pc, #220]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800911e:	4313      	orrs	r3, r2
 8009120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009122:	e03a      	b.n	800919a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d020      	beq.n	800916e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800912c:	4b34      	ldr	r3, [pc, #208]	; (8009200 <HAL_RCC_OscConfig+0x278>)
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009132:	f7fd fe47 	bl	8006dc4 <HAL_GetTick>
 8009136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009138:	e008      	b.n	800914c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800913a:	f7fd fe43 	bl	8006dc4 <HAL_GetTick>
 800913e:	4602      	mov	r2, r0
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	1ad3      	subs	r3, r2, r3
 8009144:	2b02      	cmp	r3, #2
 8009146:	d901      	bls.n	800914c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e1b4      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800914c:	4b2b      	ldr	r3, [pc, #172]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0f0      	beq.n	800913a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009158:	4b28      	ldr	r3, [pc, #160]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	4925      	ldr	r1, [pc, #148]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009168:	4313      	orrs	r3, r2
 800916a:	600b      	str	r3, [r1, #0]
 800916c:	e015      	b.n	800919a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800916e:	4b24      	ldr	r3, [pc, #144]	; (8009200 <HAL_RCC_OscConfig+0x278>)
 8009170:	2200      	movs	r2, #0
 8009172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009174:	f7fd fe26 	bl	8006dc4 <HAL_GetTick>
 8009178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800917a:	e008      	b.n	800918e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800917c:	f7fd fe22 	bl	8006dc4 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d901      	bls.n	800918e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	e193      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800918e:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1f0      	bne.n	800917c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0308 	and.w	r3, r3, #8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d036      	beq.n	8009214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d016      	beq.n	80091dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ae:	4b15      	ldr	r3, [pc, #84]	; (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091b4:	f7fd fe06 	bl	8006dc4 <HAL_GetTick>
 80091b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ba:	e008      	b.n	80091ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091bc:	f7fd fe02 	bl	8006dc4 <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e173      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091ce:	4b0b      	ldr	r3, [pc, #44]	; (80091fc <HAL_RCC_OscConfig+0x274>)
 80091d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0f0      	beq.n	80091bc <HAL_RCC_OscConfig+0x234>
 80091da:	e01b      	b.n	8009214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <HAL_RCC_OscConfig+0x27c>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091e2:	f7fd fdef 	bl	8006dc4 <HAL_GetTick>
 80091e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091e8:	e00e      	b.n	8009208 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091ea:	f7fd fdeb 	bl	8006dc4 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d907      	bls.n	8009208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e15c      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
 80091fc:	40023800 	.word	0x40023800
 8009200:	42470000 	.word	0x42470000
 8009204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009208:	4b8a      	ldr	r3, [pc, #552]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800920a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1ea      	bne.n	80091ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0304 	and.w	r3, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8097 	beq.w	8009350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009226:	4b83      	ldr	r3, [pc, #524]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10f      	bne.n	8009252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009232:	2300      	movs	r3, #0
 8009234:	60bb      	str	r3, [r7, #8]
 8009236:	4b7f      	ldr	r3, [pc, #508]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923a:	4a7e      	ldr	r2, [pc, #504]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800923c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009240:	6413      	str	r3, [r2, #64]	; 0x40
 8009242:	4b7c      	ldr	r3, [pc, #496]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800924a:	60bb      	str	r3, [r7, #8]
 800924c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800924e:	2301      	movs	r3, #1
 8009250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009252:	4b79      	ldr	r3, [pc, #484]	; (8009438 <HAL_RCC_OscConfig+0x4b0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925a:	2b00      	cmp	r3, #0
 800925c:	d118      	bne.n	8009290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800925e:	4b76      	ldr	r3, [pc, #472]	; (8009438 <HAL_RCC_OscConfig+0x4b0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a75      	ldr	r2, [pc, #468]	; (8009438 <HAL_RCC_OscConfig+0x4b0>)
 8009264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800926a:	f7fd fdab 	bl	8006dc4 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009270:	e008      	b.n	8009284 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009272:	f7fd fda7 	bl	8006dc4 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d901      	bls.n	8009284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e118      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009284:	4b6c      	ldr	r3, [pc, #432]	; (8009438 <HAL_RCC_OscConfig+0x4b0>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0f0      	beq.n	8009272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d106      	bne.n	80092a6 <HAL_RCC_OscConfig+0x31e>
 8009298:	4b66      	ldr	r3, [pc, #408]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800929a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929c:	4a65      	ldr	r2, [pc, #404]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	6713      	str	r3, [r2, #112]	; 0x70
 80092a4:	e01c      	b.n	80092e0 <HAL_RCC_OscConfig+0x358>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	d10c      	bne.n	80092c8 <HAL_RCC_OscConfig+0x340>
 80092ae:	4b61      	ldr	r3, [pc, #388]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	4a60      	ldr	r2, [pc, #384]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092b4:	f043 0304 	orr.w	r3, r3, #4
 80092b8:	6713      	str	r3, [r2, #112]	; 0x70
 80092ba:	4b5e      	ldr	r3, [pc, #376]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092be:	4a5d      	ldr	r2, [pc, #372]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	6713      	str	r3, [r2, #112]	; 0x70
 80092c6:	e00b      	b.n	80092e0 <HAL_RCC_OscConfig+0x358>
 80092c8:	4b5a      	ldr	r3, [pc, #360]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092cc:	4a59      	ldr	r2, [pc, #356]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	6713      	str	r3, [r2, #112]	; 0x70
 80092d4:	4b57      	ldr	r3, [pc, #348]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	4a56      	ldr	r2, [pc, #344]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80092da:	f023 0304 	bic.w	r3, r3, #4
 80092de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d015      	beq.n	8009314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e8:	f7fd fd6c 	bl	8006dc4 <HAL_GetTick>
 80092ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092ee:	e00a      	b.n	8009306 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092f0:	f7fd fd68 	bl	8006dc4 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fe:	4293      	cmp	r3, r2
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e0d7      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009306:	4b4b      	ldr	r3, [pc, #300]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0ee      	beq.n	80092f0 <HAL_RCC_OscConfig+0x368>
 8009312:	e014      	b.n	800933e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009314:	f7fd fd56 	bl	8006dc4 <HAL_GetTick>
 8009318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800931a:	e00a      	b.n	8009332 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800931c:	f7fd fd52 	bl	8006dc4 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	f241 3288 	movw	r2, #5000	; 0x1388
 800932a:	4293      	cmp	r3, r2
 800932c:	d901      	bls.n	8009332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800932e:	2303      	movs	r3, #3
 8009330:	e0c1      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009332:	4b40      	ldr	r3, [pc, #256]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1ee      	bne.n	800931c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d105      	bne.n	8009350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009344:	4b3b      	ldr	r3, [pc, #236]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	4a3a      	ldr	r2, [pc, #232]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800934a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800934e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80ad 	beq.w	80094b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800935a:	4b36      	ldr	r3, [pc, #216]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 030c 	and.w	r3, r3, #12
 8009362:	2b08      	cmp	r3, #8
 8009364:	d060      	beq.n	8009428 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	2b02      	cmp	r3, #2
 800936c:	d145      	bne.n	80093fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800936e:	4b33      	ldr	r3, [pc, #204]	; (800943c <HAL_RCC_OscConfig+0x4b4>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fd fd26 	bl	8006dc4 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800937c:	f7fd fd22 	bl	8006dc4 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e093      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800938e:	4b29      	ldr	r3, [pc, #164]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f0      	bne.n	800937c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	69da      	ldr	r2, [r3, #28]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	431a      	orrs	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	019b      	lsls	r3, r3, #6
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b0:	085b      	lsrs	r3, r3, #1
 80093b2:	3b01      	subs	r3, #1
 80093b4:	041b      	lsls	r3, r3, #16
 80093b6:	431a      	orrs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	061b      	lsls	r3, r3, #24
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c4:	071b      	lsls	r3, r3, #28
 80093c6:	491b      	ldr	r1, [pc, #108]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093cc:	4b1b      	ldr	r3, [pc, #108]	; (800943c <HAL_RCC_OscConfig+0x4b4>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d2:	f7fd fcf7 	bl	8006dc4 <HAL_GetTick>
 80093d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093d8:	e008      	b.n	80093ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093da:	f7fd fcf3 	bl	8006dc4 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e064      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0f0      	beq.n	80093da <HAL_RCC_OscConfig+0x452>
 80093f8:	e05c      	b.n	80094b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093fa:	4b10      	ldr	r3, [pc, #64]	; (800943c <HAL_RCC_OscConfig+0x4b4>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009400:	f7fd fce0 	bl	8006dc4 <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009408:	f7fd fcdc 	bl	8006dc4 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e04d      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <HAL_RCC_OscConfig+0x4ac>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0x480>
 8009426:	e045      	b.n	80094b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e040      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
 8009434:	40023800 	.word	0x40023800
 8009438:	40007000 	.word	0x40007000
 800943c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009440:	4b1f      	ldr	r3, [pc, #124]	; (80094c0 <HAL_RCC_OscConfig+0x538>)
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d030      	beq.n	80094b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009458:	429a      	cmp	r2, r3
 800945a:	d129      	bne.n	80094b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009466:	429a      	cmp	r2, r3
 8009468:	d122      	bne.n	80094b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009470:	4013      	ands	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009478:	4293      	cmp	r3, r2
 800947a:	d119      	bne.n	80094b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	3b01      	subs	r3, #1
 800948a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d10f      	bne.n	80094b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800949c:	429a      	cmp	r2, r3
 800949e:	d107      	bne.n	80094b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d001      	beq.n	80094b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e000      	b.n	80094b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3718      	adds	r7, #24
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	40023800 	.word	0x40023800

080094c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e07b      	b.n	80095ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e6:	d009      	beq.n	80094fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	61da      	str	r2, [r3, #28]
 80094ee:	e005      	b.n	80094fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fc ffd0 	bl	80064bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	431a      	orrs	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	ea42 0103 	orr.w	r1, r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	0c1b      	lsrs	r3, r3, #16
 800959a:	f003 0104 	and.w	r1, r3, #4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	f003 0210 	and.w	r2, r3, #16
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b08c      	sub	sp, #48	; 0x30
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095e4:	2301      	movs	r3, #1
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x26>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e198      	b.n	800992e <HAL_SPI_TransmitReceive+0x358>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009604:	f7fd fbde 	bl	8006dc4 <HAL_GetTick>
 8009608:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800961a:	887b      	ldrh	r3, [r7, #2]
 800961c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800961e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009622:	2b01      	cmp	r3, #1
 8009624:	d00f      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x70>
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800962c:	d107      	bne.n	800963e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d103      	bne.n	800963e <HAL_SPI_TransmitReceive+0x68>
 8009636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800963a:	2b04      	cmp	r3, #4
 800963c:	d003      	beq.n	8009646 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800963e:	2302      	movs	r3, #2
 8009640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009644:	e16d      	b.n	8009922 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_SPI_TransmitReceive+0x82>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <HAL_SPI_TransmitReceive+0x82>
 8009652:	887b      	ldrh	r3, [r7, #2]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800965e:	e160      	b.n	8009922 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009666:	b2db      	uxtb	r3, r3
 8009668:	2b04      	cmp	r3, #4
 800966a:	d003      	beq.n	8009674 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2205      	movs	r2, #5
 8009670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2200      	movs	r2, #0
 8009678:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	887a      	ldrh	r2, [r7, #2]
 8009684:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	887a      	ldrh	r2, [r7, #2]
 800968a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	887a      	ldrh	r2, [r7, #2]
 8009696:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	887a      	ldrh	r2, [r7, #2]
 800969c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b4:	2b40      	cmp	r3, #64	; 0x40
 80096b6:	d007      	beq.n	80096c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096d0:	d17c      	bne.n	80097cc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <HAL_SPI_TransmitReceive+0x10a>
 80096da:	8b7b      	ldrh	r3, [r7, #26]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d16a      	bne.n	80097b6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	881a      	ldrh	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	1c9a      	adds	r2, r3, #2
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	3b01      	subs	r3, #1
 80096fe:	b29a      	uxth	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009704:	e057      	b.n	80097b6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b02      	cmp	r3, #2
 8009712:	d11b      	bne.n	800974c <HAL_SPI_TransmitReceive+0x176>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d016      	beq.n	800974c <HAL_SPI_TransmitReceive+0x176>
 800971e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009720:	2b01      	cmp	r3, #1
 8009722:	d113      	bne.n	800974c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	881a      	ldrh	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009734:	1c9a      	adds	r2, r3, #2
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800973e:	b29b      	uxth	r3, r3
 8009740:	3b01      	subs	r3, #1
 8009742:	b29a      	uxth	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b01      	cmp	r3, #1
 8009758:	d119      	bne.n	800978e <HAL_SPI_TransmitReceive+0x1b8>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800975e:	b29b      	uxth	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d014      	beq.n	800978e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	b292      	uxth	r2, r2
 8009770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	1c9a      	adds	r2, r3, #2
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800978a:	2301      	movs	r3, #1
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800978e:	f7fd fb19 	bl	8006dc4 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800979a:	429a      	cmp	r2, r3
 800979c:	d80b      	bhi.n	80097b6 <HAL_SPI_TransmitReceive+0x1e0>
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097a4:	d007      	beq.n	80097b6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80097b4:	e0b5      	b.n	8009922 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1a2      	bne.n	8009706 <HAL_SPI_TransmitReceive+0x130>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d19d      	bne.n	8009706 <HAL_SPI_TransmitReceive+0x130>
 80097ca:	e080      	b.n	80098ce <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <HAL_SPI_TransmitReceive+0x204>
 80097d4:	8b7b      	ldrh	r3, [r7, #26]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d16f      	bne.n	80098ba <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	330c      	adds	r3, #12
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009800:	e05b      	b.n	80098ba <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b02      	cmp	r3, #2
 800980e:	d11c      	bne.n	800984a <HAL_SPI_TransmitReceive+0x274>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009814:	b29b      	uxth	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d017      	beq.n	800984a <HAL_SPI_TransmitReceive+0x274>
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	2b01      	cmp	r3, #1
 800981e:	d114      	bne.n	800984a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	330c      	adds	r3, #12
 800982a:	7812      	ldrb	r2, [r2, #0]
 800982c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b01      	cmp	r3, #1
 8009856:	d119      	bne.n	800988c <HAL_SPI_TransmitReceive+0x2b6>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	d014      	beq.n	800988c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009888:	2301      	movs	r3, #1
 800988a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800988c:	f7fd fa9a 	bl	8006dc4 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009898:	429a      	cmp	r2, r3
 800989a:	d803      	bhi.n	80098a4 <HAL_SPI_TransmitReceive+0x2ce>
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098a2:	d102      	bne.n	80098aa <HAL_SPI_TransmitReceive+0x2d4>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d107      	bne.n	80098ba <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80098b8:	e033      	b.n	8009922 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098be:	b29b      	uxth	r3, r3
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d19e      	bne.n	8009802 <HAL_SPI_TransmitReceive+0x22c>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d199      	bne.n	8009802 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f8b8 	bl	8009a48 <SPI_EndRxTxTransaction>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d006      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098ea:	e01a      	b.n	8009922 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098f4:	2300      	movs	r3, #0
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009918:	e003      	b.n	8009922 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800992a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800992e:	4618      	mov	r0, r3
 8009930:	3730      	adds	r7, #48	; 0x30
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b088      	sub	sp, #32
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	603b      	str	r3, [r7, #0]
 8009944:	4613      	mov	r3, r2
 8009946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009948:	f7fd fa3c 	bl	8006dc4 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	4413      	add	r3, r2
 8009956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009958:	f7fd fa34 	bl	8006dc4 <HAL_GetTick>
 800995c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800995e:	4b39      	ldr	r3, [pc, #228]	; (8009a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	015b      	lsls	r3, r3, #5
 8009964:	0d1b      	lsrs	r3, r3, #20
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	fb02 f303 	mul.w	r3, r2, r3
 800996c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800996e:	e054      	b.n	8009a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009976:	d050      	beq.n	8009a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009978:	f7fd fa24 	bl	8006dc4 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	429a      	cmp	r2, r3
 8009986:	d902      	bls.n	800998e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d13d      	bne.n	8009a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800999c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099a6:	d111      	bne.n	80099cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b0:	d004      	beq.n	80099bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ba:	d107      	bne.n	80099cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d4:	d10f      	bne.n	80099f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e017      	b.n	8009a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4013      	ands	r3, r2
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	bf0c      	ite	eq
 8009a2a:	2301      	moveq	r3, #1
 8009a2c:	2300      	movne	r3, #0
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	461a      	mov	r2, r3
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d19b      	bne.n	8009970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000014 	.word	0x20000014

08009a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff ff6a 	bl	8009938 <SPI_WaitFlagStateUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6e:	f043 0220 	orr.w	r2, r3, #32
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e032      	b.n	8009ae0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ae8 <SPI_EndRxTxTransaction+0xa0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a1b      	ldr	r2, [pc, #108]	; (8009aec <SPI_EndRxTxTransaction+0xa4>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	0d5b      	lsrs	r3, r3, #21
 8009a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a8a:	fb02 f303 	mul.w	r3, r2, r3
 8009a8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a98:	d112      	bne.n	8009ac0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2180      	movs	r1, #128	; 0x80
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff ff47 	bl	8009938 <SPI_WaitFlagStateUntilTimeout>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d016      	beq.n	8009ade <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab4:	f043 0220 	orr.w	r2, r3, #32
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e00f      	b.n	8009ae0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00a      	beq.n	8009adc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad6:	2b80      	cmp	r3, #128	; 0x80
 8009ad8:	d0f2      	beq.n	8009ac0 <SPI_EndRxTxTransaction+0x78>
 8009ada:	e000      	b.n	8009ade <SPI_EndRxTxTransaction+0x96>
        break;
 8009adc:	bf00      	nop
  }

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3718      	adds	r7, #24
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20000014 	.word	0x20000014
 8009aec:	165e9f81 	.word	0x165e9f81

08009af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e041      	b.n	8009b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d106      	bne.n	8009b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7fc fd2a 	bl	8006570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	4610      	mov	r0, r2
 8009b30:	f000 fe8c 	bl	800a84c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d001      	beq.n	8009ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e04e      	b.n	8009c46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f042 0201 	orr.w	r2, r2, #1
 8009bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a23      	ldr	r2, [pc, #140]	; (8009c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d022      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd2:	d01d      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1f      	ldr	r2, [pc, #124]	; (8009c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d018      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a1e      	ldr	r2, [pc, #120]	; (8009c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d013      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a1c      	ldr	r2, [pc, #112]	; (8009c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d00e      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1b      	ldr	r2, [pc, #108]	; (8009c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d009      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a19      	ldr	r2, [pc, #100]	; (8009c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d004      	beq.n	8009c10 <HAL_TIM_Base_Start_IT+0x80>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a18      	ldr	r2, [pc, #96]	; (8009c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d111      	bne.n	8009c34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b06      	cmp	r3, #6
 8009c20:	d010      	beq.n	8009c44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f042 0201 	orr.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c32:	e007      	b.n	8009c44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 0201 	orr.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	40010000 	.word	0x40010000
 8009c58:	40000400 	.word	0x40000400
 8009c5c:	40000800 	.word	0x40000800
 8009c60:	40000c00 	.word	0x40000c00
 8009c64:	40010400 	.word	0x40010400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	40001800 	.word	0x40001800

08009c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e041      	b.n	8009d06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f839 	bl	8009d0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4619      	mov	r1, r3
 8009cae:	4610      	mov	r0, r2
 8009cb0:	f000 fdcc 	bl	800a84c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b083      	sub	sp, #12
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d16:	bf00      	nop
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr
	...

08009d24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <HAL_TIM_PWM_Start+0x24>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	bf14      	ite	ne
 8009d40:	2301      	movne	r3, #1
 8009d42:	2300      	moveq	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	e022      	b.n	8009d8e <HAL_TIM_PWM_Start+0x6a>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	d109      	bne.n	8009d62 <HAL_TIM_PWM_Start+0x3e>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	bf14      	ite	ne
 8009d5a:	2301      	movne	r3, #1
 8009d5c:	2300      	moveq	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	e015      	b.n	8009d8e <HAL_TIM_PWM_Start+0x6a>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d109      	bne.n	8009d7c <HAL_TIM_PWM_Start+0x58>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	bf14      	ite	ne
 8009d74:	2301      	movne	r3, #1
 8009d76:	2300      	moveq	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	e008      	b.n	8009d8e <HAL_TIM_PWM_Start+0x6a>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	bf14      	ite	ne
 8009d88:	2301      	movne	r3, #1
 8009d8a:	2300      	moveq	r3, #0
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e07c      	b.n	8009e90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d104      	bne.n	8009da6 <HAL_TIM_PWM_Start+0x82>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009da4:	e013      	b.n	8009dce <HAL_TIM_PWM_Start+0xaa>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d104      	bne.n	8009db6 <HAL_TIM_PWM_Start+0x92>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009db4:	e00b      	b.n	8009dce <HAL_TIM_PWM_Start+0xaa>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b08      	cmp	r3, #8
 8009dba:	d104      	bne.n	8009dc6 <HAL_TIM_PWM_Start+0xa2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dc4:	e003      	b.n	8009dce <HAL_TIM_PWM_Start+0xaa>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 f958 	bl	800b08c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a2d      	ldr	r2, [pc, #180]	; (8009e98 <HAL_TIM_PWM_Start+0x174>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d004      	beq.n	8009df0 <HAL_TIM_PWM_Start+0xcc>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a2c      	ldr	r2, [pc, #176]	; (8009e9c <HAL_TIM_PWM_Start+0x178>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d101      	bne.n	8009df4 <HAL_TIM_PWM_Start+0xd0>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <HAL_TIM_PWM_Start+0xd2>
 8009df4:	2300      	movs	r3, #0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d007      	beq.n	8009e0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a22      	ldr	r2, [pc, #136]	; (8009e98 <HAL_TIM_PWM_Start+0x174>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d022      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e1c:	d01d      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <HAL_TIM_PWM_Start+0x17c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d018      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ea4 <HAL_TIM_PWM_Start+0x180>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d013      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a1c      	ldr	r2, [pc, #112]	; (8009ea8 <HAL_TIM_PWM_Start+0x184>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d00e      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <HAL_TIM_PWM_Start+0x178>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d009      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a18      	ldr	r2, [pc, #96]	; (8009eac <HAL_TIM_PWM_Start+0x188>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d004      	beq.n	8009e5a <HAL_TIM_PWM_Start+0x136>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a16      	ldr	r2, [pc, #88]	; (8009eb0 <HAL_TIM_PWM_Start+0x18c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d111      	bne.n	8009e7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b06      	cmp	r3, #6
 8009e6a:	d010      	beq.n	8009e8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0201 	orr.w	r2, r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e7c:	e007      	b.n	8009e8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f042 0201 	orr.w	r2, r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	40010000 	.word	0x40010000
 8009e9c:	40010400 	.word	0x40010400
 8009ea0:	40000400 	.word	0x40000400
 8009ea4:	40000800 	.word	0x40000800
 8009ea8:	40000c00 	.word	0x40000c00
 8009eac:	40014000 	.word	0x40014000
 8009eb0:	40001800 	.word	0x40001800

08009eb4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e041      	b.n	8009f4a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d106      	bne.n	8009ee0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f839 	bl	8009f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3304      	adds	r3, #4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f000 fcaa 	bl	800a84c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3708      	adds	r7, #8
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b086      	sub	sp, #24
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e097      	b.n	800a0aa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7fc fb62 	bl	8006658 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009faa:	f023 0307 	bic.w	r3, r3, #7
 8009fae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f000 fc46 	bl	800a84c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe8:	f023 0303 	bic.w	r3, r3, #3
 8009fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	021b      	lsls	r3, r3, #8
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a006:	f023 030c 	bic.w	r3, r3, #12
 800a00a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68da      	ldr	r2, [r3, #12]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	021b      	lsls	r3, r3, #8
 800a022:	4313      	orrs	r3, r2
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	011a      	lsls	r2, r3, #4
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	031b      	lsls	r3, r3, #12
 800a036:	4313      	orrs	r3, r2
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a044:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a04c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	695b      	ldr	r3, [r3, #20]
 800a056:	011b      	lsls	r3, r3, #4
 800a058:	4313      	orrs	r3, r2
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0c2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0d2:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0da:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d110      	bne.n	800a104 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d102      	bne.n	800a0ee <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a0e8:	7b7b      	ldrb	r3, [r7, #13]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d001      	beq.n	800a0f2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e069      	b.n	800a1c6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a102:	e031      	b.n	800a168 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b04      	cmp	r3, #4
 800a108:	d110      	bne.n	800a12c <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d102      	bne.n	800a116 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a110:	7b3b      	ldrb	r3, [r7, #12]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d001      	beq.n	800a11a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	e055      	b.n	800a1c6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2202      	movs	r2, #2
 800a126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a12a:	e01d      	b.n	800a168 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d108      	bne.n	800a144 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d105      	bne.n	800a144 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a138:	7b7b      	ldrb	r3, [r7, #13]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d102      	bne.n	800a144 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a13e:	7b3b      	ldrb	r3, [r7, #12]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d001      	beq.n	800a148 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e03e      	b.n	800a1c6 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d003      	beq.n	800a176 <HAL_TIM_Encoder_Start+0xc4>
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2b04      	cmp	r3, #4
 800a172:	d008      	beq.n	800a186 <HAL_TIM_Encoder_Start+0xd4>
 800a174:	e00f      	b.n	800a196 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2201      	movs	r2, #1
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 ff84 	bl	800b08c <TIM_CCxChannelCmd>
      break;
 800a184:	e016      	b.n	800a1b4 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2201      	movs	r2, #1
 800a18c:	2104      	movs	r1, #4
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 ff7c 	bl	800b08c <TIM_CCxChannelCmd>
      break;
 800a194:	e00e      	b.n	800a1b4 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2201      	movs	r2, #1
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 ff74 	bl	800b08c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	2104      	movs	r1, #4
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 ff6d 	bl	800b08c <TIM_CCxChannelCmd>
      break;
 800a1b2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f042 0201 	orr.w	r2, r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d020      	beq.n	800a232 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d01b      	beq.n	800a232 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f06f 0202 	mvn.w	r2, #2
 800a202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	f003 0303 	and.w	r3, r3, #3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d003      	beq.n	800a220 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 faf8 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a21e:	e005      	b.n	800a22c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 faea 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 fafb 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d020      	beq.n	800a27e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b00      	cmp	r3, #0
 800a244:	d01b      	beq.n	800a27e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f06f 0204 	mvn.w	r2, #4
 800a24e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fad2 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a26a:	e005      	b.n	800a278 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fac4 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fad5 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f003 0308 	and.w	r3, r3, #8
 800a284:	2b00      	cmp	r3, #0
 800a286:	d020      	beq.n	800a2ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01b      	beq.n	800a2ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f06f 0208 	mvn.w	r2, #8
 800a29a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69db      	ldr	r3, [r3, #28]
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 faac 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a2b6:	e005      	b.n	800a2c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa9e 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 faaf 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f003 0310 	and.w	r3, r3, #16
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d020      	beq.n	800a316 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f003 0310 	and.w	r3, r3, #16
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d01b      	beq.n	800a316 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f06f 0210 	mvn.w	r2, #16
 800a2e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d003      	beq.n	800a304 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fa86 	bl	800a80e <HAL_TIM_IC_CaptureCallback>
 800a302:	e005      	b.n	800a310 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa78 	bl	800a7fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fa89 	bl	800a822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00c      	beq.n	800a33a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b00      	cmp	r3, #0
 800a328:	d007      	beq.n	800a33a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f06f 0201 	mvn.w	r2, #1
 800a332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7f8 ffed 	bl	8003314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00c      	beq.n	800a35e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d007      	beq.n	800a35e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 ff95 	bl	800b288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00c      	beq.n	800a382 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a37a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa5a 	bl	800a836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00c      	beq.n	800a3a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d007      	beq.n	800a3a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f06f 0220 	mvn.w	r2, #32
 800a39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 ff67 	bl	800b274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b086      	sub	sp, #24
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d101      	bne.n	800a3cc <HAL_TIM_IC_ConfigChannel+0x1e>
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e088      	b.n	800a4de <HAL_TIM_IC_ConfigChannel+0x130>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d11b      	bne.n	800a412 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a3ea:	f000 fc8b 	bl	800ad04 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	699a      	ldr	r2, [r3, #24]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f022 020c 	bic.w	r2, r2, #12
 800a3fc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6999      	ldr	r1, [r3, #24]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	689a      	ldr	r2, [r3, #8]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	619a      	str	r2, [r3, #24]
 800a410:	e060      	b.n	800a4d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b04      	cmp	r3, #4
 800a416:	d11c      	bne.n	800a452 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a428:	f000 fd0f 	bl	800ae4a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a43a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6999      	ldr	r1, [r3, #24]
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	021a      	lsls	r2, r3, #8
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	619a      	str	r2, [r3, #24]
 800a450:	e040      	b.n	800a4d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b08      	cmp	r3, #8
 800a456:	d11b      	bne.n	800a490 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a468:	f000 fd5c 	bl	800af24 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	69da      	ldr	r2, [r3, #28]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 020c 	bic.w	r2, r2, #12
 800a47a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	69d9      	ldr	r1, [r3, #28]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	61da      	str	r2, [r3, #28]
 800a48e:	e021      	b.n	800a4d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b0c      	cmp	r3, #12
 800a494:	d11c      	bne.n	800a4d0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a4a6:	f000 fd79 	bl	800af9c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	69da      	ldr	r2, [r3, #28]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a4b8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69d9      	ldr	r1, [r3, #28]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	021a      	lsls	r2, r3, #8
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	61da      	str	r2, [r3, #28]
 800a4ce:	e001      	b.n	800a4d4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3718      	adds	r7, #24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d101      	bne.n	800a506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a502:	2302      	movs	r3, #2
 800a504:	e0ae      	b.n	800a664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b0c      	cmp	r3, #12
 800a512:	f200 809f 	bhi.w	800a654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a516:	a201      	add	r2, pc, #4	; (adr r2, 800a51c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a51c:	0800a551 	.word	0x0800a551
 800a520:	0800a655 	.word	0x0800a655
 800a524:	0800a655 	.word	0x0800a655
 800a528:	0800a655 	.word	0x0800a655
 800a52c:	0800a591 	.word	0x0800a591
 800a530:	0800a655 	.word	0x0800a655
 800a534:	0800a655 	.word	0x0800a655
 800a538:	0800a655 	.word	0x0800a655
 800a53c:	0800a5d3 	.word	0x0800a5d3
 800a540:	0800a655 	.word	0x0800a655
 800a544:	0800a655 	.word	0x0800a655
 800a548:	0800a655 	.word	0x0800a655
 800a54c:	0800a613 	.word	0x0800a613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68b9      	ldr	r1, [r7, #8]
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fa24 	bl	800a9a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699a      	ldr	r2, [r3, #24]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f042 0208 	orr.w	r2, r2, #8
 800a56a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	699a      	ldr	r2, [r3, #24]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0204 	bic.w	r2, r2, #4
 800a57a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6999      	ldr	r1, [r3, #24]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	691a      	ldr	r2, [r3, #16]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	619a      	str	r2, [r3, #24]
      break;
 800a58e:	e064      	b.n	800a65a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fa74 	bl	800aa84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699a      	ldr	r2, [r3, #24]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6999      	ldr	r1, [r3, #24]
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	021a      	lsls	r2, r3, #8
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	619a      	str	r2, [r3, #24]
      break;
 800a5d0:	e043      	b.n	800a65a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 fac9 	bl	800ab70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	69da      	ldr	r2, [r3, #28]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f042 0208 	orr.w	r2, r2, #8
 800a5ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	69da      	ldr	r2, [r3, #28]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0204 	bic.w	r2, r2, #4
 800a5fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69d9      	ldr	r1, [r3, #28]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	691a      	ldr	r2, [r3, #16]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	61da      	str	r2, [r3, #28]
      break;
 800a610:	e023      	b.n	800a65a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68b9      	ldr	r1, [r7, #8]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fb1d 	bl	800ac58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	69da      	ldr	r2, [r3, #28]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a62c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	69da      	ldr	r2, [r3, #28]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a63c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69d9      	ldr	r1, [r3, #28]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	021a      	lsls	r2, r3, #8
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	430a      	orrs	r2, r1
 800a650:	61da      	str	r2, [r3, #28]
      break;
 800a652:	e002      	b.n	800a65a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]
      break;
 800a658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_TIM_ConfigClockSource+0x1c>
 800a684:	2302      	movs	r3, #2
 800a686:	e0b4      	b.n	800a7f2 <HAL_TIM_ConfigClockSource+0x186>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a6a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c0:	d03e      	beq.n	800a740 <HAL_TIM_ConfigClockSource+0xd4>
 800a6c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c6:	f200 8087 	bhi.w	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ce:	f000 8086 	beq.w	800a7de <HAL_TIM_ConfigClockSource+0x172>
 800a6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d6:	d87f      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d8:	2b70      	cmp	r3, #112	; 0x70
 800a6da:	d01a      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0xa6>
 800a6dc:	2b70      	cmp	r3, #112	; 0x70
 800a6de:	d87b      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e0:	2b60      	cmp	r3, #96	; 0x60
 800a6e2:	d050      	beq.n	800a786 <HAL_TIM_ConfigClockSource+0x11a>
 800a6e4:	2b60      	cmp	r3, #96	; 0x60
 800a6e6:	d877      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6e8:	2b50      	cmp	r3, #80	; 0x50
 800a6ea:	d03c      	beq.n	800a766 <HAL_TIM_ConfigClockSource+0xfa>
 800a6ec:	2b50      	cmp	r3, #80	; 0x50
 800a6ee:	d873      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f0:	2b40      	cmp	r3, #64	; 0x40
 800a6f2:	d058      	beq.n	800a7a6 <HAL_TIM_ConfigClockSource+0x13a>
 800a6f4:	2b40      	cmp	r3, #64	; 0x40
 800a6f6:	d86f      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a6f8:	2b30      	cmp	r3, #48	; 0x30
 800a6fa:	d064      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a6fc:	2b30      	cmp	r3, #48	; 0x30
 800a6fe:	d86b      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a700:	2b20      	cmp	r3, #32
 800a702:	d060      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a704:	2b20      	cmp	r3, #32
 800a706:	d867      	bhi.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d05c      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a70c:	2b10      	cmp	r3, #16
 800a70e:	d05a      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0x15a>
 800a710:	e062      	b.n	800a7d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a722:	f000 fc93 	bl	800b04c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	609a      	str	r2, [r3, #8]
      break;
 800a73e:	e04f      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a750:	f000 fc7c 	bl	800b04c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689a      	ldr	r2, [r3, #8]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a762:	609a      	str	r2, [r3, #8]
      break;
 800a764:	e03c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a772:	461a      	mov	r2, r3
 800a774:	f000 fb3a 	bl	800adec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2150      	movs	r1, #80	; 0x50
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fc49 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a784:	e02c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a792:	461a      	mov	r2, r3
 800a794:	f000 fb96 	bl	800aec4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2160      	movs	r1, #96	; 0x60
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fc39 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a7a4:	e01c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	f000 fb1a 	bl	800adec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2140      	movs	r1, #64	; 0x40
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fc29 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a7c4:	e00c      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4610      	mov	r0, r2
 800a7d2:	f000 fc20 	bl	800b016 <TIM_ITRx_SetConfig>
      break;
 800a7d6:	e003      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
      break;
 800a7dc:	e000      	b.n	800a7e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a7de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a802:	bf00      	nop
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
	...

0800a84c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a46      	ldr	r2, [pc, #280]	; (800a978 <TIM_Base_SetConfig+0x12c>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d013      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a86a:	d00f      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a43      	ldr	r2, [pc, #268]	; (800a97c <TIM_Base_SetConfig+0x130>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d00b      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a42      	ldr	r2, [pc, #264]	; (800a980 <TIM_Base_SetConfig+0x134>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d007      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a41      	ldr	r2, [pc, #260]	; (800a984 <TIM_Base_SetConfig+0x138>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d003      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a40      	ldr	r2, [pc, #256]	; (800a988 <TIM_Base_SetConfig+0x13c>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a35      	ldr	r2, [pc, #212]	; (800a978 <TIM_Base_SetConfig+0x12c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d02b      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ac:	d027      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a32      	ldr	r2, [pc, #200]	; (800a97c <TIM_Base_SetConfig+0x130>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d023      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a31      	ldr	r2, [pc, #196]	; (800a980 <TIM_Base_SetConfig+0x134>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d01f      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a30      	ldr	r2, [pc, #192]	; (800a984 <TIM_Base_SetConfig+0x138>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d01b      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a2f      	ldr	r2, [pc, #188]	; (800a988 <TIM_Base_SetConfig+0x13c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d017      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a2e      	ldr	r2, [pc, #184]	; (800a98c <TIM_Base_SetConfig+0x140>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d013      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a2d      	ldr	r2, [pc, #180]	; (800a990 <TIM_Base_SetConfig+0x144>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d00f      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a2c      	ldr	r2, [pc, #176]	; (800a994 <TIM_Base_SetConfig+0x148>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d00b      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a2b      	ldr	r2, [pc, #172]	; (800a998 <TIM_Base_SetConfig+0x14c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d007      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a2a      	ldr	r2, [pc, #168]	; (800a99c <TIM_Base_SetConfig+0x150>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d003      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a29      	ldr	r2, [pc, #164]	; (800a9a0 <TIM_Base_SetConfig+0x154>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d108      	bne.n	800a910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a10      	ldr	r2, [pc, #64]	; (800a978 <TIM_Base_SetConfig+0x12c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_Base_SetConfig+0xf8>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a12      	ldr	r2, [pc, #72]	; (800a988 <TIM_Base_SetConfig+0x13c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d103      	bne.n	800a94c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	691a      	ldr	r2, [r3, #16]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d105      	bne.n	800a96a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	f023 0201 	bic.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	611a      	str	r2, [r3, #16]
  }
}
 800a96a:	bf00      	nop
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40010000 	.word	0x40010000
 800a97c:	40000400 	.word	0x40000400
 800a980:	40000800 	.word	0x40000800
 800a984:	40000c00 	.word	0x40000c00
 800a988:	40010400 	.word	0x40010400
 800a98c:	40014000 	.word	0x40014000
 800a990:	40014400 	.word	0x40014400
 800a994:	40014800 	.word	0x40014800
 800a998:	40001800 	.word	0x40001800
 800a99c:	40001c00 	.word	0x40001c00
 800a9a0:	40002000 	.word	0x40002000

0800a9a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b087      	sub	sp, #28
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	f023 0201 	bic.w	r2, r3, #1
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f023 0303 	bic.w	r3, r3, #3
 800a9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f023 0302 	bic.w	r3, r3, #2
 800a9ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a20      	ldr	r2, [pc, #128]	; (800aa7c <TIM_OC1_SetConfig+0xd8>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d003      	beq.n	800aa08 <TIM_OC1_SetConfig+0x64>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <TIM_OC1_SetConfig+0xdc>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d10c      	bne.n	800aa22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	f023 0308 	bic.w	r3, r3, #8
 800aa0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f023 0304 	bic.w	r3, r3, #4
 800aa20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a15      	ldr	r2, [pc, #84]	; (800aa7c <TIM_OC1_SetConfig+0xd8>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d003      	beq.n	800aa32 <TIM_OC1_SetConfig+0x8e>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a14      	ldr	r2, [pc, #80]	; (800aa80 <TIM_OC1_SetConfig+0xdc>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d111      	bne.n	800aa56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	621a      	str	r2, [r3, #32]
}
 800aa70:	bf00      	nop
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	40010000 	.word	0x40010000
 800aa80:	40010400 	.word	0x40010400

0800aa84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a1b      	ldr	r3, [r3, #32]
 800aa98:	f023 0210 	bic.w	r2, r3, #16
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	699b      	ldr	r3, [r3, #24]
 800aaaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	021b      	lsls	r3, r3, #8
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f023 0320 	bic.w	r3, r3, #32
 800aace:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	011b      	lsls	r3, r3, #4
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	4313      	orrs	r3, r2
 800aada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a22      	ldr	r2, [pc, #136]	; (800ab68 <TIM_OC2_SetConfig+0xe4>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d003      	beq.n	800aaec <TIM_OC2_SetConfig+0x68>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a21      	ldr	r2, [pc, #132]	; (800ab6c <TIM_OC2_SetConfig+0xe8>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d10d      	bne.n	800ab08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <TIM_OC2_SetConfig+0xe4>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d003      	beq.n	800ab18 <TIM_OC2_SetConfig+0x94>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a16      	ldr	r2, [pc, #88]	; (800ab6c <TIM_OC2_SetConfig+0xe8>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d113      	bne.n	800ab40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	695b      	ldr	r3, [r3, #20]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	621a      	str	r2, [r3, #32]
}
 800ab5a:	bf00      	nop
 800ab5c:	371c      	adds	r7, #28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	40010000 	.word	0x40010000
 800ab6c:	40010400 	.word	0x40010400

0800ab70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	021b      	lsls	r3, r3, #8
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a21      	ldr	r2, [pc, #132]	; (800ac50 <TIM_OC3_SetConfig+0xe0>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <TIM_OC3_SetConfig+0x66>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a20      	ldr	r2, [pc, #128]	; (800ac54 <TIM_OC3_SetConfig+0xe4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d10d      	bne.n	800abf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a16      	ldr	r2, [pc, #88]	; (800ac50 <TIM_OC3_SetConfig+0xe0>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d003      	beq.n	800ac02 <TIM_OC3_SetConfig+0x92>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a15      	ldr	r2, [pc, #84]	; (800ac54 <TIM_OC3_SetConfig+0xe4>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d113      	bne.n	800ac2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	011b      	lsls	r3, r3, #4
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	011b      	lsls	r3, r3, #4
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	693a      	ldr	r2, [r7, #16]
 800ac2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	685a      	ldr	r2, [r3, #4]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	621a      	str	r2, [r3, #32]
}
 800ac44:	bf00      	nop
 800ac46:	371c      	adds	r7, #28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	40010000 	.word	0x40010000
 800ac54:	40010400 	.word	0x40010400

0800ac58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b087      	sub	sp, #28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	031b      	lsls	r3, r3, #12
 800acaa:	693a      	ldr	r2, [r7, #16]
 800acac:	4313      	orrs	r3, r2
 800acae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a12      	ldr	r2, [pc, #72]	; (800acfc <TIM_OC4_SetConfig+0xa4>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d003      	beq.n	800acc0 <TIM_OC4_SetConfig+0x68>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a11      	ldr	r2, [pc, #68]	; (800ad00 <TIM_OC4_SetConfig+0xa8>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d109      	bne.n	800acd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	019b      	lsls	r3, r3, #6
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	685a      	ldr	r2, [r3, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	621a      	str	r2, [r3, #32]
}
 800acee:	bf00      	nop
 800acf0:	371c      	adds	r7, #28
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	40010000 	.word	0x40010000
 800ad00:	40010400 	.word	0x40010400

0800ad04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
 800ad10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	f023 0201 	bic.w	r2, r3, #1
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	4a28      	ldr	r2, [pc, #160]	; (800add0 <TIM_TI1_SetConfig+0xcc>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d01b      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad38:	d017      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	4a25      	ldr	r2, [pc, #148]	; (800add4 <TIM_TI1_SetConfig+0xd0>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d013      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4a24      	ldr	r2, [pc, #144]	; (800add8 <TIM_TI1_SetConfig+0xd4>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d00f      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4a23      	ldr	r2, [pc, #140]	; (800addc <TIM_TI1_SetConfig+0xd8>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00b      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4a22      	ldr	r2, [pc, #136]	; (800ade0 <TIM_TI1_SetConfig+0xdc>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d007      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4a21      	ldr	r2, [pc, #132]	; (800ade4 <TIM_TI1_SetConfig+0xe0>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d003      	beq.n	800ad6a <TIM_TI1_SetConfig+0x66>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4a20      	ldr	r2, [pc, #128]	; (800ade8 <TIM_TI1_SetConfig+0xe4>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d101      	bne.n	800ad6e <TIM_TI1_SetConfig+0x6a>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <TIM_TI1_SetConfig+0x6c>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d008      	beq.n	800ad86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	f023 0303 	bic.w	r3, r3, #3
 800ad7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	e003      	b.n	800ad8e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f043 0301 	orr.w	r3, r3, #1
 800ad8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	011b      	lsls	r3, r3, #4
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	f023 030a 	bic.w	r3, r3, #10
 800ada8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f003 030a 	and.w	r3, r3, #10
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	621a      	str	r2, [r3, #32]
}
 800adc2:	bf00      	nop
 800adc4:	371c      	adds	r7, #28
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	40010000 	.word	0x40010000
 800add4:	40000400 	.word	0x40000400
 800add8:	40000800 	.word	0x40000800
 800addc:	40000c00 	.word	0x40000c00
 800ade0:	40010400 	.word	0x40010400
 800ade4:	40014000 	.word	0x40014000
 800ade8:	40001800 	.word	0x40001800

0800adec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adec:	b480      	push	{r7}
 800adee:	b087      	sub	sp, #28
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	f023 0201 	bic.w	r2, r3, #1
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	011b      	lsls	r3, r3, #4
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f023 030a 	bic.w	r3, r3, #10
 800ae28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	621a      	str	r2, [r3, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b087      	sub	sp, #28
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	607a      	str	r2, [r7, #4]
 800ae56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f023 0210 	bic.w	r2, r3, #16
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	699b      	ldr	r3, [r3, #24]
 800ae6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	021b      	lsls	r3, r3, #8
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	031b      	lsls	r3, r3, #12
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae9c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	011b      	lsls	r3, r3, #4
 800aea2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	621a      	str	r2, [r3, #32]
}
 800aeb8:	bf00      	nop
 800aeba:	371c      	adds	r7, #28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	f023 0210 	bic.w	r2, r3, #16
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	031b      	lsls	r3, r3, #12
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	4313      	orrs	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	697a      	ldr	r2, [r7, #20]
 800af16:	621a      	str	r2, [r3, #32]
}
 800af18:	bf00      	nop
 800af1a:	371c      	adds	r7, #28
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	f023 0303 	bic.w	r3, r3, #3
 800af50:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	011b      	lsls	r3, r3, #4
 800af66:	b2db      	uxtb	r3, r3
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800af74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	021b      	lsls	r3, r3, #8
 800af7a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	4313      	orrs	r3, r2
 800af82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	621a      	str	r2, [r3, #32]
}
 800af90:	bf00      	nop
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b087      	sub	sp, #28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
 800afa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	69db      	ldr	r3, [r3, #28]
 800afc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afc8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	031b      	lsls	r3, r3, #12
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800afee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	031b      	lsls	r3, r3, #12
 800aff4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	bf00      	nop
 800b00c:	371c      	adds	r7, #28
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b016:	b480      	push	{r7}
 800b018:	b085      	sub	sp, #20
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4313      	orrs	r3, r2
 800b034:	f043 0307 	orr.w	r3, r3, #7
 800b038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	609a      	str	r2, [r3, #8]
}
 800b040:	bf00      	nop
 800b042:	3714      	adds	r7, #20
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b087      	sub	sp, #28
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	021a      	lsls	r2, r3, #8
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	431a      	orrs	r2, r3
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	4313      	orrs	r3, r2
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	4313      	orrs	r3, r2
 800b078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	609a      	str	r2, [r3, #8]
}
 800b080:	bf00      	nop
 800b082:	371c      	adds	r7, #28
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	f003 031f 	and.w	r3, r3, #31
 800b09e:	2201      	movs	r2, #1
 800b0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6a1a      	ldr	r2, [r3, #32]
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	401a      	ands	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6a1a      	ldr	r2, [r3, #32]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f003 031f 	and.w	r3, r3, #31
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c4:	431a      	orrs	r2, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	621a      	str	r2, [r3, #32]
}
 800b0ca:	bf00      	nop
 800b0cc:	371c      	adds	r7, #28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
	...

0800b0d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e05a      	b.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a21      	ldr	r2, [pc, #132]	; (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d022      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13c:	d01d      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a1d      	ldr	r2, [pc, #116]	; (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d018      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a1b      	ldr	r2, [pc, #108]	; (800b1bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d013      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a1a      	ldr	r2, [pc, #104]	; (800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d00e      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a18      	ldr	r2, [pc, #96]	; (800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d009      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d004      	beq.n	800b17a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a15      	ldr	r2, [pc, #84]	; (800b1cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d10c      	bne.n	800b194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	68ba      	ldr	r2, [r7, #8]
 800b188:	4313      	orrs	r3, r2
 800b18a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	40010000 	.word	0x40010000
 800b1b8:	40000400 	.word	0x40000400
 800b1bc:	40000800 	.word	0x40000800
 800b1c0:	40000c00 	.word	0x40000c00
 800b1c4:	40010400 	.word	0x40010400
 800b1c8:	40014000 	.word	0x40014000
 800b1cc:	40001800 	.word	0x40001800

0800b1d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e03d      	b.n	800b268 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4313      	orrs	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	691b      	ldr	r3, [r3, #16]
 800b236:	4313      	orrs	r3, r2
 800b238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e042      	b.n	800b334 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d106      	bne.n	800b2c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fb fa72 	bl	80067ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2224      	movs	r2, #36	; 0x24
 800b2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68da      	ldr	r2, [r3, #12]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 ff37 	bl	800c154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	691a      	ldr	r2, [r3, #16]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	695a      	ldr	r2, [r3, #20]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2220      	movs	r2, #32
 800b320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2220      	movs	r2, #32
 800b328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08c      	sub	sp, #48	; 0x30
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4613      	mov	r3, r2
 800b348:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b20      	cmp	r3, #32
 800b354:	d156      	bne.n	800b404 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <HAL_UART_Transmit_DMA+0x26>
 800b35c:	88fb      	ldrh	r3, [r7, #6]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e04f      	b.n	800b406 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	88fa      	ldrh	r2, [r7, #6]
 800b370:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	88fa      	ldrh	r2, [r7, #6]
 800b376:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2221      	movs	r2, #33	; 0x21
 800b382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38a:	4a21      	ldr	r2, [pc, #132]	; (800b410 <HAL_UART_Transmit_DMA+0xd4>)
 800b38c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b392:	4a20      	ldr	r2, [pc, #128]	; (800b414 <HAL_UART_Transmit_DMA+0xd8>)
 800b394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39a:	4a1f      	ldr	r2, [pc, #124]	; (800b418 <HAL_UART_Transmit_DMA+0xdc>)
 800b39c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b3a6:	f107 0308 	add.w	r3, r7, #8
 800b3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	6819      	ldr	r1, [r3, #0]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3304      	adds	r3, #4
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	f7fc fd4d 	bl	8007e5c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3314      	adds	r3, #20
 800b3d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	e853 3f00 	ldrex	r3, [r3]
 800b3da:	617b      	str	r3, [r7, #20]
   return(result);
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3314      	adds	r3, #20
 800b3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ec:	627a      	str	r2, [r7, #36]	; 0x24
 800b3ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	6a39      	ldr	r1, [r7, #32]
 800b3f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e5      	bne.n	800b3cc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	e000      	b.n	800b406 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800b404:	2302      	movs	r3, #2
  }
}
 800b406:	4618      	mov	r0, r3
 800b408:	3730      	adds	r7, #48	; 0x30
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	0800b9e1 	.word	0x0800b9e1
 800b414:	0800ba7b 	.word	0x0800ba7b
 800b418:	0800bbff 	.word	0x0800bbff

0800b41c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b20      	cmp	r3, #32
 800b434:	d112      	bne.n	800b45c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <HAL_UART_Receive_DMA+0x26>
 800b43c:	88fb      	ldrh	r3, [r7, #6]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e00b      	b.n	800b45e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b44c:	88fb      	ldrh	r3, [r7, #6]
 800b44e:	461a      	mov	r2, r3
 800b450:	68b9      	ldr	r1, [r7, #8]
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 fc1e 	bl	800bc94 <UART_Start_Receive_DMA>
 800b458:	4603      	mov	r3, r0
 800b45a:	e000      	b.n	800b45e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b45c:	2302      	movs	r3, #2
  }
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
	...

0800b468 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b0ba      	sub	sp, #232	; 0xe8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b48e:	2300      	movs	r3, #0
 800b490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b494:	2300      	movs	r3, #0
 800b496:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b49a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b49e:	f003 030f 	and.w	r3, r3, #15
 800b4a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b4a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10f      	bne.n	800b4ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b2:	f003 0320 	and.w	r3, r3, #32
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <HAL_UART_IRQHandler+0x66>
 800b4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4be:	f003 0320 	and.w	r3, r3, #32
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fd85 	bl	800bfd6 <UART_Receive_IT>
      return;
 800b4cc:	e25b      	b.n	800b986 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b4ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 80de 	beq.w	800b694 <HAL_UART_IRQHandler+0x22c>
 800b4d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d106      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 80d1 	beq.w	800b694 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00b      	beq.n	800b516 <HAL_UART_IRQHandler+0xae>
 800b4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b506:	2b00      	cmp	r3, #0
 800b508:	d005      	beq.n	800b516 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b50e:	f043 0201 	orr.w	r2, r3, #1
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00b      	beq.n	800b53a <HAL_UART_IRQHandler+0xd2>
 800b522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d005      	beq.n	800b53a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b532:	f043 0202 	orr.w	r2, r3, #2
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53e:	f003 0302 	and.w	r3, r3, #2
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00b      	beq.n	800b55e <HAL_UART_IRQHandler+0xf6>
 800b546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b556:	f043 0204 	orr.w	r2, r3, #4
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b55e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b562:	f003 0308 	and.w	r3, r3, #8
 800b566:	2b00      	cmp	r3, #0
 800b568:	d011      	beq.n	800b58e <HAL_UART_IRQHandler+0x126>
 800b56a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b56e:	f003 0320 	and.w	r3, r3, #32
 800b572:	2b00      	cmp	r3, #0
 800b574:	d105      	bne.n	800b582 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b57a:	f003 0301 	and.w	r3, r3, #1
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	f043 0208 	orr.w	r2, r3, #8
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	2b00      	cmp	r3, #0
 800b594:	f000 81f2 	beq.w	800b97c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59c:	f003 0320 	and.w	r3, r3, #32
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d008      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x14e>
 800b5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a8:	f003 0320 	and.w	r3, r3, #32
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 fd10 	bl	800bfd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5c0:	2b40      	cmp	r3, #64	; 0x40
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2301      	moveq	r3, #1
 800b5c6:	2300      	movne	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5d2:	f003 0308 	and.w	r3, r3, #8
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d103      	bne.n	800b5e2 <HAL_UART_IRQHandler+0x17a>
 800b5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d04f      	beq.n	800b682 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fc18 	bl	800be18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	695b      	ldr	r3, [r3, #20]
 800b5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f2:	2b40      	cmp	r3, #64	; 0x40
 800b5f4:	d141      	bne.n	800b67a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3314      	adds	r3, #20
 800b5fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b604:	e853 3f00 	ldrex	r3, [r3]
 800b608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b60c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	3314      	adds	r3, #20
 800b61e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b622:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b62e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b632:	e841 2300 	strex	r3, r2, [r1]
 800b636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b63a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1d9      	bne.n	800b5f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	2b00      	cmp	r3, #0
 800b648:	d013      	beq.n	800b672 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	4a7e      	ldr	r2, [pc, #504]	; (800b848 <HAL_UART_IRQHandler+0x3e0>)
 800b650:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b656:	4618      	mov	r0, r3
 800b658:	f7fc fcc8 	bl	8007fec <HAL_DMA_Abort_IT>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d016      	beq.n	800b690 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b66c:	4610      	mov	r0, r2
 800b66e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b670:	e00e      	b.n	800b690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f99e 	bl	800b9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b678:	e00a      	b.n	800b690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f99a 	bl	800b9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b680:	e006      	b.n	800b690 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f996 	bl	800b9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b68e:	e175      	b.n	800b97c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b690:	bf00      	nop
    return;
 800b692:	e173      	b.n	800b97c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b698:	2b01      	cmp	r3, #1
 800b69a:	f040 814f 	bne.w	800b93c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6a2:	f003 0310 	and.w	r3, r3, #16
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 8148 	beq.w	800b93c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b6ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6b0:	f003 0310 	and.w	r3, r3, #16
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 8141 	beq.w	800b93c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60bb      	str	r3, [r7, #8]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60bb      	str	r3, [r7, #8]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	60bb      	str	r3, [r7, #8]
 800b6ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6da:	2b40      	cmp	r3, #64	; 0x40
 800b6dc:	f040 80b6 	bne.w	800b84c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b6ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 8145 	beq.w	800b980 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6fe:	429a      	cmp	r2, r3
 800b700:	f080 813e 	bcs.w	800b980 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b70a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b716:	f000 8088 	beq.w	800b82a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	330c      	adds	r3, #12
 800b720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	330c      	adds	r3, #12
 800b742:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b74a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b752:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b756:	e841 2300 	strex	r3, r2, [r1]
 800b75a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1d9      	bne.n	800b71a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3314      	adds	r3, #20
 800b76c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b778:	f023 0301 	bic.w	r3, r3, #1
 800b77c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3314      	adds	r3, #20
 800b786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b78a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b78e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b790:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b792:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b796:	e841 2300 	strex	r3, r2, [r1]
 800b79a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b79c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1e1      	bne.n	800b766 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3314      	adds	r3, #20
 800b7a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b7b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3314      	adds	r3, #20
 800b7c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b7c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b7c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b7cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b7d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e3      	bne.n	800b7a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2220      	movs	r2, #32
 800b7de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7fa:	f023 0310 	bic.w	r3, r3, #16
 800b7fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	330c      	adds	r3, #12
 800b808:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b80c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b80e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b812:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e3      	bne.n	800b7e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b824:	4618      	mov	r0, r3
 800b826:	f7fc fb71 	bl	8007f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2202      	movs	r2, #2
 800b82e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b838:	b29b      	uxth	r3, r3
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f8c1 	bl	800b9c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b846:	e09b      	b.n	800b980 <HAL_UART_IRQHandler+0x518>
 800b848:	0800bedf 	.word	0x0800bedf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b854:	b29b      	uxth	r3, r3
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b860:	b29b      	uxth	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 808e 	beq.w	800b984 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 8089 	beq.w	800b984 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	330c      	adds	r3, #12
 800b878:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b884:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b888:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	330c      	adds	r3, #12
 800b892:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b896:	647a      	str	r2, [r7, #68]	; 0x44
 800b898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b89c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e3      	bne.n	800b872 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f023 0301 	bic.w	r3, r3, #1
 800b8c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	3314      	adds	r3, #20
 800b8ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b8ce:	633a      	str	r2, [r7, #48]	; 0x30
 800b8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e3      	bne.n	800b8aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2220      	movs	r2, #32
 800b8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	e853 3f00 	ldrex	r3, [r3]
 800b8fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f023 0310 	bic.w	r3, r3, #16
 800b906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	330c      	adds	r3, #12
 800b910:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b914:	61fa      	str	r2, [r7, #28]
 800b916:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	69b9      	ldr	r1, [r7, #24]
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	617b      	str	r3, [r7, #20]
   return(result);
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e3      	bne.n	800b8f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2202      	movs	r2, #2
 800b92c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b92e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b932:	4619      	mov	r1, r3
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f847 	bl	800b9c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b93a:	e023      	b.n	800b984 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b944:	2b00      	cmp	r3, #0
 800b946:	d009      	beq.n	800b95c <HAL_UART_IRQHandler+0x4f4>
 800b948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b94c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fad6 	bl	800bf06 <UART_Transmit_IT>
    return;
 800b95a:	e014      	b.n	800b986 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00e      	beq.n	800b986 <HAL_UART_IRQHandler+0x51e>
 800b968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b970:	2b00      	cmp	r3, #0
 800b972:	d008      	beq.n	800b986 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fb16 	bl	800bfa6 <UART_EndTransmit_IT>
    return;
 800b97a:	e004      	b.n	800b986 <HAL_UART_IRQHandler+0x51e>
    return;
 800b97c:	bf00      	nop
 800b97e:	e002      	b.n	800b986 <HAL_UART_IRQHandler+0x51e>
      return;
 800b980:	bf00      	nop
 800b982:	e000      	b.n	800b986 <HAL_UART_IRQHandler+0x51e>
      return;
 800b984:	bf00      	nop
  }
}
 800b986:	37e8      	adds	r7, #232	; 0xe8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b090      	sub	sp, #64	; 0x40
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d137      	bne.n	800ba6c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9fe:	2200      	movs	r2, #0
 800ba00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3314      	adds	r3, #20
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	e853 3f00 	ldrex	r3, [r3]
 800ba10:	623b      	str	r3, [r7, #32]
   return(result);
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3314      	adds	r3, #20
 800ba20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba22:	633a      	str	r2, [r7, #48]	; 0x30
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba2a:	e841 2300 	strex	r3, r2, [r1]
 800ba2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1e5      	bne.n	800ba02 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	330c      	adds	r3, #12
 800ba3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	e853 3f00 	ldrex	r3, [r3]
 800ba44:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	330c      	adds	r3, #12
 800ba54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba56:	61fa      	str	r2, [r7, #28]
 800ba58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5a:	69b9      	ldr	r1, [r7, #24]
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	e841 2300 	strex	r3, r2, [r1]
 800ba62:	617b      	str	r3, [r7, #20]
   return(result);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1e5      	bne.n	800ba36 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba6a:	e002      	b.n	800ba72 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba6e:	f7f8 fbe7 	bl	8004240 <HAL_UART_TxCpltCallback>
}
 800ba72:	bf00      	nop
 800ba74:	3740      	adds	r7, #64	; 0x40
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b084      	sub	sp, #16
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f7ff ff7f 	bl	800b98c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba8e:	bf00      	nop
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b09c      	sub	sp, #112	; 0x70
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d172      	bne.n	800bb98 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bab4:	2200      	movs	r2, #0
 800bab6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	330c      	adds	r3, #12
 800babe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bace:	66bb      	str	r3, [r7, #104]	; 0x68
 800bad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	330c      	adds	r3, #12
 800bad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bad8:	65ba      	str	r2, [r7, #88]	; 0x58
 800bada:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e5      	bne.n	800bab8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3314      	adds	r3, #20
 800baf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf6:	e853 3f00 	ldrex	r3, [r3]
 800bafa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafe:	f023 0301 	bic.w	r3, r3, #1
 800bb02:	667b      	str	r3, [r7, #100]	; 0x64
 800bb04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3314      	adds	r3, #20
 800bb0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb0c:	647a      	str	r2, [r7, #68]	; 0x44
 800bb0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb14:	e841 2300 	strex	r3, r2, [r1]
 800bb18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1e5      	bne.n	800baec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	3314      	adds	r3, #20
 800bb26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2a:	e853 3f00 	ldrex	r3, [r3]
 800bb2e:	623b      	str	r3, [r7, #32]
   return(result);
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb36:	663b      	str	r3, [r7, #96]	; 0x60
 800bb38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3314      	adds	r3, #20
 800bb3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb40:	633a      	str	r2, [r7, #48]	; 0x30
 800bb42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e5      	bne.n	800bb20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb56:	2220      	movs	r2, #32
 800bb58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d119      	bne.n	800bb98 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	e853 3f00 	ldrex	r3, [r3]
 800bb72:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0310 	bic.w	r3, r3, #16
 800bb7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	330c      	adds	r3, #12
 800bb82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb84:	61fa      	str	r2, [r7, #28]
 800bb86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb88:	69b9      	ldr	r1, [r7, #24]
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	e841 2300 	strex	r3, r2, [r1]
 800bb90:	617b      	str	r3, [r7, #20]
   return(result);
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e5      	bne.n	800bb64 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d106      	bne.n	800bbb4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbae:	f7ff ff0b 	bl	800b9c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbb2:	e002      	b.n	800bbba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bbb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bbb6:	f7f8 fb5f 	bl	8004278 <HAL_UART_RxCpltCallback>
}
 800bbba:	bf00      	nop
 800bbbc:	3770      	adds	r7, #112	; 0x70
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	d108      	bne.n	800bbf0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbe2:	085b      	lsrs	r3, r3, #1
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f7ff feed 	bl	800b9c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbee:	e002      	b.n	800bbf6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f7ff fed5 	bl	800b9a0 <HAL_UART_RxHalfCpltCallback>
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc1a:	2b80      	cmp	r3, #128	; 0x80
 800bc1c:	bf0c      	ite	eq
 800bc1e:	2301      	moveq	r3, #1
 800bc20:	2300      	movne	r3, #0
 800bc22:	b2db      	uxtb	r3, r3
 800bc24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	2b21      	cmp	r3, #33	; 0x21
 800bc30:	d108      	bne.n	800bc44 <UART_DMAError+0x46>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d005      	beq.n	800bc44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bc3e:	68b8      	ldr	r0, [r7, #8]
 800bc40:	f000 f8c2 	bl	800bdc8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4e:	2b40      	cmp	r3, #64	; 0x40
 800bc50:	bf0c      	ite	eq
 800bc52:	2301      	moveq	r3, #1
 800bc54:	2300      	movne	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b22      	cmp	r3, #34	; 0x22
 800bc64:	d108      	bne.n	800bc78 <UART_DMAError+0x7a>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bc72:	68b8      	ldr	r0, [r7, #8]
 800bc74:	f000 f8d0 	bl	800be18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7c:	f043 0210 	orr.w	r2, r3, #16
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc84:	68b8      	ldr	r0, [r7, #8]
 800bc86:	f7ff fe95 	bl	800b9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc8a:	bf00      	nop
 800bc8c:	3710      	adds	r7, #16
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b098      	sub	sp, #96	; 0x60
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	88fa      	ldrh	r2, [r7, #6]
 800bcac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2222      	movs	r2, #34	; 0x22
 800bcb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc0:	4a3e      	ldr	r2, [pc, #248]	; (800bdbc <UART_Start_Receive_DMA+0x128>)
 800bcc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc8:	4a3d      	ldr	r2, [pc, #244]	; (800bdc0 <UART_Start_Receive_DMA+0x12c>)
 800bcca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd0:	4a3c      	ldr	r2, [pc, #240]	; (800bdc4 <UART_Start_Receive_DMA+0x130>)
 800bcd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcd8:	2200      	movs	r2, #0
 800bcda:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bcdc:	f107 0308 	add.w	r3, r7, #8
 800bce0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	3304      	adds	r3, #4
 800bcec:	4619      	mov	r1, r3
 800bcee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	88fb      	ldrh	r3, [r7, #6]
 800bcf4:	f7fc f8b2 	bl	8007e5c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	613b      	str	r3, [r7, #16]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	613b      	str	r3, [r7, #16]
 800bd0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d019      	beq.n	800bd4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	330c      	adds	r3, #12
 800bd1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd20:	e853 3f00 	ldrex	r3, [r3]
 800bd24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	330c      	adds	r3, #12
 800bd34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd36:	64fa      	str	r2, [r7, #76]	; 0x4c
 800bd38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bd3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd3e:	e841 2300 	strex	r3, r2, [r1]
 800bd42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d1e5      	bne.n	800bd16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3314      	adds	r3, #20
 800bd50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	e853 3f00 	ldrex	r3, [r3]
 800bd58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd5c:	f043 0301 	orr.w	r3, r3, #1
 800bd60:	657b      	str	r3, [r7, #84]	; 0x54
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3314      	adds	r3, #20
 800bd68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd6a:	63ba      	str	r2, [r7, #56]	; 0x38
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd72:	e841 2300 	strex	r3, r2, [r1]
 800bd76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e5      	bne.n	800bd4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	3314      	adds	r3, #20
 800bd84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd94:	653b      	str	r3, [r7, #80]	; 0x50
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3314      	adds	r3, #20
 800bd9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd9e:	627a      	str	r2, [r7, #36]	; 0x24
 800bda0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda2:	6a39      	ldr	r1, [r7, #32]
 800bda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda6:	e841 2300 	strex	r3, r2, [r1]
 800bdaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e5      	bne.n	800bd7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3760      	adds	r7, #96	; 0x60
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	0800ba97 	.word	0x0800ba97
 800bdc0:	0800bbc3 	.word	0x0800bbc3
 800bdc4:	0800bbff 	.word	0x0800bbff

0800bdc8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b089      	sub	sp, #36	; 0x24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	330c      	adds	r3, #12
 800bdd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	e853 3f00 	ldrex	r3, [r3]
 800bdde:	60bb      	str	r3, [r7, #8]
   return(result);
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bde6:	61fb      	str	r3, [r7, #28]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	330c      	adds	r3, #12
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	61ba      	str	r2, [r7, #24]
 800bdf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf4:	6979      	ldr	r1, [r7, #20]
 800bdf6:	69ba      	ldr	r2, [r7, #24]
 800bdf8:	e841 2300 	strex	r3, r2, [r1]
 800bdfc:	613b      	str	r3, [r7, #16]
   return(result);
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1e5      	bne.n	800bdd0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2220      	movs	r2, #32
 800be08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800be0c:	bf00      	nop
 800be0e:	3724      	adds	r7, #36	; 0x24
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be18:	b480      	push	{r7}
 800be1a:	b095      	sub	sp, #84	; 0x54
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	330c      	adds	r3, #12
 800be26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2a:	e853 3f00 	ldrex	r3, [r3]
 800be2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800be30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	330c      	adds	r3, #12
 800be3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be40:	643a      	str	r2, [r7, #64]	; 0x40
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800be46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be48:	e841 2300 	strex	r3, r2, [r1]
 800be4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be50:	2b00      	cmp	r3, #0
 800be52:	d1e5      	bne.n	800be20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	3314      	adds	r3, #20
 800be5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	e853 3f00 	ldrex	r3, [r3]
 800be62:	61fb      	str	r3, [r7, #28]
   return(result);
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	f023 0301 	bic.w	r3, r3, #1
 800be6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3314      	adds	r3, #20
 800be72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be7c:	e841 2300 	strex	r3, r2, [r1]
 800be80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e5      	bne.n	800be54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d119      	bne.n	800bec4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	330c      	adds	r3, #12
 800be96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	e853 3f00 	ldrex	r3, [r3]
 800be9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	f023 0310 	bic.w	r3, r3, #16
 800bea6:	647b      	str	r3, [r7, #68]	; 0x44
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	330c      	adds	r3, #12
 800beae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beb0:	61ba      	str	r2, [r7, #24]
 800beb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb4:	6979      	ldr	r1, [r7, #20]
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	e841 2300 	strex	r3, r2, [r1]
 800bebc:	613b      	str	r3, [r7, #16]
   return(result);
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e5      	bne.n	800be90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2220      	movs	r2, #32
 800bec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bed2:	bf00      	nop
 800bed4:	3754      	adds	r7, #84	; 0x54
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2200      	movs	r2, #0
 800bef6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f7ff fd5b 	bl	800b9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bf06:	b480      	push	{r7}
 800bf08:	b085      	sub	sp, #20
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b21      	cmp	r3, #33	; 0x21
 800bf18:	d13e      	bne.n	800bf98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf22:	d114      	bne.n	800bf4e <UART_Transmit_IT+0x48>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d110      	bne.n	800bf4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a1b      	ldr	r3, [r3, #32]
 800bf30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	1c9a      	adds	r2, r3, #2
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	621a      	str	r2, [r3, #32]
 800bf4c:	e008      	b.n	800bf60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	1c59      	adds	r1, r3, #1
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	6211      	str	r1, [r2, #32]
 800bf58:	781a      	ldrb	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	b29b      	uxth	r3, r3
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10f      	bne.n	800bf94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68da      	ldr	r2, [r3, #12]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	e000      	b.n	800bf9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf98:	2302      	movs	r3, #2
  }
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b082      	sub	sp, #8
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2220      	movs	r2, #32
 800bfc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7f8 f93a 	bl	8004240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b08c      	sub	sp, #48	; 0x30
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2b22      	cmp	r3, #34	; 0x22
 800bfe8:	f040 80ae 	bne.w	800c148 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bff4:	d117      	bne.n	800c026 <UART_Receive_IT+0x50>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d113      	bne.n	800c026 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bffe:	2300      	movs	r3, #0
 800c000:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c006:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	b29b      	uxth	r3, r3
 800c010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c014:	b29a      	uxth	r2, r3
 800c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c018:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01e:	1c9a      	adds	r2, r3, #2
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	629a      	str	r2, [r3, #40]	; 0x28
 800c024:	e026      	b.n	800c074 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c038:	d007      	beq.n	800c04a <UART_Receive_IT+0x74>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10a      	bne.n	800c058 <UART_Receive_IT+0x82>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	b2da      	uxtb	r2, r3
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	e008      	b.n	800c06a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c064:	b2da      	uxtb	r2, r3
 800c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c068:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c078:	b29b      	uxth	r3, r3
 800c07a:	3b01      	subs	r3, #1
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	4619      	mov	r1, r3
 800c082:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c084:	2b00      	cmp	r3, #0
 800c086:	d15d      	bne.n	800c144 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f022 0220 	bic.w	r2, r2, #32
 800c096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68da      	ldr	r2, [r3, #12]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	695a      	ldr	r2, [r3, #20]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f022 0201 	bic.w	r2, r2, #1
 800c0b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2220      	movs	r2, #32
 800c0bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d135      	bne.n	800c13a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	330c      	adds	r3, #12
 800c0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	e853 3f00 	ldrex	r3, [r3]
 800c0e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	f023 0310 	bic.w	r3, r3, #16
 800c0ea:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	330c      	adds	r3, #12
 800c0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0f4:	623a      	str	r2, [r7, #32]
 800c0f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	69f9      	ldr	r1, [r7, #28]
 800c0fa:	6a3a      	ldr	r2, [r7, #32]
 800c0fc:	e841 2300 	strex	r3, r2, [r1]
 800c100:	61bb      	str	r3, [r7, #24]
   return(result);
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e5      	bne.n	800c0d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0310 	and.w	r3, r3, #16
 800c112:	2b10      	cmp	r3, #16
 800c114:	d10a      	bne.n	800c12c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	60fb      	str	r3, [r7, #12]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c130:	4619      	mov	r1, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff fc48 	bl	800b9c8 <HAL_UARTEx_RxEventCallback>
 800c138:	e002      	b.n	800c140 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f7f8 f89c 	bl	8004278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	e002      	b.n	800c14a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c144:	2300      	movs	r3, #0
 800c146:	e000      	b.n	800c14a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c148:	2302      	movs	r3, #2
  }
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3730      	adds	r7, #48	; 0x30
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
	...

0800c154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c158:	b0c0      	sub	sp, #256	; 0x100
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c16c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c170:	68d9      	ldr	r1, [r3, #12]
 800c172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	ea40 0301 	orr.w	r3, r0, r1
 800c17c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c17e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c182:	689a      	ldr	r2, [r3, #8]
 800c184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	431a      	orrs	r2, r3
 800c18c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	431a      	orrs	r2, r3
 800c194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c198:	69db      	ldr	r3, [r3, #28]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c1ac:	f021 010c 	bic.w	r1, r1, #12
 800c1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1ce:	6999      	ldr	r1, [r3, #24]
 800c1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	ea40 0301 	orr.w	r3, r0, r1
 800c1da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b8f      	ldr	r3, [pc, #572]	; (800c420 <UART_SetConfig+0x2cc>)
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d005      	beq.n	800c1f4 <UART_SetConfig+0xa0>
 800c1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	4b8d      	ldr	r3, [pc, #564]	; (800c424 <UART_SetConfig+0x2d0>)
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d104      	bne.n	800c1fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1f4:	f7fc fc52 	bl	8008a9c <HAL_RCC_GetPCLK2Freq>
 800c1f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c1fc:	e003      	b.n	800c206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c1fe:	f7fc fc39 	bl	8008a74 <HAL_RCC_GetPCLK1Freq>
 800c202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c20a:	69db      	ldr	r3, [r3, #28]
 800c20c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c210:	f040 810c 	bne.w	800c42c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c218:	2200      	movs	r2, #0
 800c21a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c21e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c226:	4622      	mov	r2, r4
 800c228:	462b      	mov	r3, r5
 800c22a:	1891      	adds	r1, r2, r2
 800c22c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c22e:	415b      	adcs	r3, r3
 800c230:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c236:	4621      	mov	r1, r4
 800c238:	eb12 0801 	adds.w	r8, r2, r1
 800c23c:	4629      	mov	r1, r5
 800c23e:	eb43 0901 	adc.w	r9, r3, r1
 800c242:	f04f 0200 	mov.w	r2, #0
 800c246:	f04f 0300 	mov.w	r3, #0
 800c24a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c24e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c256:	4690      	mov	r8, r2
 800c258:	4699      	mov	r9, r3
 800c25a:	4623      	mov	r3, r4
 800c25c:	eb18 0303 	adds.w	r3, r8, r3
 800c260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c264:	462b      	mov	r3, r5
 800c266:	eb49 0303 	adc.w	r3, r9, r3
 800c26a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c27a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c27e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c282:	460b      	mov	r3, r1
 800c284:	18db      	adds	r3, r3, r3
 800c286:	653b      	str	r3, [r7, #80]	; 0x50
 800c288:	4613      	mov	r3, r2
 800c28a:	eb42 0303 	adc.w	r3, r2, r3
 800c28e:	657b      	str	r3, [r7, #84]	; 0x54
 800c290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c298:	f7f4 fc56 	bl	8000b48 <__aeabi_uldivmod>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4b61      	ldr	r3, [pc, #388]	; (800c428 <UART_SetConfig+0x2d4>)
 800c2a2:	fba3 2302 	umull	r2, r3, r3, r2
 800c2a6:	095b      	lsrs	r3, r3, #5
 800c2a8:	011c      	lsls	r4, r3, #4
 800c2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c2b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c2bc:	4642      	mov	r2, r8
 800c2be:	464b      	mov	r3, r9
 800c2c0:	1891      	adds	r1, r2, r2
 800c2c2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c2c4:	415b      	adcs	r3, r3
 800c2c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c2cc:	4641      	mov	r1, r8
 800c2ce:	eb12 0a01 	adds.w	sl, r2, r1
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	eb43 0b01 	adc.w	fp, r3, r1
 800c2d8:	f04f 0200 	mov.w	r2, #0
 800c2dc:	f04f 0300 	mov.w	r3, #0
 800c2e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c2e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c2e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2ec:	4692      	mov	sl, r2
 800c2ee:	469b      	mov	fp, r3
 800c2f0:	4643      	mov	r3, r8
 800c2f2:	eb1a 0303 	adds.w	r3, sl, r3
 800c2f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2fa:	464b      	mov	r3, r9
 800c2fc:	eb4b 0303 	adc.w	r3, fp, r3
 800c300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c318:	460b      	mov	r3, r1
 800c31a:	18db      	adds	r3, r3, r3
 800c31c:	643b      	str	r3, [r7, #64]	; 0x40
 800c31e:	4613      	mov	r3, r2
 800c320:	eb42 0303 	adc.w	r3, r2, r3
 800c324:	647b      	str	r3, [r7, #68]	; 0x44
 800c326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c32a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c32e:	f7f4 fc0b 	bl	8000b48 <__aeabi_uldivmod>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4611      	mov	r1, r2
 800c338:	4b3b      	ldr	r3, [pc, #236]	; (800c428 <UART_SetConfig+0x2d4>)
 800c33a:	fba3 2301 	umull	r2, r3, r3, r1
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	2264      	movs	r2, #100	; 0x64
 800c342:	fb02 f303 	mul.w	r3, r2, r3
 800c346:	1acb      	subs	r3, r1, r3
 800c348:	00db      	lsls	r3, r3, #3
 800c34a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c34e:	4b36      	ldr	r3, [pc, #216]	; (800c428 <UART_SetConfig+0x2d4>)
 800c350:	fba3 2302 	umull	r2, r3, r3, r2
 800c354:	095b      	lsrs	r3, r3, #5
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c35c:	441c      	add	r4, r3
 800c35e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c362:	2200      	movs	r2, #0
 800c364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c36c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c370:	4642      	mov	r2, r8
 800c372:	464b      	mov	r3, r9
 800c374:	1891      	adds	r1, r2, r2
 800c376:	63b9      	str	r1, [r7, #56]	; 0x38
 800c378:	415b      	adcs	r3, r3
 800c37a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c37c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c380:	4641      	mov	r1, r8
 800c382:	1851      	adds	r1, r2, r1
 800c384:	6339      	str	r1, [r7, #48]	; 0x30
 800c386:	4649      	mov	r1, r9
 800c388:	414b      	adcs	r3, r1
 800c38a:	637b      	str	r3, [r7, #52]	; 0x34
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	f04f 0300 	mov.w	r3, #0
 800c394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c398:	4659      	mov	r1, fp
 800c39a:	00cb      	lsls	r3, r1, #3
 800c39c:	4651      	mov	r1, sl
 800c39e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3a2:	4651      	mov	r1, sl
 800c3a4:	00ca      	lsls	r2, r1, #3
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	4642      	mov	r2, r8
 800c3ae:	189b      	adds	r3, r3, r2
 800c3b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3b4:	464b      	mov	r3, r9
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	eb42 0303 	adc.w	r3, r2, r3
 800c3bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c3cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c3d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	18db      	adds	r3, r3, r3
 800c3d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3da:	4613      	mov	r3, r2
 800c3dc:	eb42 0303 	adc.w	r3, r2, r3
 800c3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c3e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c3ea:	f7f4 fbad 	bl	8000b48 <__aeabi_uldivmod>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4b0d      	ldr	r3, [pc, #52]	; (800c428 <UART_SetConfig+0x2d4>)
 800c3f4:	fba3 1302 	umull	r1, r3, r3, r2
 800c3f8:	095b      	lsrs	r3, r3, #5
 800c3fa:	2164      	movs	r1, #100	; 0x64
 800c3fc:	fb01 f303 	mul.w	r3, r1, r3
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	3332      	adds	r3, #50	; 0x32
 800c406:	4a08      	ldr	r2, [pc, #32]	; (800c428 <UART_SetConfig+0x2d4>)
 800c408:	fba2 2303 	umull	r2, r3, r2, r3
 800c40c:	095b      	lsrs	r3, r3, #5
 800c40e:	f003 0207 	and.w	r2, r3, #7
 800c412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4422      	add	r2, r4
 800c41a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c41c:	e106      	b.n	800c62c <UART_SetConfig+0x4d8>
 800c41e:	bf00      	nop
 800c420:	40011000 	.word	0x40011000
 800c424:	40011400 	.word	0x40011400
 800c428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c42c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c430:	2200      	movs	r2, #0
 800c432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c43a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	1891      	adds	r1, r2, r2
 800c444:	6239      	str	r1, [r7, #32]
 800c446:	415b      	adcs	r3, r3
 800c448:	627b      	str	r3, [r7, #36]	; 0x24
 800c44a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c44e:	4641      	mov	r1, r8
 800c450:	1854      	adds	r4, r2, r1
 800c452:	4649      	mov	r1, r9
 800c454:	eb43 0501 	adc.w	r5, r3, r1
 800c458:	f04f 0200 	mov.w	r2, #0
 800c45c:	f04f 0300 	mov.w	r3, #0
 800c460:	00eb      	lsls	r3, r5, #3
 800c462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c466:	00e2      	lsls	r2, r4, #3
 800c468:	4614      	mov	r4, r2
 800c46a:	461d      	mov	r5, r3
 800c46c:	4643      	mov	r3, r8
 800c46e:	18e3      	adds	r3, r4, r3
 800c470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c474:	464b      	mov	r3, r9
 800c476:	eb45 0303 	adc.w	r3, r5, r3
 800c47a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c47e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c48a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c48e:	f04f 0200 	mov.w	r2, #0
 800c492:	f04f 0300 	mov.w	r3, #0
 800c496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c49a:	4629      	mov	r1, r5
 800c49c:	008b      	lsls	r3, r1, #2
 800c49e:	4621      	mov	r1, r4
 800c4a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4a4:	4621      	mov	r1, r4
 800c4a6:	008a      	lsls	r2, r1, #2
 800c4a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c4ac:	f7f4 fb4c 	bl	8000b48 <__aeabi_uldivmod>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4b60      	ldr	r3, [pc, #384]	; (800c638 <UART_SetConfig+0x4e4>)
 800c4b6:	fba3 2302 	umull	r2, r3, r3, r2
 800c4ba:	095b      	lsrs	r3, r3, #5
 800c4bc:	011c      	lsls	r4, r3, #4
 800c4be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c4c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c4cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c4d0:	4642      	mov	r2, r8
 800c4d2:	464b      	mov	r3, r9
 800c4d4:	1891      	adds	r1, r2, r2
 800c4d6:	61b9      	str	r1, [r7, #24]
 800c4d8:	415b      	adcs	r3, r3
 800c4da:	61fb      	str	r3, [r7, #28]
 800c4dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4e0:	4641      	mov	r1, r8
 800c4e2:	1851      	adds	r1, r2, r1
 800c4e4:	6139      	str	r1, [r7, #16]
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	414b      	adcs	r3, r1
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	f04f 0300 	mov.w	r3, #0
 800c4f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c4f8:	4659      	mov	r1, fp
 800c4fa:	00cb      	lsls	r3, r1, #3
 800c4fc:	4651      	mov	r1, sl
 800c4fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c502:	4651      	mov	r1, sl
 800c504:	00ca      	lsls	r2, r1, #3
 800c506:	4610      	mov	r0, r2
 800c508:	4619      	mov	r1, r3
 800c50a:	4603      	mov	r3, r0
 800c50c:	4642      	mov	r2, r8
 800c50e:	189b      	adds	r3, r3, r2
 800c510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c514:	464b      	mov	r3, r9
 800c516:	460a      	mov	r2, r1
 800c518:	eb42 0303 	adc.w	r3, r2, r3
 800c51c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	67bb      	str	r3, [r7, #120]	; 0x78
 800c52a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c52c:	f04f 0200 	mov.w	r2, #0
 800c530:	f04f 0300 	mov.w	r3, #0
 800c534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c538:	4649      	mov	r1, r9
 800c53a:	008b      	lsls	r3, r1, #2
 800c53c:	4641      	mov	r1, r8
 800c53e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c542:	4641      	mov	r1, r8
 800c544:	008a      	lsls	r2, r1, #2
 800c546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c54a:	f7f4 fafd 	bl	8000b48 <__aeabi_uldivmod>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4611      	mov	r1, r2
 800c554:	4b38      	ldr	r3, [pc, #224]	; (800c638 <UART_SetConfig+0x4e4>)
 800c556:	fba3 2301 	umull	r2, r3, r3, r1
 800c55a:	095b      	lsrs	r3, r3, #5
 800c55c:	2264      	movs	r2, #100	; 0x64
 800c55e:	fb02 f303 	mul.w	r3, r2, r3
 800c562:	1acb      	subs	r3, r1, r3
 800c564:	011b      	lsls	r3, r3, #4
 800c566:	3332      	adds	r3, #50	; 0x32
 800c568:	4a33      	ldr	r2, [pc, #204]	; (800c638 <UART_SetConfig+0x4e4>)
 800c56a:	fba2 2303 	umull	r2, r3, r2, r3
 800c56e:	095b      	lsrs	r3, r3, #5
 800c570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c574:	441c      	add	r4, r3
 800c576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c57a:	2200      	movs	r2, #0
 800c57c:	673b      	str	r3, [r7, #112]	; 0x70
 800c57e:	677a      	str	r2, [r7, #116]	; 0x74
 800c580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c584:	4642      	mov	r2, r8
 800c586:	464b      	mov	r3, r9
 800c588:	1891      	adds	r1, r2, r2
 800c58a:	60b9      	str	r1, [r7, #8]
 800c58c:	415b      	adcs	r3, r3
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c594:	4641      	mov	r1, r8
 800c596:	1851      	adds	r1, r2, r1
 800c598:	6039      	str	r1, [r7, #0]
 800c59a:	4649      	mov	r1, r9
 800c59c:	414b      	adcs	r3, r1
 800c59e:	607b      	str	r3, [r7, #4]
 800c5a0:	f04f 0200 	mov.w	r2, #0
 800c5a4:	f04f 0300 	mov.w	r3, #0
 800c5a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c5ac:	4659      	mov	r1, fp
 800c5ae:	00cb      	lsls	r3, r1, #3
 800c5b0:	4651      	mov	r1, sl
 800c5b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c5b6:	4651      	mov	r1, sl
 800c5b8:	00ca      	lsls	r2, r1, #3
 800c5ba:	4610      	mov	r0, r2
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4603      	mov	r3, r0
 800c5c0:	4642      	mov	r2, r8
 800c5c2:	189b      	adds	r3, r3, r2
 800c5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5c6:	464b      	mov	r3, r9
 800c5c8:	460a      	mov	r2, r1
 800c5ca:	eb42 0303 	adc.w	r3, r2, r3
 800c5ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	663b      	str	r3, [r7, #96]	; 0x60
 800c5da:	667a      	str	r2, [r7, #100]	; 0x64
 800c5dc:	f04f 0200 	mov.w	r2, #0
 800c5e0:	f04f 0300 	mov.w	r3, #0
 800c5e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	008b      	lsls	r3, r1, #2
 800c5ec:	4641      	mov	r1, r8
 800c5ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5f2:	4641      	mov	r1, r8
 800c5f4:	008a      	lsls	r2, r1, #2
 800c5f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c5fa:	f7f4 faa5 	bl	8000b48 <__aeabi_uldivmod>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	4b0d      	ldr	r3, [pc, #52]	; (800c638 <UART_SetConfig+0x4e4>)
 800c604:	fba3 1302 	umull	r1, r3, r3, r2
 800c608:	095b      	lsrs	r3, r3, #5
 800c60a:	2164      	movs	r1, #100	; 0x64
 800c60c:	fb01 f303 	mul.w	r3, r1, r3
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	011b      	lsls	r3, r3, #4
 800c614:	3332      	adds	r3, #50	; 0x32
 800c616:	4a08      	ldr	r2, [pc, #32]	; (800c638 <UART_SetConfig+0x4e4>)
 800c618:	fba2 2303 	umull	r2, r3, r2, r3
 800c61c:	095b      	lsrs	r3, r3, #5
 800c61e:	f003 020f 	and.w	r2, r3, #15
 800c622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4422      	add	r2, r4
 800c62a:	609a      	str	r2, [r3, #8]
}
 800c62c:	bf00      	nop
 800c62e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c632:	46bd      	mov	sp, r7
 800c634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c638:	51eb851f 	.word	0x51eb851f

0800c63c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	4603      	mov	r3, r0
 800c644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c646:	2300      	movs	r3, #0
 800c648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c64a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c64e:	2b84      	cmp	r3, #132	; 0x84
 800c650:	d005      	beq.n	800c65e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	4413      	add	r3, r2
 800c65a:	3303      	adds	r3, #3
 800c65c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c65e:	68fb      	ldr	r3, [r7, #12]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3714      	adds	r7, #20
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c670:	f000 fade 	bl	800cc30 <vTaskStartScheduler>
  
  return osOK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	bd80      	pop	{r7, pc}

0800c67a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c67a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c67c:	b089      	sub	sp, #36	; 0x24
 800c67e:	af04      	add	r7, sp, #16
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d020      	beq.n	800c6ce <osThreadCreate+0x54>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	699b      	ldr	r3, [r3, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d01c      	beq.n	800c6ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685c      	ldr	r4, [r3, #4]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	691e      	ldr	r6, [r3, #16]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff ffc8 	bl	800c63c <makeFreeRtosPriority>
 800c6ac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6b6:	9202      	str	r2, [sp, #8]
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	9100      	str	r1, [sp, #0]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	4632      	mov	r2, r6
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 f8ed 	bl	800c8a2 <xTaskCreateStatic>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	e01c      	b.n	800c708 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685c      	ldr	r4, [r3, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6da:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7ff ffaa 	bl	800c63c <makeFreeRtosPriority>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	f107 030c 	add.w	r3, r7, #12
 800c6ee:	9301      	str	r3, [sp, #4]
 800c6f0:	9200      	str	r2, [sp, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 f92f 	bl	800c95c <xTaskCreate>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b01      	cmp	r3, #1
 800c702:	d001      	beq.n	800c708 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c704:	2300      	movs	r3, #0
 800c706:	e000      	b.n	800c70a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c708:	68fb      	ldr	r3, [r7, #12]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c712 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <osDelay+0x16>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	e000      	b.n	800c72a <osDelay+0x18>
 800c728:	2301      	movs	r3, #1
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 fa4c 	bl	800cbc8 <vTaskDelay>
  
  return osOK;
 800c730:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f103 0208 	add.w	r2, r3, #8
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c752:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f103 0208 	add.w	r2, r3, #8
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f103 0208 	add.w	r2, r3, #8
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	689a      	ldr	r2, [r3, #8]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	601a      	str	r2, [r3, #0]
}
 800c7d0:	bf00      	nop
 800c7d2:	3714      	adds	r7, #20
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7f2:	d103      	bne.n	800c7fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	60fb      	str	r3, [r7, #12]
 800c7fa:	e00c      	b.n	800c816 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3308      	adds	r3, #8
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	e002      	b.n	800c80a <vListInsert+0x2e>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	429a      	cmp	r2, r3
 800c814:	d2f6      	bcs.n	800c804 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	1c5a      	adds	r2, r3, #1
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	601a      	str	r2, [r3, #0]
}
 800c842:	bf00      	nop
 800c844:	3714      	adds	r7, #20
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c84e:	b480      	push	{r7}
 800c850:	b085      	sub	sp, #20
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	6892      	ldr	r2, [r2, #8]
 800c864:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6852      	ldr	r2, [r2, #4]
 800c86e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	429a      	cmp	r2, r3
 800c878:	d103      	bne.n	800c882 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	689a      	ldr	r2, [r3, #8]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	1e5a      	subs	r2, r3, #1
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b08e      	sub	sp, #56	; 0x38
 800c8a6:	af04      	add	r7, sp, #16
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10a      	bne.n	800c8cc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8c8:	bf00      	nop
 800c8ca:	e7fe      	b.n	800c8ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10a      	bne.n	800c8e8 <xTaskCreateStatic+0x46>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	61fb      	str	r3, [r7, #28]
}
 800c8e4:	bf00      	nop
 800c8e6:	e7fe      	b.n	800c8e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8e8:	2354      	movs	r3, #84	; 0x54
 800c8ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	2b54      	cmp	r3, #84	; 0x54
 800c8f0:	d00a      	beq.n	800c908 <xTaskCreateStatic+0x66>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	61bb      	str	r3, [r7, #24]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d01e      	beq.n	800c94e <xTaskCreateStatic+0xac>
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	2b00      	cmp	r3, #0
 800c914:	d01b      	beq.n	800c94e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c91e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c922:	2202      	movs	r2, #2
 800c924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c928:	2300      	movs	r3, #0
 800c92a:	9303      	str	r3, [sp, #12]
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	9302      	str	r3, [sp, #8]
 800c930:	f107 0314 	add.w	r3, r7, #20
 800c934:	9301      	str	r3, [sp, #4]
 800c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	68b9      	ldr	r1, [r7, #8]
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 f850 	bl	800c9e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c948:	f000 f8d4 	bl	800caf4 <prvAddNewTaskToReadyList>
 800c94c:	e001      	b.n	800c952 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c94e:	2300      	movs	r3, #0
 800c950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c952:	697b      	ldr	r3, [r7, #20]
	}
 800c954:	4618      	mov	r0, r3
 800c956:	3728      	adds	r7, #40	; 0x28
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b08c      	sub	sp, #48	; 0x30
 800c960:	af04      	add	r7, sp, #16
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	603b      	str	r3, [r7, #0]
 800c968:	4613      	mov	r3, r2
 800c96a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c96c:	88fb      	ldrh	r3, [r7, #6]
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4618      	mov	r0, r3
 800c972:	f000 fec9 	bl	800d708 <pvPortMalloc>
 800c976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00e      	beq.n	800c99c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c97e:	2054      	movs	r0, #84	; 0x54
 800c980:	f000 fec2 	bl	800d708 <pvPortMalloc>
 800c984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d003      	beq.n	800c994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	697a      	ldr	r2, [r7, #20]
 800c990:	631a      	str	r2, [r3, #48]	; 0x30
 800c992:	e005      	b.n	800c9a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c994:	6978      	ldr	r0, [r7, #20]
 800c996:	f000 ff83 	bl	800d8a0 <vPortFree>
 800c99a:	e001      	b.n	800c9a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d017      	beq.n	800c9d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c9ae:	88fa      	ldrh	r2, [r7, #6]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9303      	str	r3, [sp, #12]
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	9302      	str	r3, [sp, #8]
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 f80e 	bl	800c9e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9ca:	69f8      	ldr	r0, [r7, #28]
 800c9cc:	f000 f892 	bl	800caf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	61bb      	str	r3, [r7, #24]
 800c9d4:	e002      	b.n	800c9dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9dc:	69bb      	ldr	r3, [r7, #24]
	}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3720      	adds	r7, #32
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b088      	sub	sp, #32
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	60f8      	str	r0, [r7, #12]
 800c9ee:	60b9      	str	r1, [r7, #8]
 800c9f0:	607a      	str	r2, [r7, #4]
 800c9f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	f023 0307 	bic.w	r3, r3, #7
 800ca0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	f003 0307 	and.w	r3, r3, #7
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00a      	beq.n	800ca2e <prvInitialiseNewTask+0x48>
	__asm volatile
 800ca18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1c:	f383 8811 	msr	BASEPRI, r3
 800ca20:	f3bf 8f6f 	isb	sy
 800ca24:	f3bf 8f4f 	dsb	sy
 800ca28:	617b      	str	r3, [r7, #20]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01f      	beq.n	800ca74 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca34:	2300      	movs	r3, #0
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	e012      	b.n	800ca60 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	4413      	add	r3, r2
 800ca40:	7819      	ldrb	r1, [r3, #0]
 800ca42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	4413      	add	r3, r2
 800ca48:	3334      	adds	r3, #52	; 0x34
 800ca4a:	460a      	mov	r2, r1
 800ca4c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	4413      	add	r3, r2
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d006      	beq.n	800ca68 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	61fb      	str	r3, [r7, #28]
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	2b0f      	cmp	r3, #15
 800ca64:	d9e9      	bls.n	800ca3a <prvInitialiseNewTask+0x54>
 800ca66:	e000      	b.n	800ca6a <prvInitialiseNewTask+0x84>
			{
				break;
 800ca68:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca72:	e003      	b.n	800ca7c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	2200      	movs	r2, #0
 800ca78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	2b06      	cmp	r3, #6
 800ca80:	d901      	bls.n	800ca86 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca82:	2306      	movs	r3, #6
 800ca84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca90:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	2200      	movs	r2, #0
 800ca96:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff fe6c 	bl	800c77a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800caa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa4:	3318      	adds	r3, #24
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7ff fe67 	bl	800c77a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800caac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab4:	f1c3 0207 	rsb	r2, r3, #7
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cac0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac4:	2200      	movs	r2, #0
 800cac6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	68f9      	ldr	r1, [r7, #12]
 800cad4:	69b8      	ldr	r0, [r7, #24]
 800cad6:	f000 fc05 	bl	800d2e4 <pxPortInitialiseStack>
 800cada:	4602      	mov	r2, r0
 800cadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cade:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caec:	bf00      	nop
 800caee:	3720      	adds	r7, #32
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cafc:	f000 fd22 	bl	800d544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb00:	4b2a      	ldr	r3, [pc, #168]	; (800cbac <prvAddNewTaskToReadyList+0xb8>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3301      	adds	r3, #1
 800cb06:	4a29      	ldr	r2, [pc, #164]	; (800cbac <prvAddNewTaskToReadyList+0xb8>)
 800cb08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb0a:	4b29      	ldr	r3, [pc, #164]	; (800cbb0 <prvAddNewTaskToReadyList+0xbc>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d109      	bne.n	800cb26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb12:	4a27      	ldr	r2, [pc, #156]	; (800cbb0 <prvAddNewTaskToReadyList+0xbc>)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb18:	4b24      	ldr	r3, [pc, #144]	; (800cbac <prvAddNewTaskToReadyList+0xb8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d110      	bne.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb20:	f000 fabc 	bl	800d09c <prvInitialiseTaskLists>
 800cb24:	e00d      	b.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb26:	4b23      	ldr	r3, [pc, #140]	; (800cbb4 <prvAddNewTaskToReadyList+0xc0>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d109      	bne.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb2e:	4b20      	ldr	r3, [pc, #128]	; (800cbb0 <prvAddNewTaskToReadyList+0xbc>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d802      	bhi.n	800cb42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb3c:	4a1c      	ldr	r2, [pc, #112]	; (800cbb0 <prvAddNewTaskToReadyList+0xbc>)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb42:	4b1d      	ldr	r3, [pc, #116]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3301      	adds	r3, #1
 800cb48:	4a1b      	ldr	r2, [pc, #108]	; (800cbb8 <prvAddNewTaskToReadyList+0xc4>)
 800cb4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb50:	2201      	movs	r2, #1
 800cb52:	409a      	lsls	r2, r3
 800cb54:	4b19      	ldr	r3, [pc, #100]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	4a18      	ldr	r2, [pc, #96]	; (800cbbc <prvAddNewTaskToReadyList+0xc8>)
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb62:	4613      	mov	r3, r2
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4a15      	ldr	r2, [pc, #84]	; (800cbc0 <prvAddNewTaskToReadyList+0xcc>)
 800cb6c:	441a      	add	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	3304      	adds	r3, #4
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f7ff fe0d 	bl	800c794 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb7a:	f000 fd13 	bl	800d5a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb7e:	4b0d      	ldr	r3, [pc, #52]	; (800cbb4 <prvAddNewTaskToReadyList+0xc0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00e      	beq.n	800cba4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb86:	4b0a      	ldr	r3, [pc, #40]	; (800cbb0 <prvAddNewTaskToReadyList+0xbc>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d207      	bcs.n	800cba4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb94:	4b0b      	ldr	r3, [pc, #44]	; (800cbc4 <prvAddNewTaskToReadyList+0xd0>)
 800cb96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	20001fb0 	.word	0x20001fb0
 800cbb0:	20001eb0 	.word	0x20001eb0
 800cbb4:	20001fbc 	.word	0x20001fbc
 800cbb8:	20001fcc 	.word	0x20001fcc
 800cbbc:	20001fb8 	.word	0x20001fb8
 800cbc0:	20001eb4 	.word	0x20001eb4
 800cbc4:	e000ed04 	.word	0xe000ed04

0800cbc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d017      	beq.n	800cc0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbda:	4b13      	ldr	r3, [pc, #76]	; (800cc28 <vTaskDelay+0x60>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00a      	beq.n	800cbf8 <vTaskDelay+0x30>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	f383 8811 	msr	BASEPRI, r3
 800cbea:	f3bf 8f6f 	isb	sy
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	60bb      	str	r3, [r7, #8]
}
 800cbf4:	bf00      	nop
 800cbf6:	e7fe      	b.n	800cbf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cbf8:	f000 f87a 	bl	800ccf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fb0a 	bl	800d218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc04:	f000 f882 	bl	800cd0c <xTaskResumeAll>
 800cc08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d107      	bne.n	800cc20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc10:	4b06      	ldr	r3, [pc, #24]	; (800cc2c <vTaskDelay+0x64>)
 800cc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20001fd8 	.word	0x20001fd8
 800cc2c:	e000ed04 	.word	0xe000ed04

0800cc30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08a      	sub	sp, #40	; 0x28
 800cc34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc3e:	463a      	mov	r2, r7
 800cc40:	1d39      	adds	r1, r7, #4
 800cc42:	f107 0308 	add.w	r3, r7, #8
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7f4 f8fc 	bl	8000e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	9202      	str	r2, [sp, #8]
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	2300      	movs	r3, #0
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	460a      	mov	r2, r1
 800cc5e:	491e      	ldr	r1, [pc, #120]	; (800ccd8 <vTaskStartScheduler+0xa8>)
 800cc60:	481e      	ldr	r0, [pc, #120]	; (800ccdc <vTaskStartScheduler+0xac>)
 800cc62:	f7ff fe1e 	bl	800c8a2 <xTaskCreateStatic>
 800cc66:	4603      	mov	r3, r0
 800cc68:	4a1d      	ldr	r2, [pc, #116]	; (800cce0 <vTaskStartScheduler+0xb0>)
 800cc6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc6c:	4b1c      	ldr	r3, [pc, #112]	; (800cce0 <vTaskStartScheduler+0xb0>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc74:	2301      	movs	r3, #1
 800cc76:	617b      	str	r3, [r7, #20]
 800cc78:	e001      	b.n	800cc7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d116      	bne.n	800ccb2 <vTaskStartScheduler+0x82>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	613b      	str	r3, [r7, #16]
}
 800cc96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc98:	4b12      	ldr	r3, [pc, #72]	; (800cce4 <vTaskStartScheduler+0xb4>)
 800cc9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cca0:	4b11      	ldr	r3, [pc, #68]	; (800cce8 <vTaskStartScheduler+0xb8>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cca6:	4b11      	ldr	r3, [pc, #68]	; (800ccec <vTaskStartScheduler+0xbc>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ccac:	f000 fba8 	bl	800d400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ccb0:	e00e      	b.n	800ccd0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccb8:	d10a      	bne.n	800ccd0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ccba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbe:	f383 8811 	msr	BASEPRI, r3
 800ccc2:	f3bf 8f6f 	isb	sy
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	60fb      	str	r3, [r7, #12]
}
 800cccc:	bf00      	nop
 800ccce:	e7fe      	b.n	800ccce <vTaskStartScheduler+0x9e>
}
 800ccd0:	bf00      	nop
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	0800f980 	.word	0x0800f980
 800ccdc:	0800d06d 	.word	0x0800d06d
 800cce0:	20001fd4 	.word	0x20001fd4
 800cce4:	20001fd0 	.word	0x20001fd0
 800cce8:	20001fbc 	.word	0x20001fbc
 800ccec:	20001fb4 	.word	0x20001fb4

0800ccf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ccf4:	4b04      	ldr	r3, [pc, #16]	; (800cd08 <vTaskSuspendAll+0x18>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	4a03      	ldr	r2, [pc, #12]	; (800cd08 <vTaskSuspendAll+0x18>)
 800ccfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccfe:	bf00      	nop
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	20001fd8 	.word	0x20001fd8

0800cd0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd1a:	4b41      	ldr	r3, [pc, #260]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10a      	bne.n	800cd38 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	603b      	str	r3, [r7, #0]
}
 800cd34:	bf00      	nop
 800cd36:	e7fe      	b.n	800cd36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd38:	f000 fc04 	bl	800d544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd3c:	4b38      	ldr	r3, [pc, #224]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	4a37      	ldr	r2, [pc, #220]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd46:	4b36      	ldr	r3, [pc, #216]	; (800ce20 <xTaskResumeAll+0x114>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d161      	bne.n	800ce12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd4e:	4b35      	ldr	r3, [pc, #212]	; (800ce24 <xTaskResumeAll+0x118>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d05d      	beq.n	800ce12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd56:	e02e      	b.n	800cdb6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd58:	4b33      	ldr	r3, [pc, #204]	; (800ce28 <xTaskResumeAll+0x11c>)
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3318      	adds	r3, #24
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7ff fd72 	bl	800c84e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fd6d 	bl	800c84e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	2201      	movs	r2, #1
 800cd7a:	409a      	lsls	r2, r3
 800cd7c:	4b2b      	ldr	r3, [pc, #172]	; (800ce2c <xTaskResumeAll+0x120>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	4313      	orrs	r3, r2
 800cd82:	4a2a      	ldr	r2, [pc, #168]	; (800ce2c <xTaskResumeAll+0x120>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4a27      	ldr	r2, [pc, #156]	; (800ce30 <xTaskResumeAll+0x124>)
 800cd94:	441a      	add	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f7ff fcf9 	bl	800c794 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda6:	4b23      	ldr	r3, [pc, #140]	; (800ce34 <xTaskResumeAll+0x128>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d302      	bcc.n	800cdb6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cdb0:	4b21      	ldr	r3, [pc, #132]	; (800ce38 <xTaskResumeAll+0x12c>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdb6:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <xTaskResumeAll+0x11c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1cc      	bne.n	800cd58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cdc4:	f000 fa08 	bl	800d1d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cdc8:	4b1c      	ldr	r3, [pc, #112]	; (800ce3c <xTaskResumeAll+0x130>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d010      	beq.n	800cdf6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdd4:	f000 f836 	bl	800ce44 <xTaskIncrementTick>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cdde:	4b16      	ldr	r3, [pc, #88]	; (800ce38 <xTaskResumeAll+0x12c>)
 800cde0:	2201      	movs	r2, #1
 800cde2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1f1      	bne.n	800cdd4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cdf0:	4b12      	ldr	r3, [pc, #72]	; (800ce3c <xTaskResumeAll+0x130>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdf6:	4b10      	ldr	r3, [pc, #64]	; (800ce38 <xTaskResumeAll+0x12c>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d009      	beq.n	800ce12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce02:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <xTaskResumeAll+0x134>)
 800ce04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce12:	f000 fbc7 	bl	800d5a4 <vPortExitCritical>

	return xAlreadyYielded;
 800ce16:	68bb      	ldr	r3, [r7, #8]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3710      	adds	r7, #16
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20001fd8 	.word	0x20001fd8
 800ce24:	20001fb0 	.word	0x20001fb0
 800ce28:	20001f70 	.word	0x20001f70
 800ce2c:	20001fb8 	.word	0x20001fb8
 800ce30:	20001eb4 	.word	0x20001eb4
 800ce34:	20001eb0 	.word	0x20001eb0
 800ce38:	20001fc4 	.word	0x20001fc4
 800ce3c:	20001fc0 	.word	0x20001fc0
 800ce40:	e000ed04 	.word	0xe000ed04

0800ce44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4e:	4b4e      	ldr	r3, [pc, #312]	; (800cf88 <xTaskIncrementTick+0x144>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f040 808e 	bne.w	800cf74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce58:	4b4c      	ldr	r3, [pc, #304]	; (800cf8c <xTaskIncrementTick+0x148>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce60:	4a4a      	ldr	r2, [pc, #296]	; (800cf8c <xTaskIncrementTick+0x148>)
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d120      	bne.n	800ceae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce6c:	4b48      	ldr	r3, [pc, #288]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <xTaskIncrementTick+0x48>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	603b      	str	r3, [r7, #0]
}
 800ce88:	bf00      	nop
 800ce8a:	e7fe      	b.n	800ce8a <xTaskIncrementTick+0x46>
 800ce8c:	4b40      	ldr	r3, [pc, #256]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60fb      	str	r3, [r7, #12]
 800ce92:	4b40      	ldr	r3, [pc, #256]	; (800cf94 <xTaskIncrementTick+0x150>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	4a3e      	ldr	r2, [pc, #248]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	4a3e      	ldr	r2, [pc, #248]	; (800cf94 <xTaskIncrementTick+0x150>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6013      	str	r3, [r2, #0]
 800cea0:	4b3d      	ldr	r3, [pc, #244]	; (800cf98 <xTaskIncrementTick+0x154>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3301      	adds	r3, #1
 800cea6:	4a3c      	ldr	r2, [pc, #240]	; (800cf98 <xTaskIncrementTick+0x154>)
 800cea8:	6013      	str	r3, [r2, #0]
 800ceaa:	f000 f995 	bl	800d1d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceae:	4b3b      	ldr	r3, [pc, #236]	; (800cf9c <xTaskIncrementTick+0x158>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d348      	bcc.n	800cf4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceb8:	4b35      	ldr	r3, [pc, #212]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d104      	bne.n	800cecc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec2:	4b36      	ldr	r3, [pc, #216]	; (800cf9c <xTaskIncrementTick+0x158>)
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cec8:	601a      	str	r2, [r3, #0]
					break;
 800ceca:	e03e      	b.n	800cf4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cecc:	4b30      	ldr	r3, [pc, #192]	; (800cf90 <xTaskIncrementTick+0x14c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d203      	bcs.n	800ceec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cee4:	4a2d      	ldr	r2, [pc, #180]	; (800cf9c <xTaskIncrementTick+0x158>)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ceea:	e02e      	b.n	800cf4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff fcac 	bl	800c84e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	3318      	adds	r3, #24
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff fca3 	bl	800c84e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	409a      	lsls	r2, r3
 800cf10:	4b23      	ldr	r3, [pc, #140]	; (800cfa0 <xTaskIncrementTick+0x15c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	4a22      	ldr	r2, [pc, #136]	; (800cfa0 <xTaskIncrementTick+0x15c>)
 800cf18:	6013      	str	r3, [r2, #0]
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf1e:	4613      	mov	r3, r2
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	4413      	add	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4a1f      	ldr	r2, [pc, #124]	; (800cfa4 <xTaskIncrementTick+0x160>)
 800cf28:	441a      	add	r2, r3
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7ff fc2f 	bl	800c794 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf3a:	4b1b      	ldr	r3, [pc, #108]	; (800cfa8 <xTaskIncrementTick+0x164>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d3b9      	bcc.n	800ceb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cf44:	2301      	movs	r3, #1
 800cf46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf48:	e7b6      	b.n	800ceb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf4a:	4b17      	ldr	r3, [pc, #92]	; (800cfa8 <xTaskIncrementTick+0x164>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf50:	4914      	ldr	r1, [pc, #80]	; (800cfa4 <xTaskIncrementTick+0x160>)
 800cf52:	4613      	mov	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	440b      	add	r3, r1
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d901      	bls.n	800cf66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cf62:	2301      	movs	r3, #1
 800cf64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf66:	4b11      	ldr	r3, [pc, #68]	; (800cfac <xTaskIncrementTick+0x168>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d007      	beq.n	800cf7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	617b      	str	r3, [r7, #20]
 800cf72:	e004      	b.n	800cf7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf74:	4b0e      	ldr	r3, [pc, #56]	; (800cfb0 <xTaskIncrementTick+0x16c>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	4a0d      	ldr	r2, [pc, #52]	; (800cfb0 <xTaskIncrementTick+0x16c>)
 800cf7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf7e:	697b      	ldr	r3, [r7, #20]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	20001fd8 	.word	0x20001fd8
 800cf8c:	20001fb4 	.word	0x20001fb4
 800cf90:	20001f68 	.word	0x20001f68
 800cf94:	20001f6c 	.word	0x20001f6c
 800cf98:	20001fc8 	.word	0x20001fc8
 800cf9c:	20001fd0 	.word	0x20001fd0
 800cfa0:	20001fb8 	.word	0x20001fb8
 800cfa4:	20001eb4 	.word	0x20001eb4
 800cfa8:	20001eb0 	.word	0x20001eb0
 800cfac:	20001fc4 	.word	0x20001fc4
 800cfb0:	20001fc0 	.word	0x20001fc0

0800cfb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfba:	4b27      	ldr	r3, [pc, #156]	; (800d058 <vTaskSwitchContext+0xa4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfc2:	4b26      	ldr	r3, [pc, #152]	; (800d05c <vTaskSwitchContext+0xa8>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfc8:	e03f      	b.n	800d04a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cfca:	4b24      	ldr	r3, [pc, #144]	; (800d05c <vTaskSwitchContext+0xa8>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd0:	4b23      	ldr	r3, [pc, #140]	; (800d060 <vTaskSwitchContext+0xac>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	fab3 f383 	clz	r3, r3
 800cfdc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	f1c3 031f 	rsb	r3, r3, #31
 800cfe4:	617b      	str	r3, [r7, #20]
 800cfe6:	491f      	ldr	r1, [pc, #124]	; (800d064 <vTaskSwitchContext+0xb0>)
 800cfe8:	697a      	ldr	r2, [r7, #20]
 800cfea:	4613      	mov	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	440b      	add	r3, r1
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10a      	bne.n	800d010 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	607b      	str	r3, [r7, #4]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <vTaskSwitchContext+0x5a>
 800d010:	697a      	ldr	r2, [r7, #20]
 800d012:	4613      	mov	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4413      	add	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4a12      	ldr	r2, [pc, #72]	; (800d064 <vTaskSwitchContext+0xb0>)
 800d01c:	4413      	add	r3, r2
 800d01e:	613b      	str	r3, [r7, #16]
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	605a      	str	r2, [r3, #4]
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	3308      	adds	r3, #8
 800d032:	429a      	cmp	r2, r3
 800d034:	d104      	bne.n	800d040 <vTaskSwitchContext+0x8c>
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	605a      	str	r2, [r3, #4]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	4a08      	ldr	r2, [pc, #32]	; (800d068 <vTaskSwitchContext+0xb4>)
 800d048:	6013      	str	r3, [r2, #0]
}
 800d04a:	bf00      	nop
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	20001fd8 	.word	0x20001fd8
 800d05c:	20001fc4 	.word	0x20001fc4
 800d060:	20001fb8 	.word	0x20001fb8
 800d064:	20001eb4 	.word	0x20001eb4
 800d068:	20001eb0 	.word	0x20001eb0

0800d06c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d074:	f000 f852 	bl	800d11c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d078:	4b06      	ldr	r3, [pc, #24]	; (800d094 <prvIdleTask+0x28>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d9f9      	bls.n	800d074 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <prvIdleTask+0x2c>)
 800d082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d090:	e7f0      	b.n	800d074 <prvIdleTask+0x8>
 800d092:	bf00      	nop
 800d094:	20001eb4 	.word	0x20001eb4
 800d098:	e000ed04 	.word	0xe000ed04

0800d09c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	607b      	str	r3, [r7, #4]
 800d0a6:	e00c      	b.n	800d0c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4a12      	ldr	r2, [pc, #72]	; (800d0fc <prvInitialiseTaskLists+0x60>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff fb3f 	bl	800c73a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	607b      	str	r3, [r7, #4]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b06      	cmp	r3, #6
 800d0c6:	d9ef      	bls.n	800d0a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0c8:	480d      	ldr	r0, [pc, #52]	; (800d100 <prvInitialiseTaskLists+0x64>)
 800d0ca:	f7ff fb36 	bl	800c73a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0ce:	480d      	ldr	r0, [pc, #52]	; (800d104 <prvInitialiseTaskLists+0x68>)
 800d0d0:	f7ff fb33 	bl	800c73a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0d4:	480c      	ldr	r0, [pc, #48]	; (800d108 <prvInitialiseTaskLists+0x6c>)
 800d0d6:	f7ff fb30 	bl	800c73a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0da:	480c      	ldr	r0, [pc, #48]	; (800d10c <prvInitialiseTaskLists+0x70>)
 800d0dc:	f7ff fb2d 	bl	800c73a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0e0:	480b      	ldr	r0, [pc, #44]	; (800d110 <prvInitialiseTaskLists+0x74>)
 800d0e2:	f7ff fb2a 	bl	800c73a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0e6:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <prvInitialiseTaskLists+0x78>)
 800d0e8:	4a05      	ldr	r2, [pc, #20]	; (800d100 <prvInitialiseTaskLists+0x64>)
 800d0ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <prvInitialiseTaskLists+0x7c>)
 800d0ee:	4a05      	ldr	r2, [pc, #20]	; (800d104 <prvInitialiseTaskLists+0x68>)
 800d0f0:	601a      	str	r2, [r3, #0]
}
 800d0f2:	bf00      	nop
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20001eb4 	.word	0x20001eb4
 800d100:	20001f40 	.word	0x20001f40
 800d104:	20001f54 	.word	0x20001f54
 800d108:	20001f70 	.word	0x20001f70
 800d10c:	20001f84 	.word	0x20001f84
 800d110:	20001f9c 	.word	0x20001f9c
 800d114:	20001f68 	.word	0x20001f68
 800d118:	20001f6c 	.word	0x20001f6c

0800d11c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d122:	e019      	b.n	800d158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d124:	f000 fa0e 	bl	800d544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d128:	4b10      	ldr	r3, [pc, #64]	; (800d16c <prvCheckTasksWaitingTermination+0x50>)
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3304      	adds	r3, #4
 800d134:	4618      	mov	r0, r3
 800d136:	f7ff fb8a 	bl	800c84e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d13a:	4b0d      	ldr	r3, [pc, #52]	; (800d170 <prvCheckTasksWaitingTermination+0x54>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3b01      	subs	r3, #1
 800d140:	4a0b      	ldr	r2, [pc, #44]	; (800d170 <prvCheckTasksWaitingTermination+0x54>)
 800d142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d144:	4b0b      	ldr	r3, [pc, #44]	; (800d174 <prvCheckTasksWaitingTermination+0x58>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3b01      	subs	r3, #1
 800d14a:	4a0a      	ldr	r2, [pc, #40]	; (800d174 <prvCheckTasksWaitingTermination+0x58>)
 800d14c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d14e:	f000 fa29 	bl	800d5a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 f810 	bl	800d178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d158:	4b06      	ldr	r3, [pc, #24]	; (800d174 <prvCheckTasksWaitingTermination+0x58>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1e1      	bne.n	800d124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d160:	bf00      	nop
 800d162:	bf00      	nop
 800d164:	3708      	adds	r7, #8
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	20001f84 	.word	0x20001f84
 800d170:	20001fb0 	.word	0x20001fb0
 800d174:	20001f98 	.word	0x20001f98

0800d178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d186:	2b00      	cmp	r3, #0
 800d188:	d108      	bne.n	800d19c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fb86 	bl	800d8a0 <vPortFree>
				vPortFree( pxTCB );
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fb83 	bl	800d8a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d19a:	e018      	b.n	800d1ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d103      	bne.n	800d1ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fb7a 	bl	800d8a0 <vPortFree>
	}
 800d1ac:	e00f      	b.n	800d1ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d1b4:	2b02      	cmp	r3, #2
 800d1b6:	d00a      	beq.n	800d1ce <prvDeleteTCB+0x56>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	60fb      	str	r3, [r7, #12]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <prvDeleteTCB+0x54>
	}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1de:	4b0c      	ldr	r3, [pc, #48]	; (800d210 <prvResetNextTaskUnblockTime+0x38>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d104      	bne.n	800d1f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1e8:	4b0a      	ldr	r3, [pc, #40]	; (800d214 <prvResetNextTaskUnblockTime+0x3c>)
 800d1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1f0:	e008      	b.n	800d204 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1f2:	4b07      	ldr	r3, [pc, #28]	; (800d210 <prvResetNextTaskUnblockTime+0x38>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	4a04      	ldr	r2, [pc, #16]	; (800d214 <prvResetNextTaskUnblockTime+0x3c>)
 800d202:	6013      	str	r3, [r2, #0]
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	20001f68 	.word	0x20001f68
 800d214:	20001fd0 	.word	0x20001fd0

0800d218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d222:	4b29      	ldr	r3, [pc, #164]	; (800d2c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d228:	4b28      	ldr	r3, [pc, #160]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3304      	adds	r3, #4
 800d22e:	4618      	mov	r0, r3
 800d230:	f7ff fb0d 	bl	800c84e <uxListRemove>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10b      	bne.n	800d252 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d23a:	4b24      	ldr	r3, [pc, #144]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	2201      	movs	r2, #1
 800d242:	fa02 f303 	lsl.w	r3, r2, r3
 800d246:	43da      	mvns	r2, r3
 800d248:	4b21      	ldr	r3, [pc, #132]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4013      	ands	r3, r2
 800d24e:	4a20      	ldr	r2, [pc, #128]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d250:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d258:	d10a      	bne.n	800d270 <prvAddCurrentTaskToDelayedList+0x58>
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d007      	beq.n	800d270 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d260:	4b1a      	ldr	r3, [pc, #104]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3304      	adds	r3, #4
 800d266:	4619      	mov	r1, r3
 800d268:	481a      	ldr	r0, [pc, #104]	; (800d2d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d26a:	f7ff fa93 	bl	800c794 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d26e:	e026      	b.n	800d2be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4413      	add	r3, r2
 800d276:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d278:	4b14      	ldr	r3, [pc, #80]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d280:	68ba      	ldr	r2, [r7, #8]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	429a      	cmp	r2, r3
 800d286:	d209      	bcs.n	800d29c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d288:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	3304      	adds	r3, #4
 800d292:	4619      	mov	r1, r3
 800d294:	4610      	mov	r0, r2
 800d296:	f7ff faa1 	bl	800c7dc <vListInsert>
}
 800d29a:	e010      	b.n	800d2be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d29c:	4b0f      	ldr	r3, [pc, #60]	; (800d2dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	f7ff fa97 	bl	800c7dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d2ae:	4b0c      	ldr	r3, [pc, #48]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d202      	bcs.n	800d2be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	6013      	str	r3, [r2, #0]
}
 800d2be:	bf00      	nop
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20001fb4 	.word	0x20001fb4
 800d2cc:	20001eb0 	.word	0x20001eb0
 800d2d0:	20001fb8 	.word	0x20001fb8
 800d2d4:	20001f9c 	.word	0x20001f9c
 800d2d8:	20001f6c 	.word	0x20001f6c
 800d2dc:	20001f68 	.word	0x20001f68
 800d2e0:	20001fd0 	.word	0x20001fd0

0800d2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	3b04      	subs	r3, #4
 800d2f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	3b04      	subs	r3, #4
 800d302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	f023 0201 	bic.w	r2, r3, #1
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	3b04      	subs	r3, #4
 800d312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d314:	4a0c      	ldr	r2, [pc, #48]	; (800d348 <pxPortInitialiseStack+0x64>)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3b14      	subs	r3, #20
 800d31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	3b04      	subs	r3, #4
 800d32a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f06f 0202 	mvn.w	r2, #2
 800d332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	3b20      	subs	r3, #32
 800d338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d33a:	68fb      	ldr	r3, [r7, #12]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3714      	adds	r7, #20
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	0800d34d 	.word	0x0800d34d

0800d34c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d356:	4b12      	ldr	r3, [pc, #72]	; (800d3a0 <prvTaskExitError+0x54>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d35e:	d00a      	beq.n	800d376 <prvTaskExitError+0x2a>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	60fb      	str	r3, [r7, #12]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <prvTaskExitError+0x28>
	__asm volatile
 800d376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37a:	f383 8811 	msr	BASEPRI, r3
 800d37e:	f3bf 8f6f 	isb	sy
 800d382:	f3bf 8f4f 	dsb	sy
 800d386:	60bb      	str	r3, [r7, #8]
}
 800d388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d38a:	bf00      	nop
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d0fc      	beq.n	800d38c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d392:	bf00      	nop
 800d394:	bf00      	nop
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	20000020 	.word	0x20000020
	...

0800d3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <pxCurrentTCBConst2>)
 800d3b2:	6819      	ldr	r1, [r3, #0]
 800d3b4:	6808      	ldr	r0, [r1, #0]
 800d3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ba:	f380 8809 	msr	PSP, r0
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f04f 0000 	mov.w	r0, #0
 800d3c6:	f380 8811 	msr	BASEPRI, r0
 800d3ca:	4770      	bx	lr
 800d3cc:	f3af 8000 	nop.w

0800d3d0 <pxCurrentTCBConst2>:
 800d3d0:	20001eb0 	.word	0x20001eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop

0800d3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3d8:	4808      	ldr	r0, [pc, #32]	; (800d3fc <prvPortStartFirstTask+0x24>)
 800d3da:	6800      	ldr	r0, [r0, #0]
 800d3dc:	6800      	ldr	r0, [r0, #0]
 800d3de:	f380 8808 	msr	MSP, r0
 800d3e2:	f04f 0000 	mov.w	r0, #0
 800d3e6:	f380 8814 	msr	CONTROL, r0
 800d3ea:	b662      	cpsie	i
 800d3ec:	b661      	cpsie	f
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	df00      	svc	0
 800d3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3fa:	bf00      	nop
 800d3fc:	e000ed08 	.word	0xe000ed08

0800d400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d406:	4b46      	ldr	r3, [pc, #280]	; (800d520 <xPortStartScheduler+0x120>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a46      	ldr	r2, [pc, #280]	; (800d524 <xPortStartScheduler+0x124>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d10a      	bne.n	800d426 <xPortStartScheduler+0x26>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	613b      	str	r3, [r7, #16]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d426:	4b3e      	ldr	r3, [pc, #248]	; (800d520 <xPortStartScheduler+0x120>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a3f      	ldr	r2, [pc, #252]	; (800d528 <xPortStartScheduler+0x128>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d10a      	bne.n	800d446 <xPortStartScheduler+0x46>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	60fb      	str	r3, [r7, #12]
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d446:	4b39      	ldr	r3, [pc, #228]	; (800d52c <xPortStartScheduler+0x12c>)
 800d448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	22ff      	movs	r2, #255	; 0xff
 800d456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	4b31      	ldr	r3, [pc, #196]	; (800d530 <xPortStartScheduler+0x130>)
 800d46c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d46e:	4b31      	ldr	r3, [pc, #196]	; (800d534 <xPortStartScheduler+0x134>)
 800d470:	2207      	movs	r2, #7
 800d472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d474:	e009      	b.n	800d48a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d476:	4b2f      	ldr	r3, [pc, #188]	; (800d534 <xPortStartScheduler+0x134>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3b01      	subs	r3, #1
 800d47c:	4a2d      	ldr	r2, [pc, #180]	; (800d534 <xPortStartScheduler+0x134>)
 800d47e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d480:	78fb      	ldrb	r3, [r7, #3]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	b2db      	uxtb	r3, r3
 800d488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d48a:	78fb      	ldrb	r3, [r7, #3]
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d492:	2b80      	cmp	r3, #128	; 0x80
 800d494:	d0ef      	beq.n	800d476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d496:	4b27      	ldr	r3, [pc, #156]	; (800d534 <xPortStartScheduler+0x134>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f1c3 0307 	rsb	r3, r3, #7
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d00a      	beq.n	800d4b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	60bb      	str	r3, [r7, #8]
}
 800d4b4:	bf00      	nop
 800d4b6:	e7fe      	b.n	800d4b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4b8:	4b1e      	ldr	r3, [pc, #120]	; (800d534 <xPortStartScheduler+0x134>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	021b      	lsls	r3, r3, #8
 800d4be:	4a1d      	ldr	r2, [pc, #116]	; (800d534 <xPortStartScheduler+0x134>)
 800d4c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4c2:	4b1c      	ldr	r3, [pc, #112]	; (800d534 <xPortStartScheduler+0x134>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4ca:	4a1a      	ldr	r2, [pc, #104]	; (800d534 <xPortStartScheduler+0x134>)
 800d4cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4d6:	4b18      	ldr	r3, [pc, #96]	; (800d538 <xPortStartScheduler+0x138>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a17      	ldr	r2, [pc, #92]	; (800d538 <xPortStartScheduler+0x138>)
 800d4dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4e2:	4b15      	ldr	r3, [pc, #84]	; (800d538 <xPortStartScheduler+0x138>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a14      	ldr	r2, [pc, #80]	; (800d538 <xPortStartScheduler+0x138>)
 800d4e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d4ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4ee:	f000 f8dd 	bl	800d6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4f2:	4b12      	ldr	r3, [pc, #72]	; (800d53c <xPortStartScheduler+0x13c>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4f8:	f000 f8fc 	bl	800d6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4fc:	4b10      	ldr	r3, [pc, #64]	; (800d540 <xPortStartScheduler+0x140>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a0f      	ldr	r2, [pc, #60]	; (800d540 <xPortStartScheduler+0x140>)
 800d502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d508:	f7ff ff66 	bl	800d3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d50c:	f7ff fd52 	bl	800cfb4 <vTaskSwitchContext>
	prvTaskExitError();
 800d510:	f7ff ff1c 	bl	800d34c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	e000ed00 	.word	0xe000ed00
 800d524:	410fc271 	.word	0x410fc271
 800d528:	410fc270 	.word	0x410fc270
 800d52c:	e000e400 	.word	0xe000e400
 800d530:	20001fdc 	.word	0x20001fdc
 800d534:	20001fe0 	.word	0x20001fe0
 800d538:	e000ed20 	.word	0xe000ed20
 800d53c:	20000020 	.word	0x20000020
 800d540:	e000ef34 	.word	0xe000ef34

0800d544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	607b      	str	r3, [r7, #4]
}
 800d55c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <vPortEnterCritical+0x58>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	4a0d      	ldr	r2, [pc, #52]	; (800d59c <vPortEnterCritical+0x58>)
 800d566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d568:	4b0c      	ldr	r3, [pc, #48]	; (800d59c <vPortEnterCritical+0x58>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d10f      	bne.n	800d590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d570:	4b0b      	ldr	r3, [pc, #44]	; (800d5a0 <vPortEnterCritical+0x5c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	b2db      	uxtb	r3, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <vPortEnterCritical+0x4c>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	603b      	str	r3, [r7, #0]
}
 800d58c:	bf00      	nop
 800d58e:	e7fe      	b.n	800d58e <vPortEnterCritical+0x4a>
	}
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20000020 	.word	0x20000020
 800d5a0:	e000ed04 	.word	0xe000ed04

0800d5a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5aa:	4b12      	ldr	r3, [pc, #72]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10a      	bne.n	800d5c8 <vPortExitCritical+0x24>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	607b      	str	r3, [r7, #4]
}
 800d5c4:	bf00      	nop
 800d5c6:	e7fe      	b.n	800d5c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	4a09      	ldr	r2, [pc, #36]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5d2:	4b08      	ldr	r3, [pc, #32]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d105      	bne.n	800d5e6 <vPortExitCritical+0x42>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d5e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000020 	.word	0x20000020
	...

0800d600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d600:	f3ef 8009 	mrs	r0, PSP
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	4b15      	ldr	r3, [pc, #84]	; (800d660 <pxCurrentTCBConst>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	f01e 0f10 	tst.w	lr, #16
 800d610:	bf08      	it	eq
 800d612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61a:	6010      	str	r0, [r2, #0]
 800d61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d624:	f380 8811 	msr	BASEPRI, r0
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f7ff fcc0 	bl	800cfb4 <vTaskSwitchContext>
 800d634:	f04f 0000 	mov.w	r0, #0
 800d638:	f380 8811 	msr	BASEPRI, r0
 800d63c:	bc09      	pop	{r0, r3}
 800d63e:	6819      	ldr	r1, [r3, #0]
 800d640:	6808      	ldr	r0, [r1, #0]
 800d642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d646:	f01e 0f10 	tst.w	lr, #16
 800d64a:	bf08      	it	eq
 800d64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d650:	f380 8809 	msr	PSP, r0
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	f3af 8000 	nop.w

0800d660 <pxCurrentTCBConst>:
 800d660:	20001eb0 	.word	0x20001eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d664:	bf00      	nop
 800d666:	bf00      	nop

0800d668 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	607b      	str	r3, [r7, #4]
}
 800d680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d682:	f7ff fbdf 	bl	800ce44 <xTaskIncrementTick>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <SysTick_Handler+0x40>)
 800d68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	2300      	movs	r3, #0
 800d696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	f383 8811 	msr	BASEPRI, r3
}
 800d69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <vPortSetupTimerInterrupt+0x34>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6b6:	4b0b      	ldr	r3, [pc, #44]	; (800d6e4 <vPortSetupTimerInterrupt+0x38>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <vPortSetupTimerInterrupt+0x3c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a0a      	ldr	r2, [pc, #40]	; (800d6ec <vPortSetupTimerInterrupt+0x40>)
 800d6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c6:	099b      	lsrs	r3, r3, #6
 800d6c8:	4a09      	ldr	r2, [pc, #36]	; (800d6f0 <vPortSetupTimerInterrupt+0x44>)
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ce:	4b04      	ldr	r3, [pc, #16]	; (800d6e0 <vPortSetupTimerInterrupt+0x34>)
 800d6d0:	2207      	movs	r2, #7
 800d6d2:	601a      	str	r2, [r3, #0]
}
 800d6d4:	bf00      	nop
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	e000e010 	.word	0xe000e010
 800d6e4:	e000e018 	.word	0xe000e018
 800d6e8:	20000014 	.word	0x20000014
 800d6ec:	10624dd3 	.word	0x10624dd3
 800d6f0:	e000e014 	.word	0xe000e014

0800d6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d704 <vPortEnableVFP+0x10>
 800d6f8:	6801      	ldr	r1, [r0, #0]
 800d6fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6fe:	6001      	str	r1, [r0, #0]
 800d700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d702:	bf00      	nop
 800d704:	e000ed88 	.word	0xe000ed88

0800d708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b08a      	sub	sp, #40	; 0x28
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d714:	f7ff faec 	bl	800ccf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d718:	4b5b      	ldr	r3, [pc, #364]	; (800d888 <pvPortMalloc+0x180>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d720:	f000 f920 	bl	800d964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d724:	4b59      	ldr	r3, [pc, #356]	; (800d88c <pvPortMalloc+0x184>)
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4013      	ands	r3, r2
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f040 8093 	bne.w	800d858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d01d      	beq.n	800d774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d738:	2208      	movs	r2, #8
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4413      	add	r3, r2
 800d73e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f003 0307 	and.w	r3, r3, #7
 800d746:	2b00      	cmp	r3, #0
 800d748:	d014      	beq.n	800d774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f023 0307 	bic.w	r3, r3, #7
 800d750:	3308      	adds	r3, #8
 800d752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f003 0307 	and.w	r3, r3, #7
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <pvPortMalloc+0x6c>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	617b      	str	r3, [r7, #20]
}
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d06e      	beq.n	800d858 <pvPortMalloc+0x150>
 800d77a:	4b45      	ldr	r3, [pc, #276]	; (800d890 <pvPortMalloc+0x188>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	429a      	cmp	r2, r3
 800d782:	d869      	bhi.n	800d858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d784:	4b43      	ldr	r3, [pc, #268]	; (800d894 <pvPortMalloc+0x18c>)
 800d786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d788:	4b42      	ldr	r3, [pc, #264]	; (800d894 <pvPortMalloc+0x18c>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d78e:	e004      	b.n	800d79a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d903      	bls.n	800d7ac <pvPortMalloc+0xa4>
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1f1      	bne.n	800d790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7ac:	4b36      	ldr	r3, [pc, #216]	; (800d888 <pvPortMalloc+0x180>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d050      	beq.n	800d858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2208      	movs	r2, #8
 800d7bc:	4413      	add	r3, r2
 800d7be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ca:	685a      	ldr	r2, [r3, #4]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	1ad2      	subs	r2, r2, r3
 800d7d0:	2308      	movs	r3, #8
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d91f      	bls.n	800d818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4413      	add	r3, r2
 800d7de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	f003 0307 	and.w	r3, r3, #7
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <pvPortMalloc+0xf8>
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	613b      	str	r3, [r7, #16]
}
 800d7fc:	bf00      	nop
 800d7fe:	e7fe      	b.n	800d7fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	1ad2      	subs	r2, r2, r3
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	687a      	ldr	r2, [r7, #4]
 800d810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d812:	69b8      	ldr	r0, [r7, #24]
 800d814:	f000 f908 	bl	800da28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d818:	4b1d      	ldr	r3, [pc, #116]	; (800d890 <pvPortMalloc+0x188>)
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	1ad3      	subs	r3, r2, r3
 800d822:	4a1b      	ldr	r2, [pc, #108]	; (800d890 <pvPortMalloc+0x188>)
 800d824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d826:	4b1a      	ldr	r3, [pc, #104]	; (800d890 <pvPortMalloc+0x188>)
 800d828:	681a      	ldr	r2, [r3, #0]
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <pvPortMalloc+0x190>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d203      	bcs.n	800d83a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d832:	4b17      	ldr	r3, [pc, #92]	; (800d890 <pvPortMalloc+0x188>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a18      	ldr	r2, [pc, #96]	; (800d898 <pvPortMalloc+0x190>)
 800d838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	4b13      	ldr	r3, [pc, #76]	; (800d88c <pvPortMalloc+0x184>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	431a      	orrs	r2, r3
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d84e:	4b13      	ldr	r3, [pc, #76]	; (800d89c <pvPortMalloc+0x194>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3301      	adds	r3, #1
 800d854:	4a11      	ldr	r2, [pc, #68]	; (800d89c <pvPortMalloc+0x194>)
 800d856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d858:	f7ff fa58 	bl	800cd0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	f003 0307 	and.w	r3, r3, #7
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00a      	beq.n	800d87c <pvPortMalloc+0x174>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	60fb      	str	r3, [r7, #12]
}
 800d878:	bf00      	nop
 800d87a:	e7fe      	b.n	800d87a <pvPortMalloc+0x172>
	return pvReturn;
 800d87c:	69fb      	ldr	r3, [r7, #28]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3728      	adds	r7, #40	; 0x28
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	20005bec 	.word	0x20005bec
 800d88c:	20005c00 	.word	0x20005c00
 800d890:	20005bf0 	.word	0x20005bf0
 800d894:	20005be4 	.word	0x20005be4
 800d898:	20005bf4 	.word	0x20005bf4
 800d89c:	20005bf8 	.word	0x20005bf8

0800d8a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d04d      	beq.n	800d94e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8b2:	2308      	movs	r3, #8
 800d8b4:	425b      	negs	r3, r3
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	4413      	add	r3, r2
 800d8ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	4b24      	ldr	r3, [pc, #144]	; (800d958 <vPortFree+0xb8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <vPortFree+0x44>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	60fb      	str	r3, [r7, #12]
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00a      	beq.n	800d902 <vPortFree+0x62>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	60bb      	str	r3, [r7, #8]
}
 800d8fe:	bf00      	nop
 800d900:	e7fe      	b.n	800d900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	685a      	ldr	r2, [r3, #4]
 800d906:	4b14      	ldr	r3, [pc, #80]	; (800d958 <vPortFree+0xb8>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4013      	ands	r3, r2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d01e      	beq.n	800d94e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d11a      	bne.n	800d94e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	685a      	ldr	r2, [r3, #4]
 800d91c:	4b0e      	ldr	r3, [pc, #56]	; (800d958 <vPortFree+0xb8>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	43db      	mvns	r3, r3
 800d922:	401a      	ands	r2, r3
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d928:	f7ff f9e2 	bl	800ccf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <vPortFree+0xbc>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4413      	add	r3, r2
 800d936:	4a09      	ldr	r2, [pc, #36]	; (800d95c <vPortFree+0xbc>)
 800d938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d93a:	6938      	ldr	r0, [r7, #16]
 800d93c:	f000 f874 	bl	800da28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d940:	4b07      	ldr	r3, [pc, #28]	; (800d960 <vPortFree+0xc0>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	4a06      	ldr	r2, [pc, #24]	; (800d960 <vPortFree+0xc0>)
 800d948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d94a:	f7ff f9df 	bl	800cd0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d94e:	bf00      	nop
 800d950:	3718      	adds	r7, #24
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20005c00 	.word	0x20005c00
 800d95c:	20005bf0 	.word	0x20005bf0
 800d960:	20005bfc 	.word	0x20005bfc

0800d964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d96a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d96e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d970:	4b27      	ldr	r3, [pc, #156]	; (800da10 <prvHeapInit+0xac>)
 800d972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f003 0307 	and.w	r3, r3, #7
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00c      	beq.n	800d998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3307      	adds	r3, #7
 800d982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0307 	bic.w	r3, r3, #7
 800d98a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d98c:	68ba      	ldr	r2, [r7, #8]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	4a1f      	ldr	r2, [pc, #124]	; (800da10 <prvHeapInit+0xac>)
 800d994:	4413      	add	r3, r2
 800d996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d99c:	4a1d      	ldr	r2, [pc, #116]	; (800da14 <prvHeapInit+0xb0>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9a2:	4b1c      	ldr	r3, [pc, #112]	; (800da14 <prvHeapInit+0xb0>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9b0:	2208      	movs	r2, #8
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	1a9b      	subs	r3, r3, r2
 800d9b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f023 0307 	bic.w	r3, r3, #7
 800d9be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4a15      	ldr	r2, [pc, #84]	; (800da18 <prvHeapInit+0xb4>)
 800d9c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9c6:	4b14      	ldr	r3, [pc, #80]	; (800da18 <prvHeapInit+0xb4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9ce:	4b12      	ldr	r3, [pc, #72]	; (800da18 <prvHeapInit+0xb4>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9e4:	4b0c      	ldr	r3, [pc, #48]	; (800da18 <prvHeapInit+0xb4>)
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	4a0a      	ldr	r2, [pc, #40]	; (800da1c <prvHeapInit+0xb8>)
 800d9f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	4a09      	ldr	r2, [pc, #36]	; (800da20 <prvHeapInit+0xbc>)
 800d9fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9fc:	4b09      	ldr	r3, [pc, #36]	; (800da24 <prvHeapInit+0xc0>)
 800d9fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da02:	601a      	str	r2, [r3, #0]
}
 800da04:	bf00      	nop
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	20001fe4 	.word	0x20001fe4
 800da14:	20005be4 	.word	0x20005be4
 800da18:	20005bec 	.word	0x20005bec
 800da1c:	20005bf4 	.word	0x20005bf4
 800da20:	20005bf0 	.word	0x20005bf0
 800da24:	20005c00 	.word	0x20005c00

0800da28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da30:	4b28      	ldr	r3, [pc, #160]	; (800dad4 <prvInsertBlockIntoFreeList+0xac>)
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	e002      	b.n	800da3c <prvInsertBlockIntoFreeList+0x14>
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	429a      	cmp	r2, r3
 800da44:	d8f7      	bhi.n	800da36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	4413      	add	r3, r2
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	429a      	cmp	r2, r3
 800da56:	d108      	bne.n	800da6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	441a      	add	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	441a      	add	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d118      	bne.n	800dab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	4b15      	ldr	r3, [pc, #84]	; (800dad8 <prvInsertBlockIntoFreeList+0xb0>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d00d      	beq.n	800daa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	685a      	ldr	r2, [r3, #4]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	685b      	ldr	r3, [r3, #4]
 800da94:	441a      	add	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	601a      	str	r2, [r3, #0]
 800daa4:	e008      	b.n	800dab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800daa6:	4b0c      	ldr	r3, [pc, #48]	; (800dad8 <prvInsertBlockIntoFreeList+0xb0>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	e003      	b.n	800dab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d002      	beq.n	800dac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dac6:	bf00      	nop
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	20005be4 	.word	0x20005be4
 800dad8:	20005bec 	.word	0x20005bec

0800dadc <atan2>:
 800dadc:	f000 b800 	b.w	800dae0 <__ieee754_atan2>

0800dae0 <__ieee754_atan2>:
 800dae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae4:	ec57 6b11 	vmov	r6, r7, d1
 800dae8:	4273      	negs	r3, r6
 800daea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800dc68 <__ieee754_atan2+0x188>
 800daee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800daf2:	4333      	orrs	r3, r6
 800daf4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800daf8:	4543      	cmp	r3, r8
 800dafa:	ec51 0b10 	vmov	r0, r1, d0
 800dafe:	ee11 5a10 	vmov	r5, s2
 800db02:	d80a      	bhi.n	800db1a <__ieee754_atan2+0x3a>
 800db04:	4244      	negs	r4, r0
 800db06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db0a:	4304      	orrs	r4, r0
 800db0c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800db10:	4544      	cmp	r4, r8
 800db12:	ee10 9a10 	vmov	r9, s0
 800db16:	468e      	mov	lr, r1
 800db18:	d907      	bls.n	800db2a <__ieee754_atan2+0x4a>
 800db1a:	4632      	mov	r2, r6
 800db1c:	463b      	mov	r3, r7
 800db1e:	f7f2 fb85 	bl	800022c <__adddf3>
 800db22:	ec41 0b10 	vmov	d0, r0, r1
 800db26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800db2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800db32:	4334      	orrs	r4, r6
 800db34:	d103      	bne.n	800db3e <__ieee754_atan2+0x5e>
 800db36:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db3a:	f000 b8c5 	b.w	800dcc8 <atan>
 800db3e:	17bc      	asrs	r4, r7, #30
 800db40:	f004 0402 	and.w	r4, r4, #2
 800db44:	ea53 0909 	orrs.w	r9, r3, r9
 800db48:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800db4c:	d107      	bne.n	800db5e <__ieee754_atan2+0x7e>
 800db4e:	2c02      	cmp	r4, #2
 800db50:	d05f      	beq.n	800dc12 <__ieee754_atan2+0x132>
 800db52:	2c03      	cmp	r4, #3
 800db54:	d1e5      	bne.n	800db22 <__ieee754_atan2+0x42>
 800db56:	a140      	add	r1, pc, #256	; (adr r1, 800dc58 <__ieee754_atan2+0x178>)
 800db58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db5c:	e7e1      	b.n	800db22 <__ieee754_atan2+0x42>
 800db5e:	4315      	orrs	r5, r2
 800db60:	d106      	bne.n	800db70 <__ieee754_atan2+0x90>
 800db62:	f1be 0f00 	cmp.w	lr, #0
 800db66:	da5f      	bge.n	800dc28 <__ieee754_atan2+0x148>
 800db68:	a13d      	add	r1, pc, #244	; (adr r1, 800dc60 <__ieee754_atan2+0x180>)
 800db6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db6e:	e7d8      	b.n	800db22 <__ieee754_atan2+0x42>
 800db70:	4542      	cmp	r2, r8
 800db72:	d10f      	bne.n	800db94 <__ieee754_atan2+0xb4>
 800db74:	4293      	cmp	r3, r2
 800db76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800db7a:	d107      	bne.n	800db8c <__ieee754_atan2+0xac>
 800db7c:	2c02      	cmp	r4, #2
 800db7e:	d84c      	bhi.n	800dc1a <__ieee754_atan2+0x13a>
 800db80:	4b33      	ldr	r3, [pc, #204]	; (800dc50 <__ieee754_atan2+0x170>)
 800db82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db86:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db8a:	e7ca      	b.n	800db22 <__ieee754_atan2+0x42>
 800db8c:	2c02      	cmp	r4, #2
 800db8e:	d848      	bhi.n	800dc22 <__ieee754_atan2+0x142>
 800db90:	4b30      	ldr	r3, [pc, #192]	; (800dc54 <__ieee754_atan2+0x174>)
 800db92:	e7f6      	b.n	800db82 <__ieee754_atan2+0xa2>
 800db94:	4543      	cmp	r3, r8
 800db96:	d0e4      	beq.n	800db62 <__ieee754_atan2+0x82>
 800db98:	1a9b      	subs	r3, r3, r2
 800db9a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800db9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dba2:	da1e      	bge.n	800dbe2 <__ieee754_atan2+0x102>
 800dba4:	2f00      	cmp	r7, #0
 800dba6:	da01      	bge.n	800dbac <__ieee754_atan2+0xcc>
 800dba8:	323c      	adds	r2, #60	; 0x3c
 800dbaa:	db1e      	blt.n	800dbea <__ieee754_atan2+0x10a>
 800dbac:	4632      	mov	r2, r6
 800dbae:	463b      	mov	r3, r7
 800dbb0:	f7f2 fe1c 	bl	80007ec <__aeabi_ddiv>
 800dbb4:	ec41 0b10 	vmov	d0, r0, r1
 800dbb8:	f000 fa7a 	bl	800e0b0 <fabs>
 800dbbc:	f000 f884 	bl	800dcc8 <atan>
 800dbc0:	ec51 0b10 	vmov	r0, r1, d0
 800dbc4:	2c01      	cmp	r4, #1
 800dbc6:	d013      	beq.n	800dbf0 <__ieee754_atan2+0x110>
 800dbc8:	2c02      	cmp	r4, #2
 800dbca:	d015      	beq.n	800dbf8 <__ieee754_atan2+0x118>
 800dbcc:	2c00      	cmp	r4, #0
 800dbce:	d0a8      	beq.n	800db22 <__ieee754_atan2+0x42>
 800dbd0:	a317      	add	r3, pc, #92	; (adr r3, 800dc30 <__ieee754_atan2+0x150>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fb27 	bl	8000228 <__aeabi_dsub>
 800dbda:	a317      	add	r3, pc, #92	; (adr r3, 800dc38 <__ieee754_atan2+0x158>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	e014      	b.n	800dc0c <__ieee754_atan2+0x12c>
 800dbe2:	a117      	add	r1, pc, #92	; (adr r1, 800dc40 <__ieee754_atan2+0x160>)
 800dbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbe8:	e7ec      	b.n	800dbc4 <__ieee754_atan2+0xe4>
 800dbea:	2000      	movs	r0, #0
 800dbec:	2100      	movs	r1, #0
 800dbee:	e7e9      	b.n	800dbc4 <__ieee754_atan2+0xe4>
 800dbf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	e794      	b.n	800db22 <__ieee754_atan2+0x42>
 800dbf8:	a30d      	add	r3, pc, #52	; (adr r3, 800dc30 <__ieee754_atan2+0x150>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fb13 	bl	8000228 <__aeabi_dsub>
 800dc02:	4602      	mov	r2, r0
 800dc04:	460b      	mov	r3, r1
 800dc06:	a10c      	add	r1, pc, #48	; (adr r1, 800dc38 <__ieee754_atan2+0x158>)
 800dc08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc0c:	f7f2 fb0c 	bl	8000228 <__aeabi_dsub>
 800dc10:	e787      	b.n	800db22 <__ieee754_atan2+0x42>
 800dc12:	a109      	add	r1, pc, #36	; (adr r1, 800dc38 <__ieee754_atan2+0x158>)
 800dc14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc18:	e783      	b.n	800db22 <__ieee754_atan2+0x42>
 800dc1a:	a10b      	add	r1, pc, #44	; (adr r1, 800dc48 <__ieee754_atan2+0x168>)
 800dc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc20:	e77f      	b.n	800db22 <__ieee754_atan2+0x42>
 800dc22:	2000      	movs	r0, #0
 800dc24:	2100      	movs	r1, #0
 800dc26:	e77c      	b.n	800db22 <__ieee754_atan2+0x42>
 800dc28:	a105      	add	r1, pc, #20	; (adr r1, 800dc40 <__ieee754_atan2+0x160>)
 800dc2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc2e:	e778      	b.n	800db22 <__ieee754_atan2+0x42>
 800dc30:	33145c07 	.word	0x33145c07
 800dc34:	3ca1a626 	.word	0x3ca1a626
 800dc38:	54442d18 	.word	0x54442d18
 800dc3c:	400921fb 	.word	0x400921fb
 800dc40:	54442d18 	.word	0x54442d18
 800dc44:	3ff921fb 	.word	0x3ff921fb
 800dc48:	54442d18 	.word	0x54442d18
 800dc4c:	3fe921fb 	.word	0x3fe921fb
 800dc50:	0800fb28 	.word	0x0800fb28
 800dc54:	0800fb40 	.word	0x0800fb40
 800dc58:	54442d18 	.word	0x54442d18
 800dc5c:	c00921fb 	.word	0xc00921fb
 800dc60:	54442d18 	.word	0x54442d18
 800dc64:	bff921fb 	.word	0xbff921fb
 800dc68:	7ff00000 	.word	0x7ff00000

0800dc6c <sqrt>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	ed2d 8b02 	vpush	{d8}
 800dc72:	ec55 4b10 	vmov	r4, r5, d0
 800dc76:	f000 fa7f 	bl	800e178 <__ieee754_sqrt>
 800dc7a:	4622      	mov	r2, r4
 800dc7c:	462b      	mov	r3, r5
 800dc7e:	4620      	mov	r0, r4
 800dc80:	4629      	mov	r1, r5
 800dc82:	eeb0 8a40 	vmov.f32	s16, s0
 800dc86:	eef0 8a60 	vmov.f32	s17, s1
 800dc8a:	f7f2 ff1f 	bl	8000acc <__aeabi_dcmpun>
 800dc8e:	b990      	cbnz	r0, 800dcb6 <sqrt+0x4a>
 800dc90:	2200      	movs	r2, #0
 800dc92:	2300      	movs	r3, #0
 800dc94:	4620      	mov	r0, r4
 800dc96:	4629      	mov	r1, r5
 800dc98:	f7f2 fef0 	bl	8000a7c <__aeabi_dcmplt>
 800dc9c:	b158      	cbz	r0, 800dcb6 <sqrt+0x4a>
 800dc9e:	f001 fb67 	bl	800f370 <__errno>
 800dca2:	2321      	movs	r3, #33	; 0x21
 800dca4:	6003      	str	r3, [r0, #0]
 800dca6:	2200      	movs	r2, #0
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4610      	mov	r0, r2
 800dcac:	4619      	mov	r1, r3
 800dcae:	f7f2 fd9d 	bl	80007ec <__aeabi_ddiv>
 800dcb2:	ec41 0b18 	vmov	d8, r0, r1
 800dcb6:	eeb0 0a48 	vmov.f32	s0, s16
 800dcba:	eef0 0a68 	vmov.f32	s1, s17
 800dcbe:	ecbd 8b02 	vpop	{d8}
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	0000      	movs	r0, r0
	...

0800dcc8 <atan>:
 800dcc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	ec55 4b10 	vmov	r4, r5, d0
 800dcd0:	4bc3      	ldr	r3, [pc, #780]	; (800dfe0 <atan+0x318>)
 800dcd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dcd6:	429e      	cmp	r6, r3
 800dcd8:	46ab      	mov	fp, r5
 800dcda:	dd18      	ble.n	800dd0e <atan+0x46>
 800dcdc:	4bc1      	ldr	r3, [pc, #772]	; (800dfe4 <atan+0x31c>)
 800dcde:	429e      	cmp	r6, r3
 800dce0:	dc01      	bgt.n	800dce6 <atan+0x1e>
 800dce2:	d109      	bne.n	800dcf8 <atan+0x30>
 800dce4:	b144      	cbz	r4, 800dcf8 <atan+0x30>
 800dce6:	4622      	mov	r2, r4
 800dce8:	462b      	mov	r3, r5
 800dcea:	4620      	mov	r0, r4
 800dcec:	4629      	mov	r1, r5
 800dcee:	f7f2 fa9d 	bl	800022c <__adddf3>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460d      	mov	r5, r1
 800dcf6:	e006      	b.n	800dd06 <atan+0x3e>
 800dcf8:	f1bb 0f00 	cmp.w	fp, #0
 800dcfc:	f300 8131 	bgt.w	800df62 <atan+0x29a>
 800dd00:	a59b      	add	r5, pc, #620	; (adr r5, 800df70 <atan+0x2a8>)
 800dd02:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dd06:	ec45 4b10 	vmov	d0, r4, r5
 800dd0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	4bb6      	ldr	r3, [pc, #728]	; (800dfe8 <atan+0x320>)
 800dd10:	429e      	cmp	r6, r3
 800dd12:	dc14      	bgt.n	800dd3e <atan+0x76>
 800dd14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800dd18:	429e      	cmp	r6, r3
 800dd1a:	dc0d      	bgt.n	800dd38 <atan+0x70>
 800dd1c:	a396      	add	r3, pc, #600	; (adr r3, 800df78 <atan+0x2b0>)
 800dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd22:	ee10 0a10 	vmov	r0, s0
 800dd26:	4629      	mov	r1, r5
 800dd28:	f7f2 fa80 	bl	800022c <__adddf3>
 800dd2c:	4baf      	ldr	r3, [pc, #700]	; (800dfec <atan+0x324>)
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f7f2 fec2 	bl	8000ab8 <__aeabi_dcmpgt>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d1e6      	bne.n	800dd06 <atan+0x3e>
 800dd38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dd3c:	e02b      	b.n	800dd96 <atan+0xce>
 800dd3e:	f000 f9b7 	bl	800e0b0 <fabs>
 800dd42:	4bab      	ldr	r3, [pc, #684]	; (800dff0 <atan+0x328>)
 800dd44:	429e      	cmp	r6, r3
 800dd46:	ec55 4b10 	vmov	r4, r5, d0
 800dd4a:	f300 80bf 	bgt.w	800decc <atan+0x204>
 800dd4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800dd52:	429e      	cmp	r6, r3
 800dd54:	f300 80a0 	bgt.w	800de98 <atan+0x1d0>
 800dd58:	ee10 2a10 	vmov	r2, s0
 800dd5c:	ee10 0a10 	vmov	r0, s0
 800dd60:	462b      	mov	r3, r5
 800dd62:	4629      	mov	r1, r5
 800dd64:	f7f2 fa62 	bl	800022c <__adddf3>
 800dd68:	4ba0      	ldr	r3, [pc, #640]	; (800dfec <atan+0x324>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f7f2 fa5c 	bl	8000228 <__aeabi_dsub>
 800dd70:	2200      	movs	r2, #0
 800dd72:	4606      	mov	r6, r0
 800dd74:	460f      	mov	r7, r1
 800dd76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	f7f2 fa55 	bl	800022c <__adddf3>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	4630      	mov	r0, r6
 800dd88:	4639      	mov	r1, r7
 800dd8a:	f7f2 fd2f 	bl	80007ec <__aeabi_ddiv>
 800dd8e:	f04f 0a00 	mov.w	sl, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	4622      	mov	r2, r4
 800dd98:	462b      	mov	r3, r5
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	f7f2 fbfb 	bl	8000598 <__aeabi_dmul>
 800dda2:	4602      	mov	r2, r0
 800dda4:	460b      	mov	r3, r1
 800dda6:	4680      	mov	r8, r0
 800dda8:	4689      	mov	r9, r1
 800ddaa:	f7f2 fbf5 	bl	8000598 <__aeabi_dmul>
 800ddae:	a374      	add	r3, pc, #464	; (adr r3, 800df80 <atan+0x2b8>)
 800ddb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	460f      	mov	r7, r1
 800ddb8:	f7f2 fbee 	bl	8000598 <__aeabi_dmul>
 800ddbc:	a372      	add	r3, pc, #456	; (adr r3, 800df88 <atan+0x2c0>)
 800ddbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc2:	f7f2 fa33 	bl	800022c <__adddf3>
 800ddc6:	4632      	mov	r2, r6
 800ddc8:	463b      	mov	r3, r7
 800ddca:	f7f2 fbe5 	bl	8000598 <__aeabi_dmul>
 800ddce:	a370      	add	r3, pc, #448	; (adr r3, 800df90 <atan+0x2c8>)
 800ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd4:	f7f2 fa2a 	bl	800022c <__adddf3>
 800ddd8:	4632      	mov	r2, r6
 800ddda:	463b      	mov	r3, r7
 800dddc:	f7f2 fbdc 	bl	8000598 <__aeabi_dmul>
 800dde0:	a36d      	add	r3, pc, #436	; (adr r3, 800df98 <atan+0x2d0>)
 800dde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde6:	f7f2 fa21 	bl	800022c <__adddf3>
 800ddea:	4632      	mov	r2, r6
 800ddec:	463b      	mov	r3, r7
 800ddee:	f7f2 fbd3 	bl	8000598 <__aeabi_dmul>
 800ddf2:	a36b      	add	r3, pc, #428	; (adr r3, 800dfa0 <atan+0x2d8>)
 800ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf8:	f7f2 fa18 	bl	800022c <__adddf3>
 800ddfc:	4632      	mov	r2, r6
 800ddfe:	463b      	mov	r3, r7
 800de00:	f7f2 fbca 	bl	8000598 <__aeabi_dmul>
 800de04:	a368      	add	r3, pc, #416	; (adr r3, 800dfa8 <atan+0x2e0>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	f7f2 fa0f 	bl	800022c <__adddf3>
 800de0e:	4642      	mov	r2, r8
 800de10:	464b      	mov	r3, r9
 800de12:	f7f2 fbc1 	bl	8000598 <__aeabi_dmul>
 800de16:	a366      	add	r3, pc, #408	; (adr r3, 800dfb0 <atan+0x2e8>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	4680      	mov	r8, r0
 800de1e:	4689      	mov	r9, r1
 800de20:	4630      	mov	r0, r6
 800de22:	4639      	mov	r1, r7
 800de24:	f7f2 fbb8 	bl	8000598 <__aeabi_dmul>
 800de28:	a363      	add	r3, pc, #396	; (adr r3, 800dfb8 <atan+0x2f0>)
 800de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2e:	f7f2 f9fb 	bl	8000228 <__aeabi_dsub>
 800de32:	4632      	mov	r2, r6
 800de34:	463b      	mov	r3, r7
 800de36:	f7f2 fbaf 	bl	8000598 <__aeabi_dmul>
 800de3a:	a361      	add	r3, pc, #388	; (adr r3, 800dfc0 <atan+0x2f8>)
 800de3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de40:	f7f2 f9f2 	bl	8000228 <__aeabi_dsub>
 800de44:	4632      	mov	r2, r6
 800de46:	463b      	mov	r3, r7
 800de48:	f7f2 fba6 	bl	8000598 <__aeabi_dmul>
 800de4c:	a35e      	add	r3, pc, #376	; (adr r3, 800dfc8 <atan+0x300>)
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	f7f2 f9e9 	bl	8000228 <__aeabi_dsub>
 800de56:	4632      	mov	r2, r6
 800de58:	463b      	mov	r3, r7
 800de5a:	f7f2 fb9d 	bl	8000598 <__aeabi_dmul>
 800de5e:	a35c      	add	r3, pc, #368	; (adr r3, 800dfd0 <atan+0x308>)
 800de60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de64:	f7f2 f9e0 	bl	8000228 <__aeabi_dsub>
 800de68:	4632      	mov	r2, r6
 800de6a:	463b      	mov	r3, r7
 800de6c:	f7f2 fb94 	bl	8000598 <__aeabi_dmul>
 800de70:	4602      	mov	r2, r0
 800de72:	460b      	mov	r3, r1
 800de74:	4640      	mov	r0, r8
 800de76:	4649      	mov	r1, r9
 800de78:	f7f2 f9d8 	bl	800022c <__adddf3>
 800de7c:	4622      	mov	r2, r4
 800de7e:	462b      	mov	r3, r5
 800de80:	f7f2 fb8a 	bl	8000598 <__aeabi_dmul>
 800de84:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	d14b      	bne.n	800df26 <atan+0x25e>
 800de8e:	4620      	mov	r0, r4
 800de90:	4629      	mov	r1, r5
 800de92:	f7f2 f9c9 	bl	8000228 <__aeabi_dsub>
 800de96:	e72c      	b.n	800dcf2 <atan+0x2a>
 800de98:	ee10 0a10 	vmov	r0, s0
 800de9c:	4b53      	ldr	r3, [pc, #332]	; (800dfec <atan+0x324>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7f2 f9c1 	bl	8000228 <__aeabi_dsub>
 800dea6:	4b51      	ldr	r3, [pc, #324]	; (800dfec <atan+0x324>)
 800dea8:	4606      	mov	r6, r0
 800deaa:	460f      	mov	r7, r1
 800deac:	2200      	movs	r2, #0
 800deae:	4620      	mov	r0, r4
 800deb0:	4629      	mov	r1, r5
 800deb2:	f7f2 f9bb 	bl	800022c <__adddf3>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	4630      	mov	r0, r6
 800debc:	4639      	mov	r1, r7
 800debe:	f7f2 fc95 	bl	80007ec <__aeabi_ddiv>
 800dec2:	f04f 0a01 	mov.w	sl, #1
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
 800deca:	e764      	b.n	800dd96 <atan+0xce>
 800decc:	4b49      	ldr	r3, [pc, #292]	; (800dff4 <atan+0x32c>)
 800dece:	429e      	cmp	r6, r3
 800ded0:	da1d      	bge.n	800df0e <atan+0x246>
 800ded2:	ee10 0a10 	vmov	r0, s0
 800ded6:	4b48      	ldr	r3, [pc, #288]	; (800dff8 <atan+0x330>)
 800ded8:	2200      	movs	r2, #0
 800deda:	4629      	mov	r1, r5
 800dedc:	f7f2 f9a4 	bl	8000228 <__aeabi_dsub>
 800dee0:	4b45      	ldr	r3, [pc, #276]	; (800dff8 <atan+0x330>)
 800dee2:	4606      	mov	r6, r0
 800dee4:	460f      	mov	r7, r1
 800dee6:	2200      	movs	r2, #0
 800dee8:	4620      	mov	r0, r4
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 fb54 	bl	8000598 <__aeabi_dmul>
 800def0:	4b3e      	ldr	r3, [pc, #248]	; (800dfec <atan+0x324>)
 800def2:	2200      	movs	r2, #0
 800def4:	f7f2 f99a 	bl	800022c <__adddf3>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	4630      	mov	r0, r6
 800defe:	4639      	mov	r1, r7
 800df00:	f7f2 fc74 	bl	80007ec <__aeabi_ddiv>
 800df04:	f04f 0a02 	mov.w	sl, #2
 800df08:	4604      	mov	r4, r0
 800df0a:	460d      	mov	r5, r1
 800df0c:	e743      	b.n	800dd96 <atan+0xce>
 800df0e:	462b      	mov	r3, r5
 800df10:	ee10 2a10 	vmov	r2, s0
 800df14:	4939      	ldr	r1, [pc, #228]	; (800dffc <atan+0x334>)
 800df16:	2000      	movs	r0, #0
 800df18:	f7f2 fc68 	bl	80007ec <__aeabi_ddiv>
 800df1c:	f04f 0a03 	mov.w	sl, #3
 800df20:	4604      	mov	r4, r0
 800df22:	460d      	mov	r5, r1
 800df24:	e737      	b.n	800dd96 <atan+0xce>
 800df26:	4b36      	ldr	r3, [pc, #216]	; (800e000 <atan+0x338>)
 800df28:	4e36      	ldr	r6, [pc, #216]	; (800e004 <atan+0x33c>)
 800df2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f979 	bl	8000228 <__aeabi_dsub>
 800df36:	4622      	mov	r2, r4
 800df38:	462b      	mov	r3, r5
 800df3a:	f7f2 f975 	bl	8000228 <__aeabi_dsub>
 800df3e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800df42:	4602      	mov	r2, r0
 800df44:	460b      	mov	r3, r1
 800df46:	e9d6 0100 	ldrd	r0, r1, [r6]
 800df4a:	f7f2 f96d 	bl	8000228 <__aeabi_dsub>
 800df4e:	f1bb 0f00 	cmp.w	fp, #0
 800df52:	4604      	mov	r4, r0
 800df54:	460d      	mov	r5, r1
 800df56:	f6bf aed6 	bge.w	800dd06 <atan+0x3e>
 800df5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df5e:	461d      	mov	r5, r3
 800df60:	e6d1      	b.n	800dd06 <atan+0x3e>
 800df62:	a51d      	add	r5, pc, #116	; (adr r5, 800dfd8 <atan+0x310>)
 800df64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800df68:	e6cd      	b.n	800dd06 <atan+0x3e>
 800df6a:	bf00      	nop
 800df6c:	f3af 8000 	nop.w
 800df70:	54442d18 	.word	0x54442d18
 800df74:	bff921fb 	.word	0xbff921fb
 800df78:	8800759c 	.word	0x8800759c
 800df7c:	7e37e43c 	.word	0x7e37e43c
 800df80:	e322da11 	.word	0xe322da11
 800df84:	3f90ad3a 	.word	0x3f90ad3a
 800df88:	24760deb 	.word	0x24760deb
 800df8c:	3fa97b4b 	.word	0x3fa97b4b
 800df90:	a0d03d51 	.word	0xa0d03d51
 800df94:	3fb10d66 	.word	0x3fb10d66
 800df98:	c54c206e 	.word	0xc54c206e
 800df9c:	3fb745cd 	.word	0x3fb745cd
 800dfa0:	920083ff 	.word	0x920083ff
 800dfa4:	3fc24924 	.word	0x3fc24924
 800dfa8:	5555550d 	.word	0x5555550d
 800dfac:	3fd55555 	.word	0x3fd55555
 800dfb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800dfb4:	bfa2b444 	.word	0xbfa2b444
 800dfb8:	52defd9a 	.word	0x52defd9a
 800dfbc:	3fadde2d 	.word	0x3fadde2d
 800dfc0:	af749a6d 	.word	0xaf749a6d
 800dfc4:	3fb3b0f2 	.word	0x3fb3b0f2
 800dfc8:	fe231671 	.word	0xfe231671
 800dfcc:	3fbc71c6 	.word	0x3fbc71c6
 800dfd0:	9998ebc4 	.word	0x9998ebc4
 800dfd4:	3fc99999 	.word	0x3fc99999
 800dfd8:	54442d18 	.word	0x54442d18
 800dfdc:	3ff921fb 	.word	0x3ff921fb
 800dfe0:	440fffff 	.word	0x440fffff
 800dfe4:	7ff00000 	.word	0x7ff00000
 800dfe8:	3fdbffff 	.word	0x3fdbffff
 800dfec:	3ff00000 	.word	0x3ff00000
 800dff0:	3ff2ffff 	.word	0x3ff2ffff
 800dff4:	40038000 	.word	0x40038000
 800dff8:	3ff80000 	.word	0x3ff80000
 800dffc:	bff00000 	.word	0xbff00000
 800e000:	0800fb78 	.word	0x0800fb78
 800e004:	0800fb58 	.word	0x0800fb58

0800e008 <cos>:
 800e008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e00a:	ec53 2b10 	vmov	r2, r3, d0
 800e00e:	4826      	ldr	r0, [pc, #152]	; (800e0a8 <cos+0xa0>)
 800e010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e014:	4281      	cmp	r1, r0
 800e016:	dc06      	bgt.n	800e026 <cos+0x1e>
 800e018:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e0a0 <cos+0x98>
 800e01c:	b005      	add	sp, #20
 800e01e:	f85d eb04 	ldr.w	lr, [sp], #4
 800e022:	f000 bedd 	b.w	800ede0 <__kernel_cos>
 800e026:	4821      	ldr	r0, [pc, #132]	; (800e0ac <cos+0xa4>)
 800e028:	4281      	cmp	r1, r0
 800e02a:	dd09      	ble.n	800e040 <cos+0x38>
 800e02c:	ee10 0a10 	vmov	r0, s0
 800e030:	4619      	mov	r1, r3
 800e032:	f7f2 f8f9 	bl	8000228 <__aeabi_dsub>
 800e036:	ec41 0b10 	vmov	d0, r0, r1
 800e03a:	b005      	add	sp, #20
 800e03c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e040:	4668      	mov	r0, sp
 800e042:	f000 f975 	bl	800e330 <__ieee754_rem_pio2>
 800e046:	f000 0003 	and.w	r0, r0, #3
 800e04a:	2801      	cmp	r0, #1
 800e04c:	d00b      	beq.n	800e066 <cos+0x5e>
 800e04e:	2802      	cmp	r0, #2
 800e050:	d016      	beq.n	800e080 <cos+0x78>
 800e052:	b9e0      	cbnz	r0, 800e08e <cos+0x86>
 800e054:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e058:	ed9d 0b00 	vldr	d0, [sp]
 800e05c:	f000 fec0 	bl	800ede0 <__kernel_cos>
 800e060:	ec51 0b10 	vmov	r0, r1, d0
 800e064:	e7e7      	b.n	800e036 <cos+0x2e>
 800e066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e06a:	ed9d 0b00 	vldr	d0, [sp]
 800e06e:	f000 ff7f 	bl	800ef70 <__kernel_sin>
 800e072:	ec53 2b10 	vmov	r2, r3, d0
 800e076:	ee10 0a10 	vmov	r0, s0
 800e07a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e07e:	e7da      	b.n	800e036 <cos+0x2e>
 800e080:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e084:	ed9d 0b00 	vldr	d0, [sp]
 800e088:	f000 feaa 	bl	800ede0 <__kernel_cos>
 800e08c:	e7f1      	b.n	800e072 <cos+0x6a>
 800e08e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e092:	ed9d 0b00 	vldr	d0, [sp]
 800e096:	2001      	movs	r0, #1
 800e098:	f000 ff6a 	bl	800ef70 <__kernel_sin>
 800e09c:	e7e0      	b.n	800e060 <cos+0x58>
 800e09e:	bf00      	nop
	...
 800e0a8:	3fe921fb 	.word	0x3fe921fb
 800e0ac:	7fefffff 	.word	0x7fefffff

0800e0b0 <fabs>:
 800e0b0:	ec51 0b10 	vmov	r0, r1, d0
 800e0b4:	ee10 2a10 	vmov	r2, s0
 800e0b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e0bc:	ec43 2b10 	vmov	d0, r2, r3
 800e0c0:	4770      	bx	lr
 800e0c2:	0000      	movs	r0, r0
 800e0c4:	0000      	movs	r0, r0
	...

0800e0c8 <sin>:
 800e0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e0ca:	ec53 2b10 	vmov	r2, r3, d0
 800e0ce:	4828      	ldr	r0, [pc, #160]	; (800e170 <sin+0xa8>)
 800e0d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e0d4:	4281      	cmp	r1, r0
 800e0d6:	dc07      	bgt.n	800e0e8 <sin+0x20>
 800e0d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e168 <sin+0xa0>
 800e0dc:	2000      	movs	r0, #0
 800e0de:	b005      	add	sp, #20
 800e0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0e4:	f000 bf44 	b.w	800ef70 <__kernel_sin>
 800e0e8:	4822      	ldr	r0, [pc, #136]	; (800e174 <sin+0xac>)
 800e0ea:	4281      	cmp	r1, r0
 800e0ec:	dd09      	ble.n	800e102 <sin+0x3a>
 800e0ee:	ee10 0a10 	vmov	r0, s0
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f7f2 f898 	bl	8000228 <__aeabi_dsub>
 800e0f8:	ec41 0b10 	vmov	d0, r0, r1
 800e0fc:	b005      	add	sp, #20
 800e0fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800e102:	4668      	mov	r0, sp
 800e104:	f000 f914 	bl	800e330 <__ieee754_rem_pio2>
 800e108:	f000 0003 	and.w	r0, r0, #3
 800e10c:	2801      	cmp	r0, #1
 800e10e:	d00c      	beq.n	800e12a <sin+0x62>
 800e110:	2802      	cmp	r0, #2
 800e112:	d011      	beq.n	800e138 <sin+0x70>
 800e114:	b9f0      	cbnz	r0, 800e154 <sin+0x8c>
 800e116:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e11a:	ed9d 0b00 	vldr	d0, [sp]
 800e11e:	2001      	movs	r0, #1
 800e120:	f000 ff26 	bl	800ef70 <__kernel_sin>
 800e124:	ec51 0b10 	vmov	r0, r1, d0
 800e128:	e7e6      	b.n	800e0f8 <sin+0x30>
 800e12a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e12e:	ed9d 0b00 	vldr	d0, [sp]
 800e132:	f000 fe55 	bl	800ede0 <__kernel_cos>
 800e136:	e7f5      	b.n	800e124 <sin+0x5c>
 800e138:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e13c:	ed9d 0b00 	vldr	d0, [sp]
 800e140:	2001      	movs	r0, #1
 800e142:	f000 ff15 	bl	800ef70 <__kernel_sin>
 800e146:	ec53 2b10 	vmov	r2, r3, d0
 800e14a:	ee10 0a10 	vmov	r0, s0
 800e14e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e152:	e7d1      	b.n	800e0f8 <sin+0x30>
 800e154:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e158:	ed9d 0b00 	vldr	d0, [sp]
 800e15c:	f000 fe40 	bl	800ede0 <__kernel_cos>
 800e160:	e7f1      	b.n	800e146 <sin+0x7e>
 800e162:	bf00      	nop
 800e164:	f3af 8000 	nop.w
	...
 800e170:	3fe921fb 	.word	0x3fe921fb
 800e174:	7fefffff 	.word	0x7fefffff

0800e178 <__ieee754_sqrt>:
 800e178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	ec55 4b10 	vmov	r4, r5, d0
 800e180:	4e67      	ldr	r6, [pc, #412]	; (800e320 <__ieee754_sqrt+0x1a8>)
 800e182:	43ae      	bics	r6, r5
 800e184:	ee10 0a10 	vmov	r0, s0
 800e188:	ee10 2a10 	vmov	r2, s0
 800e18c:	4629      	mov	r1, r5
 800e18e:	462b      	mov	r3, r5
 800e190:	d10d      	bne.n	800e1ae <__ieee754_sqrt+0x36>
 800e192:	f7f2 fa01 	bl	8000598 <__aeabi_dmul>
 800e196:	4602      	mov	r2, r0
 800e198:	460b      	mov	r3, r1
 800e19a:	4620      	mov	r0, r4
 800e19c:	4629      	mov	r1, r5
 800e19e:	f7f2 f845 	bl	800022c <__adddf3>
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460d      	mov	r5, r1
 800e1a6:	ec45 4b10 	vmov	d0, r4, r5
 800e1aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	2d00      	cmp	r5, #0
 800e1b0:	dc0b      	bgt.n	800e1ca <__ieee754_sqrt+0x52>
 800e1b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e1b6:	4326      	orrs	r6, r4
 800e1b8:	d0f5      	beq.n	800e1a6 <__ieee754_sqrt+0x2e>
 800e1ba:	b135      	cbz	r5, 800e1ca <__ieee754_sqrt+0x52>
 800e1bc:	f7f2 f834 	bl	8000228 <__aeabi_dsub>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	f7f2 fb12 	bl	80007ec <__aeabi_ddiv>
 800e1c8:	e7eb      	b.n	800e1a2 <__ieee754_sqrt+0x2a>
 800e1ca:	1509      	asrs	r1, r1, #20
 800e1cc:	f000 808d 	beq.w	800e2ea <__ieee754_sqrt+0x172>
 800e1d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e1d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1dc:	07c9      	lsls	r1, r1, #31
 800e1de:	bf5c      	itt	pl
 800e1e0:	005b      	lslpl	r3, r3, #1
 800e1e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e1e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e1ea:	bf58      	it	pl
 800e1ec:	0052      	lslpl	r2, r2, #1
 800e1ee:	2500      	movs	r5, #0
 800e1f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e1f4:	1076      	asrs	r6, r6, #1
 800e1f6:	0052      	lsls	r2, r2, #1
 800e1f8:	f04f 0e16 	mov.w	lr, #22
 800e1fc:	46ac      	mov	ip, r5
 800e1fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e202:	eb0c 0001 	add.w	r0, ip, r1
 800e206:	4298      	cmp	r0, r3
 800e208:	bfde      	ittt	le
 800e20a:	1a1b      	suble	r3, r3, r0
 800e20c:	eb00 0c01 	addle.w	ip, r0, r1
 800e210:	186d      	addle	r5, r5, r1
 800e212:	005b      	lsls	r3, r3, #1
 800e214:	f1be 0e01 	subs.w	lr, lr, #1
 800e218:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e21c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e220:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e224:	d1ed      	bne.n	800e202 <__ieee754_sqrt+0x8a>
 800e226:	4674      	mov	r4, lr
 800e228:	2720      	movs	r7, #32
 800e22a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e22e:	4563      	cmp	r3, ip
 800e230:	eb01 000e 	add.w	r0, r1, lr
 800e234:	dc02      	bgt.n	800e23c <__ieee754_sqrt+0xc4>
 800e236:	d113      	bne.n	800e260 <__ieee754_sqrt+0xe8>
 800e238:	4290      	cmp	r0, r2
 800e23a:	d811      	bhi.n	800e260 <__ieee754_sqrt+0xe8>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	eb00 0e01 	add.w	lr, r0, r1
 800e242:	da57      	bge.n	800e2f4 <__ieee754_sqrt+0x17c>
 800e244:	f1be 0f00 	cmp.w	lr, #0
 800e248:	db54      	blt.n	800e2f4 <__ieee754_sqrt+0x17c>
 800e24a:	f10c 0801 	add.w	r8, ip, #1
 800e24e:	eba3 030c 	sub.w	r3, r3, ip
 800e252:	4290      	cmp	r0, r2
 800e254:	bf88      	it	hi
 800e256:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800e25a:	1a12      	subs	r2, r2, r0
 800e25c:	440c      	add	r4, r1
 800e25e:	46c4      	mov	ip, r8
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	3f01      	subs	r7, #1
 800e264:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e268:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e26c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e270:	d1dd      	bne.n	800e22e <__ieee754_sqrt+0xb6>
 800e272:	4313      	orrs	r3, r2
 800e274:	d01b      	beq.n	800e2ae <__ieee754_sqrt+0x136>
 800e276:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e324 <__ieee754_sqrt+0x1ac>
 800e27a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e328 <__ieee754_sqrt+0x1b0>
 800e27e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e282:	e9db 2300 	ldrd	r2, r3, [fp]
 800e286:	f7f1 ffcf 	bl	8000228 <__aeabi_dsub>
 800e28a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	4640      	mov	r0, r8
 800e294:	4649      	mov	r1, r9
 800e296:	f7f2 fbfb 	bl	8000a90 <__aeabi_dcmple>
 800e29a:	b140      	cbz	r0, 800e2ae <__ieee754_sqrt+0x136>
 800e29c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800e2a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800e2a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800e2a8:	d126      	bne.n	800e2f8 <__ieee754_sqrt+0x180>
 800e2aa:	3501      	adds	r5, #1
 800e2ac:	463c      	mov	r4, r7
 800e2ae:	106a      	asrs	r2, r5, #1
 800e2b0:	0863      	lsrs	r3, r4, #1
 800e2b2:	07e9      	lsls	r1, r5, #31
 800e2b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e2b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e2bc:	bf48      	it	mi
 800e2be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e2c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e2c6:	461c      	mov	r4, r3
 800e2c8:	e76d      	b.n	800e1a6 <__ieee754_sqrt+0x2e>
 800e2ca:	0ad3      	lsrs	r3, r2, #11
 800e2cc:	3815      	subs	r0, #21
 800e2ce:	0552      	lsls	r2, r2, #21
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d0fa      	beq.n	800e2ca <__ieee754_sqrt+0x152>
 800e2d4:	02dc      	lsls	r4, r3, #11
 800e2d6:	d50a      	bpl.n	800e2ee <__ieee754_sqrt+0x176>
 800e2d8:	f1c1 0420 	rsb	r4, r1, #32
 800e2dc:	fa22 f404 	lsr.w	r4, r2, r4
 800e2e0:	1e4d      	subs	r5, r1, #1
 800e2e2:	408a      	lsls	r2, r1
 800e2e4:	4323      	orrs	r3, r4
 800e2e6:	1b41      	subs	r1, r0, r5
 800e2e8:	e772      	b.n	800e1d0 <__ieee754_sqrt+0x58>
 800e2ea:	4608      	mov	r0, r1
 800e2ec:	e7f0      	b.n	800e2d0 <__ieee754_sqrt+0x158>
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	3101      	adds	r1, #1
 800e2f2:	e7ef      	b.n	800e2d4 <__ieee754_sqrt+0x15c>
 800e2f4:	46e0      	mov	r8, ip
 800e2f6:	e7aa      	b.n	800e24e <__ieee754_sqrt+0xd6>
 800e2f8:	f7f1 ff98 	bl	800022c <__adddf3>
 800e2fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4640      	mov	r0, r8
 800e306:	4649      	mov	r1, r9
 800e308:	f7f2 fbb8 	bl	8000a7c <__aeabi_dcmplt>
 800e30c:	b120      	cbz	r0, 800e318 <__ieee754_sqrt+0x1a0>
 800e30e:	1ca0      	adds	r0, r4, #2
 800e310:	bf08      	it	eq
 800e312:	3501      	addeq	r5, #1
 800e314:	3402      	adds	r4, #2
 800e316:	e7ca      	b.n	800e2ae <__ieee754_sqrt+0x136>
 800e318:	3401      	adds	r4, #1
 800e31a:	f024 0401 	bic.w	r4, r4, #1
 800e31e:	e7c6      	b.n	800e2ae <__ieee754_sqrt+0x136>
 800e320:	7ff00000 	.word	0x7ff00000
 800e324:	20000028 	.word	0x20000028
 800e328:	20000030 	.word	0x20000030
 800e32c:	00000000 	.word	0x00000000

0800e330 <__ieee754_rem_pio2>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	ed2d 8b02 	vpush	{d8}
 800e338:	ec55 4b10 	vmov	r4, r5, d0
 800e33c:	4bca      	ldr	r3, [pc, #808]	; (800e668 <__ieee754_rem_pio2+0x338>)
 800e33e:	b08b      	sub	sp, #44	; 0x2c
 800e340:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e344:	4598      	cmp	r8, r3
 800e346:	4682      	mov	sl, r0
 800e348:	9502      	str	r5, [sp, #8]
 800e34a:	dc08      	bgt.n	800e35e <__ieee754_rem_pio2+0x2e>
 800e34c:	2200      	movs	r2, #0
 800e34e:	2300      	movs	r3, #0
 800e350:	ed80 0b00 	vstr	d0, [r0]
 800e354:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e358:	f04f 0b00 	mov.w	fp, #0
 800e35c:	e028      	b.n	800e3b0 <__ieee754_rem_pio2+0x80>
 800e35e:	4bc3      	ldr	r3, [pc, #780]	; (800e66c <__ieee754_rem_pio2+0x33c>)
 800e360:	4598      	cmp	r8, r3
 800e362:	dc78      	bgt.n	800e456 <__ieee754_rem_pio2+0x126>
 800e364:	9b02      	ldr	r3, [sp, #8]
 800e366:	4ec2      	ldr	r6, [pc, #776]	; (800e670 <__ieee754_rem_pio2+0x340>)
 800e368:	2b00      	cmp	r3, #0
 800e36a:	ee10 0a10 	vmov	r0, s0
 800e36e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e630 <__ieee754_rem_pio2+0x300>)
 800e370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e374:	4629      	mov	r1, r5
 800e376:	dd39      	ble.n	800e3ec <__ieee754_rem_pio2+0xbc>
 800e378:	f7f1 ff56 	bl	8000228 <__aeabi_dsub>
 800e37c:	45b0      	cmp	r8, r6
 800e37e:	4604      	mov	r4, r0
 800e380:	460d      	mov	r5, r1
 800e382:	d01b      	beq.n	800e3bc <__ieee754_rem_pio2+0x8c>
 800e384:	a3ac      	add	r3, pc, #688	; (adr r3, 800e638 <__ieee754_rem_pio2+0x308>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	f7f1 ff4d 	bl	8000228 <__aeabi_dsub>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	e9ca 2300 	strd	r2, r3, [sl]
 800e396:	4620      	mov	r0, r4
 800e398:	4629      	mov	r1, r5
 800e39a:	f7f1 ff45 	bl	8000228 <__aeabi_dsub>
 800e39e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e638 <__ieee754_rem_pio2+0x308>)
 800e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a4:	f7f1 ff40 	bl	8000228 <__aeabi_dsub>
 800e3a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e3ac:	f04f 0b01 	mov.w	fp, #1
 800e3b0:	4658      	mov	r0, fp
 800e3b2:	b00b      	add	sp, #44	; 0x2c
 800e3b4:	ecbd 8b02 	vpop	{d8}
 800e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800e640 <__ieee754_rem_pio2+0x310>)
 800e3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c2:	f7f1 ff31 	bl	8000228 <__aeabi_dsub>
 800e3c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e648 <__ieee754_rem_pio2+0x318>)
 800e3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	460d      	mov	r5, r1
 800e3d0:	f7f1 ff2a 	bl	8000228 <__aeabi_dsub>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	e9ca 2300 	strd	r2, r3, [sl]
 800e3dc:	4620      	mov	r0, r4
 800e3de:	4629      	mov	r1, r5
 800e3e0:	f7f1 ff22 	bl	8000228 <__aeabi_dsub>
 800e3e4:	a398      	add	r3, pc, #608	; (adr r3, 800e648 <__ieee754_rem_pio2+0x318>)
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	e7db      	b.n	800e3a4 <__ieee754_rem_pio2+0x74>
 800e3ec:	f7f1 ff1e 	bl	800022c <__adddf3>
 800e3f0:	45b0      	cmp	r8, r6
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	460d      	mov	r5, r1
 800e3f6:	d016      	beq.n	800e426 <__ieee754_rem_pio2+0xf6>
 800e3f8:	a38f      	add	r3, pc, #572	; (adr r3, 800e638 <__ieee754_rem_pio2+0x308>)
 800e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fe:	f7f1 ff15 	bl	800022c <__adddf3>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	e9ca 2300 	strd	r2, r3, [sl]
 800e40a:	4620      	mov	r0, r4
 800e40c:	4629      	mov	r1, r5
 800e40e:	f7f1 ff0b 	bl	8000228 <__aeabi_dsub>
 800e412:	a389      	add	r3, pc, #548	; (adr r3, 800e638 <__ieee754_rem_pio2+0x308>)
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	f7f1 ff08 	bl	800022c <__adddf3>
 800e41c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e420:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e424:	e7c4      	b.n	800e3b0 <__ieee754_rem_pio2+0x80>
 800e426:	a386      	add	r3, pc, #536	; (adr r3, 800e640 <__ieee754_rem_pio2+0x310>)
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	f7f1 fefe 	bl	800022c <__adddf3>
 800e430:	a385      	add	r3, pc, #532	; (adr r3, 800e648 <__ieee754_rem_pio2+0x318>)
 800e432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e436:	4604      	mov	r4, r0
 800e438:	460d      	mov	r5, r1
 800e43a:	f7f1 fef7 	bl	800022c <__adddf3>
 800e43e:	4602      	mov	r2, r0
 800e440:	460b      	mov	r3, r1
 800e442:	e9ca 2300 	strd	r2, r3, [sl]
 800e446:	4620      	mov	r0, r4
 800e448:	4629      	mov	r1, r5
 800e44a:	f7f1 feed 	bl	8000228 <__aeabi_dsub>
 800e44e:	a37e      	add	r3, pc, #504	; (adr r3, 800e648 <__ieee754_rem_pio2+0x318>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	e7e0      	b.n	800e418 <__ieee754_rem_pio2+0xe8>
 800e456:	4b87      	ldr	r3, [pc, #540]	; (800e674 <__ieee754_rem_pio2+0x344>)
 800e458:	4598      	cmp	r8, r3
 800e45a:	f300 80d8 	bgt.w	800e60e <__ieee754_rem_pio2+0x2de>
 800e45e:	f7ff fe27 	bl	800e0b0 <fabs>
 800e462:	ec55 4b10 	vmov	r4, r5, d0
 800e466:	ee10 0a10 	vmov	r0, s0
 800e46a:	a379      	add	r3, pc, #484	; (adr r3, 800e650 <__ieee754_rem_pio2+0x320>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	4629      	mov	r1, r5
 800e472:	f7f2 f891 	bl	8000598 <__aeabi_dmul>
 800e476:	4b80      	ldr	r3, [pc, #512]	; (800e678 <__ieee754_rem_pio2+0x348>)
 800e478:	2200      	movs	r2, #0
 800e47a:	f7f1 fed7 	bl	800022c <__adddf3>
 800e47e:	f7f2 fb3b 	bl	8000af8 <__aeabi_d2iz>
 800e482:	4683      	mov	fp, r0
 800e484:	f7f2 f81e 	bl	80004c4 <__aeabi_i2d>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	ec43 2b18 	vmov	d8, r2, r3
 800e490:	a367      	add	r3, pc, #412	; (adr r3, 800e630 <__ieee754_rem_pio2+0x300>)
 800e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e496:	f7f2 f87f 	bl	8000598 <__aeabi_dmul>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	f7f1 fec1 	bl	8000228 <__aeabi_dsub>
 800e4a6:	a364      	add	r3, pc, #400	; (adr r3, 800e638 <__ieee754_rem_pio2+0x308>)
 800e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	460f      	mov	r7, r1
 800e4b0:	ec51 0b18 	vmov	r0, r1, d8
 800e4b4:	f7f2 f870 	bl	8000598 <__aeabi_dmul>
 800e4b8:	f1bb 0f1f 	cmp.w	fp, #31
 800e4bc:	4604      	mov	r4, r0
 800e4be:	460d      	mov	r5, r1
 800e4c0:	dc0d      	bgt.n	800e4de <__ieee754_rem_pio2+0x1ae>
 800e4c2:	4b6e      	ldr	r3, [pc, #440]	; (800e67c <__ieee754_rem_pio2+0x34c>)
 800e4c4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4cc:	4543      	cmp	r3, r8
 800e4ce:	d006      	beq.n	800e4de <__ieee754_rem_pio2+0x1ae>
 800e4d0:	4622      	mov	r2, r4
 800e4d2:	462b      	mov	r3, r5
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f1 fea6 	bl	8000228 <__aeabi_dsub>
 800e4dc:	e00e      	b.n	800e4fc <__ieee754_rem_pio2+0x1cc>
 800e4de:	462b      	mov	r3, r5
 800e4e0:	4622      	mov	r2, r4
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	4639      	mov	r1, r7
 800e4e6:	f7f1 fe9f 	bl	8000228 <__aeabi_dsub>
 800e4ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e4ee:	9303      	str	r3, [sp, #12]
 800e4f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e4f4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e4f8:	2b10      	cmp	r3, #16
 800e4fa:	dc02      	bgt.n	800e502 <__ieee754_rem_pio2+0x1d2>
 800e4fc:	e9ca 0100 	strd	r0, r1, [sl]
 800e500:	e039      	b.n	800e576 <__ieee754_rem_pio2+0x246>
 800e502:	a34f      	add	r3, pc, #316	; (adr r3, 800e640 <__ieee754_rem_pio2+0x310>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	ec51 0b18 	vmov	r0, r1, d8
 800e50c:	f7f2 f844 	bl	8000598 <__aeabi_dmul>
 800e510:	4604      	mov	r4, r0
 800e512:	460d      	mov	r5, r1
 800e514:	4602      	mov	r2, r0
 800e516:	460b      	mov	r3, r1
 800e518:	4630      	mov	r0, r6
 800e51a:	4639      	mov	r1, r7
 800e51c:	f7f1 fe84 	bl	8000228 <__aeabi_dsub>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4680      	mov	r8, r0
 800e526:	4689      	mov	r9, r1
 800e528:	4630      	mov	r0, r6
 800e52a:	4639      	mov	r1, r7
 800e52c:	f7f1 fe7c 	bl	8000228 <__aeabi_dsub>
 800e530:	4622      	mov	r2, r4
 800e532:	462b      	mov	r3, r5
 800e534:	f7f1 fe78 	bl	8000228 <__aeabi_dsub>
 800e538:	a343      	add	r3, pc, #268	; (adr r3, 800e648 <__ieee754_rem_pio2+0x318>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	4604      	mov	r4, r0
 800e540:	460d      	mov	r5, r1
 800e542:	ec51 0b18 	vmov	r0, r1, d8
 800e546:	f7f2 f827 	bl	8000598 <__aeabi_dmul>
 800e54a:	4622      	mov	r2, r4
 800e54c:	462b      	mov	r3, r5
 800e54e:	f7f1 fe6b 	bl	8000228 <__aeabi_dsub>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	4604      	mov	r4, r0
 800e558:	460d      	mov	r5, r1
 800e55a:	4640      	mov	r0, r8
 800e55c:	4649      	mov	r1, r9
 800e55e:	f7f1 fe63 	bl	8000228 <__aeabi_dsub>
 800e562:	9a03      	ldr	r2, [sp, #12]
 800e564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	2b31      	cmp	r3, #49	; 0x31
 800e56c:	dc24      	bgt.n	800e5b8 <__ieee754_rem_pio2+0x288>
 800e56e:	e9ca 0100 	strd	r0, r1, [sl]
 800e572:	4646      	mov	r6, r8
 800e574:	464f      	mov	r7, r9
 800e576:	e9da 8900 	ldrd	r8, r9, [sl]
 800e57a:	4630      	mov	r0, r6
 800e57c:	4642      	mov	r2, r8
 800e57e:	464b      	mov	r3, r9
 800e580:	4639      	mov	r1, r7
 800e582:	f7f1 fe51 	bl	8000228 <__aeabi_dsub>
 800e586:	462b      	mov	r3, r5
 800e588:	4622      	mov	r2, r4
 800e58a:	f7f1 fe4d 	bl	8000228 <__aeabi_dsub>
 800e58e:	9b02      	ldr	r3, [sp, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e596:	f6bf af0b 	bge.w	800e3b0 <__ieee754_rem_pio2+0x80>
 800e59a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e59e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e5a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5a6:	f8ca 8000 	str.w	r8, [sl]
 800e5aa:	f8ca 0008 	str.w	r0, [sl, #8]
 800e5ae:	f8ca 300c 	str.w	r3, [sl, #12]
 800e5b2:	f1cb 0b00 	rsb	fp, fp, #0
 800e5b6:	e6fb      	b.n	800e3b0 <__ieee754_rem_pio2+0x80>
 800e5b8:	a327      	add	r3, pc, #156	; (adr r3, 800e658 <__ieee754_rem_pio2+0x328>)
 800e5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5be:	ec51 0b18 	vmov	r0, r1, d8
 800e5c2:	f7f1 ffe9 	bl	8000598 <__aeabi_dmul>
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	4649      	mov	r1, r9
 800e5d2:	f7f1 fe29 	bl	8000228 <__aeabi_dsub>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	460b      	mov	r3, r1
 800e5da:	4606      	mov	r6, r0
 800e5dc:	460f      	mov	r7, r1
 800e5de:	4640      	mov	r0, r8
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	f7f1 fe21 	bl	8000228 <__aeabi_dsub>
 800e5e6:	4622      	mov	r2, r4
 800e5e8:	462b      	mov	r3, r5
 800e5ea:	f7f1 fe1d 	bl	8000228 <__aeabi_dsub>
 800e5ee:	a31c      	add	r3, pc, #112	; (adr r3, 800e660 <__ieee754_rem_pio2+0x330>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	4604      	mov	r4, r0
 800e5f6:	460d      	mov	r5, r1
 800e5f8:	ec51 0b18 	vmov	r0, r1, d8
 800e5fc:	f7f1 ffcc 	bl	8000598 <__aeabi_dmul>
 800e600:	4622      	mov	r2, r4
 800e602:	462b      	mov	r3, r5
 800e604:	f7f1 fe10 	bl	8000228 <__aeabi_dsub>
 800e608:	4604      	mov	r4, r0
 800e60a:	460d      	mov	r5, r1
 800e60c:	e760      	b.n	800e4d0 <__ieee754_rem_pio2+0x1a0>
 800e60e:	4b1c      	ldr	r3, [pc, #112]	; (800e680 <__ieee754_rem_pio2+0x350>)
 800e610:	4598      	cmp	r8, r3
 800e612:	dd37      	ble.n	800e684 <__ieee754_rem_pio2+0x354>
 800e614:	ee10 2a10 	vmov	r2, s0
 800e618:	462b      	mov	r3, r5
 800e61a:	4620      	mov	r0, r4
 800e61c:	4629      	mov	r1, r5
 800e61e:	f7f1 fe03 	bl	8000228 <__aeabi_dsub>
 800e622:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e626:	e9ca 0100 	strd	r0, r1, [sl]
 800e62a:	e695      	b.n	800e358 <__ieee754_rem_pio2+0x28>
 800e62c:	f3af 8000 	nop.w
 800e630:	54400000 	.word	0x54400000
 800e634:	3ff921fb 	.word	0x3ff921fb
 800e638:	1a626331 	.word	0x1a626331
 800e63c:	3dd0b461 	.word	0x3dd0b461
 800e640:	1a600000 	.word	0x1a600000
 800e644:	3dd0b461 	.word	0x3dd0b461
 800e648:	2e037073 	.word	0x2e037073
 800e64c:	3ba3198a 	.word	0x3ba3198a
 800e650:	6dc9c883 	.word	0x6dc9c883
 800e654:	3fe45f30 	.word	0x3fe45f30
 800e658:	2e000000 	.word	0x2e000000
 800e65c:	3ba3198a 	.word	0x3ba3198a
 800e660:	252049c1 	.word	0x252049c1
 800e664:	397b839a 	.word	0x397b839a
 800e668:	3fe921fb 	.word	0x3fe921fb
 800e66c:	4002d97b 	.word	0x4002d97b
 800e670:	3ff921fb 	.word	0x3ff921fb
 800e674:	413921fb 	.word	0x413921fb
 800e678:	3fe00000 	.word	0x3fe00000
 800e67c:	0800fb98 	.word	0x0800fb98
 800e680:	7fefffff 	.word	0x7fefffff
 800e684:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e688:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e68c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e690:	4620      	mov	r0, r4
 800e692:	460d      	mov	r5, r1
 800e694:	f7f2 fa30 	bl	8000af8 <__aeabi_d2iz>
 800e698:	f7f1 ff14 	bl	80004c4 <__aeabi_i2d>
 800e69c:	4602      	mov	r2, r0
 800e69e:	460b      	mov	r3, r1
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6a8:	f7f1 fdbe 	bl	8000228 <__aeabi_dsub>
 800e6ac:	4b21      	ldr	r3, [pc, #132]	; (800e734 <__ieee754_rem_pio2+0x404>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f7f1 ff72 	bl	8000598 <__aeabi_dmul>
 800e6b4:	460d      	mov	r5, r1
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	f7f2 fa1e 	bl	8000af8 <__aeabi_d2iz>
 800e6bc:	f7f1 ff02 	bl	80004c4 <__aeabi_i2d>
 800e6c0:	4602      	mov	r2, r0
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e6cc:	f7f1 fdac 	bl	8000228 <__aeabi_dsub>
 800e6d0:	4b18      	ldr	r3, [pc, #96]	; (800e734 <__ieee754_rem_pio2+0x404>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f7f1 ff60 	bl	8000598 <__aeabi_dmul>
 800e6d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e6dc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e6e0:	2703      	movs	r7, #3
 800e6e2:	2400      	movs	r4, #0
 800e6e4:	2500      	movs	r5, #0
 800e6e6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	462b      	mov	r3, r5
 800e6ee:	46b9      	mov	r9, r7
 800e6f0:	3f01      	subs	r7, #1
 800e6f2:	f7f2 f9b9 	bl	8000a68 <__aeabi_dcmpeq>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d1f5      	bne.n	800e6e6 <__ieee754_rem_pio2+0x3b6>
 800e6fa:	4b0f      	ldr	r3, [pc, #60]	; (800e738 <__ieee754_rem_pio2+0x408>)
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	2302      	movs	r3, #2
 800e700:	9300      	str	r3, [sp, #0]
 800e702:	4632      	mov	r2, r6
 800e704:	464b      	mov	r3, r9
 800e706:	4651      	mov	r1, sl
 800e708:	a804      	add	r0, sp, #16
 800e70a:	f000 f819 	bl	800e740 <__kernel_rem_pio2>
 800e70e:	9b02      	ldr	r3, [sp, #8]
 800e710:	2b00      	cmp	r3, #0
 800e712:	4683      	mov	fp, r0
 800e714:	f6bf ae4c 	bge.w	800e3b0 <__ieee754_rem_pio2+0x80>
 800e718:	e9da 2100 	ldrd	r2, r1, [sl]
 800e71c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e720:	e9ca 2300 	strd	r2, r3, [sl]
 800e724:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e728:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e72c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e730:	e73f      	b.n	800e5b2 <__ieee754_rem_pio2+0x282>
 800e732:	bf00      	nop
 800e734:	41700000 	.word	0x41700000
 800e738:	0800fc18 	.word	0x0800fc18
 800e73c:	00000000 	.word	0x00000000

0800e740 <__kernel_rem_pio2>:
 800e740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e744:	ed2d 8b02 	vpush	{d8}
 800e748:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e74c:	f112 0f14 	cmn.w	r2, #20
 800e750:	9306      	str	r3, [sp, #24]
 800e752:	9104      	str	r1, [sp, #16]
 800e754:	4bc2      	ldr	r3, [pc, #776]	; (800ea60 <__kernel_rem_pio2+0x320>)
 800e756:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e758:	9009      	str	r0, [sp, #36]	; 0x24
 800e75a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	9b06      	ldr	r3, [sp, #24]
 800e762:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e766:	bfa8      	it	ge
 800e768:	1ed4      	subge	r4, r2, #3
 800e76a:	9305      	str	r3, [sp, #20]
 800e76c:	bfb2      	itee	lt
 800e76e:	2400      	movlt	r4, #0
 800e770:	2318      	movge	r3, #24
 800e772:	fb94 f4f3 	sdivge	r4, r4, r3
 800e776:	f06f 0317 	mvn.w	r3, #23
 800e77a:	fb04 3303 	mla	r3, r4, r3, r3
 800e77e:	eb03 0a02 	add.w	sl, r3, r2
 800e782:	9b00      	ldr	r3, [sp, #0]
 800e784:	9a05      	ldr	r2, [sp, #20]
 800e786:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800ea50 <__kernel_rem_pio2+0x310>
 800e78a:	eb03 0802 	add.w	r8, r3, r2
 800e78e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e790:	1aa7      	subs	r7, r4, r2
 800e792:	ae20      	add	r6, sp, #128	; 0x80
 800e794:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e798:	2500      	movs	r5, #0
 800e79a:	4545      	cmp	r5, r8
 800e79c:	dd13      	ble.n	800e7c6 <__kernel_rem_pio2+0x86>
 800e79e:	9b06      	ldr	r3, [sp, #24]
 800e7a0:	aa20      	add	r2, sp, #128	; 0x80
 800e7a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e7a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e7aa:	f04f 0800 	mov.w	r8, #0
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	4598      	cmp	r8, r3
 800e7b2:	dc31      	bgt.n	800e818 <__kernel_rem_pio2+0xd8>
 800e7b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800ea50 <__kernel_rem_pio2+0x310>
 800e7b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e7bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e7c0:	462f      	mov	r7, r5
 800e7c2:	2600      	movs	r6, #0
 800e7c4:	e01b      	b.n	800e7fe <__kernel_rem_pio2+0xbe>
 800e7c6:	42ef      	cmn	r7, r5
 800e7c8:	d407      	bmi.n	800e7da <__kernel_rem_pio2+0x9a>
 800e7ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e7ce:	f7f1 fe79 	bl	80004c4 <__aeabi_i2d>
 800e7d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e7d6:	3501      	adds	r5, #1
 800e7d8:	e7df      	b.n	800e79a <__kernel_rem_pio2+0x5a>
 800e7da:	ec51 0b18 	vmov	r0, r1, d8
 800e7de:	e7f8      	b.n	800e7d2 <__kernel_rem_pio2+0x92>
 800e7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e7e8:	f7f1 fed6 	bl	8000598 <__aeabi_dmul>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f4:	f7f1 fd1a 	bl	800022c <__adddf3>
 800e7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7fc:	3601      	adds	r6, #1
 800e7fe:	9b05      	ldr	r3, [sp, #20]
 800e800:	429e      	cmp	r6, r3
 800e802:	f1a7 0708 	sub.w	r7, r7, #8
 800e806:	ddeb      	ble.n	800e7e0 <__kernel_rem_pio2+0xa0>
 800e808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e80c:	f108 0801 	add.w	r8, r8, #1
 800e810:	ecab 7b02 	vstmia	fp!, {d7}
 800e814:	3508      	adds	r5, #8
 800e816:	e7ca      	b.n	800e7ae <__kernel_rem_pio2+0x6e>
 800e818:	9b00      	ldr	r3, [sp, #0]
 800e81a:	aa0c      	add	r2, sp, #48	; 0x30
 800e81c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e820:	930b      	str	r3, [sp, #44]	; 0x2c
 800e822:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e824:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e828:	9c00      	ldr	r4, [sp, #0]
 800e82a:	930a      	str	r3, [sp, #40]	; 0x28
 800e82c:	00e3      	lsls	r3, r4, #3
 800e82e:	9308      	str	r3, [sp, #32]
 800e830:	ab98      	add	r3, sp, #608	; 0x260
 800e832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e836:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e83a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e83e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e840:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e844:	46c3      	mov	fp, r8
 800e846:	46a1      	mov	r9, r4
 800e848:	f1b9 0f00 	cmp.w	r9, #0
 800e84c:	f1a5 0508 	sub.w	r5, r5, #8
 800e850:	dc77      	bgt.n	800e942 <__kernel_rem_pio2+0x202>
 800e852:	ec47 6b10 	vmov	d0, r6, r7
 800e856:	4650      	mov	r0, sl
 800e858:	f000 fc4a 	bl	800f0f0 <scalbn>
 800e85c:	ec57 6b10 	vmov	r6, r7, d0
 800e860:	2200      	movs	r2, #0
 800e862:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e866:	ee10 0a10 	vmov	r0, s0
 800e86a:	4639      	mov	r1, r7
 800e86c:	f7f1 fe94 	bl	8000598 <__aeabi_dmul>
 800e870:	ec41 0b10 	vmov	d0, r0, r1
 800e874:	f000 fcbc 	bl	800f1f0 <floor>
 800e878:	4b7a      	ldr	r3, [pc, #488]	; (800ea64 <__kernel_rem_pio2+0x324>)
 800e87a:	ec51 0b10 	vmov	r0, r1, d0
 800e87e:	2200      	movs	r2, #0
 800e880:	f7f1 fe8a 	bl	8000598 <__aeabi_dmul>
 800e884:	4602      	mov	r2, r0
 800e886:	460b      	mov	r3, r1
 800e888:	4630      	mov	r0, r6
 800e88a:	4639      	mov	r1, r7
 800e88c:	f7f1 fccc 	bl	8000228 <__aeabi_dsub>
 800e890:	460f      	mov	r7, r1
 800e892:	4606      	mov	r6, r0
 800e894:	f7f2 f930 	bl	8000af8 <__aeabi_d2iz>
 800e898:	9002      	str	r0, [sp, #8]
 800e89a:	f7f1 fe13 	bl	80004c4 <__aeabi_i2d>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	4639      	mov	r1, r7
 800e8a6:	f7f1 fcbf 	bl	8000228 <__aeabi_dsub>
 800e8aa:	f1ba 0f00 	cmp.w	sl, #0
 800e8ae:	4606      	mov	r6, r0
 800e8b0:	460f      	mov	r7, r1
 800e8b2:	dd6d      	ble.n	800e990 <__kernel_rem_pio2+0x250>
 800e8b4:	1e61      	subs	r1, r4, #1
 800e8b6:	ab0c      	add	r3, sp, #48	; 0x30
 800e8b8:	9d02      	ldr	r5, [sp, #8]
 800e8ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8be:	f1ca 0018 	rsb	r0, sl, #24
 800e8c2:	fa43 f200 	asr.w	r2, r3, r0
 800e8c6:	4415      	add	r5, r2
 800e8c8:	4082      	lsls	r2, r0
 800e8ca:	1a9b      	subs	r3, r3, r2
 800e8cc:	aa0c      	add	r2, sp, #48	; 0x30
 800e8ce:	9502      	str	r5, [sp, #8]
 800e8d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e8d4:	f1ca 0217 	rsb	r2, sl, #23
 800e8d8:	fa43 fb02 	asr.w	fp, r3, r2
 800e8dc:	f1bb 0f00 	cmp.w	fp, #0
 800e8e0:	dd65      	ble.n	800e9ae <__kernel_rem_pio2+0x26e>
 800e8e2:	9b02      	ldr	r3, [sp, #8]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	9302      	str	r3, [sp, #8]
 800e8ea:	4615      	mov	r5, r2
 800e8ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e8f0:	4294      	cmp	r4, r2
 800e8f2:	f300 809f 	bgt.w	800ea34 <__kernel_rem_pio2+0x2f4>
 800e8f6:	f1ba 0f00 	cmp.w	sl, #0
 800e8fa:	dd07      	ble.n	800e90c <__kernel_rem_pio2+0x1cc>
 800e8fc:	f1ba 0f01 	cmp.w	sl, #1
 800e900:	f000 80c1 	beq.w	800ea86 <__kernel_rem_pio2+0x346>
 800e904:	f1ba 0f02 	cmp.w	sl, #2
 800e908:	f000 80c7 	beq.w	800ea9a <__kernel_rem_pio2+0x35a>
 800e90c:	f1bb 0f02 	cmp.w	fp, #2
 800e910:	d14d      	bne.n	800e9ae <__kernel_rem_pio2+0x26e>
 800e912:	4632      	mov	r2, r6
 800e914:	463b      	mov	r3, r7
 800e916:	4954      	ldr	r1, [pc, #336]	; (800ea68 <__kernel_rem_pio2+0x328>)
 800e918:	2000      	movs	r0, #0
 800e91a:	f7f1 fc85 	bl	8000228 <__aeabi_dsub>
 800e91e:	4606      	mov	r6, r0
 800e920:	460f      	mov	r7, r1
 800e922:	2d00      	cmp	r5, #0
 800e924:	d043      	beq.n	800e9ae <__kernel_rem_pio2+0x26e>
 800e926:	4650      	mov	r0, sl
 800e928:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ea58 <__kernel_rem_pio2+0x318>
 800e92c:	f000 fbe0 	bl	800f0f0 <scalbn>
 800e930:	4630      	mov	r0, r6
 800e932:	4639      	mov	r1, r7
 800e934:	ec53 2b10 	vmov	r2, r3, d0
 800e938:	f7f1 fc76 	bl	8000228 <__aeabi_dsub>
 800e93c:	4606      	mov	r6, r0
 800e93e:	460f      	mov	r7, r1
 800e940:	e035      	b.n	800e9ae <__kernel_rem_pio2+0x26e>
 800e942:	4b4a      	ldr	r3, [pc, #296]	; (800ea6c <__kernel_rem_pio2+0x32c>)
 800e944:	2200      	movs	r2, #0
 800e946:	4630      	mov	r0, r6
 800e948:	4639      	mov	r1, r7
 800e94a:	f7f1 fe25 	bl	8000598 <__aeabi_dmul>
 800e94e:	f7f2 f8d3 	bl	8000af8 <__aeabi_d2iz>
 800e952:	f7f1 fdb7 	bl	80004c4 <__aeabi_i2d>
 800e956:	4602      	mov	r2, r0
 800e958:	460b      	mov	r3, r1
 800e95a:	ec43 2b18 	vmov	d8, r2, r3
 800e95e:	4b44      	ldr	r3, [pc, #272]	; (800ea70 <__kernel_rem_pio2+0x330>)
 800e960:	2200      	movs	r2, #0
 800e962:	f7f1 fe19 	bl	8000598 <__aeabi_dmul>
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	4630      	mov	r0, r6
 800e96c:	4639      	mov	r1, r7
 800e96e:	f7f1 fc5b 	bl	8000228 <__aeabi_dsub>
 800e972:	f7f2 f8c1 	bl	8000af8 <__aeabi_d2iz>
 800e976:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e97a:	f84b 0b04 	str.w	r0, [fp], #4
 800e97e:	ec51 0b18 	vmov	r0, r1, d8
 800e982:	f7f1 fc53 	bl	800022c <__adddf3>
 800e986:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e98a:	4606      	mov	r6, r0
 800e98c:	460f      	mov	r7, r1
 800e98e:	e75b      	b.n	800e848 <__kernel_rem_pio2+0x108>
 800e990:	d106      	bne.n	800e9a0 <__kernel_rem_pio2+0x260>
 800e992:	1e63      	subs	r3, r4, #1
 800e994:	aa0c      	add	r2, sp, #48	; 0x30
 800e996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e99e:	e79d      	b.n	800e8dc <__kernel_rem_pio2+0x19c>
 800e9a0:	4b34      	ldr	r3, [pc, #208]	; (800ea74 <__kernel_rem_pio2+0x334>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f7f2 f87e 	bl	8000aa4 <__aeabi_dcmpge>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d140      	bne.n	800ea2e <__kernel_rem_pio2+0x2ee>
 800e9ac:	4683      	mov	fp, r0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f2 f857 	bl	8000a68 <__aeabi_dcmpeq>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	f000 80c1 	beq.w	800eb42 <__kernel_rem_pio2+0x402>
 800e9c0:	1e65      	subs	r5, r4, #1
 800e9c2:	462b      	mov	r3, r5
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	9900      	ldr	r1, [sp, #0]
 800e9c8:	428b      	cmp	r3, r1
 800e9ca:	da6d      	bge.n	800eaa8 <__kernel_rem_pio2+0x368>
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	f000 808a 	beq.w	800eae6 <__kernel_rem_pio2+0x3a6>
 800e9d2:	ab0c      	add	r3, sp, #48	; 0x30
 800e9d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e9d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 80ae 	beq.w	800eb3e <__kernel_rem_pio2+0x3fe>
 800e9e2:	4650      	mov	r0, sl
 800e9e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800ea58 <__kernel_rem_pio2+0x318>
 800e9e8:	f000 fb82 	bl	800f0f0 <scalbn>
 800e9ec:	1c6b      	adds	r3, r5, #1
 800e9ee:	00da      	lsls	r2, r3, #3
 800e9f0:	9205      	str	r2, [sp, #20]
 800e9f2:	ec57 6b10 	vmov	r6, r7, d0
 800e9f6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e9f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ea6c <__kernel_rem_pio2+0x32c>
 800e9fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ea00:	462c      	mov	r4, r5
 800ea02:	f04f 0800 	mov.w	r8, #0
 800ea06:	2c00      	cmp	r4, #0
 800ea08:	f280 80d4 	bge.w	800ebb4 <__kernel_rem_pio2+0x474>
 800ea0c:	462c      	mov	r4, r5
 800ea0e:	2c00      	cmp	r4, #0
 800ea10:	f2c0 8102 	blt.w	800ec18 <__kernel_rem_pio2+0x4d8>
 800ea14:	4b18      	ldr	r3, [pc, #96]	; (800ea78 <__kernel_rem_pio2+0x338>)
 800ea16:	461e      	mov	r6, r3
 800ea18:	ab70      	add	r3, sp, #448	; 0x1c0
 800ea1a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800ea1e:	1b2b      	subs	r3, r5, r4
 800ea20:	f04f 0900 	mov.w	r9, #0
 800ea24:	f04f 0a00 	mov.w	sl, #0
 800ea28:	2700      	movs	r7, #0
 800ea2a:	9306      	str	r3, [sp, #24]
 800ea2c:	e0e6      	b.n	800ebfc <__kernel_rem_pio2+0x4bc>
 800ea2e:	f04f 0b02 	mov.w	fp, #2
 800ea32:	e756      	b.n	800e8e2 <__kernel_rem_pio2+0x1a2>
 800ea34:	f8d8 3000 	ldr.w	r3, [r8]
 800ea38:	bb05      	cbnz	r5, 800ea7c <__kernel_rem_pio2+0x33c>
 800ea3a:	b123      	cbz	r3, 800ea46 <__kernel_rem_pio2+0x306>
 800ea3c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ea40:	f8c8 3000 	str.w	r3, [r8]
 800ea44:	2301      	movs	r3, #1
 800ea46:	3201      	adds	r2, #1
 800ea48:	f108 0804 	add.w	r8, r8, #4
 800ea4c:	461d      	mov	r5, r3
 800ea4e:	e74f      	b.n	800e8f0 <__kernel_rem_pio2+0x1b0>
	...
 800ea5c:	3ff00000 	.word	0x3ff00000
 800ea60:	0800fd60 	.word	0x0800fd60
 800ea64:	40200000 	.word	0x40200000
 800ea68:	3ff00000 	.word	0x3ff00000
 800ea6c:	3e700000 	.word	0x3e700000
 800ea70:	41700000 	.word	0x41700000
 800ea74:	3fe00000 	.word	0x3fe00000
 800ea78:	0800fd20 	.word	0x0800fd20
 800ea7c:	1acb      	subs	r3, r1, r3
 800ea7e:	f8c8 3000 	str.w	r3, [r8]
 800ea82:	462b      	mov	r3, r5
 800ea84:	e7df      	b.n	800ea46 <__kernel_rem_pio2+0x306>
 800ea86:	1e62      	subs	r2, r4, #1
 800ea88:	ab0c      	add	r3, sp, #48	; 0x30
 800ea8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ea92:	a90c      	add	r1, sp, #48	; 0x30
 800ea94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ea98:	e738      	b.n	800e90c <__kernel_rem_pio2+0x1cc>
 800ea9a:	1e62      	subs	r2, r4, #1
 800ea9c:	ab0c      	add	r3, sp, #48	; 0x30
 800ea9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaa2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eaa6:	e7f4      	b.n	800ea92 <__kernel_rem_pio2+0x352>
 800eaa8:	a90c      	add	r1, sp, #48	; 0x30
 800eaaa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eaae:	3b01      	subs	r3, #1
 800eab0:	430a      	orrs	r2, r1
 800eab2:	e788      	b.n	800e9c6 <__kernel_rem_pio2+0x286>
 800eab4:	3301      	adds	r3, #1
 800eab6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eaba:	2900      	cmp	r1, #0
 800eabc:	d0fa      	beq.n	800eab4 <__kernel_rem_pio2+0x374>
 800eabe:	9a08      	ldr	r2, [sp, #32]
 800eac0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800eac4:	446a      	add	r2, sp
 800eac6:	3a98      	subs	r2, #152	; 0x98
 800eac8:	9208      	str	r2, [sp, #32]
 800eaca:	9a06      	ldr	r2, [sp, #24]
 800eacc:	a920      	add	r1, sp, #128	; 0x80
 800eace:	18a2      	adds	r2, r4, r2
 800ead0:	18e3      	adds	r3, r4, r3
 800ead2:	f104 0801 	add.w	r8, r4, #1
 800ead6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800eada:	9302      	str	r3, [sp, #8]
 800eadc:	9b02      	ldr	r3, [sp, #8]
 800eade:	4543      	cmp	r3, r8
 800eae0:	da04      	bge.n	800eaec <__kernel_rem_pio2+0x3ac>
 800eae2:	461c      	mov	r4, r3
 800eae4:	e6a2      	b.n	800e82c <__kernel_rem_pio2+0xec>
 800eae6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eae8:	2301      	movs	r3, #1
 800eaea:	e7e4      	b.n	800eab6 <__kernel_rem_pio2+0x376>
 800eaec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eaf2:	f7f1 fce7 	bl	80004c4 <__aeabi_i2d>
 800eaf6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafc:	46ab      	mov	fp, r5
 800eafe:	461c      	mov	r4, r3
 800eb00:	f04f 0900 	mov.w	r9, #0
 800eb04:	2600      	movs	r6, #0
 800eb06:	2700      	movs	r7, #0
 800eb08:	9b05      	ldr	r3, [sp, #20]
 800eb0a:	4599      	cmp	r9, r3
 800eb0c:	dd06      	ble.n	800eb1c <__kernel_rem_pio2+0x3dc>
 800eb0e:	9b08      	ldr	r3, [sp, #32]
 800eb10:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eb14:	f108 0801 	add.w	r8, r8, #1
 800eb18:	9308      	str	r3, [sp, #32]
 800eb1a:	e7df      	b.n	800eadc <__kernel_rem_pio2+0x39c>
 800eb1c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800eb20:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800eb24:	f7f1 fd38 	bl	8000598 <__aeabi_dmul>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	4639      	mov	r1, r7
 800eb30:	f7f1 fb7c 	bl	800022c <__adddf3>
 800eb34:	f109 0901 	add.w	r9, r9, #1
 800eb38:	4606      	mov	r6, r0
 800eb3a:	460f      	mov	r7, r1
 800eb3c:	e7e4      	b.n	800eb08 <__kernel_rem_pio2+0x3c8>
 800eb3e:	3d01      	subs	r5, #1
 800eb40:	e747      	b.n	800e9d2 <__kernel_rem_pio2+0x292>
 800eb42:	ec47 6b10 	vmov	d0, r6, r7
 800eb46:	f1ca 0000 	rsb	r0, sl, #0
 800eb4a:	f000 fad1 	bl	800f0f0 <scalbn>
 800eb4e:	ec57 6b10 	vmov	r6, r7, d0
 800eb52:	4ba0      	ldr	r3, [pc, #640]	; (800edd4 <__kernel_rem_pio2+0x694>)
 800eb54:	ee10 0a10 	vmov	r0, s0
 800eb58:	2200      	movs	r2, #0
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	f7f1 ffa2 	bl	8000aa4 <__aeabi_dcmpge>
 800eb60:	b1f8      	cbz	r0, 800eba2 <__kernel_rem_pio2+0x462>
 800eb62:	4b9d      	ldr	r3, [pc, #628]	; (800edd8 <__kernel_rem_pio2+0x698>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	4630      	mov	r0, r6
 800eb68:	4639      	mov	r1, r7
 800eb6a:	f7f1 fd15 	bl	8000598 <__aeabi_dmul>
 800eb6e:	f7f1 ffc3 	bl	8000af8 <__aeabi_d2iz>
 800eb72:	4680      	mov	r8, r0
 800eb74:	f7f1 fca6 	bl	80004c4 <__aeabi_i2d>
 800eb78:	4b96      	ldr	r3, [pc, #600]	; (800edd4 <__kernel_rem_pio2+0x694>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f7f1 fd0c 	bl	8000598 <__aeabi_dmul>
 800eb80:	460b      	mov	r3, r1
 800eb82:	4602      	mov	r2, r0
 800eb84:	4639      	mov	r1, r7
 800eb86:	4630      	mov	r0, r6
 800eb88:	f7f1 fb4e 	bl	8000228 <__aeabi_dsub>
 800eb8c:	f7f1 ffb4 	bl	8000af8 <__aeabi_d2iz>
 800eb90:	1c65      	adds	r5, r4, #1
 800eb92:	ab0c      	add	r3, sp, #48	; 0x30
 800eb94:	f10a 0a18 	add.w	sl, sl, #24
 800eb98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eb9c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800eba0:	e71f      	b.n	800e9e2 <__kernel_rem_pio2+0x2a2>
 800eba2:	4630      	mov	r0, r6
 800eba4:	4639      	mov	r1, r7
 800eba6:	f7f1 ffa7 	bl	8000af8 <__aeabi_d2iz>
 800ebaa:	ab0c      	add	r3, sp, #48	; 0x30
 800ebac:	4625      	mov	r5, r4
 800ebae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ebb2:	e716      	b.n	800e9e2 <__kernel_rem_pio2+0x2a2>
 800ebb4:	ab0c      	add	r3, sp, #48	; 0x30
 800ebb6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ebba:	f7f1 fc83 	bl	80004c4 <__aeabi_i2d>
 800ebbe:	4632      	mov	r2, r6
 800ebc0:	463b      	mov	r3, r7
 800ebc2:	f7f1 fce9 	bl	8000598 <__aeabi_dmul>
 800ebc6:	4642      	mov	r2, r8
 800ebc8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ebcc:	464b      	mov	r3, r9
 800ebce:	4630      	mov	r0, r6
 800ebd0:	4639      	mov	r1, r7
 800ebd2:	f7f1 fce1 	bl	8000598 <__aeabi_dmul>
 800ebd6:	3c01      	subs	r4, #1
 800ebd8:	4606      	mov	r6, r0
 800ebda:	460f      	mov	r7, r1
 800ebdc:	e713      	b.n	800ea06 <__kernel_rem_pio2+0x2c6>
 800ebde:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ebe2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ebe6:	f7f1 fcd7 	bl	8000598 <__aeabi_dmul>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	4648      	mov	r0, r9
 800ebf0:	4651      	mov	r1, sl
 800ebf2:	f7f1 fb1b 	bl	800022c <__adddf3>
 800ebf6:	3701      	adds	r7, #1
 800ebf8:	4681      	mov	r9, r0
 800ebfa:	468a      	mov	sl, r1
 800ebfc:	9b00      	ldr	r3, [sp, #0]
 800ebfe:	429f      	cmp	r7, r3
 800ec00:	dc02      	bgt.n	800ec08 <__kernel_rem_pio2+0x4c8>
 800ec02:	9b06      	ldr	r3, [sp, #24]
 800ec04:	429f      	cmp	r7, r3
 800ec06:	ddea      	ble.n	800ebde <__kernel_rem_pio2+0x49e>
 800ec08:	9a06      	ldr	r2, [sp, #24]
 800ec0a:	ab48      	add	r3, sp, #288	; 0x120
 800ec0c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ec10:	e9c6 9a00 	strd	r9, sl, [r6]
 800ec14:	3c01      	subs	r4, #1
 800ec16:	e6fa      	b.n	800ea0e <__kernel_rem_pio2+0x2ce>
 800ec18:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ec1a:	2b02      	cmp	r3, #2
 800ec1c:	dc0b      	bgt.n	800ec36 <__kernel_rem_pio2+0x4f6>
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	dc39      	bgt.n	800ec96 <__kernel_rem_pio2+0x556>
 800ec22:	d05d      	beq.n	800ece0 <__kernel_rem_pio2+0x5a0>
 800ec24:	9b02      	ldr	r3, [sp, #8]
 800ec26:	f003 0007 	and.w	r0, r3, #7
 800ec2a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ec2e:	ecbd 8b02 	vpop	{d8}
 800ec32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec36:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ec38:	2b03      	cmp	r3, #3
 800ec3a:	d1f3      	bne.n	800ec24 <__kernel_rem_pio2+0x4e4>
 800ec3c:	9b05      	ldr	r3, [sp, #20]
 800ec3e:	9500      	str	r5, [sp, #0]
 800ec40:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ec44:	eb0d 0403 	add.w	r4, sp, r3
 800ec48:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ec4c:	46a2      	mov	sl, r4
 800ec4e:	9b00      	ldr	r3, [sp, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f1aa 0a08 	sub.w	sl, sl, #8
 800ec56:	dc69      	bgt.n	800ed2c <__kernel_rem_pio2+0x5ec>
 800ec58:	46aa      	mov	sl, r5
 800ec5a:	f1ba 0f01 	cmp.w	sl, #1
 800ec5e:	f1a4 0408 	sub.w	r4, r4, #8
 800ec62:	f300 8083 	bgt.w	800ed6c <__kernel_rem_pio2+0x62c>
 800ec66:	9c05      	ldr	r4, [sp, #20]
 800ec68:	ab48      	add	r3, sp, #288	; 0x120
 800ec6a:	441c      	add	r4, r3
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	2100      	movs	r1, #0
 800ec70:	2d01      	cmp	r5, #1
 800ec72:	f300 809a 	bgt.w	800edaa <__kernel_rem_pio2+0x66a>
 800ec76:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ec7a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ec7e:	f1bb 0f00 	cmp.w	fp, #0
 800ec82:	f040 8098 	bne.w	800edb6 <__kernel_rem_pio2+0x676>
 800ec86:	9b04      	ldr	r3, [sp, #16]
 800ec88:	e9c3 7800 	strd	r7, r8, [r3]
 800ec8c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ec90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ec94:	e7c6      	b.n	800ec24 <__kernel_rem_pio2+0x4e4>
 800ec96:	9e05      	ldr	r6, [sp, #20]
 800ec98:	ab48      	add	r3, sp, #288	; 0x120
 800ec9a:	441e      	add	r6, r3
 800ec9c:	462c      	mov	r4, r5
 800ec9e:	2000      	movs	r0, #0
 800eca0:	2100      	movs	r1, #0
 800eca2:	2c00      	cmp	r4, #0
 800eca4:	da33      	bge.n	800ed0e <__kernel_rem_pio2+0x5ce>
 800eca6:	f1bb 0f00 	cmp.w	fp, #0
 800ecaa:	d036      	beq.n	800ed1a <__kernel_rem_pio2+0x5da>
 800ecac:	4602      	mov	r2, r0
 800ecae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecb2:	9c04      	ldr	r4, [sp, #16]
 800ecb4:	e9c4 2300 	strd	r2, r3, [r4]
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ecc0:	f7f1 fab2 	bl	8000228 <__aeabi_dsub>
 800ecc4:	ae4a      	add	r6, sp, #296	; 0x128
 800ecc6:	2401      	movs	r4, #1
 800ecc8:	42a5      	cmp	r5, r4
 800ecca:	da29      	bge.n	800ed20 <__kernel_rem_pio2+0x5e0>
 800eccc:	f1bb 0f00 	cmp.w	fp, #0
 800ecd0:	d002      	beq.n	800ecd8 <__kernel_rem_pio2+0x598>
 800ecd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	9b04      	ldr	r3, [sp, #16]
 800ecda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ecde:	e7a1      	b.n	800ec24 <__kernel_rem_pio2+0x4e4>
 800ece0:	9c05      	ldr	r4, [sp, #20]
 800ece2:	ab48      	add	r3, sp, #288	; 0x120
 800ece4:	441c      	add	r4, r3
 800ece6:	2000      	movs	r0, #0
 800ece8:	2100      	movs	r1, #0
 800ecea:	2d00      	cmp	r5, #0
 800ecec:	da09      	bge.n	800ed02 <__kernel_rem_pio2+0x5c2>
 800ecee:	f1bb 0f00 	cmp.w	fp, #0
 800ecf2:	d002      	beq.n	800ecfa <__kernel_rem_pio2+0x5ba>
 800ecf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	9b04      	ldr	r3, [sp, #16]
 800ecfc:	e9c3 0100 	strd	r0, r1, [r3]
 800ed00:	e790      	b.n	800ec24 <__kernel_rem_pio2+0x4e4>
 800ed02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ed06:	f7f1 fa91 	bl	800022c <__adddf3>
 800ed0a:	3d01      	subs	r5, #1
 800ed0c:	e7ed      	b.n	800ecea <__kernel_rem_pio2+0x5aa>
 800ed0e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ed12:	f7f1 fa8b 	bl	800022c <__adddf3>
 800ed16:	3c01      	subs	r4, #1
 800ed18:	e7c3      	b.n	800eca2 <__kernel_rem_pio2+0x562>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	e7c8      	b.n	800ecb2 <__kernel_rem_pio2+0x572>
 800ed20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ed24:	f7f1 fa82 	bl	800022c <__adddf3>
 800ed28:	3401      	adds	r4, #1
 800ed2a:	e7cd      	b.n	800ecc8 <__kernel_rem_pio2+0x588>
 800ed2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ed34:	9b00      	ldr	r3, [sp, #0]
 800ed36:	3b01      	subs	r3, #1
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	4632      	mov	r2, r6
 800ed3c:	463b      	mov	r3, r7
 800ed3e:	4640      	mov	r0, r8
 800ed40:	4649      	mov	r1, r9
 800ed42:	f7f1 fa73 	bl	800022c <__adddf3>
 800ed46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4640      	mov	r0, r8
 800ed50:	4649      	mov	r1, r9
 800ed52:	f7f1 fa69 	bl	8000228 <__aeabi_dsub>
 800ed56:	4632      	mov	r2, r6
 800ed58:	463b      	mov	r3, r7
 800ed5a:	f7f1 fa67 	bl	800022c <__adddf3>
 800ed5e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ed62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ed66:	ed8a 7b00 	vstr	d7, [sl]
 800ed6a:	e770      	b.n	800ec4e <__kernel_rem_pio2+0x50e>
 800ed6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ed70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ed74:	4640      	mov	r0, r8
 800ed76:	4632      	mov	r2, r6
 800ed78:	463b      	mov	r3, r7
 800ed7a:	4649      	mov	r1, r9
 800ed7c:	f7f1 fa56 	bl	800022c <__adddf3>
 800ed80:	e9cd 0100 	strd	r0, r1, [sp]
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4640      	mov	r0, r8
 800ed8a:	4649      	mov	r1, r9
 800ed8c:	f7f1 fa4c 	bl	8000228 <__aeabi_dsub>
 800ed90:	4632      	mov	r2, r6
 800ed92:	463b      	mov	r3, r7
 800ed94:	f7f1 fa4a 	bl	800022c <__adddf3>
 800ed98:	ed9d 7b00 	vldr	d7, [sp]
 800ed9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eda0:	ed84 7b00 	vstr	d7, [r4]
 800eda4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800eda8:	e757      	b.n	800ec5a <__kernel_rem_pio2+0x51a>
 800edaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800edae:	f7f1 fa3d 	bl	800022c <__adddf3>
 800edb2:	3d01      	subs	r5, #1
 800edb4:	e75c      	b.n	800ec70 <__kernel_rem_pio2+0x530>
 800edb6:	9b04      	ldr	r3, [sp, #16]
 800edb8:	9a04      	ldr	r2, [sp, #16]
 800edba:	601f      	str	r7, [r3, #0]
 800edbc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800edc0:	605c      	str	r4, [r3, #4]
 800edc2:	609d      	str	r5, [r3, #8]
 800edc4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800edc8:	60d3      	str	r3, [r2, #12]
 800edca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edce:	6110      	str	r0, [r2, #16]
 800edd0:	6153      	str	r3, [r2, #20]
 800edd2:	e727      	b.n	800ec24 <__kernel_rem_pio2+0x4e4>
 800edd4:	41700000 	.word	0x41700000
 800edd8:	3e700000 	.word	0x3e700000
 800eddc:	00000000 	.word	0x00000000

0800ede0 <__kernel_cos>:
 800ede0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	ec57 6b10 	vmov	r6, r7, d0
 800ede8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800edec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800edf0:	ed8d 1b00 	vstr	d1, [sp]
 800edf4:	da07      	bge.n	800ee06 <__kernel_cos+0x26>
 800edf6:	ee10 0a10 	vmov	r0, s0
 800edfa:	4639      	mov	r1, r7
 800edfc:	f7f1 fe7c 	bl	8000af8 <__aeabi_d2iz>
 800ee00:	2800      	cmp	r0, #0
 800ee02:	f000 8088 	beq.w	800ef16 <__kernel_cos+0x136>
 800ee06:	4632      	mov	r2, r6
 800ee08:	463b      	mov	r3, r7
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	f7f1 fbc3 	bl	8000598 <__aeabi_dmul>
 800ee12:	4b51      	ldr	r3, [pc, #324]	; (800ef58 <__kernel_cos+0x178>)
 800ee14:	2200      	movs	r2, #0
 800ee16:	4604      	mov	r4, r0
 800ee18:	460d      	mov	r5, r1
 800ee1a:	f7f1 fbbd 	bl	8000598 <__aeabi_dmul>
 800ee1e:	a340      	add	r3, pc, #256	; (adr r3, 800ef20 <__kernel_cos+0x140>)
 800ee20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee24:	4682      	mov	sl, r0
 800ee26:	468b      	mov	fp, r1
 800ee28:	4620      	mov	r0, r4
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	f7f1 fbb4 	bl	8000598 <__aeabi_dmul>
 800ee30:	a33d      	add	r3, pc, #244	; (adr r3, 800ef28 <__kernel_cos+0x148>)
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	f7f1 f9f9 	bl	800022c <__adddf3>
 800ee3a:	4622      	mov	r2, r4
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	f7f1 fbab 	bl	8000598 <__aeabi_dmul>
 800ee42:	a33b      	add	r3, pc, #236	; (adr r3, 800ef30 <__kernel_cos+0x150>)
 800ee44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee48:	f7f1 f9ee 	bl	8000228 <__aeabi_dsub>
 800ee4c:	4622      	mov	r2, r4
 800ee4e:	462b      	mov	r3, r5
 800ee50:	f7f1 fba2 	bl	8000598 <__aeabi_dmul>
 800ee54:	a338      	add	r3, pc, #224	; (adr r3, 800ef38 <__kernel_cos+0x158>)
 800ee56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5a:	f7f1 f9e7 	bl	800022c <__adddf3>
 800ee5e:	4622      	mov	r2, r4
 800ee60:	462b      	mov	r3, r5
 800ee62:	f7f1 fb99 	bl	8000598 <__aeabi_dmul>
 800ee66:	a336      	add	r3, pc, #216	; (adr r3, 800ef40 <__kernel_cos+0x160>)
 800ee68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6c:	f7f1 f9dc 	bl	8000228 <__aeabi_dsub>
 800ee70:	4622      	mov	r2, r4
 800ee72:	462b      	mov	r3, r5
 800ee74:	f7f1 fb90 	bl	8000598 <__aeabi_dmul>
 800ee78:	a333      	add	r3, pc, #204	; (adr r3, 800ef48 <__kernel_cos+0x168>)
 800ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7e:	f7f1 f9d5 	bl	800022c <__adddf3>
 800ee82:	4622      	mov	r2, r4
 800ee84:	462b      	mov	r3, r5
 800ee86:	f7f1 fb87 	bl	8000598 <__aeabi_dmul>
 800ee8a:	4622      	mov	r2, r4
 800ee8c:	462b      	mov	r3, r5
 800ee8e:	f7f1 fb83 	bl	8000598 <__aeabi_dmul>
 800ee92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee96:	4604      	mov	r4, r0
 800ee98:	460d      	mov	r5, r1
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	f7f1 fb7b 	bl	8000598 <__aeabi_dmul>
 800eea2:	460b      	mov	r3, r1
 800eea4:	4602      	mov	r2, r0
 800eea6:	4629      	mov	r1, r5
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f7f1 f9bd 	bl	8000228 <__aeabi_dsub>
 800eeae:	4b2b      	ldr	r3, [pc, #172]	; (800ef5c <__kernel_cos+0x17c>)
 800eeb0:	4598      	cmp	r8, r3
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	460f      	mov	r7, r1
 800eeb6:	dc10      	bgt.n	800eeda <__kernel_cos+0xfa>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	460b      	mov	r3, r1
 800eebc:	4650      	mov	r0, sl
 800eebe:	4659      	mov	r1, fp
 800eec0:	f7f1 f9b2 	bl	8000228 <__aeabi_dsub>
 800eec4:	460b      	mov	r3, r1
 800eec6:	4926      	ldr	r1, [pc, #152]	; (800ef60 <__kernel_cos+0x180>)
 800eec8:	4602      	mov	r2, r0
 800eeca:	2000      	movs	r0, #0
 800eecc:	f7f1 f9ac 	bl	8000228 <__aeabi_dsub>
 800eed0:	ec41 0b10 	vmov	d0, r0, r1
 800eed4:	b003      	add	sp, #12
 800eed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeda:	4b22      	ldr	r3, [pc, #136]	; (800ef64 <__kernel_cos+0x184>)
 800eedc:	4920      	ldr	r1, [pc, #128]	; (800ef60 <__kernel_cos+0x180>)
 800eede:	4598      	cmp	r8, r3
 800eee0:	bfcc      	ite	gt
 800eee2:	4d21      	ldrgt	r5, [pc, #132]	; (800ef68 <__kernel_cos+0x188>)
 800eee4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eee8:	2400      	movs	r4, #0
 800eeea:	4622      	mov	r2, r4
 800eeec:	462b      	mov	r3, r5
 800eeee:	2000      	movs	r0, #0
 800eef0:	f7f1 f99a 	bl	8000228 <__aeabi_dsub>
 800eef4:	4622      	mov	r2, r4
 800eef6:	4680      	mov	r8, r0
 800eef8:	4689      	mov	r9, r1
 800eefa:	462b      	mov	r3, r5
 800eefc:	4650      	mov	r0, sl
 800eefe:	4659      	mov	r1, fp
 800ef00:	f7f1 f992 	bl	8000228 <__aeabi_dsub>
 800ef04:	4632      	mov	r2, r6
 800ef06:	463b      	mov	r3, r7
 800ef08:	f7f1 f98e 	bl	8000228 <__aeabi_dsub>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	4640      	mov	r0, r8
 800ef12:	4649      	mov	r1, r9
 800ef14:	e7da      	b.n	800eecc <__kernel_cos+0xec>
 800ef16:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ef50 <__kernel_cos+0x170>
 800ef1a:	e7db      	b.n	800eed4 <__kernel_cos+0xf4>
 800ef1c:	f3af 8000 	nop.w
 800ef20:	be8838d4 	.word	0xbe8838d4
 800ef24:	bda8fae9 	.word	0xbda8fae9
 800ef28:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef2c:	3e21ee9e 	.word	0x3e21ee9e
 800ef30:	809c52ad 	.word	0x809c52ad
 800ef34:	3e927e4f 	.word	0x3e927e4f
 800ef38:	19cb1590 	.word	0x19cb1590
 800ef3c:	3efa01a0 	.word	0x3efa01a0
 800ef40:	16c15177 	.word	0x16c15177
 800ef44:	3f56c16c 	.word	0x3f56c16c
 800ef48:	5555554c 	.word	0x5555554c
 800ef4c:	3fa55555 	.word	0x3fa55555
 800ef50:	00000000 	.word	0x00000000
 800ef54:	3ff00000 	.word	0x3ff00000
 800ef58:	3fe00000 	.word	0x3fe00000
 800ef5c:	3fd33332 	.word	0x3fd33332
 800ef60:	3ff00000 	.word	0x3ff00000
 800ef64:	3fe90000 	.word	0x3fe90000
 800ef68:	3fd20000 	.word	0x3fd20000
 800ef6c:	00000000 	.word	0x00000000

0800ef70 <__kernel_sin>:
 800ef70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	ed2d 8b04 	vpush	{d8-d9}
 800ef78:	eeb0 8a41 	vmov.f32	s16, s2
 800ef7c:	eef0 8a61 	vmov.f32	s17, s3
 800ef80:	ec55 4b10 	vmov	r4, r5, d0
 800ef84:	b083      	sub	sp, #12
 800ef86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ef8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ef8e:	9001      	str	r0, [sp, #4]
 800ef90:	da06      	bge.n	800efa0 <__kernel_sin+0x30>
 800ef92:	ee10 0a10 	vmov	r0, s0
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 fdae 	bl	8000af8 <__aeabi_d2iz>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d051      	beq.n	800f044 <__kernel_sin+0xd4>
 800efa0:	4622      	mov	r2, r4
 800efa2:	462b      	mov	r3, r5
 800efa4:	4620      	mov	r0, r4
 800efa6:	4629      	mov	r1, r5
 800efa8:	f7f1 faf6 	bl	8000598 <__aeabi_dmul>
 800efac:	4682      	mov	sl, r0
 800efae:	468b      	mov	fp, r1
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 faee 	bl	8000598 <__aeabi_dmul>
 800efbc:	a341      	add	r3, pc, #260	; (adr r3, 800f0c4 <__kernel_sin+0x154>)
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	4680      	mov	r8, r0
 800efc4:	4689      	mov	r9, r1
 800efc6:	4650      	mov	r0, sl
 800efc8:	4659      	mov	r1, fp
 800efca:	f7f1 fae5 	bl	8000598 <__aeabi_dmul>
 800efce:	a33f      	add	r3, pc, #252	; (adr r3, 800f0cc <__kernel_sin+0x15c>)
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	f7f1 f928 	bl	8000228 <__aeabi_dsub>
 800efd8:	4652      	mov	r2, sl
 800efda:	465b      	mov	r3, fp
 800efdc:	f7f1 fadc 	bl	8000598 <__aeabi_dmul>
 800efe0:	a33c      	add	r3, pc, #240	; (adr r3, 800f0d4 <__kernel_sin+0x164>)
 800efe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe6:	f7f1 f921 	bl	800022c <__adddf3>
 800efea:	4652      	mov	r2, sl
 800efec:	465b      	mov	r3, fp
 800efee:	f7f1 fad3 	bl	8000598 <__aeabi_dmul>
 800eff2:	a33a      	add	r3, pc, #232	; (adr r3, 800f0dc <__kernel_sin+0x16c>)
 800eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff8:	f7f1 f916 	bl	8000228 <__aeabi_dsub>
 800effc:	4652      	mov	r2, sl
 800effe:	465b      	mov	r3, fp
 800f000:	f7f1 faca 	bl	8000598 <__aeabi_dmul>
 800f004:	a337      	add	r3, pc, #220	; (adr r3, 800f0e4 <__kernel_sin+0x174>)
 800f006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00a:	f7f1 f90f 	bl	800022c <__adddf3>
 800f00e:	9b01      	ldr	r3, [sp, #4]
 800f010:	4606      	mov	r6, r0
 800f012:	460f      	mov	r7, r1
 800f014:	b9eb      	cbnz	r3, 800f052 <__kernel_sin+0xe2>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	4650      	mov	r0, sl
 800f01c:	4659      	mov	r1, fp
 800f01e:	f7f1 fabb 	bl	8000598 <__aeabi_dmul>
 800f022:	a325      	add	r3, pc, #148	; (adr r3, 800f0b8 <__kernel_sin+0x148>)
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	f7f1 f8fe 	bl	8000228 <__aeabi_dsub>
 800f02c:	4642      	mov	r2, r8
 800f02e:	464b      	mov	r3, r9
 800f030:	f7f1 fab2 	bl	8000598 <__aeabi_dmul>
 800f034:	4602      	mov	r2, r0
 800f036:	460b      	mov	r3, r1
 800f038:	4620      	mov	r0, r4
 800f03a:	4629      	mov	r1, r5
 800f03c:	f7f1 f8f6 	bl	800022c <__adddf3>
 800f040:	4604      	mov	r4, r0
 800f042:	460d      	mov	r5, r1
 800f044:	ec45 4b10 	vmov	d0, r4, r5
 800f048:	b003      	add	sp, #12
 800f04a:	ecbd 8b04 	vpop	{d8-d9}
 800f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f052:	4b1b      	ldr	r3, [pc, #108]	; (800f0c0 <__kernel_sin+0x150>)
 800f054:	ec51 0b18 	vmov	r0, r1, d8
 800f058:	2200      	movs	r2, #0
 800f05a:	f7f1 fa9d 	bl	8000598 <__aeabi_dmul>
 800f05e:	4632      	mov	r2, r6
 800f060:	ec41 0b19 	vmov	d9, r0, r1
 800f064:	463b      	mov	r3, r7
 800f066:	4640      	mov	r0, r8
 800f068:	4649      	mov	r1, r9
 800f06a:	f7f1 fa95 	bl	8000598 <__aeabi_dmul>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	ec51 0b19 	vmov	r0, r1, d9
 800f076:	f7f1 f8d7 	bl	8000228 <__aeabi_dsub>
 800f07a:	4652      	mov	r2, sl
 800f07c:	465b      	mov	r3, fp
 800f07e:	f7f1 fa8b 	bl	8000598 <__aeabi_dmul>
 800f082:	ec53 2b18 	vmov	r2, r3, d8
 800f086:	f7f1 f8cf 	bl	8000228 <__aeabi_dsub>
 800f08a:	a30b      	add	r3, pc, #44	; (adr r3, 800f0b8 <__kernel_sin+0x148>)
 800f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f090:	4606      	mov	r6, r0
 800f092:	460f      	mov	r7, r1
 800f094:	4640      	mov	r0, r8
 800f096:	4649      	mov	r1, r9
 800f098:	f7f1 fa7e 	bl	8000598 <__aeabi_dmul>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	f7f1 f8c2 	bl	800022c <__adddf3>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	4629      	mov	r1, r5
 800f0b0:	f7f1 f8ba 	bl	8000228 <__aeabi_dsub>
 800f0b4:	e7c4      	b.n	800f040 <__kernel_sin+0xd0>
 800f0b6:	bf00      	nop
 800f0b8:	55555549 	.word	0x55555549
 800f0bc:	3fc55555 	.word	0x3fc55555
 800f0c0:	3fe00000 	.word	0x3fe00000
 800f0c4:	5acfd57c 	.word	0x5acfd57c
 800f0c8:	3de5d93a 	.word	0x3de5d93a
 800f0cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800f0d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f0d4:	57b1fe7d 	.word	0x57b1fe7d
 800f0d8:	3ec71de3 	.word	0x3ec71de3
 800f0dc:	19c161d5 	.word	0x19c161d5
 800f0e0:	3f2a01a0 	.word	0x3f2a01a0
 800f0e4:	1110f8a6 	.word	0x1110f8a6
 800f0e8:	3f811111 	.word	0x3f811111
 800f0ec:	00000000 	.word	0x00000000

0800f0f0 <scalbn>:
 800f0f0:	b570      	push	{r4, r5, r6, lr}
 800f0f2:	ec55 4b10 	vmov	r4, r5, d0
 800f0f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f0fa:	4606      	mov	r6, r0
 800f0fc:	462b      	mov	r3, r5
 800f0fe:	b999      	cbnz	r1, 800f128 <scalbn+0x38>
 800f100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f104:	4323      	orrs	r3, r4
 800f106:	d03f      	beq.n	800f188 <scalbn+0x98>
 800f108:	4b35      	ldr	r3, [pc, #212]	; (800f1e0 <scalbn+0xf0>)
 800f10a:	4629      	mov	r1, r5
 800f10c:	ee10 0a10 	vmov	r0, s0
 800f110:	2200      	movs	r2, #0
 800f112:	f7f1 fa41 	bl	8000598 <__aeabi_dmul>
 800f116:	4b33      	ldr	r3, [pc, #204]	; (800f1e4 <scalbn+0xf4>)
 800f118:	429e      	cmp	r6, r3
 800f11a:	4604      	mov	r4, r0
 800f11c:	460d      	mov	r5, r1
 800f11e:	da10      	bge.n	800f142 <scalbn+0x52>
 800f120:	a327      	add	r3, pc, #156	; (adr r3, 800f1c0 <scalbn+0xd0>)
 800f122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f126:	e01f      	b.n	800f168 <scalbn+0x78>
 800f128:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f12c:	4291      	cmp	r1, r2
 800f12e:	d10c      	bne.n	800f14a <scalbn+0x5a>
 800f130:	ee10 2a10 	vmov	r2, s0
 800f134:	4620      	mov	r0, r4
 800f136:	4629      	mov	r1, r5
 800f138:	f7f1 f878 	bl	800022c <__adddf3>
 800f13c:	4604      	mov	r4, r0
 800f13e:	460d      	mov	r5, r1
 800f140:	e022      	b.n	800f188 <scalbn+0x98>
 800f142:	460b      	mov	r3, r1
 800f144:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f148:	3936      	subs	r1, #54	; 0x36
 800f14a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f14e:	4296      	cmp	r6, r2
 800f150:	dd0d      	ble.n	800f16e <scalbn+0x7e>
 800f152:	2d00      	cmp	r5, #0
 800f154:	a11c      	add	r1, pc, #112	; (adr r1, 800f1c8 <scalbn+0xd8>)
 800f156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f15a:	da02      	bge.n	800f162 <scalbn+0x72>
 800f15c:	a11c      	add	r1, pc, #112	; (adr r1, 800f1d0 <scalbn+0xe0>)
 800f15e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f162:	a319      	add	r3, pc, #100	; (adr r3, 800f1c8 <scalbn+0xd8>)
 800f164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f168:	f7f1 fa16 	bl	8000598 <__aeabi_dmul>
 800f16c:	e7e6      	b.n	800f13c <scalbn+0x4c>
 800f16e:	1872      	adds	r2, r6, r1
 800f170:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f174:	428a      	cmp	r2, r1
 800f176:	dcec      	bgt.n	800f152 <scalbn+0x62>
 800f178:	2a00      	cmp	r2, #0
 800f17a:	dd08      	ble.n	800f18e <scalbn+0x9e>
 800f17c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f180:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f184:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f188:	ec45 4b10 	vmov	d0, r4, r5
 800f18c:	bd70      	pop	{r4, r5, r6, pc}
 800f18e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f192:	da08      	bge.n	800f1a6 <scalbn+0xb6>
 800f194:	2d00      	cmp	r5, #0
 800f196:	a10a      	add	r1, pc, #40	; (adr r1, 800f1c0 <scalbn+0xd0>)
 800f198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f19c:	dac0      	bge.n	800f120 <scalbn+0x30>
 800f19e:	a10e      	add	r1, pc, #56	; (adr r1, 800f1d8 <scalbn+0xe8>)
 800f1a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1a4:	e7bc      	b.n	800f120 <scalbn+0x30>
 800f1a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1aa:	3236      	adds	r2, #54	; 0x36
 800f1ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <scalbn+0xf8>)
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	e7d5      	b.n	800f168 <scalbn+0x78>
 800f1bc:	f3af 8000 	nop.w
 800f1c0:	c2f8f359 	.word	0xc2f8f359
 800f1c4:	01a56e1f 	.word	0x01a56e1f
 800f1c8:	8800759c 	.word	0x8800759c
 800f1cc:	7e37e43c 	.word	0x7e37e43c
 800f1d0:	8800759c 	.word	0x8800759c
 800f1d4:	fe37e43c 	.word	0xfe37e43c
 800f1d8:	c2f8f359 	.word	0xc2f8f359
 800f1dc:	81a56e1f 	.word	0x81a56e1f
 800f1e0:	43500000 	.word	0x43500000
 800f1e4:	ffff3cb0 	.word	0xffff3cb0
 800f1e8:	3c900000 	.word	0x3c900000
 800f1ec:	00000000 	.word	0x00000000

0800f1f0 <floor>:
 800f1f0:	ec51 0b10 	vmov	r0, r1, d0
 800f1f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f200:	2e13      	cmp	r6, #19
 800f202:	ee10 5a10 	vmov	r5, s0
 800f206:	ee10 8a10 	vmov	r8, s0
 800f20a:	460c      	mov	r4, r1
 800f20c:	dc31      	bgt.n	800f272 <floor+0x82>
 800f20e:	2e00      	cmp	r6, #0
 800f210:	da14      	bge.n	800f23c <floor+0x4c>
 800f212:	a333      	add	r3, pc, #204	; (adr r3, 800f2e0 <floor+0xf0>)
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	f7f1 f808 	bl	800022c <__adddf3>
 800f21c:	2200      	movs	r2, #0
 800f21e:	2300      	movs	r3, #0
 800f220:	f7f1 fc4a 	bl	8000ab8 <__aeabi_dcmpgt>
 800f224:	b138      	cbz	r0, 800f236 <floor+0x46>
 800f226:	2c00      	cmp	r4, #0
 800f228:	da53      	bge.n	800f2d2 <floor+0xe2>
 800f22a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f22e:	4325      	orrs	r5, r4
 800f230:	d052      	beq.n	800f2d8 <floor+0xe8>
 800f232:	4c2d      	ldr	r4, [pc, #180]	; (800f2e8 <floor+0xf8>)
 800f234:	2500      	movs	r5, #0
 800f236:	4621      	mov	r1, r4
 800f238:	4628      	mov	r0, r5
 800f23a:	e024      	b.n	800f286 <floor+0x96>
 800f23c:	4f2b      	ldr	r7, [pc, #172]	; (800f2ec <floor+0xfc>)
 800f23e:	4137      	asrs	r7, r6
 800f240:	ea01 0307 	and.w	r3, r1, r7
 800f244:	4303      	orrs	r3, r0
 800f246:	d01e      	beq.n	800f286 <floor+0x96>
 800f248:	a325      	add	r3, pc, #148	; (adr r3, 800f2e0 <floor+0xf0>)
 800f24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f24e:	f7f0 ffed 	bl	800022c <__adddf3>
 800f252:	2200      	movs	r2, #0
 800f254:	2300      	movs	r3, #0
 800f256:	f7f1 fc2f 	bl	8000ab8 <__aeabi_dcmpgt>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d0eb      	beq.n	800f236 <floor+0x46>
 800f25e:	2c00      	cmp	r4, #0
 800f260:	bfbe      	ittt	lt
 800f262:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f266:	4133      	asrlt	r3, r6
 800f268:	18e4      	addlt	r4, r4, r3
 800f26a:	ea24 0407 	bic.w	r4, r4, r7
 800f26e:	2500      	movs	r5, #0
 800f270:	e7e1      	b.n	800f236 <floor+0x46>
 800f272:	2e33      	cmp	r6, #51	; 0x33
 800f274:	dd0b      	ble.n	800f28e <floor+0x9e>
 800f276:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f27a:	d104      	bne.n	800f286 <floor+0x96>
 800f27c:	ee10 2a10 	vmov	r2, s0
 800f280:	460b      	mov	r3, r1
 800f282:	f7f0 ffd3 	bl	800022c <__adddf3>
 800f286:	ec41 0b10 	vmov	d0, r0, r1
 800f28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f292:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f296:	40df      	lsrs	r7, r3
 800f298:	4238      	tst	r0, r7
 800f29a:	d0f4      	beq.n	800f286 <floor+0x96>
 800f29c:	a310      	add	r3, pc, #64	; (adr r3, 800f2e0 <floor+0xf0>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 ffc3 	bl	800022c <__adddf3>
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	f7f1 fc05 	bl	8000ab8 <__aeabi_dcmpgt>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	d0c1      	beq.n	800f236 <floor+0x46>
 800f2b2:	2c00      	cmp	r4, #0
 800f2b4:	da0a      	bge.n	800f2cc <floor+0xdc>
 800f2b6:	2e14      	cmp	r6, #20
 800f2b8:	d101      	bne.n	800f2be <floor+0xce>
 800f2ba:	3401      	adds	r4, #1
 800f2bc:	e006      	b.n	800f2cc <floor+0xdc>
 800f2be:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	40b3      	lsls	r3, r6
 800f2c6:	441d      	add	r5, r3
 800f2c8:	45a8      	cmp	r8, r5
 800f2ca:	d8f6      	bhi.n	800f2ba <floor+0xca>
 800f2cc:	ea25 0507 	bic.w	r5, r5, r7
 800f2d0:	e7b1      	b.n	800f236 <floor+0x46>
 800f2d2:	2500      	movs	r5, #0
 800f2d4:	462c      	mov	r4, r5
 800f2d6:	e7ae      	b.n	800f236 <floor+0x46>
 800f2d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f2dc:	e7ab      	b.n	800f236 <floor+0x46>
 800f2de:	bf00      	nop
 800f2e0:	8800759c 	.word	0x8800759c
 800f2e4:	7e37e43c 	.word	0x7e37e43c
 800f2e8:	bff00000 	.word	0xbff00000
 800f2ec:	000fffff 	.word	0x000fffff

0800f2f0 <realloc>:
 800f2f0:	4b02      	ldr	r3, [pc, #8]	; (800f2fc <realloc+0xc>)
 800f2f2:	460a      	mov	r2, r1
 800f2f4:	4601      	mov	r1, r0
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	f000 b802 	b.w	800f300 <_realloc_r>
 800f2fc:	20000084 	.word	0x20000084

0800f300 <_realloc_r>:
 800f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f304:	4680      	mov	r8, r0
 800f306:	4614      	mov	r4, r2
 800f308:	460e      	mov	r6, r1
 800f30a:	b921      	cbnz	r1, 800f316 <_realloc_r+0x16>
 800f30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f310:	4611      	mov	r1, r2
 800f312:	f000 b8d3 	b.w	800f4bc <_malloc_r>
 800f316:	b92a      	cbnz	r2, 800f324 <_realloc_r+0x24>
 800f318:	f000 f864 	bl	800f3e4 <_free_r>
 800f31c:	4625      	mov	r5, r4
 800f31e:	4628      	mov	r0, r5
 800f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f324:	f000 f956 	bl	800f5d4 <_malloc_usable_size_r>
 800f328:	4284      	cmp	r4, r0
 800f32a:	4607      	mov	r7, r0
 800f32c:	d802      	bhi.n	800f334 <_realloc_r+0x34>
 800f32e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f332:	d812      	bhi.n	800f35a <_realloc_r+0x5a>
 800f334:	4621      	mov	r1, r4
 800f336:	4640      	mov	r0, r8
 800f338:	f000 f8c0 	bl	800f4bc <_malloc_r>
 800f33c:	4605      	mov	r5, r0
 800f33e:	2800      	cmp	r0, #0
 800f340:	d0ed      	beq.n	800f31e <_realloc_r+0x1e>
 800f342:	42bc      	cmp	r4, r7
 800f344:	4622      	mov	r2, r4
 800f346:	4631      	mov	r1, r6
 800f348:	bf28      	it	cs
 800f34a:	463a      	movcs	r2, r7
 800f34c:	f000 f83c 	bl	800f3c8 <memcpy>
 800f350:	4631      	mov	r1, r6
 800f352:	4640      	mov	r0, r8
 800f354:	f000 f846 	bl	800f3e4 <_free_r>
 800f358:	e7e1      	b.n	800f31e <_realloc_r+0x1e>
 800f35a:	4635      	mov	r5, r6
 800f35c:	e7df      	b.n	800f31e <_realloc_r+0x1e>

0800f35e <memset>:
 800f35e:	4402      	add	r2, r0
 800f360:	4603      	mov	r3, r0
 800f362:	4293      	cmp	r3, r2
 800f364:	d100      	bne.n	800f368 <memset+0xa>
 800f366:	4770      	bx	lr
 800f368:	f803 1b01 	strb.w	r1, [r3], #1
 800f36c:	e7f9      	b.n	800f362 <memset+0x4>
	...

0800f370 <__errno>:
 800f370:	4b01      	ldr	r3, [pc, #4]	; (800f378 <__errno+0x8>)
 800f372:	6818      	ldr	r0, [r3, #0]
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	20000084 	.word	0x20000084

0800f37c <__libc_init_array>:
 800f37c:	b570      	push	{r4, r5, r6, lr}
 800f37e:	4d0d      	ldr	r5, [pc, #52]	; (800f3b4 <__libc_init_array+0x38>)
 800f380:	4c0d      	ldr	r4, [pc, #52]	; (800f3b8 <__libc_init_array+0x3c>)
 800f382:	1b64      	subs	r4, r4, r5
 800f384:	10a4      	asrs	r4, r4, #2
 800f386:	2600      	movs	r6, #0
 800f388:	42a6      	cmp	r6, r4
 800f38a:	d109      	bne.n	800f3a0 <__libc_init_array+0x24>
 800f38c:	4d0b      	ldr	r5, [pc, #44]	; (800f3bc <__libc_init_array+0x40>)
 800f38e:	4c0c      	ldr	r4, [pc, #48]	; (800f3c0 <__libc_init_array+0x44>)
 800f390:	f000 f938 	bl	800f604 <_init>
 800f394:	1b64      	subs	r4, r4, r5
 800f396:	10a4      	asrs	r4, r4, #2
 800f398:	2600      	movs	r6, #0
 800f39a:	42a6      	cmp	r6, r4
 800f39c:	d105      	bne.n	800f3aa <__libc_init_array+0x2e>
 800f39e:	bd70      	pop	{r4, r5, r6, pc}
 800f3a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3a4:	4798      	blx	r3
 800f3a6:	3601      	adds	r6, #1
 800f3a8:	e7ee      	b.n	800f388 <__libc_init_array+0xc>
 800f3aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ae:	4798      	blx	r3
 800f3b0:	3601      	adds	r6, #1
 800f3b2:	e7f2      	b.n	800f39a <__libc_init_array+0x1e>
 800f3b4:	0800fd78 	.word	0x0800fd78
 800f3b8:	0800fd78 	.word	0x0800fd78
 800f3bc:	0800fd78 	.word	0x0800fd78
 800f3c0:	0800fd80 	.word	0x0800fd80

0800f3c4 <__retarget_lock_acquire_recursive>:
 800f3c4:	4770      	bx	lr

0800f3c6 <__retarget_lock_release_recursive>:
 800f3c6:	4770      	bx	lr

0800f3c8 <memcpy>:
 800f3c8:	440a      	add	r2, r1
 800f3ca:	4291      	cmp	r1, r2
 800f3cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f3d0:	d100      	bne.n	800f3d4 <memcpy+0xc>
 800f3d2:	4770      	bx	lr
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3de:	4291      	cmp	r1, r2
 800f3e0:	d1f9      	bne.n	800f3d6 <memcpy+0xe>
 800f3e2:	bd10      	pop	{r4, pc}

0800f3e4 <_free_r>:
 800f3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3e6:	2900      	cmp	r1, #0
 800f3e8:	d044      	beq.n	800f474 <_free_r+0x90>
 800f3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3ee:	9001      	str	r0, [sp, #4]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f1a1 0404 	sub.w	r4, r1, #4
 800f3f6:	bfb8      	it	lt
 800f3f8:	18e4      	addlt	r4, r4, r3
 800f3fa:	f000 f8df 	bl	800f5bc <__malloc_lock>
 800f3fe:	4a1e      	ldr	r2, [pc, #120]	; (800f478 <_free_r+0x94>)
 800f400:	9801      	ldr	r0, [sp, #4]
 800f402:	6813      	ldr	r3, [r2, #0]
 800f404:	b933      	cbnz	r3, 800f414 <_free_r+0x30>
 800f406:	6063      	str	r3, [r4, #4]
 800f408:	6014      	str	r4, [r2, #0]
 800f40a:	b003      	add	sp, #12
 800f40c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f410:	f000 b8da 	b.w	800f5c8 <__malloc_unlock>
 800f414:	42a3      	cmp	r3, r4
 800f416:	d908      	bls.n	800f42a <_free_r+0x46>
 800f418:	6825      	ldr	r5, [r4, #0]
 800f41a:	1961      	adds	r1, r4, r5
 800f41c:	428b      	cmp	r3, r1
 800f41e:	bf01      	itttt	eq
 800f420:	6819      	ldreq	r1, [r3, #0]
 800f422:	685b      	ldreq	r3, [r3, #4]
 800f424:	1949      	addeq	r1, r1, r5
 800f426:	6021      	streq	r1, [r4, #0]
 800f428:	e7ed      	b.n	800f406 <_free_r+0x22>
 800f42a:	461a      	mov	r2, r3
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	b10b      	cbz	r3, 800f434 <_free_r+0x50>
 800f430:	42a3      	cmp	r3, r4
 800f432:	d9fa      	bls.n	800f42a <_free_r+0x46>
 800f434:	6811      	ldr	r1, [r2, #0]
 800f436:	1855      	adds	r5, r2, r1
 800f438:	42a5      	cmp	r5, r4
 800f43a:	d10b      	bne.n	800f454 <_free_r+0x70>
 800f43c:	6824      	ldr	r4, [r4, #0]
 800f43e:	4421      	add	r1, r4
 800f440:	1854      	adds	r4, r2, r1
 800f442:	42a3      	cmp	r3, r4
 800f444:	6011      	str	r1, [r2, #0]
 800f446:	d1e0      	bne.n	800f40a <_free_r+0x26>
 800f448:	681c      	ldr	r4, [r3, #0]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	6053      	str	r3, [r2, #4]
 800f44e:	440c      	add	r4, r1
 800f450:	6014      	str	r4, [r2, #0]
 800f452:	e7da      	b.n	800f40a <_free_r+0x26>
 800f454:	d902      	bls.n	800f45c <_free_r+0x78>
 800f456:	230c      	movs	r3, #12
 800f458:	6003      	str	r3, [r0, #0]
 800f45a:	e7d6      	b.n	800f40a <_free_r+0x26>
 800f45c:	6825      	ldr	r5, [r4, #0]
 800f45e:	1961      	adds	r1, r4, r5
 800f460:	428b      	cmp	r3, r1
 800f462:	bf04      	itt	eq
 800f464:	6819      	ldreq	r1, [r3, #0]
 800f466:	685b      	ldreq	r3, [r3, #4]
 800f468:	6063      	str	r3, [r4, #4]
 800f46a:	bf04      	itt	eq
 800f46c:	1949      	addeq	r1, r1, r5
 800f46e:	6021      	streq	r1, [r4, #0]
 800f470:	6054      	str	r4, [r2, #4]
 800f472:	e7ca      	b.n	800f40a <_free_r+0x26>
 800f474:	b003      	add	sp, #12
 800f476:	bd30      	pop	{r4, r5, pc}
 800f478:	20005d40 	.word	0x20005d40

0800f47c <sbrk_aligned>:
 800f47c:	b570      	push	{r4, r5, r6, lr}
 800f47e:	4e0e      	ldr	r6, [pc, #56]	; (800f4b8 <sbrk_aligned+0x3c>)
 800f480:	460c      	mov	r4, r1
 800f482:	6831      	ldr	r1, [r6, #0]
 800f484:	4605      	mov	r5, r0
 800f486:	b911      	cbnz	r1, 800f48e <sbrk_aligned+0x12>
 800f488:	f000 f8ac 	bl	800f5e4 <_sbrk_r>
 800f48c:	6030      	str	r0, [r6, #0]
 800f48e:	4621      	mov	r1, r4
 800f490:	4628      	mov	r0, r5
 800f492:	f000 f8a7 	bl	800f5e4 <_sbrk_r>
 800f496:	1c43      	adds	r3, r0, #1
 800f498:	d00a      	beq.n	800f4b0 <sbrk_aligned+0x34>
 800f49a:	1cc4      	adds	r4, r0, #3
 800f49c:	f024 0403 	bic.w	r4, r4, #3
 800f4a0:	42a0      	cmp	r0, r4
 800f4a2:	d007      	beq.n	800f4b4 <sbrk_aligned+0x38>
 800f4a4:	1a21      	subs	r1, r4, r0
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f000 f89c 	bl	800f5e4 <_sbrk_r>
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d101      	bne.n	800f4b4 <sbrk_aligned+0x38>
 800f4b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	bd70      	pop	{r4, r5, r6, pc}
 800f4b8:	20005d44 	.word	0x20005d44

0800f4bc <_malloc_r>:
 800f4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4c0:	1ccd      	adds	r5, r1, #3
 800f4c2:	f025 0503 	bic.w	r5, r5, #3
 800f4c6:	3508      	adds	r5, #8
 800f4c8:	2d0c      	cmp	r5, #12
 800f4ca:	bf38      	it	cc
 800f4cc:	250c      	movcc	r5, #12
 800f4ce:	2d00      	cmp	r5, #0
 800f4d0:	4607      	mov	r7, r0
 800f4d2:	db01      	blt.n	800f4d8 <_malloc_r+0x1c>
 800f4d4:	42a9      	cmp	r1, r5
 800f4d6:	d905      	bls.n	800f4e4 <_malloc_r+0x28>
 800f4d8:	230c      	movs	r3, #12
 800f4da:	603b      	str	r3, [r7, #0]
 800f4dc:	2600      	movs	r6, #0
 800f4de:	4630      	mov	r0, r6
 800f4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f5b8 <_malloc_r+0xfc>
 800f4e8:	f000 f868 	bl	800f5bc <__malloc_lock>
 800f4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f4f0:	461c      	mov	r4, r3
 800f4f2:	bb5c      	cbnz	r4, 800f54c <_malloc_r+0x90>
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	f7ff ffc0 	bl	800f47c <sbrk_aligned>
 800f4fc:	1c43      	adds	r3, r0, #1
 800f4fe:	4604      	mov	r4, r0
 800f500:	d155      	bne.n	800f5ae <_malloc_r+0xf2>
 800f502:	f8d8 4000 	ldr.w	r4, [r8]
 800f506:	4626      	mov	r6, r4
 800f508:	2e00      	cmp	r6, #0
 800f50a:	d145      	bne.n	800f598 <_malloc_r+0xdc>
 800f50c:	2c00      	cmp	r4, #0
 800f50e:	d048      	beq.n	800f5a2 <_malloc_r+0xe6>
 800f510:	6823      	ldr	r3, [r4, #0]
 800f512:	4631      	mov	r1, r6
 800f514:	4638      	mov	r0, r7
 800f516:	eb04 0903 	add.w	r9, r4, r3
 800f51a:	f000 f863 	bl	800f5e4 <_sbrk_r>
 800f51e:	4581      	cmp	r9, r0
 800f520:	d13f      	bne.n	800f5a2 <_malloc_r+0xe6>
 800f522:	6821      	ldr	r1, [r4, #0]
 800f524:	1a6d      	subs	r5, r5, r1
 800f526:	4629      	mov	r1, r5
 800f528:	4638      	mov	r0, r7
 800f52a:	f7ff ffa7 	bl	800f47c <sbrk_aligned>
 800f52e:	3001      	adds	r0, #1
 800f530:	d037      	beq.n	800f5a2 <_malloc_r+0xe6>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	442b      	add	r3, r5
 800f536:	6023      	str	r3, [r4, #0]
 800f538:	f8d8 3000 	ldr.w	r3, [r8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d038      	beq.n	800f5b2 <_malloc_r+0xf6>
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	42a2      	cmp	r2, r4
 800f544:	d12b      	bne.n	800f59e <_malloc_r+0xe2>
 800f546:	2200      	movs	r2, #0
 800f548:	605a      	str	r2, [r3, #4]
 800f54a:	e00f      	b.n	800f56c <_malloc_r+0xb0>
 800f54c:	6822      	ldr	r2, [r4, #0]
 800f54e:	1b52      	subs	r2, r2, r5
 800f550:	d41f      	bmi.n	800f592 <_malloc_r+0xd6>
 800f552:	2a0b      	cmp	r2, #11
 800f554:	d917      	bls.n	800f586 <_malloc_r+0xca>
 800f556:	1961      	adds	r1, r4, r5
 800f558:	42a3      	cmp	r3, r4
 800f55a:	6025      	str	r5, [r4, #0]
 800f55c:	bf18      	it	ne
 800f55e:	6059      	strne	r1, [r3, #4]
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	bf08      	it	eq
 800f564:	f8c8 1000 	streq.w	r1, [r8]
 800f568:	5162      	str	r2, [r4, r5]
 800f56a:	604b      	str	r3, [r1, #4]
 800f56c:	4638      	mov	r0, r7
 800f56e:	f104 060b 	add.w	r6, r4, #11
 800f572:	f000 f829 	bl	800f5c8 <__malloc_unlock>
 800f576:	f026 0607 	bic.w	r6, r6, #7
 800f57a:	1d23      	adds	r3, r4, #4
 800f57c:	1af2      	subs	r2, r6, r3
 800f57e:	d0ae      	beq.n	800f4de <_malloc_r+0x22>
 800f580:	1b9b      	subs	r3, r3, r6
 800f582:	50a3      	str	r3, [r4, r2]
 800f584:	e7ab      	b.n	800f4de <_malloc_r+0x22>
 800f586:	42a3      	cmp	r3, r4
 800f588:	6862      	ldr	r2, [r4, #4]
 800f58a:	d1dd      	bne.n	800f548 <_malloc_r+0x8c>
 800f58c:	f8c8 2000 	str.w	r2, [r8]
 800f590:	e7ec      	b.n	800f56c <_malloc_r+0xb0>
 800f592:	4623      	mov	r3, r4
 800f594:	6864      	ldr	r4, [r4, #4]
 800f596:	e7ac      	b.n	800f4f2 <_malloc_r+0x36>
 800f598:	4634      	mov	r4, r6
 800f59a:	6876      	ldr	r6, [r6, #4]
 800f59c:	e7b4      	b.n	800f508 <_malloc_r+0x4c>
 800f59e:	4613      	mov	r3, r2
 800f5a0:	e7cc      	b.n	800f53c <_malloc_r+0x80>
 800f5a2:	230c      	movs	r3, #12
 800f5a4:	603b      	str	r3, [r7, #0]
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	f000 f80e 	bl	800f5c8 <__malloc_unlock>
 800f5ac:	e797      	b.n	800f4de <_malloc_r+0x22>
 800f5ae:	6025      	str	r5, [r4, #0]
 800f5b0:	e7dc      	b.n	800f56c <_malloc_r+0xb0>
 800f5b2:	605b      	str	r3, [r3, #4]
 800f5b4:	deff      	udf	#255	; 0xff
 800f5b6:	bf00      	nop
 800f5b8:	20005d40 	.word	0x20005d40

0800f5bc <__malloc_lock>:
 800f5bc:	4801      	ldr	r0, [pc, #4]	; (800f5c4 <__malloc_lock+0x8>)
 800f5be:	f7ff bf01 	b.w	800f3c4 <__retarget_lock_acquire_recursive>
 800f5c2:	bf00      	nop
 800f5c4:	20005d3c 	.word	0x20005d3c

0800f5c8 <__malloc_unlock>:
 800f5c8:	4801      	ldr	r0, [pc, #4]	; (800f5d0 <__malloc_unlock+0x8>)
 800f5ca:	f7ff befc 	b.w	800f3c6 <__retarget_lock_release_recursive>
 800f5ce:	bf00      	nop
 800f5d0:	20005d3c 	.word	0x20005d3c

0800f5d4 <_malloc_usable_size_r>:
 800f5d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5d8:	1f18      	subs	r0, r3, #4
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	bfbc      	itt	lt
 800f5de:	580b      	ldrlt	r3, [r1, r0]
 800f5e0:	18c0      	addlt	r0, r0, r3
 800f5e2:	4770      	bx	lr

0800f5e4 <_sbrk_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4d06      	ldr	r5, [pc, #24]	; (800f600 <_sbrk_r+0x1c>)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	4608      	mov	r0, r1
 800f5ee:	602b      	str	r3, [r5, #0]
 800f5f0:	f7f7 fb14 	bl	8006c1c <_sbrk>
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	d102      	bne.n	800f5fe <_sbrk_r+0x1a>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	b103      	cbz	r3, 800f5fe <_sbrk_r+0x1a>
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	bd38      	pop	{r3, r4, r5, pc}
 800f600:	20005d48 	.word	0x20005d48

0800f604 <_init>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr

0800f610 <_fini>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	bf00      	nop
 800f614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f616:	bc08      	pop	{r3}
 800f618:	469e      	mov	lr, r3
 800f61a:	4770      	bx	lr
