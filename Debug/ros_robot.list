
ros_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e77c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800e950  0800e950  0001e950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efc0  0800efc0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800efc0  0800efc0  0001efc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efc8  0800efc8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800efc8  0800efc8  0001efc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efd0  0800efd0  0001efd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800efd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c54  20000088  0800f05c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005cdc  0800f05c  00025cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee77  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f83  00000000  00000000  0003ef72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  00042ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001300  00000000  00000000  00044750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e84  00000000  00000000  00045a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bbca  00000000  00000000  0006b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4879  00000000  00000000  0008749e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006fd0  00000000  00000000  0016bd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00172ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e934 	.word	0x0800e934

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800e934 	.word	0x0800e934

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000a4 	.word	0x200000a4
 8000e74:	200000f8 	.word	0x200000f8

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b0a4      	sub	sp, #144	; 0x90
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f005 f905 	bl	800608c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f8a3 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fc4d 	bl	8001724 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8a:	f000 fc13 	bl	80016b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e8e:	f000 fbe7 	bl	8001660 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000e92:	f000 f909 	bl	80010a8 <MX_CAN1_Init>
  MX_UART4_Init();
 8000e96:	f000 fbb9 	bl	800160c <MX_UART4_Init>
  MX_SPI2_Init();
 8000e9a:	f000 f98f 	bl	80011bc <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e9e:	f000 f9c3 	bl	8001228 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ea2:	f000 fab3 	bl	800140c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000ea6:	f000 fb05 	bl	80014b4 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000eaa:	f000 fa2d 	bl	8001308 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
  //HAL_UART_Receive_IT(&huart4, RxData, 1);
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000eae:	213c      	movs	r1, #60	; 0x3c
 8000eb0:	4839      	ldr	r0, [pc, #228]	; (8000f98 <main+0x120>)
 8000eb2:	f008 fa98 	bl	80093e6 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4838      	ldr	r0, [pc, #224]	; (8000f9c <main+0x124>)
 8000eba:	f008 f8cd 	bl	8009058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4836      	ldr	r0, [pc, #216]	; (8000f9c <main+0x124>)
 8000ec2:	f008 f8c9 	bl	8009058 <HAL_TIM_PWM_Start>
//  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4835      	ldr	r0, [pc, #212]	; (8000fa0 <main+0x128>)
 8000eca:	f008 f8c5 	bl	8009058 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4833      	ldr	r0, [pc, #204]	; (8000fa0 <main+0x128>)
 8000ed2:	f008 f8c1 	bl	8009058 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WheelControl */
  osThreadDef(WheelControl, Wheel_task, osPriorityNormal, 0, 128);
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <main+0x12c>)
 8000ed8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000edc:	461d      	mov	r5, r3
 8000ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WheelControlHandle = osThreadCreate(osThread(WheelControl), NULL);
 8000eea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00a fd5c 	bl	800b9ae <osThreadCreate>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <main+0x130>)
 8000efa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Joystick */
  osThreadDef(Joystick, task2_joystick, osPriorityNormal, 0, 2048);
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <main+0x134>)
 8000efe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f02:	461d      	mov	r5, r3
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  JoystickHandle = osThreadCreate(osThread(Joystick), NULL);
 8000f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00a fd49 	bl	800b9ae <osThreadCreate>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4a24      	ldr	r2, [pc, #144]	; (8000fb0 <main+0x138>)
 8000f20:	6013      	str	r3, [r2, #0]

  /* definition and creation of up_down_control */
  osThreadDef(up_down_control, DC_motor, osPriorityNormal, 0, 512);
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <main+0x13c>)
 8000f24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f28:	461d      	mov	r5, r3
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  up_down_controlHandle = osThreadCreate(osThread(up_down_control), NULL);
 8000f36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00a fd36 	bl	800b9ae <osThreadCreate>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <main+0x140>)
 8000f46:	6013      	str	r3, [r2, #0]

  /* definition and creation of Target_pos */
  osThreadDef(Target_pos, Colorcheck, osPriorityNormal, 0, 512);
 8000f48:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <main+0x144>)
 8000f4a:	f107 0420 	add.w	r4, r7, #32
 8000f4e:	461d      	mov	r5, r3
 8000f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f54:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Target_posHandle = osThreadCreate(osThread(Target_pos), NULL);
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00a fd23 	bl	800b9ae <osThreadCreate>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <main+0x148>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Color */
  osThreadDef(Color, StartTask05, osPriorityNormal, 0, 128);
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <main+0x14c>)
 8000f70:	1d3c      	adds	r4, r7, #4
 8000f72:	461d      	mov	r5, r3
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorHandle = osThreadCreate(osThread(Color), NULL);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00a fd12 	bl	800b9ae <osThreadCreate>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <main+0x150>)
 8000f8e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f90:	f00a fd06 	bl	800b9a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <main+0x11c>
 8000f96:	bf00      	nop
 8000f98:	20000408 	.word	0x20000408
 8000f9c:	200003c0 	.word	0x200003c0
 8000fa0:	20000450 	.word	0x20000450
 8000fa4:	0800e960 	.word	0x0800e960
 8000fa8:	200006a8 	.word	0x200006a8
 8000fac:	0800e988 	.word	0x0800e988
 8000fb0:	200006ac 	.word	0x200006ac
 8000fb4:	0800e9b4 	.word	0x0800e9b4
 8000fb8:	200006b0 	.word	0x200006b0
 8000fbc:	0800e9dc 	.word	0x0800e9dc
 8000fc0:	200006b4 	.word	0x200006b4
 8000fc4:	0800ea00 	.word	0x0800ea00
 8000fc8:	200006b8 	.word	0x200006b8

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	; 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2234      	movs	r2, #52	; 0x34
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00d fb57 	bl	800e68e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <SystemClock_Config+0xd4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <SystemClock_Config+0xd4>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <SystemClock_Config+0xd4>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <SystemClock_Config+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <SystemClock_Config+0xd8>)
 800101a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SystemClock_Config+0xd8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800102c:	2302      	movs	r3, #2
 800102e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001034:	2310      	movs	r3, #16
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001040:	2308      	movs	r3, #8
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001050:	2302      	movs	r3, #2
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4618      	mov	r0, r3
 800105a:	f007 f92f 	bl	80082bc <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001064:	f002 f968 	bl	8003338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001074:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800107a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f006 fd9c 	bl	8007bc4 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001092:	f002 f951 	bl	8003338 <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	; 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40007000 	.word	0x40007000

080010a8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010ac:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ae:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <MX_CAN1_Init+0xfc>)
 80010b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010b8:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010c6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010cc:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010f8:	4829      	ldr	r0, [pc, #164]	; (80011a0 <MX_CAN1_Init+0xf8>)
 80010fa:	f005 f82d 	bl	8006158 <HAL_CAN_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001104:	f002 f918 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  M1.ID=0x201;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_CAN1_Init+0x100>)
 800110a:	f240 2201 	movw	r2, #513	; 0x201
 800110e:	809a      	strh	r2, [r3, #4]
  M2.ID=0X202;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_CAN1_Init+0x104>)
 8001112:	f240 2202 	movw	r2, #514	; 0x202
 8001116:	809a      	strh	r2, [r3, #4]
  M3.ID=0x203;
 8001118:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <MX_CAN1_Init+0x108>)
 800111a:	f240 2203 	movw	r2, #515	; 0x203
 800111e:	809a      	strh	r2, [r3, #4]
  M4.ID=0x204;
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_CAN1_Init+0x10c>)
 8001122:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001126:	809a      	strh	r2, [r3, #4]
  sFilterConfig.FilterBank = 0;
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <MX_CAN1_Init+0x110>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001134:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001136:	2201      	movs	r2, #1
 8001138:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x205;
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_CAN1_Init+0x110>)
 800113c:	f240 2205 	movw	r2, #517	; 0x205
 8001140:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x200;
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001148:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <MX_CAN1_Init+0x110>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800115c:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_CAN1_Init+0x110>)
 800115e:	2201      	movs	r2, #1
 8001160:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_CAN1_Init+0x110>)
 8001164:	220e      	movs	r2, #14
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001168:	4913      	ldr	r1, [pc, #76]	; (80011b8 <MX_CAN1_Init+0x110>)
 800116a:	480d      	ldr	r0, [pc, #52]	; (80011a0 <MX_CAN1_Init+0xf8>)
 800116c:	f005 f8f0 	bl	8006350 <HAL_CAN_ConfigFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_CAN1_Init+0xd2>
    	Error_Handler();
 8001176:	f002 f8df 	bl	8003338 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_CAN1_Init+0xf8>)
 800117c:	f005 f9c8 	bl	8006510 <HAL_CAN_Start>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_CAN1_Init+0xe2>
    	Error_Handler();
 8001186:	f002 f8d7 	bl	8003338 <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800118a:	2102      	movs	r1, #2
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <MX_CAN1_Init+0xf8>)
 800118e:	f005 fc19 	bl	80069c4 <HAL_CAN_ActivateNotification>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_CAN1_Init+0xf4>
    	Error_Handler();
 8001198:	f002 f8ce 	bl	8003338 <Error_Handler>
  }


  /* USER CODE END CAN1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200002f8 	.word	0x200002f8
 80011a4:	40006400 	.word	0x40006400
 80011a8:	200007bc 	.word	0x200007bc
 80011ac:	200007c4 	.word	0x200007c4
 80011b0:	200007cc 	.word	0x200007cc
 80011b4:	200007d4 	.word	0x200007d4
 80011b8:	20000810 	.word	0x20000810

080011bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI2_Init+0x64>)
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <MX_SPI2_Init+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_SPI2_Init+0x64>)
 80011c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI2_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI2_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_SPI2_Init+0x64>)
 80011dc:	2202      	movs	r2, #2
 80011de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI2_Init+0x64>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_SPI2_Init+0x64>)
 80011e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI2_Init+0x64>)
 80011f0:	2238      	movs	r2, #56	; 0x38
 80011f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI2_Init+0x64>)
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI2_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI2_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI2_Init+0x64>)
 8001208:	220a      	movs	r2, #10
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI2_Init+0x64>)
 800120e:	f007 faf3 	bl	80087f8 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001218:	f002 f88e 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000320 	.word	0x20000320
 8001224:	40003800 	.word	0x40003800

08001228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <MX_TIM3_Init+0xdc>)
 8001256:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_TIM3_Init+0xd8>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_TIM3_Init+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_TIM3_Init+0xd8>)
 800127a:	f007 fdd3 	bl	8008e24 <HAL_TIM_Base_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001284:	f002 f858 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800128e:	f107 0318 	add.w	r3, r7, #24
 8001292:	4619      	mov	r1, r3
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_TIM3_Init+0xd8>)
 8001296:	f008 fb83 	bl	80099a0 <HAL_TIM_ConfigClockSource>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f002 f84a 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM3_Init+0xd8>)
 80012a6:	f007 ff9f 	bl	80091e8 <HAL_TIM_IC_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b0:	f002 f842 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_TIM3_Init+0xd8>)
 80012c4:	f009 f8a2 	bl	800a40c <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80012ce:	f002 f833 	bl	8003338 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012d6:	2301      	movs	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM3_Init+0xd8>)
 80012ea:	f008 f9fa 	bl	80096e2 <HAL_TIM_IC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80012f4:	f002 f820 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000378 	.word	0x20000378
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	; 0x38
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 0320 	add.w	r3, r7, #32
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <MX_TIM4_Init+0xfc>)
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <MX_TIM4_Init+0x100>)
 800133c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 800133e:	4b31      	ldr	r3, [pc, #196]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001340:	f240 227f 	movw	r2, #639	; 0x27f
 8001344:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MX_TIM4_Init+0xfc>)
 800134e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001352:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <MX_TIM4_Init+0xfc>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001360:	4828      	ldr	r0, [pc, #160]	; (8001404 <MX_TIM4_Init+0xfc>)
 8001362:	f007 fd5f 	bl	8008e24 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800136c:	f001 ffe4 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800137a:	4619      	mov	r1, r3
 800137c:	4821      	ldr	r0, [pc, #132]	; (8001404 <MX_TIM4_Init+0xfc>)
 800137e:	f008 fb0f 	bl	80099a0 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001388:	f001 ffd6 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800138c:	481d      	ldr	r0, [pc, #116]	; (8001404 <MX_TIM4_Init+0xfc>)
 800138e:	f007 fe09 	bl	8008fa4 <HAL_TIM_PWM_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001398:	f001 ffce 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013a4:	f107 0320 	add.w	r3, r7, #32
 80013a8:	4619      	mov	r1, r3
 80013aa:	4816      	ldr	r0, [pc, #88]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013ac:	f009 f82e 	bl	800a40c <HAL_TIMEx_MasterConfigSynchronization>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80013b6:	f001 ffbf 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ba:	2360      	movs	r3, #96	; 0x60
 80013bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013d2:	f008 fa23 	bl	800981c <HAL_TIM_PWM_ConfigChannel>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013dc:	f001 ffac 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2204      	movs	r2, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013e8:	f008 fa18 	bl	800981c <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80013f2:	f001 ffa1 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013f6:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM4_Init+0xfc>)
 80013f8:	f004 fb10 	bl	8005a1c <HAL_TIM_MspPostInit>

}
 80013fc:	bf00      	nop
 80013fe:	3738      	adds	r7, #56	; 0x38
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	200003c0 	.word	0x200003c0
 8001408:	40000800 	.word	0x40000800

0800140c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f00d f937 	bl	800e68e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_TIM5_Init+0xa0>)
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800142c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM5_Init+0xa0>)
 800143c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001440:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM5_Init+0xa0>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800144e:	2303      	movs	r3, #3
 8001450:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001462:	2302      	movs	r3, #2
 8001464:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM5_Init+0xa0>)
 800147a:	f007 ff0e 	bl	800929a <HAL_TIM_Encoder_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001484:	f001 ff58 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM5_Init+0xa0>)
 8001496:	f008 ffb9 	bl	800a40c <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80014a0:	f001 ff4a 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000408 	.word	0x20000408
 80014b0:	40000c00 	.word	0x40000c00

080014b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b096      	sub	sp, #88	; 0x58
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2220      	movs	r2, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00d f8ce 	bl	800e68e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <MX_TIM8_Init+0x150>)
 80014f4:	4a44      	ldr	r2, [pc, #272]	; (8001608 <MX_TIM8_Init+0x154>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 26500-1;
 80014f8:	4b42      	ldr	r3, [pc, #264]	; (8001604 <MX_TIM8_Init+0x150>)
 80014fa:	f246 7283 	movw	r2, #26499	; 0x6783
 80014fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <MX_TIM8_Init+0x150>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <MX_TIM8_Init+0x150>)
 8001508:	2263      	movs	r2, #99	; 0x63
 800150a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <MX_TIM8_Init+0x150>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <MX_TIM8_Init+0x150>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <MX_TIM8_Init+0x150>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800151e:	4839      	ldr	r0, [pc, #228]	; (8001604 <MX_TIM8_Init+0x150>)
 8001520:	f007 fc80 	bl	8008e24 <HAL_TIM_Base_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800152a:	f001 ff05 	bl	8003338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001534:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001538:	4619      	mov	r1, r3
 800153a:	4832      	ldr	r0, [pc, #200]	; (8001604 <MX_TIM8_Init+0x150>)
 800153c:	f008 fa30 	bl	80099a0 <HAL_TIM_ConfigClockSource>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001546:	f001 fef7 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800154a:	482e      	ldr	r0, [pc, #184]	; (8001604 <MX_TIM8_Init+0x150>)
 800154c:	f007 fd2a 	bl	8008fa4 <HAL_TIM_PWM_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001556:	f001 feef 	bl	8003338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001566:	4619      	mov	r1, r3
 8001568:	4826      	ldr	r0, [pc, #152]	; (8001604 <MX_TIM8_Init+0x150>)
 800156a:	f008 ff4f 	bl	800a40c <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001574:	f001 fee0 	bl	8003338 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2200      	movs	r2, #0
 800159a:	4619      	mov	r1, r3
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <MX_TIM8_Init+0x150>)
 800159e:	f008 f93d 	bl	800981c <HAL_TIM_PWM_ConfigChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015a8:	f001 fec6 	bl	8003338 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	2204      	movs	r2, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4813      	ldr	r0, [pc, #76]	; (8001604 <MX_TIM8_Init+0x150>)
 80015b6:	f008 f931 	bl	800981c <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80015c0:	f001 feba 	bl	8003338 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <MX_TIM8_Init+0x150>)
 80015e8:	f008 ff8c 	bl	800a504 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80015f2:	f001 fea1 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <MX_TIM8_Init+0x150>)
 80015f8:	f004 fa10 	bl	8005a1c <HAL_TIM_MspPostInit>

}
 80015fc:	bf00      	nop
 80015fe:	3758      	adds	r7, #88	; 0x58
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000450 	.word	0x20000450
 8001608:	40010400 	.word	0x40010400

0800160c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_UART4_Init+0x4c>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <MX_UART4_Init+0x50>)
 8001614:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_UART4_Init+0x4c>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_UART4_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_UART4_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_UART4_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_UART4_Init+0x4c>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_UART4_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_UART4_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_UART4_Init+0x4c>)
 8001644:	f008 ffc4 	bl	800a5d0 <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800164e:	f001 fe73 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000498 	.word	0x20000498
 800165c:	40004c00 	.word	0x40004c00

08001660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_USART2_UART_Init+0x50>)
 8001668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800166c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001686:	220c      	movs	r2, #12
 8001688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_USART2_UART_Init+0x4c>)
 8001698:	f008 ff9a 	bl	800a5d0 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016a2:	f001 fe49 	bl	8003338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200004e0 	.word	0x200004e0
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_DMA_Init+0x6c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_DMA_Init+0x6c>)
 80016c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_DMA_Init+0x6c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	200d      	movs	r0, #13
 80016dc:	f005 fc80 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016e0:	200d      	movs	r0, #13
 80016e2:	f005 fc99 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	200f      	movs	r0, #15
 80016ec:	f005 fc78 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80016f0:	200f      	movs	r0, #15
 80016f2:	f005 fc91 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	2010      	movs	r0, #16
 80016fc:	f005 fc70 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001700:	2010      	movs	r0, #16
 8001702:	f005 fc89 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	2011      	movs	r0, #17
 800170c:	f005 fc68 	bl	8006fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001710:	2011      	movs	r0, #17
 8001712:	f005 fc81 	bl	8007018 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <MX_GPIO_Init+0x174>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a55      	ldr	r2, [pc, #340]	; (8001898 <MX_GPIO_Init+0x174>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b53      	ldr	r3, [pc, #332]	; (8001898 <MX_GPIO_Init+0x174>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <MX_GPIO_Init+0x174>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a4e      	ldr	r2, [pc, #312]	; (8001898 <MX_GPIO_Init+0x174>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <MX_GPIO_Init+0x174>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b48      	ldr	r3, [pc, #288]	; (8001898 <MX_GPIO_Init+0x174>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a47      	ldr	r2, [pc, #284]	; (8001898 <MX_GPIO_Init+0x174>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b45      	ldr	r3, [pc, #276]	; (8001898 <MX_GPIO_Init+0x174>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <MX_GPIO_Init+0x174>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <MX_GPIO_Init+0x174>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <MX_GPIO_Init+0x174>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S2_Pin|S3_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80017b0:	483a      	ldr	r0, [pc, #232]	; (800189c <MX_GPIO_Init+0x178>)
 80017b2:	f006 f9ed 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2102      	movs	r1, #2
 80017ba:	4839      	ldr	r0, [pc, #228]	; (80018a0 <MX_GPIO_Init+0x17c>)
 80017bc:	f006 f9e8 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017c6:	4837      	ldr	r0, [pc, #220]	; (80018a4 <MX_GPIO_Init+0x180>)
 80017c8:	f006 f9e2 	bl	8007b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP1_Pin DOWN2_Pin DOWN1_Pin BALL1_Pin */
  GPIO_InitStruct.Pin = UP1_Pin|DOWN2_Pin|DOWN1_Pin|BALL1_Pin;
 80017cc:	230f      	movs	r3, #15
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4831      	ldr	r0, [pc, #196]	; (80018a4 <MX_GPIO_Init+0x180>)
 80017e0:	f006 f82a 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL2_Pin */
  GPIO_InitStruct.Pin = BALL2_Pin;
 80017e4:	2310      	movs	r3, #16
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BALL2_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	4619      	mov	r1, r3
 80017f6:	4829      	ldr	r0, [pc, #164]	; (800189c <MX_GPIO_Init+0x178>)
 80017f8:	f006 f81e 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S3_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin|IN4_Pin|IN3_Pin;
 80017fc:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4821      	ldr	r0, [pc, #132]	; (800189c <MX_GPIO_Init+0x178>)
 8001816:	f006 f80f 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP2_Pin IR_Pin */
  GPIO_InitStruct.Pin = UP2_Pin|IR_Pin;
 800181a:	f240 2301 	movw	r3, #513	; 0x201
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	481c      	ldr	r0, [pc, #112]	; (80018a0 <MX_GPIO_Init+0x17c>)
 8001830:	f006 f802 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001834:	2302      	movs	r3, #2
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4815      	ldr	r0, [pc, #84]	; (80018a0 <MX_GPIO_Init+0x17c>)
 800184c:	f005 fff4 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 8001850:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <MX_GPIO_Init+0x180>)
 800186a:	f005 ffe5 	bl	8007838 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001880:	2301      	movs	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_GPIO_Init+0x17c>)
 800188c:	f005 ffd4 	bl	8007838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800

080018a8 <MotorUp>:
//		  }
//	  }
//}

void MotorUp(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MotorUp+0x20>)
 80018b4:	f006 f96c 	bl	8007b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018be:	4802      	ldr	r0, [pc, #8]	; (80018c8 <MotorUp+0x20>)
 80018c0:	f006 f966 	bl	8007b90 <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020800 	.word	0x40020800

080018cc <MotorDown>:

void MotorDown(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MotorDown+0x20>)
 80018d8:	f006 f95a 	bl	8007b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e2:	4802      	ldr	r0, [pc, #8]	; (80018ec <MotorDown+0x20>)
 80018e4:	f006 f954 	bl	8007b90 <HAL_GPIO_WritePin>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020800 	.word	0x40020800

080018f0 <MotorStop>:

void MotorStop(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	TIM8 -> CCR1 = 1;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MotorStop+0x28>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <MotorStop+0x2c>)
 8001902:	f006 f945 	bl	8007b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001906:	2201      	movs	r2, #1
 8001908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190c:	4803      	ldr	r0, [pc, #12]	; (800191c <MotorStop+0x2c>)
 800190e:	f006 f93f 	bl	8007b90 <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40010400 	.word	0x40010400
 800191c:	40020800 	.word	0x40020800

08001920 <calculatePID>:

void calculatePID()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	cTime = HAL_GetTick();
 8001924:	f004 fbe8 	bl	80060f8 <HAL_GetTick>
 8001928:	ee07 0a90 	vmov	s15, r0
 800192c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <calculatePID+0x11c>)
 8001932:	edc3 7a00 	vstr	s15, [r3]
	Motor.my_pos = ((int32_t)TIM5->CNT)/100;
 8001936:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <calculatePID+0x120>)
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <calculatePID+0x124>)
 800193c:	fb82 1203 	smull	r1, r2, r2, r3
 8001940:	1152      	asrs	r2, r2, #5
 8001942:	17db      	asrs	r3, r3, #31
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	4a40      	ldr	r2, [pc, #256]	; (8001a48 <calculatePID+0x128>)
 8001948:	6053      	str	r3, [r2, #4]
	dTime = (cTime - pTime)/10000;
 800194a:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <calculatePID+0x11c>)
 800194c:	ed93 7a00 	vldr	s14, [r3]
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <calculatePID+0x12c>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee37 7a67 	vsub.f32	s14, s14, s15
 800195a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001a50 <calculatePID+0x130>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <calculatePID+0x134>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
	DC_pid.error = Motor.target_pos - Motor.my_pos;
 8001968:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <calculatePID+0x128>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <calculatePID+0x128>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <calculatePID+0x138>)
 8001974:	60d3      	str	r3, [r2, #12]
	DC_pid.I_error += (DC_pid.error * dTime);
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <calculatePID+0x138>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001982:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <calculatePID+0x138>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <calculatePID+0x134>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a0:	ee17 2a90 	vmov	r2, s15
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <calculatePID+0x138>)
 80019a6:	611a      	str	r2, [r3, #16]
	DC_pid.D_error = (DC_pid.error - DC_pid.lastError)/dTime;
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <calculatePID+0x138>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <calculatePID+0x138>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	ee07 3a90 	vmov	s15, r3
 80019b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <calculatePID+0x134>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c8:	ee17 2a90 	vmov	r2, s15
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <calculatePID+0x138>)
 80019ce:	615a      	str	r2, [r3, #20]
	Motor.ControlSignal = (DC_pid.KP*DC_pid.error) + (DC_pid.I_error*DC_pid.KI) + (DC_pid.D_error*DC_pid.KD);
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <calculatePID+0x138>)
 80019d2:	ed93 7a00 	vldr	s14, [r3]
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <calculatePID+0x138>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <calculatePID+0x138>)
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <calculatePID+0x138>)
 80019f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <calculatePID+0x138>)
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <calculatePID+0x138>)
 8001a0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <calculatePID+0x128>)
 8001a1c:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f004 fb75 	bl	8006110 <HAL_Delay>
	pTime = cTime;
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <calculatePID+0x11c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <calculatePID+0x12c>)
 8001a2c:	6013      	str	r3, [r2, #0]
	DC_pid.lastError = DC_pid.error;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <calculatePID+0x138>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <calculatePID+0x138>)
 8001a34:	6193      	str	r3, [r2, #24]
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200006e0 	.word	0x200006e0
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	51eb851f 	.word	0x51eb851f
 8001a48:	200007dc 	.word	0x200007dc
 8001a4c:	200006e4 	.word	0x200006e4
 8001a50:	461c4000 	.word	0x461c4000
 8001a54:	200006e8 	.word	0x200006e8
 8001a58:	200007a0 	.word	0x200007a0

08001a5c <motorspeed>:

void motorspeed(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if(Motor.ControlSignal<0)
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <motorspeed+0xa0>)
 8001a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d504      	bpl.n	8001a7a <motorspeed+0x1e>
		motor_dir = -1;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <motorspeed+0xa4>)
 8001a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e00e      	b.n	8001a98 <motorspeed+0x3c>
	else if(Motor.ControlSignal>0)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <motorspeed+0xa0>)
 8001a7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd03      	ble.n	8001a92 <motorspeed+0x36>
		motor_dir = 1;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <motorspeed+0xa4>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e002      	b.n	8001a98 <motorspeed+0x3c>
	else
		motor_dir = 0;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <motorspeed+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
	Motor.PWM = (int)fabs(Motor.ControlSignal);
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <motorspeed+0xa0>)
 8001a9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a9e:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa6:	ee17 2a90 	vmov	r2, s15
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <motorspeed+0xa0>)
 8001aac:	60da      	str	r2, [r3, #12]
	if(Motor.PWM > 300)
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <motorspeed+0xa0>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ab6:	dd02      	ble.n	8001abe <motorspeed+0x62>
		TIM8 -> CCR1 = 1;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <motorspeed+0xa8>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
//	TIM8 -> CCR2 = 50;
	if(Motor.PWM < 300 && DC_pid.error != 0){
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <motorspeed+0xa0>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ac6:	da06      	bge.n	8001ad6 <motorspeed+0x7a>
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <motorspeed+0xac>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <motorspeed+0x7a>
		TIM8 -> CCR1 = 60;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <motorspeed+0xa8>)
 8001ad2:	223c      	movs	r2, #60	; 0x3c
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(motor_dir == 1){
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <motorspeed+0xa4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <motorspeed+0x88>
		MotorUp();
 8001ade:	f7ff fee3 	bl	80018a8 <MotorUp>
	}else if(motor_dir == (-1)){
		MotorDown();
	}else{
		MotorStop();
	}
}
 8001ae2:	e009      	b.n	8001af8 <motorspeed+0x9c>
	}else if(motor_dir == (-1)){
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <motorspeed+0xa4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aec:	d102      	bne.n	8001af4 <motorspeed+0x98>
		MotorDown();
 8001aee:	f7ff feed 	bl	80018cc <MotorDown>
}
 8001af2:	e001      	b.n	8001af8 <motorspeed+0x9c>
		MotorStop();
 8001af4:	f7ff fefc 	bl	80018f0 <MotorStop>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200007dc 	.word	0x200007dc
 8001b00:	200006f0 	.word	0x200006f0
 8001b04:	40010400 	.word	0x40010400
 8001b08:	200007a0 	.word	0x200007a0

08001b0c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
//	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8001b14:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b16:	4a60      	ldr	r2, [pc, #384]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4860      	ldr	r0, [pc, #384]	; (8001c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001b1c:	f004 fe30 	bl	8006780 <HAL_CAN_GetRxMessage>
	if(rxHeader.StdId == 0x201){
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f240 2201 	movw	r2, #513	; 0x201
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d126      	bne.n	8001b7a <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		M1.en_speed = rxData[2] << 8;
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b36:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed + rxData[3];
 8001b38:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b42:	78db      	ldrb	r3, [r3, #3]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b4e:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed * 1.5;
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcb4 	bl	80004c4 <__aeabi_i2d>
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001b62:	f7fe fd19 	bl	8000598 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe ffc3 	bl	8000af8 <__aeabi_d2iz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b21a      	sxth	r2, r3
 8001b76:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001b78:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x202){
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f240 2202 	movw	r2, #514	; 0x202
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d126      	bne.n	8001bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		M2.en_speed = rxData[2] << 8;
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b88:	789b      	ldrb	r3, [r3, #2]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001b90:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed + rxData[3];
 8001b92:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001b94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001b9c:	78db      	ldrb	r3, [r3, #3]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b40      	ldr	r3, [pc, #256]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001ba8:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed * 1.5;
 8001baa:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001bac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc87 	bl	80004c4 <__aeabi_i2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001bbc:	f7fe fcec 	bl	8000598 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff96 	bl	8000af8 <__aeabi_d2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001bd2:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x203){
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f240 2203 	movw	r2, #515	; 0x203
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d126      	bne.n	8001c2e <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
		M3.en_speed = rxData[2] << 8;
 8001be0:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001be2:	789b      	ldrb	r3, [r3, #2]
 8001be4:	021b      	lsls	r3, r3, #8
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001bea:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed + rxData[3];
 8001bec:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001bee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001bf6:	78db      	ldrb	r3, [r3, #3]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001c02:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed * 1.5;
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001c06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fc5a 	bl	80004c4 <__aeabi_i2d>
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_dmul>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ff69 	bl	8000af8 <__aeabi_d2iz>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001c2c:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x204){
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001c36:	d129      	bne.n	8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		M4.en_speed = rxData[2] << 8;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c3a:	789b      	ldrb	r3, [r3, #2]
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c42:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed + rxData[3];
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c4e:	78db      	ldrb	r3, [r3, #3]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c5a:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed * 1.5;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc2e 	bl	80004c4 <__aeabi_i2d>
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001c6e:	f7fe fc93 	bl	8000598 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff3d 	bl	8000af8 <__aeabi_d2iz>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001c84:	80da      	strh	r2, [r3, #6]
		vel_up = 1;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
	}
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000728 	.word	0x20000728
 8001c98:	20000838 	.word	0x20000838
 8001c9c:	200002f8 	.word	0x200002f8
 8001ca0:	200007bc 	.word	0x200007bc
 8001ca4:	3ff80000 	.word	0x3ff80000
 8001ca8:	200007c4 	.word	0x200007c4
 8001cac:	200007cc 	.word	0x200007cc
 8001cb0:	200007d4 	.word	0x200007d4
 8001cb4:	200006ec 	.word	0x200006ec

08001cb8 <can_transmit>:
void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	817b      	strh	r3, [r7, #10]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	813b      	strh	r3, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef tx_header;
//    uint8_t             data[8];
//    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	613b      	str	r3, [r7, #16]
    tx_header.IDE   = CAN_ID_STD;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
    tx_header.RTR   = CAN_RTR_DATA;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61fb      	str	r3, [r7, #28]
    tx_header.DLC   = CAN_DATA_SIZE;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	623b      	str	r3, [r7, #32]
    tx_header.TransmitGlobalTime = DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[0] = msg1 >> 8;
 8001ce8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001cec:	121b      	asrs	r3, r3, #8
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <can_transmit+0xb8>)
 8001cf4:	701a      	strb	r2, [r3, #0]
    data[1] = msg1;
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <can_transmit+0xb8>)
 8001cfc:	705a      	strb	r2, [r3, #1]
    data[2] = msg2 >> 8;
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	121b      	asrs	r3, r3, #8
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <can_transmit+0xb8>)
 8001d0a:	709a      	strb	r2, [r3, #2]
    data[3] = msg2;
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <can_transmit+0xb8>)
 8001d12:	70da      	strb	r2, [r3, #3]
    data[4] = msg3 >> 8;
 8001d14:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d18:	121b      	asrs	r3, r3, #8
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <can_transmit+0xb8>)
 8001d20:	711a      	strb	r2, [r3, #4]
    data[5] = msg3;
 8001d22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <can_transmit+0xb8>)
 8001d28:	715a      	strb	r2, [r3, #5]
    data[6] = msg4 >> 8;
 8001d2a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001d2e:	121b      	asrs	r3, r3, #8
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <can_transmit+0xb8>)
 8001d36:	719a      	strb	r2, [r3, #6]
    data[7] = msg4;
 8001d38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <can_transmit+0xb8>)
 8001d3e:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK){
 8001d40:	f107 0110 	add.w	r1, r7, #16
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <can_transmit+0xbc>)
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <can_transmit+0xb8>)
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f004 fc25 	bl	8006598 <HAL_CAN_AddTxMessage>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <can_transmit+0xb0>
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 8001d54:	bf00      	nop
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <can_transmit+0xbc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f004 fceb 	bl	8006738 <HAL_CAN_IsTxMessagePending>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f6      	bne.n	8001d56 <can_transmit+0x9e>
    }
}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000071c 	.word	0x2000071c
 8001d74:	20000724 	.word	0x20000724

08001d78 <Wheel_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Wheel_task */
void Wheel_task(void const * argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	M1_pid.KP = 1.5;
 8001d80:	4ba9      	ldr	r3, [pc, #676]	; (8002028 <Wheel_task+0x2b0>)
 8001d82:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d86:	601a      	str	r2, [r3, #0]
	M1_pid.KI = 0.0005;
 8001d88:	4ba7      	ldr	r3, [pc, #668]	; (8002028 <Wheel_task+0x2b0>)
 8001d8a:	4aa8      	ldr	r2, [pc, #672]	; (800202c <Wheel_task+0x2b4>)
 8001d8c:	605a      	str	r2, [r3, #4]
	M1_pid.KD = 0.01;
 8001d8e:	4ba6      	ldr	r3, [pc, #664]	; (8002028 <Wheel_task+0x2b0>)
 8001d90:	4aa7      	ldr	r2, [pc, #668]	; (8002030 <Wheel_task+0x2b8>)
 8001d92:	609a      	str	r2, [r3, #8]

	M2_pid.KP = 1.5;
 8001d94:	4ba7      	ldr	r3, [pc, #668]	; (8002034 <Wheel_task+0x2bc>)
 8001d96:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001d9a:	601a      	str	r2, [r3, #0]
	M2_pid.KI = 0.0005;
 8001d9c:	4ba5      	ldr	r3, [pc, #660]	; (8002034 <Wheel_task+0x2bc>)
 8001d9e:	4aa3      	ldr	r2, [pc, #652]	; (800202c <Wheel_task+0x2b4>)
 8001da0:	605a      	str	r2, [r3, #4]
	M2_pid.KD = 0.01;
 8001da2:	4ba4      	ldr	r3, [pc, #656]	; (8002034 <Wheel_task+0x2bc>)
 8001da4:	4aa2      	ldr	r2, [pc, #648]	; (8002030 <Wheel_task+0x2b8>)
 8001da6:	609a      	str	r2, [r3, #8]

	M3_pid.KP = 1.5;
 8001da8:	4ba3      	ldr	r3, [pc, #652]	; (8002038 <Wheel_task+0x2c0>)
 8001daa:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001dae:	601a      	str	r2, [r3, #0]
	M3_pid.KI = 0.0005;
 8001db0:	4ba1      	ldr	r3, [pc, #644]	; (8002038 <Wheel_task+0x2c0>)
 8001db2:	4a9e      	ldr	r2, [pc, #632]	; (800202c <Wheel_task+0x2b4>)
 8001db4:	605a      	str	r2, [r3, #4]
	M3_pid.KD = 0.01;
 8001db6:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <Wheel_task+0x2c0>)
 8001db8:	4a9d      	ldr	r2, [pc, #628]	; (8002030 <Wheel_task+0x2b8>)
 8001dba:	609a      	str	r2, [r3, #8]

	M4_pid.KP = 1.5;
 8001dbc:	4b9f      	ldr	r3, [pc, #636]	; (800203c <Wheel_task+0x2c4>)
 8001dbe:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001dc2:	601a      	str	r2, [r3, #0]
	M4_pid.KI = 0.0005;
 8001dc4:	4b9d      	ldr	r3, [pc, #628]	; (800203c <Wheel_task+0x2c4>)
 8001dc6:	4a99      	ldr	r2, [pc, #612]	; (800202c <Wheel_task+0x2b4>)
 8001dc8:	605a      	str	r2, [r3, #4]
	M4_pid.KD = 0.01;
 8001dca:	4b9c      	ldr	r3, [pc, #624]	; (800203c <Wheel_task+0x2c4>)
 8001dcc:	4a98      	ldr	r2, [pc, #608]	; (8002030 <Wheel_task+0x2b8>)
 8001dce:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {

  if(vel_up==1){
 8001dd0:	4b9b      	ldr	r3, [pc, #620]	; (8002040 <Wheel_task+0x2c8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 814f 	bne.w	8002078 <Wheel_task+0x300>
	  vel_up=0;
 8001dda:	4b99      	ldr	r3, [pc, #612]	; (8002040 <Wheel_task+0x2c8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
		  M1_pid.error=M1.setpoint-M1.en_speed;
 8001de0:	4b98      	ldr	r3, [pc, #608]	; (8002044 <Wheel_task+0x2cc>)
 8001de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b96      	ldr	r3, [pc, #600]	; (8002044 <Wheel_task+0x2cc>)
 8001dea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4a8d      	ldr	r2, [pc, #564]	; (8002028 <Wheel_task+0x2b0>)
 8001df2:	60d3      	str	r3, [r2, #12]
		  M1_pid.I_error+=M1_pid.error;
 8001df4:	4b8c      	ldr	r3, [pc, #560]	; (8002028 <Wheel_task+0x2b0>)
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <Wheel_task+0x2b0>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a8a      	ldr	r2, [pc, #552]	; (8002028 <Wheel_task+0x2b0>)
 8001e00:	6113      	str	r3, [r2, #16]
		  M1_pid.D_error=M1_pid.lastError-M1_pid.error;
 8001e02:	4b89      	ldr	r3, [pc, #548]	; (8002028 <Wheel_task+0x2b0>)
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <Wheel_task+0x2b0>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a86      	ldr	r2, [pc, #536]	; (8002028 <Wheel_task+0x2b0>)
 8001e0e:	6153      	str	r3, [r2, #20]
		  M1_pid.lastError=M1_pid.error;
 8001e10:	4b85      	ldr	r3, [pc, #532]	; (8002028 <Wheel_task+0x2b0>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a84      	ldr	r2, [pc, #528]	; (8002028 <Wheel_task+0x2b0>)
 8001e16:	6193      	str	r3, [r2, #24]
		  M1.Out=M1_pid.KP*M1_pid.error+M1_pid.KI*M1_pid.I_error+M1_pid.KD*M1_pid.D_error;
 8001e18:	4b83      	ldr	r3, [pc, #524]	; (8002028 <Wheel_task+0x2b0>)
 8001e1a:	ed93 7a00 	vldr	s14, [r3]
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <Wheel_task+0x2b0>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <Wheel_task+0x2b0>)
 8001e30:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <Wheel_task+0x2b0>)
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	4b77      	ldr	r3, [pc, #476]	; (8002028 <Wheel_task+0x2b0>)
 8001e4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e4e:	4b76      	ldr	r3, [pc, #472]	; (8002028 <Wheel_task+0x2b0>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e66:	ee17 3a90 	vmov	r3, s15
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	4b75      	ldr	r3, [pc, #468]	; (8002044 <Wheel_task+0x2cc>)
 8001e6e:	805a      	strh	r2, [r3, #2]

		  M2_pid.error=M2.setpoint-M2.en_speed;
 8001e70:	4b75      	ldr	r3, [pc, #468]	; (8002048 <Wheel_task+0x2d0>)
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b73      	ldr	r3, [pc, #460]	; (8002048 <Wheel_task+0x2d0>)
 8001e7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a6c      	ldr	r2, [pc, #432]	; (8002034 <Wheel_task+0x2bc>)
 8001e82:	60d3      	str	r3, [r2, #12]
		  M2_pid.I_error+=M2_pid.error;
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <Wheel_task+0x2bc>)
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b6a      	ldr	r3, [pc, #424]	; (8002034 <Wheel_task+0x2bc>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a69      	ldr	r2, [pc, #420]	; (8002034 <Wheel_task+0x2bc>)
 8001e90:	6113      	str	r3, [r2, #16]
		  M2_pid.D_error=M2_pid.lastError-M2_pid.error;
 8001e92:	4b68      	ldr	r3, [pc, #416]	; (8002034 <Wheel_task+0x2bc>)
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	4b67      	ldr	r3, [pc, #412]	; (8002034 <Wheel_task+0x2bc>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a65      	ldr	r2, [pc, #404]	; (8002034 <Wheel_task+0x2bc>)
 8001e9e:	6153      	str	r3, [r2, #20]
		  M2_pid.lastError=M2_pid.error;
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <Wheel_task+0x2bc>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <Wheel_task+0x2bc>)
 8001ea6:	6193      	str	r3, [r2, #24]
		  M2.Out=M2_pid.KP*M2_pid.error+M2_pid.KI*M2_pid.I_error+M2_pid.KD*M2_pid.D_error;
 8001ea8:	4b62      	ldr	r3, [pc, #392]	; (8002034 <Wheel_task+0x2bc>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	4b61      	ldr	r3, [pc, #388]	; (8002034 <Wheel_task+0x2bc>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <Wheel_task+0x2bc>)
 8001ec0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ec4:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <Wheel_task+0x2bc>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <Wheel_task+0x2bc>)
 8001eda:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ede:	4b55      	ldr	r3, [pc, #340]	; (8002034 <Wheel_task+0x2bc>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <Wheel_task+0x2d0>)
 8001efe:	805a      	strh	r2, [r3, #2]


		  M3_pid.error=M3.setpoint-M3.en_speed;
 8001f00:	4b52      	ldr	r3, [pc, #328]	; (800204c <Wheel_task+0x2d4>)
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <Wheel_task+0x2d4>)
 8001f0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a49      	ldr	r2, [pc, #292]	; (8002038 <Wheel_task+0x2c0>)
 8001f12:	60d3      	str	r3, [r2, #12]
		  M3_pid.I_error+=M3_pid.error;
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <Wheel_task+0x2c0>)
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	4b47      	ldr	r3, [pc, #284]	; (8002038 <Wheel_task+0x2c0>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a46      	ldr	r2, [pc, #280]	; (8002038 <Wheel_task+0x2c0>)
 8001f20:	6113      	str	r3, [r2, #16]
		  M3_pid.D_error=M3_pid.lastError-M3_pid.error;
 8001f22:	4b45      	ldr	r3, [pc, #276]	; (8002038 <Wheel_task+0x2c0>)
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <Wheel_task+0x2c0>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a42      	ldr	r2, [pc, #264]	; (8002038 <Wheel_task+0x2c0>)
 8001f2e:	6153      	str	r3, [r2, #20]
		  M3_pid.lastError=M3_pid.error;
 8001f30:	4b41      	ldr	r3, [pc, #260]	; (8002038 <Wheel_task+0x2c0>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a40      	ldr	r2, [pc, #256]	; (8002038 <Wheel_task+0x2c0>)
 8001f36:	6193      	str	r3, [r2, #24]
		  M3.Out=M3_pid.KP*M3_pid.error+M3_pid.KI*M3_pid.I_error+M3_pid.KD*M3_pid.D_error;
 8001f38:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <Wheel_task+0x2c0>)
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <Wheel_task+0x2c0>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <Wheel_task+0x2c0>)
 8001f50:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <Wheel_task+0x2c0>)
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <Wheel_task+0x2c0>)
 8001f6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f6e:	4b32      	ldr	r3, [pc, #200]	; (8002038 <Wheel_task+0x2c0>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f86:	ee17 3a90 	vmov	r3, s15
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	; (800204c <Wheel_task+0x2d4>)
 8001f8e:	805a      	strh	r2, [r3, #2]


		  M4_pid.error=M4.setpoint-M4.en_speed;
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <Wheel_task+0x2d8>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <Wheel_task+0x2d8>)
 8001f9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <Wheel_task+0x2c4>)
 8001fa2:	60d3      	str	r3, [r2, #12]
		  M4_pid.I_error+=M4_pid.error;
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <Wheel_task+0x2c4>)
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <Wheel_task+0x2c4>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a23      	ldr	r2, [pc, #140]	; (800203c <Wheel_task+0x2c4>)
 8001fb0:	6113      	str	r3, [r2, #16]
		  M4_pid.D_error=M4_pid.lastError-M4_pid.error;
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <Wheel_task+0x2c4>)
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <Wheel_task+0x2c4>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <Wheel_task+0x2c4>)
 8001fbe:	6153      	str	r3, [r2, #20]
		  M4_pid.lastError=M4_pid.error;
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <Wheel_task+0x2c4>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <Wheel_task+0x2c4>)
 8001fc6:	6193      	str	r3, [r2, #24]
		  M4.Out=M4_pid.KP*M4_pid.error+M4_pid.KI*M4_pid.I_error+M4_pid.KD*M4_pid.D_error;
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <Wheel_task+0x2c4>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <Wheel_task+0x2c4>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <Wheel_task+0x2c4>)
 8001fe0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <Wheel_task+0x2c4>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <Wheel_task+0x2c4>)
 8001ffa:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <Wheel_task+0x2c4>)
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002016:	ee17 3a90 	vmov	r3, s15
 800201a:	b21a      	sxth	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <Wheel_task+0x2d8>)
 800201e:	805a      	strh	r2, [r3, #2]

		  can_transmit(&hcan1, FIRST_GROUP_ID, M1.Out, M2.Out, M3.Out, M4.Out);
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <Wheel_task+0x2cc>)
 8002022:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002026:	e015      	b.n	8002054 <Wheel_task+0x2dc>
 8002028:	20000730 	.word	0x20000730
 800202c:	3a03126f 	.word	0x3a03126f
 8002030:	3c23d70a 	.word	0x3c23d70a
 8002034:	2000074c 	.word	0x2000074c
 8002038:	20000768 	.word	0x20000768
 800203c:	20000784 	.word	0x20000784
 8002040:	200006ec 	.word	0x200006ec
 8002044:	200007bc 	.word	0x200007bc
 8002048:	200007c4 	.word	0x200007c4
 800204c:	200007cc 	.word	0x200007cc
 8002050:	200007d4 	.word	0x200007d4
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <Wheel_task+0x308>)
 8002056:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <Wheel_task+0x30c>)
 800205c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002060:	4a09      	ldr	r2, [pc, #36]	; (8002088 <Wheel_task+0x310>)
 8002062:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002066:	9201      	str	r2, [sp, #4]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002072:	4806      	ldr	r0, [pc, #24]	; (800208c <Wheel_task+0x314>)
 8002074:	f7ff fe20 	bl	8001cb8 <can_transmit>
 }

    osDelay(5);
 8002078:	2005      	movs	r0, #5
 800207a:	f009 fce4 	bl	800ba46 <osDelay>
  if(vel_up==1){
 800207e:	e6a7      	b.n	8001dd0 <Wheel_task+0x58>
 8002080:	200007c4 	.word	0x200007c4
 8002084:	200007cc 	.word	0x200007cc
 8002088:	200007d4 	.word	0x200007d4
 800208c:	200002f8 	.word	0x200002f8

08002090 <task2_joystick>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_joystick */
void task2_joystick(void const * argument)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b0a0      	sub	sp, #128	; 0x80
 8002096:	af02      	add	r7, sp, #8
 8002098:	6778      	str	r0, [r7, #116]	; 0x74
  /* USER CODE BEGIN task2_joystick */

  /* Infinite loop */
  for(;;)
  {
	  spi_enable;
 800209a:	2200      	movs	r2, #0
 800209c:	2102      	movs	r1, #2
 800209e:	4888      	ldr	r0, [pc, #544]	; (80022c0 <task2_joystick+0x230>)
 80020a0:	f005 fd76 	bl	8007b90 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi2, HC_PS2_TX, HC_PS2_RX, 9, 10);
 80020a4:	230a      	movs	r3, #10
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2309      	movs	r3, #9
 80020aa:	4a86      	ldr	r2, [pc, #536]	; (80022c4 <task2_joystick+0x234>)
 80020ac:	4986      	ldr	r1, [pc, #536]	; (80022c8 <task2_joystick+0x238>)
 80020ae:	4887      	ldr	r0, [pc, #540]	; (80022cc <task2_joystick+0x23c>)
 80020b0:	f006 fc2b 	bl	800890a <HAL_SPI_TransmitReceive>
	  spi_disable;
 80020b4:	2201      	movs	r2, #1
 80020b6:	2102      	movs	r1, #2
 80020b8:	4881      	ldr	r0, [pc, #516]	; (80022c0 <task2_joystick+0x230>)
 80020ba:	f005 fd69 	bl	8007b90 <HAL_GPIO_WritePin>
	  PS2.LY=-(HC_PS2_RX[8]-127);
 80020be:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <task2_joystick+0x234>)
 80020c0:	7a1b      	ldrb	r3, [r3, #8]
 80020c2:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 80020c6:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <task2_joystick+0x240>)
 80020c8:	601a      	str	r2, [r3, #0]
	  PS2.LX=(HC_PS2_RX[7]-127);
 80020ca:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <task2_joystick+0x234>)
 80020cc:	79db      	ldrb	r3, [r3, #7]
 80020ce:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <task2_joystick+0x240>)
 80020d4:	605a      	str	r2, [r3, #4]
	  PS2.RY=HC_PS2_RX[6]-128;
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <task2_joystick+0x234>)
 80020d8:	799b      	ldrb	r3, [r3, #6]
 80020da:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <task2_joystick+0x240>)
 80020e0:	609a      	str	r2, [r3, #8]
	  PS2.RX=HC_PS2_RX[5]-128;
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <task2_joystick+0x234>)
 80020e4:	795b      	ldrb	r3, [r3, #5]
 80020e6:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 80020ea:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <task2_joystick+0x240>)
 80020ec:	60da      	str	r2, [r3, #12]
	  PS2.X=PS2.LX/(float)128;
 80020ee:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <task2_joystick+0x240>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80022d4 <task2_joystick+0x244>
 80020fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002102:	ee16 0a90 	vmov	r0, s13
 8002106:	f7fe f9ef 	bl	80004e8 <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4970      	ldr	r1, [pc, #448]	; (80022d0 <task2_joystick+0x240>)
 8002110:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  PS2.Y=PS2.LY/(float)128;
 8002114:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <task2_joystick+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80022d4 <task2_joystick+0x244>
 8002124:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002128:	ee16 0a90 	vmov	r0, s13
 800212c:	f7fe f9dc 	bl	80004e8 <__aeabi_f2d>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4966      	ldr	r1, [pc, #408]	; (80022d0 <task2_joystick+0x240>)
 8002136:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <task2_joystick+0x240>)
 800213c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002140:	4b63      	ldr	r3, [pc, #396]	; (80022d0 <task2_joystick+0x240>)
 8002142:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002146:	f7fe fa27 	bl	8000598 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4614      	mov	r4, r2
 8002150:	461d      	mov	r5, r3
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <task2_joystick+0x240>)
 8002154:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <task2_joystick+0x240>)
 800215a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800215e:	f7fe fa1b 	bl	8000598 <__aeabi_dmul>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4620      	mov	r0, r4
 8002168:	4629      	mov	r1, r5
 800216a:	f7fe f85f 	bl	800022c <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	ec43 2b17 	vmov	d7, r2, r3
 8002176:	eeb0 0a47 	vmov.f32	s0, s14
 800217a:	eef0 0a67 	vmov.f32	s1, s15
 800217e:	f00a ff0d 	bl	800cf9c <sqrt>
 8002182:	eeb0 7a40 	vmov.f32	s14, s0
 8002186:	eef0 7a60 	vmov.f32	s15, s1
 800218a:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <task2_joystick+0x248>)
 800218c:	ed83 7b00 	vstr	d7, [r3]
	  degree_a=atan2(PS2.Y,PS2.X);
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <task2_joystick+0x240>)
 8002192:	ed93 7b06 	vldr	d7, [r3, #24]
 8002196:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <task2_joystick+0x240>)
 8002198:	ed93 6b04 	vldr	d6, [r3, #16]
 800219c:	eeb0 1a46 	vmov.f32	s2, s12
 80021a0:	eef0 1a66 	vmov.f32	s3, s13
 80021a4:	eeb0 0a47 	vmov.f32	s0, s14
 80021a8:	eef0 0a67 	vmov.f32	s1, s15
 80021ac:	f00a fe2e 	bl	800ce0c <atan2>
 80021b0:	eeb0 7a40 	vmov.f32	s14, s0
 80021b4:	eef0 7a60 	vmov.f32	s15, s1
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <task2_joystick+0x24c>)
 80021ba:	ed83 7b00 	vstr	d7, [r3]
	  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <task2_joystick+0x24c>)
 80021c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021c4:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <task2_joystick+0x250>)
 80021c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <task2_joystick+0x254>)
 80021d0:	f7fe fb0c 	bl	80007ec <__aeabi_ddiv>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fe f824 	bl	8000228 <__aeabi_dsub>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	ec43 2b17 	vmov	d7, r2, r3
 80021e8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ec:	eef0 0a67 	vmov.f32	s1, s15
 80021f0:	f00b f902 	bl	800d3f8 <sin>
 80021f4:	ec51 0b10 	vmov	r0, r1, d0
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <task2_joystick+0x248>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f7fe f9cb 	bl	8000598 <__aeabi_dmul>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <task2_joystick+0x258>)
 8002210:	f7fe f9c2 	bl	8000598 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <task2_joystick+0x25c>)
 800221e:	e9c3 0100 	strd	r0, r1, [r3]
	  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <task2_joystick+0x24c>)
 8002224:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002228:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <task2_joystick+0x250>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <task2_joystick+0x254>)
 8002234:	f7fe fada 	bl	80007ec <__aeabi_ddiv>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4620      	mov	r0, r4
 800223e:	4629      	mov	r1, r5
 8002240:	f7fd fff2 	bl	8000228 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	ec43 2b17 	vmov	d7, r2, r3
 800224c:	eeb0 0a47 	vmov.f32	s0, s14
 8002250:	eef0 0a67 	vmov.f32	s1, s15
 8002254:	f00b f870 	bl	800d338 <cos>
 8002258:	ec51 0b10 	vmov	r0, r1, d0
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <task2_joystick+0x248>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f999 	bl	8000598 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <task2_joystick+0x258>)
 8002274:	f7fe f990 	bl	8000598 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <task2_joystick+0x260>)
 8002282:	e9c3 0100 	strd	r0, r1, [r3]
	  if(HC_PS2_RX[4]==251){
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <task2_joystick+0x234>)
 8002288:	791b      	ldrb	r3, [r3, #4]
 800228a:	2bfb      	cmp	r3, #251	; 0xfb
 800228c:	d103      	bne.n	8002296 <task2_joystick+0x206>
		  BLDC = 1;
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <task2_joystick+0x264>)
 8002290:	2301      	movs	r3, #1
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e03e      	b.n	8002314 <task2_joystick+0x284>
	  }else if(HC_PS2_RX[4]==254){
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <task2_joystick+0x234>)
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	2bfe      	cmp	r3, #254	; 0xfe
 800229c:	d103      	bne.n	80022a6 <task2_joystick+0x216>
		  BLDC = 2;
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <task2_joystick+0x264>)
 80022a0:	2302      	movs	r3, #2
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e036      	b.n	8002314 <task2_joystick+0x284>
	  }else if(HC_PS2_RX[4]==247){
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <task2_joystick+0x234>)
 80022a8:	791b      	ldrb	r3, [r3, #4]
 80022aa:	2bf7      	cmp	r3, #247	; 0xf7
 80022ac:	d128      	bne.n	8002300 <task2_joystick+0x270>
		  yellow=1;
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <task2_joystick+0x268>)
 80022b0:	2301      	movs	r3, #1
 80022b2:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 1800;
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <task2_joystick+0x26c>)
 80022b6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e02a      	b.n	8002314 <task2_joystick+0x284>
 80022be:	bf00      	nop
 80022c0:	40020400 	.word	0x40020400
 80022c4:	20000704 	.word	0x20000704
 80022c8:	20000008 	.word	0x20000008
 80022cc:	20000320 	.word	0x20000320
 80022d0:	200007f0 	.word	0x200007f0
 80022d4:	43000000 	.word	0x43000000
 80022d8:	200006d0 	.word	0x200006d0
 80022dc:	200006d8 	.word	0x200006d8
 80022e0:	20000000 	.word	0x20000000
 80022e4:	40100000 	.word	0x40100000
 80022e8:	40d00000 	.word	0x40d00000
 80022ec:	200006c0 	.word	0x200006c0
 80022f0:	200006c8 	.word	0x200006c8
 80022f4:	20000700 	.word	0x20000700
 80022f8:	200006f8 	.word	0x200006f8
 80022fc:	200007dc 	.word	0x200007dc
	  }else if(HC_PS2_RX[4]==253){
 8002300:	4b9d      	ldr	r3, [pc, #628]	; (8002578 <task2_joystick+0x4e8>)
 8002302:	791b      	ldrb	r3, [r3, #4]
 8002304:	2bfd      	cmp	r3, #253	; 0xfd
 8002306:	d105      	bne.n	8002314 <task2_joystick+0x284>
		  yellow=2;
 8002308:	4a9c      	ldr	r2, [pc, #624]	; (800257c <task2_joystick+0x4ec>)
 800230a:	2302      	movs	r3, #2
 800230c:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 0;
 800230e:	4a9c      	ldr	r2, [pc, #624]	; (8002580 <task2_joystick+0x4f0>)
 8002310:	2300      	movs	r3, #0
 8002312:	6013      	str	r3, [r2, #0]
	  }
	  if((abs(PS2.LY) > 5 || abs(PS2.LX)>5 )&& abs(PS2.RX)<=5){
 8002314:	4b9b      	ldr	r3, [pc, #620]	; (8002584 <task2_joystick+0x4f4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	bfb8      	it	lt
 800231c:	425b      	neglt	r3, r3
 800231e:	2b05      	cmp	r3, #5
 8002320:	dc07      	bgt.n	8002332 <task2_joystick+0x2a2>
 8002322:	4b98      	ldr	r3, [pc, #608]	; (8002584 <task2_joystick+0x4f4>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	bfb8      	it	lt
 800232a:	425b      	neglt	r3, r3
 800232c:	2b05      	cmp	r3, #5
 800232e:	f340 81f2 	ble.w	8002716 <task2_joystick+0x686>
 8002332:	4b94      	ldr	r3, [pc, #592]	; (8002584 <task2_joystick+0x4f4>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f113 0f05 	cmn.w	r3, #5
 800233a:	f2c0 81ec 	blt.w	8002716 <task2_joystick+0x686>
 800233e:	4b91      	ldr	r3, [pc, #580]	; (8002584 <task2_joystick+0x4f4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2b05      	cmp	r3, #5
 8002344:	f300 81e7 	bgt.w	8002716 <task2_joystick+0x686>
		  if(ML>12000 || MR>12000){
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <task2_joystick+0x4f8>)
 800234a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234e:	a386      	add	r3, pc, #536	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fbb0 	bl	8000ab8 <__aeabi_dcmpgt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <task2_joystick+0x2e4>
 800235e:	4b8b      	ldr	r3, [pc, #556]	; (800258c <task2_joystick+0x4fc>)
 8002360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002364:	a380      	add	r3, pc, #512	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fe fba5 	bl	8000ab8 <__aeabi_dcmpgt>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d048      	beq.n	8002406 <task2_joystick+0x376>
			  if(ML > MR){
 8002374:	4b84      	ldr	r3, [pc, #528]	; (8002588 <task2_joystick+0x4f8>)
 8002376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237a:	4b84      	ldr	r3, [pc, #528]	; (800258c <task2_joystick+0x4fc>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	f7fe fb9a 	bl	8000ab8 <__aeabi_dcmpgt>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01e      	beq.n	80023c8 <task2_joystick+0x338>
				  MR=MR/ML*12000;
 800238a:	4b80      	ldr	r3, [pc, #512]	; (800258c <task2_joystick+0x4fc>)
 800238c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002390:	4b7d      	ldr	r3, [pc, #500]	; (8002588 <task2_joystick+0x4f8>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fe fa29 	bl	80007ec <__aeabi_ddiv>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	a371      	add	r3, pc, #452	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fe f8f6 	bl	8000598 <__aeabi_dmul>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	4b75      	ldr	r3, [pc, #468]	; (800258c <task2_joystick+0x4fc>)
 80023b6:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 80023ba:	4973      	ldr	r1, [pc, #460]	; (8002588 <task2_joystick+0x4f8>)
 80023bc:	a36a      	add	r3, pc, #424	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 80023c6:	e171      	b.n	80026ac <task2_joystick+0x61c>

			  }
			  else{
				  ML=(ML/MR)*12000;
 80023c8:	4b6f      	ldr	r3, [pc, #444]	; (8002588 <task2_joystick+0x4f8>)
 80023ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ce:	4b6f      	ldr	r3, [pc, #444]	; (800258c <task2_joystick+0x4fc>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe fa0a 	bl	80007ec <__aeabi_ddiv>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	a361      	add	r3, pc, #388	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	4b65      	ldr	r3, [pc, #404]	; (8002588 <task2_joystick+0x4f8>)
 80023f4:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 80023f8:	4964      	ldr	r1, [pc, #400]	; (800258c <task2_joystick+0x4fc>)
 80023fa:	a35b      	add	r3, pc, #364	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002404:	e152      	b.n	80026ac <task2_joystick+0x61c>
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <task2_joystick+0x4f8>)
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	a358      	add	r3, pc, #352	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe fb33 	bl	8000a7c <__aeabi_dcmplt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <task2_joystick+0x3a2>
 800241c:	4b5b      	ldr	r3, [pc, #364]	; (800258c <task2_joystick+0x4fc>)
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	a353      	add	r3, pc, #332	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe fb28 	bl	8000a7c <__aeabi_dcmplt>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d054      	beq.n	80024dc <task2_joystick+0x44c>
			  if(ML < MR){
 8002432:	4b55      	ldr	r3, [pc, #340]	; (8002588 <task2_joystick+0x4f8>)
 8002434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <task2_joystick+0x4fc>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f7fe fb1d 	bl	8000a7c <__aeabi_dcmplt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d024      	beq.n	8002492 <task2_joystick+0x402>
				  MR=-MR/ML*12000;
 8002448:	4b50      	ldr	r3, [pc, #320]	; (800258c <task2_joystick+0x4fc>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002450:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002454:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002456:	4b4c      	ldr	r3, [pc, #304]	; (8002588 <task2_joystick+0x4f8>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002460:	f7fe f9c4 	bl	80007ec <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4610      	mov	r0, r2
 800246a:	4619      	mov	r1, r3
 800246c:	a33e      	add	r3, pc, #248	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fe f891 	bl	8000598 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <task2_joystick+0x4fc>)
 8002480:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002484:	4940      	ldr	r1, [pc, #256]	; (8002588 <task2_joystick+0x4f8>)
 8002486:	a33a      	add	r3, pc, #232	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002490:	e10c      	b.n	80026ac <task2_joystick+0x61c>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002492:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <task2_joystick+0x4f8>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	663a      	str	r2, [r7, #96]	; 0x60
 800249a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800249e:	667b      	str	r3, [r7, #100]	; 0x64
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <task2_joystick+0x4fc>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024aa:	f7fe f99f 	bl	80007ec <__aeabi_ddiv>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	a32c      	add	r3, pc, #176	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f86c 	bl	8000598 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	4b2f      	ldr	r3, [pc, #188]	; (8002588 <task2_joystick+0x4f8>)
 80024ca:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 80024ce:	492f      	ldr	r1, [pc, #188]	; (800258c <task2_joystick+0x4fc>)
 80024d0:	a327      	add	r3, pc, #156	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 80024da:	e0e7      	b.n	80026ac <task2_joystick+0x61c>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 80024dc:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <task2_joystick+0x4f8>)
 80024de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e2:	a321      	add	r3, pc, #132	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	f7fe fae6 	bl	8000ab8 <__aeabi_dcmpgt>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <task2_joystick+0x478>
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <task2_joystick+0x4fc>)
 80024f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f8:	a31d      	add	r3, pc, #116	; (adr r3, 8002570 <task2_joystick+0x4e0>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe fabd 	bl	8000a7c <__aeabi_dcmplt>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d068      	beq.n	80025da <task2_joystick+0x54a>
			  if(ML > -MR){
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <task2_joystick+0x4fc>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	4690      	mov	r8, r2
 8002510:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <task2_joystick+0x4f8>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	4640      	mov	r0, r8
 800251c:	4649      	mov	r1, r9
 800251e:	f7fe faad 	bl	8000a7c <__aeabi_dcmplt>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d033      	beq.n	8002590 <task2_joystick+0x500>
				  MR=MR/ML*12000;
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <task2_joystick+0x4fc>)
 800252a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <task2_joystick+0x4f8>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f95a 	bl	80007ec <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a309      	add	r3, pc, #36	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f827 	bl	8000598 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <task2_joystick+0x4fc>)
 8002554:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002558:	490b      	ldr	r1, [pc, #44]	; (8002588 <task2_joystick+0x4f8>)
 800255a:	a303      	add	r3, pc, #12	; (adr r3, 8002568 <task2_joystick+0x4d8>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002564:	e0a2      	b.n	80026ac <task2_joystick+0x61c>
 8002566:	bf00      	nop
 8002568:	00000000 	.word	0x00000000
 800256c:	40c77000 	.word	0x40c77000
 8002570:	00000000 	.word	0x00000000
 8002574:	c0c77000 	.word	0xc0c77000
 8002578:	20000704 	.word	0x20000704
 800257c:	200006f8 	.word	0x200006f8
 8002580:	200007dc 	.word	0x200007dc
 8002584:	200007f0 	.word	0x200007f0
 8002588:	200006c0 	.word	0x200006c0
 800258c:	200006c8 	.word	0x200006c8

			  }
			  else{
				  ML=-ML/MR*12000;
 8002590:	4b93      	ldr	r3, [pc, #588]	; (80027e0 <task2_joystick+0x750>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	65ba      	str	r2, [r7, #88]	; 0x58
 8002598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800259c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800259e:	4b91      	ldr	r3, [pc, #580]	; (80027e4 <task2_joystick+0x754>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025a8:	f7fe f920 	bl	80007ec <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	a386      	add	r3, pc, #536	; (adr r3, 80027d0 <task2_joystick+0x740>)
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f7fd ffed 	bl	8000598 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	4b86      	ldr	r3, [pc, #536]	; (80027e0 <task2_joystick+0x750>)
 80025c8:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 80025cc:	4985      	ldr	r1, [pc, #532]	; (80027e4 <task2_joystick+0x754>)
 80025ce:	a382      	add	r3, pc, #520	; (adr r3, 80027d8 <task2_joystick+0x748>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 80025d8:	e068      	b.n	80026ac <task2_joystick+0x61c>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 80025da:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <task2_joystick+0x754>)
 80025dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e0:	a37b      	add	r3, pc, #492	; (adr r3, 80027d0 <task2_joystick+0x740>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe fa67 	bl	8000ab8 <__aeabi_dcmpgt>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <task2_joystick+0x576>
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <task2_joystick+0x750>)
 80025f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f6:	a378      	add	r3, pc, #480	; (adr r3, 80027d8 <task2_joystick+0x748>)
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	f7fe fa3e 	bl	8000a7c <__aeabi_dcmplt>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d052      	beq.n	80026ac <task2_joystick+0x61c>
			  if(MR > -ML){
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <task2_joystick+0x750>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	4692      	mov	sl, r2
 800260e:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002612:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <task2_joystick+0x754>)
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	4650      	mov	r0, sl
 800261a:	4659      	mov	r1, fp
 800261c:	f7fe fa2e 	bl	8000a7c <__aeabi_dcmplt>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01e      	beq.n	8002664 <task2_joystick+0x5d4>
				  ML=ML/MR*12000;
 8002626:	4b6e      	ldr	r3, [pc, #440]	; (80027e0 <task2_joystick+0x750>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	4b6d      	ldr	r3, [pc, #436]	; (80027e4 <task2_joystick+0x754>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fe f8db 	bl	80007ec <__aeabi_ddiv>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	a364      	add	r3, pc, #400	; (adr r3, 80027d0 <task2_joystick+0x740>)
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f7fd ffa8 	bl	8000598 <__aeabi_dmul>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <task2_joystick+0x750>)
 8002652:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002656:	4963      	ldr	r1, [pc, #396]	; (80027e4 <task2_joystick+0x754>)
 8002658:	a35d      	add	r3, pc, #372	; (adr r3, 80027d0 <task2_joystick+0x740>)
 800265a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
 8002662:	e023      	b.n	80026ac <task2_joystick+0x61c>

			  }
			  else{
				  MR=-MR/ML*12000;
 8002664:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <task2_joystick+0x754>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	653a      	str	r2, [r7, #80]	; 0x50
 800266c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002670:	657b      	str	r3, [r7, #84]	; 0x54
 8002672:	4b5b      	ldr	r3, [pc, #364]	; (80027e0 <task2_joystick+0x750>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800267c:	f7fe f8b6 	bl	80007ec <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	a351      	add	r3, pc, #324	; (adr r3, 80027d0 <task2_joystick+0x740>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fd ff83 	bl	8000598 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <task2_joystick+0x754>)
 800269c:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 80026a0:	494f      	ldr	r1, [pc, #316]	; (80027e0 <task2_joystick+0x750>)
 80026a2:	a34d      	add	r3, pc, #308	; (adr r3, 80027d8 <task2_joystick+0x748>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 80026ac:	4b4d      	ldr	r3, [pc, #308]	; (80027e4 <task2_joystick+0x754>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80026b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026be:	f7fe fa1b 	bl	8000af8 <__aeabi_d2iz>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <task2_joystick+0x758>)
 80026c8:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 80026ca:	4b45      	ldr	r3, [pc, #276]	; (80027e0 <task2_joystick+0x750>)
 80026cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa10 	bl	8000af8 <__aeabi_d2iz>
 80026d8:	4603      	mov	r3, r0
 80026da:	b21b      	sxth	r3, r3
 80026dc:	4a43      	ldr	r2, [pc, #268]	; (80027ec <task2_joystick+0x75c>)
 80026de:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 80026e0:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <task2_joystick+0x750>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	643a      	str	r2, [r7, #64]	; 0x40
 80026e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
 80026ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80026f2:	f7fe fa01 	bl	8000af8 <__aeabi_d2iz>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4a3d      	ldr	r2, [pc, #244]	; (80027f0 <task2_joystick+0x760>)
 80026fc:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 80026fe:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <task2_joystick+0x754>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe f9f6 	bl	8000af8 <__aeabi_d2iz>
 800270c:	4603      	mov	r3, r0
 800270e:	b21b      	sxth	r3, r3
 8002710:	4a38      	ldr	r2, [pc, #224]	; (80027f4 <task2_joystick+0x764>)
 8002712:	8013      	strh	r3, [r2, #0]
 8002714:	e3a9      	b.n	8002e6a <task2_joystick+0xdda>
	  }
	  else if(abs(PS2.LY)<=5 && abs(PS2.LX)<=5 && abs(PS2.RX)>5){
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <task2_joystick+0x768>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f113 0f05 	cmn.w	r3, #5
 800271e:	db6f      	blt.n	8002800 <task2_joystick+0x770>
 8002720:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <task2_joystick+0x768>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b05      	cmp	r3, #5
 8002726:	dc6b      	bgt.n	8002800 <task2_joystick+0x770>
 8002728:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <task2_joystick+0x768>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f113 0f05 	cmn.w	r3, #5
 8002730:	db66      	blt.n	8002800 <task2_joystick+0x770>
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <task2_joystick+0x768>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b05      	cmp	r3, #5
 8002738:	dc62      	bgt.n	8002800 <task2_joystick+0x770>
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <task2_joystick+0x768>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	bfb8      	it	lt
 8002742:	425b      	neglt	r3, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	dd5b      	ble.n	8002800 <task2_joystick+0x770>
		  M1.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <task2_joystick+0x768>)
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	049b      	lsls	r3, r3, #18
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	039b      	lsls	r3, r3, #14
 8002754:	4619      	mov	r1, r3
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <task2_joystick+0x76c>)
 8002758:	fb83 2301 	smull	r2, r3, r3, r1
 800275c:	115a      	asrs	r2, r3, #5
 800275e:	17cb      	asrs	r3, r1, #31
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	b21b      	sxth	r3, r3
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <task2_joystick+0x758>)
 8002766:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <task2_joystick+0x768>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	4613      	mov	r3, r2
 800276e:	049b      	lsls	r3, r3, #18
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	039b      	lsls	r3, r3, #14
 8002774:	4619      	mov	r1, r3
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <task2_joystick+0x76c>)
 8002778:	fb83 2301 	smull	r2, r3, r3, r1
 800277c:	115a      	asrs	r2, r3, #5
 800277e:	17cb      	asrs	r3, r1, #31
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b21b      	sxth	r3, r3
 8002784:	4a19      	ldr	r2, [pc, #100]	; (80027ec <task2_joystick+0x75c>)
 8002786:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <task2_joystick+0x768>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	049b      	lsls	r3, r3, #18
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	039b      	lsls	r3, r3, #14
 8002794:	4619      	mov	r1, r3
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <task2_joystick+0x76c>)
 8002798:	fb83 2301 	smull	r2, r3, r3, r1
 800279c:	115a      	asrs	r2, r3, #5
 800279e:	17cb      	asrs	r3, r1, #31
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <task2_joystick+0x764>)
 80027a6:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <task2_joystick+0x768>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	049b      	lsls	r3, r3, #18
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	039b      	lsls	r3, r3, #14
 80027b4:	4619      	mov	r1, r3
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <task2_joystick+0x76c>)
 80027b8:	fb83 2301 	smull	r2, r3, r3, r1
 80027bc:	115a      	asrs	r2, r3, #5
 80027be:	17cb      	asrs	r3, r1, #31
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <task2_joystick+0x760>)
 80027c6:	8013      	strh	r3, [r2, #0]
 80027c8:	e34f      	b.n	8002e6a <task2_joystick+0xdda>
 80027ca:	bf00      	nop
 80027cc:	f3af 8000 	nop.w
 80027d0:	00000000 	.word	0x00000000
 80027d4:	40c77000 	.word	0x40c77000
 80027d8:	00000000 	.word	0x00000000
 80027dc:	c0c77000 	.word	0xc0c77000
 80027e0:	200006c0 	.word	0x200006c0
 80027e4:	200006c8 	.word	0x200006c8
 80027e8:	200007bc 	.word	0x200007bc
 80027ec:	200007c4 	.word	0x200007c4
 80027f0:	200007d4 	.word	0x200007d4
 80027f4:	200007cc 	.word	0x200007cc
 80027f8:	200007f0 	.word	0x200007f0
 80027fc:	10624dd3 	.word	0x10624dd3
	  }
	  else if((abs(PS2.LY)>5 || abs(PS2.LX)>5) && abs(PS2.RX)>5){
 8002800:	4ba3      	ldr	r3, [pc, #652]	; (8002a90 <task2_joystick+0xa00>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	bfb8      	it	lt
 8002808:	425b      	neglt	r3, r3
 800280a:	2b05      	cmp	r3, #5
 800280c:	dc07      	bgt.n	800281e <task2_joystick+0x78e>
 800280e:	4ba0      	ldr	r3, [pc, #640]	; (8002a90 <task2_joystick+0xa00>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	bfb8      	it	lt
 8002816:	425b      	neglt	r3, r3
 8002818:	2b05      	cmp	r3, #5
 800281a:	f340 831a 	ble.w	8002e52 <task2_joystick+0xdc2>
 800281e:	4b9c      	ldr	r3, [pc, #624]	; (8002a90 <task2_joystick+0xa00>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	bfb8      	it	lt
 8002826:	425b      	neglt	r3, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	f340 8312 	ble.w	8002e52 <task2_joystick+0xdc2>
		  PS2.X=PS2.LX/(float)128;
 800282e:	4b98      	ldr	r3, [pc, #608]	; (8002a90 <task2_joystick+0xa00>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002a94 <task2_joystick+0xa04>
 800283e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002842:	ee16 0a90 	vmov	r0, s13
 8002846:	f7fd fe4f 	bl	80004e8 <__aeabi_f2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4990      	ldr	r1, [pc, #576]	; (8002a90 <task2_joystick+0xa00>)
 8002850:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PS2.Y=PS2.LY/(float)128;
 8002854:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <task2_joystick+0xa00>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002860:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002a94 <task2_joystick+0xa04>
 8002864:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002868:	ee16 0a90 	vmov	r0, s13
 800286c:	f7fd fe3c 	bl	80004e8 <__aeabi_f2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4986      	ldr	r1, [pc, #536]	; (8002a90 <task2_joystick+0xa00>)
 8002876:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <task2_joystick+0xa00>)
 800287c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <task2_joystick+0xa00>)
 8002882:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002886:	f7fd fe87 	bl	8000598 <__aeabi_dmul>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4614      	mov	r4, r2
 8002890:	461d      	mov	r5, r3
 8002892:	4b7f      	ldr	r3, [pc, #508]	; (8002a90 <task2_joystick+0xa00>)
 8002894:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002898:	4b7d      	ldr	r3, [pc, #500]	; (8002a90 <task2_joystick+0xa00>)
 800289a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800289e:	f7fd fe7b 	bl	8000598 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4620      	mov	r0, r4
 80028a8:	4629      	mov	r1, r5
 80028aa:	f7fd fcbf 	bl	800022c <__adddf3>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	ec43 2b17 	vmov	d7, r2, r3
 80028b6:	eeb0 0a47 	vmov.f32	s0, s14
 80028ba:	eef0 0a67 	vmov.f32	s1, s15
 80028be:	f00a fb6d 	bl	800cf9c <sqrt>
 80028c2:	eeb0 7a40 	vmov.f32	s14, s0
 80028c6:	eef0 7a60 	vmov.f32	s15, s1
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <task2_joystick+0xa08>)
 80028cc:	ed83 7b00 	vstr	d7, [r3]
//				  speed=1;
//			  }
//			  if(speed<=-1){
//				  speed=-1;
//			  }
		  degree_a=atan2(PS2.Y,PS2.X);
 80028d0:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <task2_joystick+0xa00>)
 80028d2:	ed93 7b06 	vldr	d7, [r3, #24]
 80028d6:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <task2_joystick+0xa00>)
 80028d8:	ed93 6b04 	vldr	d6, [r3, #16]
 80028dc:	eeb0 1a46 	vmov.f32	s2, s12
 80028e0:	eef0 1a66 	vmov.f32	s3, s13
 80028e4:	eeb0 0a47 	vmov.f32	s0, s14
 80028e8:	eef0 0a67 	vmov.f32	s1, s15
 80028ec:	f00a fa8e 	bl	800ce0c <atan2>
 80028f0:	eeb0 7a40 	vmov.f32	s14, s0
 80028f4:	eef0 7a60 	vmov.f32	s15, s1
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <task2_joystick+0xa0c>)
 80028fa:	ed83 7b00 	vstr	d7, [r3]
		  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <task2_joystick+0xa0c>)
 8002900:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002904:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <task2_joystick+0xa10>)
 8002906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <task2_joystick+0xa14>)
 8002910:	f7fd ff6c 	bl	80007ec <__aeabi_ddiv>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fc84 	bl	8000228 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	ec43 2b17 	vmov	d7, r2, r3
 8002928:	eeb0 0a47 	vmov.f32	s0, s14
 800292c:	eef0 0a67 	vmov.f32	s1, s15
 8002930:	f00a fd62 	bl	800d3f8 <sin>
 8002934:	ec51 0b10 	vmov	r0, r1, d0
 8002938:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <task2_joystick+0xa08>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fe2b 	bl	8000598 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <task2_joystick+0xa18>)
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_dmul>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	4b53      	ldr	r3, [pc, #332]	; (8002aac <task2_joystick+0xa1c>)
 800295e:	e9c3 0100 	strd	r0, r1, [r3]
		  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002962:	4b4e      	ldr	r3, [pc, #312]	; (8002a9c <task2_joystick+0xa0c>)
 8002964:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002968:	4b4d      	ldr	r3, [pc, #308]	; (8002aa0 <task2_joystick+0xa10>)
 800296a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <task2_joystick+0xa14>)
 8002974:	f7fd ff3a 	bl	80007ec <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4620      	mov	r0, r4
 800297e:	4629      	mov	r1, r5
 8002980:	f7fd fc52 	bl	8000228 <__aeabi_dsub>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	ec43 2b17 	vmov	d7, r2, r3
 800298c:	eeb0 0a47 	vmov.f32	s0, s14
 8002990:	eef0 0a67 	vmov.f32	s1, s15
 8002994:	f00a fcd0 	bl	800d338 <cos>
 8002998:	ec51 0b10 	vmov	r0, r1, d0
 800299c:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <task2_joystick+0xa08>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fdf9 	bl	8000598 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <task2_joystick+0xa18>)
 80029b4:	f7fd fdf0 	bl	8000598 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <task2_joystick+0xa20>)
 80029c2:	e9c3 0100 	strd	r0, r1, [r3]
		  if(ML>12000 || MR>12000){
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <task2_joystick+0xa1c>)
 80029c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029cc:	a32e      	add	r3, pc, #184	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fe f871 	bl	8000ab8 <__aeabi_dcmpgt>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10a      	bne.n	80029f2 <task2_joystick+0x962>
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <task2_joystick+0xa20>)
 80029de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e2:	a329      	add	r3, pc, #164	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fe f866 	bl	8000ab8 <__aeabi_dcmpgt>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d060      	beq.n	8002ab4 <task2_joystick+0xa24>
			  if(ML > MR){
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <task2_joystick+0xa1c>)
 80029f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029f8:	4b2d      	ldr	r3, [pc, #180]	; (8002ab0 <task2_joystick+0xa20>)
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f7fe f85b 	bl	8000ab8 <__aeabi_dcmpgt>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01e      	beq.n	8002a46 <task2_joystick+0x9b6>
				  MR=MR/ML*12000;
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <task2_joystick+0xa20>)
 8002a0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <task2_joystick+0xa1c>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd feea 	bl	80007ec <__aeabi_ddiv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	a319      	add	r3, pc, #100	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fdb7 	bl	8000598 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <task2_joystick+0xa20>)
 8002a34:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002a38:	491c      	ldr	r1, [pc, #112]	; (8002aac <task2_joystick+0xa1c>)
 8002a3a:	a313      	add	r3, pc, #76	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002a44:	e184      	b.n	8002d50 <task2_joystick+0xcc0>

			  }
			  else{
				  ML=ML/MR*12000;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <task2_joystick+0xa1c>)
 8002a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <task2_joystick+0xa20>)
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f7fd fecb 	bl	80007ec <__aeabi_ddiv>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	a30a      	add	r3, pc, #40	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fd fd98 	bl	8000598 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <task2_joystick+0xa1c>)
 8002a72:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <task2_joystick+0xa20>)
 8002a78:	a303      	add	r3, pc, #12	; (adr r3, 8002a88 <task2_joystick+0x9f8>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002a82:	e165      	b.n	8002d50 <task2_joystick+0xcc0>
 8002a84:	f3af 8000 	nop.w
 8002a88:	00000000 	.word	0x00000000
 8002a8c:	40c77000 	.word	0x40c77000
 8002a90:	200007f0 	.word	0x200007f0
 8002a94:	43000000 	.word	0x43000000
 8002a98:	200006d0 	.word	0x200006d0
 8002a9c:	200006d8 	.word	0x200006d8
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	40100000 	.word	0x40100000
 8002aa8:	40d00000 	.word	0x40d00000
 8002aac:	200006c0 	.word	0x200006c0
 8002ab0:	200006c8 	.word	0x200006c8
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <task2_joystick+0xc70>)
 8002ab6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aba:	a38d      	add	r3, pc, #564	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd ffdc 	bl	8000a7c <__aeabi_dcmplt>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <task2_joystick+0xa50>
 8002aca:	4b8e      	ldr	r3, [pc, #568]	; (8002d04 <task2_joystick+0xc74>)
 8002acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad0:	a387      	add	r3, pc, #540	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd ffd1 	bl	8000a7c <__aeabi_dcmplt>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d054      	beq.n	8002b8a <task2_joystick+0xafa>
			  if(ML < MR){
 8002ae0:	4b87      	ldr	r3, [pc, #540]	; (8002d00 <task2_joystick+0xc70>)
 8002ae2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ae6:	4b87      	ldr	r3, [pc, #540]	; (8002d04 <task2_joystick+0xc74>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd ffc6 	bl	8000a7c <__aeabi_dcmplt>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d024      	beq.n	8002b40 <task2_joystick+0xab0>
				  MR=-MR/ML*12000;
 8002af6:	4b83      	ldr	r3, [pc, #524]	; (8002d04 <task2_joystick+0xc74>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002afe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b04:	4b7e      	ldr	r3, [pc, #504]	; (8002d00 <task2_joystick+0xc70>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b0e:	f7fd fe6d 	bl	80007ec <__aeabi_ddiv>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	a377      	add	r3, pc, #476	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fd3a 	bl	8000598 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <task2_joystick+0xc74>)
 8002b2e:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002b32:	4973      	ldr	r1, [pc, #460]	; (8002d00 <task2_joystick+0xc70>)
 8002b34:	a36e      	add	r3, pc, #440	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002b3e:	e107      	b.n	8002d50 <task2_joystick+0xcc0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002b40:	4b6f      	ldr	r3, [pc, #444]	; (8002d00 <task2_joystick+0xc70>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	633a      	str	r2, [r7, #48]	; 0x30
 8002b48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b4e:	4b6d      	ldr	r3, [pc, #436]	; (8002d04 <task2_joystick+0xc74>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b58:	f7fd fe48 	bl	80007ec <__aeabi_ddiv>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	a364      	add	r3, pc, #400	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <task2_joystick+0xc70>)
 8002b78:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002b7c:	4961      	ldr	r1, [pc, #388]	; (8002d04 <task2_joystick+0xc74>)
 8002b7e:	a35c      	add	r3, pc, #368	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002b88:	e0e2      	b.n	8002d50 <task2_joystick+0xcc0>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	; (8002d00 <task2_joystick+0xc70>)
 8002b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b90:	a359      	add	r3, pc, #356	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd ff8f 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <task2_joystick+0xb26>
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <task2_joystick+0xc74>)
 8002ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba6:	a352      	add	r3, pc, #328	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f7fd ff66 	bl	8000a7c <__aeabi_dcmplt>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d054      	beq.n	8002c60 <task2_joystick+0xbd0>
			  if(ML > -MR){
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <task2_joystick+0xc74>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	; (8002d00 <task2_joystick+0xc70>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bce:	f7fd ff55 	bl	8000a7c <__aeabi_dcmplt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01e      	beq.n	8002c16 <task2_joystick+0xb86>
				  MR=MR/ML*12000;
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <task2_joystick+0xc74>)
 8002bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bde:	4b48      	ldr	r3, [pc, #288]	; (8002d00 <task2_joystick+0xc70>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd fe02 	bl	80007ec <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	a341      	add	r3, pc, #260	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fccf 	bl	8000598 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	4b40      	ldr	r3, [pc, #256]	; (8002d04 <task2_joystick+0xc74>)
 8002c04:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002c08:	493d      	ldr	r1, [pc, #244]	; (8002d00 <task2_joystick+0xc70>)
 8002c0a:	a33b      	add	r3, pc, #236	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002c14:	e09c      	b.n	8002d50 <task2_joystick+0xcc0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002c16:	4b3a      	ldr	r3, [pc, #232]	; (8002d00 <task2_joystick+0xc70>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	623a      	str	r2, [r7, #32]
 8002c1e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <task2_joystick+0xc74>)
 8002c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c2e:	f7fd fddd 	bl	80007ec <__aeabi_ddiv>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4610      	mov	r0, r2
 8002c38:	4619      	mov	r1, r3
 8002c3a:	a32f      	add	r3, pc, #188	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd fcaa 	bl	8000598 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <task2_joystick+0xc70>)
 8002c4e:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002c52:	492c      	ldr	r1, [pc, #176]	; (8002d04 <task2_joystick+0xc74>)
 8002c54:	a326      	add	r3, pc, #152	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002c5e:	e077      	b.n	8002d50 <task2_joystick+0xcc0>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <task2_joystick+0xc74>)
 8002c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c66:	a324      	add	r3, pc, #144	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd ff24 	bl	8000ab8 <__aeabi_dcmpgt>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <task2_joystick+0xbfc>
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <task2_joystick+0xc70>)
 8002c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7c:	a31c      	add	r3, pc, #112	; (adr r3, 8002cf0 <task2_joystick+0xc60>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fefb 	bl	8000a7c <__aeabi_dcmplt>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d061      	beq.n	8002d50 <task2_joystick+0xcc0>
			  if(MR > -ML){
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <task2_joystick+0xc70>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	61ba      	str	r2, [r7, #24]
 8002c94:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <task2_joystick+0xc74>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ca4:	f7fd feea 	bl	8000a7c <__aeabi_dcmplt>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d02c      	beq.n	8002d08 <task2_joystick+0xc78>
				  ML=ML/MR*12000;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <task2_joystick+0xc70>)
 8002cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <task2_joystick+0xc74>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fd97 	bl	80007ec <__aeabi_ddiv>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	a30c      	add	r3, pc, #48	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc64 	bl	8000598 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <task2_joystick+0xc70>)
 8002cda:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002cde:	4909      	ldr	r1, [pc, #36]	; (8002d04 <task2_joystick+0xc74>)
 8002ce0:	a305      	add	r3, pc, #20	; (adr r3, 8002cf8 <task2_joystick+0xc68>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
 8002cea:	e031      	b.n	8002d50 <task2_joystick+0xcc0>
 8002cec:	f3af 8000 	nop.w
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	c0c77000 	.word	0xc0c77000
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40c77000 	.word	0x40c77000
 8002d00:	200006c0 	.word	0x200006c0
 8002d04:	200006c8 	.word	0x200006c8

			  }
			  else{
				  MR=-MR/ML*12000;
 8002d08:	4b5f      	ldr	r3, [pc, #380]	; (8002e88 <task2_joystick+0xdf8>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	613a      	str	r2, [r7, #16]
 8002d10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <task2_joystick+0xdfc>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d20:	f7fd fd64 	bl	80007ec <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	a352      	add	r3, pc, #328	; (adr r3, 8002e78 <task2_joystick+0xde8>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fc31 	bl	8000598 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <task2_joystick+0xdf8>)
 8002d40:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002d44:	4951      	ldr	r1, [pc, #324]	; (8002e8c <task2_joystick+0xdfc>)
 8002d46:	a34e      	add	r3, pc, #312	; (adr r3, 8002e80 <task2_joystick+0xdf0>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 8002d50:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <task2_joystick+0xdf8>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	60ba      	str	r2, [r7, #8]
 8002d58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d62:	f7fd fec9 	bl	8000af8 <__aeabi_d2iz>
 8002d66:	4603      	mov	r3, r0
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4a49      	ldr	r2, [pc, #292]	; (8002e90 <task2_joystick+0xe00>)
 8002d6c:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <task2_joystick+0xdfc>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd febe 	bl	8000af8 <__aeabi_d2iz>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	b21b      	sxth	r3, r3
 8002d80:	4a44      	ldr	r2, [pc, #272]	; (8002e94 <task2_joystick+0xe04>)
 8002d82:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <task2_joystick+0xdfc>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	603a      	str	r2, [r7, #0]
 8002d8c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d96:	f7fd feaf 	bl	8000af8 <__aeabi_d2iz>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4a3e      	ldr	r2, [pc, #248]	; (8002e98 <task2_joystick+0xe08>)
 8002da0:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <task2_joystick+0xdf8>)
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fea4 	bl	8000af8 <__aeabi_d2iz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	4a39      	ldr	r2, [pc, #228]	; (8002e9c <task2_joystick+0xe0c>)
 8002db6:	8013      	strh	r3, [r2, #0]
		  M1.setpoint=M1.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <task2_joystick+0xe00>)
 8002dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <task2_joystick+0xe10>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0399      	lsls	r1, r3, #14
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <task2_joystick+0xe14>)
 8002dc8:	fb83 2301 	smull	r2, r3, r3, r1
 8002dcc:	121a      	asrs	r2, r3, #8
 8002dce:	17cb      	asrs	r3, r1, #31
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4403      	add	r3, r0
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <task2_joystick+0xe00>)
 8002ddc:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=M2.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <task2_joystick+0xe04>)
 8002de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de4:	b298      	uxth	r0, r3
 8002de6:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <task2_joystick+0xe10>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0399      	lsls	r1, r3, #14
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <task2_joystick+0xe14>)
 8002dee:	fb83 2301 	smull	r2, r3, r3, r1
 8002df2:	121a      	asrs	r2, r3, #8
 8002df4:	17cb      	asrs	r3, r1, #31
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4403      	add	r3, r0
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	b21b      	sxth	r3, r3
 8002e00:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <task2_joystick+0xe04>)
 8002e02:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=M3.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <task2_joystick+0xe0c>)
 8002e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e0a:	b298      	uxth	r0, r3
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <task2_joystick+0xe10>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0399      	lsls	r1, r3, #14
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <task2_joystick+0xe14>)
 8002e14:	fb83 2301 	smull	r2, r3, r3, r1
 8002e18:	121a      	asrs	r2, r3, #8
 8002e1a:	17cb      	asrs	r3, r1, #31
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4403      	add	r3, r0
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <task2_joystick+0xe0c>)
 8002e28:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=M4.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <task2_joystick+0xe08>)
 8002e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e30:	b298      	uxth	r0, r3
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <task2_joystick+0xe10>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	0399      	lsls	r1, r3, #14
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <task2_joystick+0xe14>)
 8002e3a:	fb83 2301 	smull	r2, r3, r3, r1
 8002e3e:	121a      	asrs	r2, r3, #8
 8002e40:	17cb      	asrs	r3, r1, #31
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4403      	add	r3, r0
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b21b      	sxth	r3, r3
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <task2_joystick+0xe08>)
 8002e4e:	8013      	strh	r3, [r2, #0]
 8002e50:	e00b      	b.n	8002e6a <task2_joystick+0xdda>
	  }
	  else{
		  M1.setpoint=0;
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <task2_joystick+0xe00>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=0;
 8002e58:	4a0e      	ldr	r2, [pc, #56]	; (8002e94 <task2_joystick+0xe04>)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=0;
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <task2_joystick+0xe0c>)
 8002e60:	2300      	movs	r3, #0
 8002e62:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=0;
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <task2_joystick+0xe08>)
 8002e66:	2300      	movs	r3, #0
 8002e68:	8013      	strh	r3, [r2, #0]
	  }
      osDelay(10);
 8002e6a:	200a      	movs	r0, #10
 8002e6c:	f008 fdeb 	bl	800ba46 <osDelay>
	  spi_enable;
 8002e70:	f7ff b913 	b.w	800209a <task2_joystick+0xa>
 8002e74:	f3af 8000 	nop.w
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	40c77000 	.word	0x40c77000
 8002e80:	00000000 	.word	0x00000000
 8002e84:	c0c77000 	.word	0xc0c77000
 8002e88:	200006c8 	.word	0x200006c8
 8002e8c:	200006c0 	.word	0x200006c0
 8002e90:	200007bc 	.word	0x200007bc
 8002e94:	200007c4 	.word	0x200007c4
 8002e98:	200007d4 	.word	0x200007d4
 8002e9c:	200007cc 	.word	0x200007cc
 8002ea0:	200007f0 	.word	0x200007f0
 8002ea4:	51eb851f 	.word	0x51eb851f

08002ea8 <DC_motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DC_motor */
void DC_motor(void const * argument)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DC_motor */
	DC_pid.error = 0;
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <DC_motor+0x10c>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2120      	movs	r1, #32
 8002eba:	483f      	ldr	r0, [pc, #252]	; (8002fb8 <DC_motor+0x110>)
 8002ebc:	f004 fe68 	bl	8007b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	483c      	ldr	r0, [pc, #240]	; (8002fb8 <DC_motor+0x110>)
 8002ec6:	f004 fe63 	bl	8007b90 <HAL_GPIO_WritePin>
	TIM4->CCR1=920;
 8002eca:	4b3c      	ldr	r3, [pc, #240]	; (8002fbc <DC_motor+0x114>)
 8002ecc:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=920;
 8002ed2:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <DC_motor+0x114>)
 8002ed4:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
//	TIM8 -> CCR1 = 99;
  /* Infinite loop */
  for(;;)
  {
		if(BLDC==1 || flag==1){
 8002eda:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <DC_motor+0x118>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d003      	beq.n	8002eea <DC_motor+0x42>
 8002ee2:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <DC_motor+0x11c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d131      	bne.n	8002f4e <DC_motor+0xa6>
			TIM4->CCR1 = 930;
 8002eea:	4b34      	ldr	r3, [pc, #208]	; (8002fbc <DC_motor+0x114>)
 8002eec:	f240 32a2 	movw	r2, #930	; 0x3a2
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 909;
 8002ef2:	4b32      	ldr	r3, [pc, #200]	; (8002fbc <DC_motor+0x114>)
 8002ef4:	f240 328d 	movw	r2, #909	; 0x38d
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
			flag = 1;
 8002efa:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <DC_motor+0x11c>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
			//HAL_Delay(500);
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8002f00:	bf00      	nop
 8002f02:	2108      	movs	r1, #8
 8002f04:	4830      	ldr	r0, [pc, #192]	; (8002fc8 <DC_motor+0x120>)
 8002f06:	f004 fe2b 	bl	8007b60 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d116      	bne.n	8002f3e <DC_motor+0x96>
				TIM4->CCR1 = 920;
 8002f10:	4b2a      	ldr	r3, [pc, #168]	; (8002fbc <DC_motor+0x114>)
 8002f12:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f16:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <DC_motor+0x114>)
 8002f1a:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
//				HAL_Delay(2000);
				flag = 0;
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <DC_motor+0x11c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
				BLDC = 0;
 8002f26:	4b26      	ldr	r3, [pc, #152]	; (8002fc0 <DC_motor+0x118>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
				blue = 1;
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <DC_motor+0x124>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 890;
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <DC_motor+0x128>)
 8002f34:	f240 327a 	movw	r2, #890	; 0x37a
 8002f38:	601a      	str	r2, [r3, #0]
				break;
 8002f3a:	bf00      	nop
		if(BLDC==1 || flag==1){
 8002f3c:	e036      	b.n	8002fac <DC_motor+0x104>
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8002f3e:	2110      	movs	r1, #16
 8002f40:	481d      	ldr	r0, [pc, #116]	; (8002fb8 <DC_motor+0x110>)
 8002f42:	f004 fe0d 	bl	8007b60 <HAL_GPIO_ReadPin>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0e1      	beq.n	8002f10 <DC_motor+0x68>
		if(BLDC==1 || flag==1){
 8002f4c:	e02e      	b.n	8002fac <DC_motor+0x104>
//					Motor.target_pos = 890;
//					break;
//				}
			}
		}
		else if(BLDC==2 && flag==0){
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <DC_motor+0x118>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d12a      	bne.n	8002fac <DC_motor+0x104>
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <DC_motor+0x11c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d126      	bne.n	8002fac <DC_motor+0x104>
			TIM4->CCR1 = 915;
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <DC_motor+0x114>)
 8002f60:	f240 3293 	movw	r2, #915	; 0x393
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 925;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <DC_motor+0x114>)
 8002f68:	f240 329d 	movw	r2, #925	; 0x39d
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
			//HAL_Delay(200);
			while((HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)) == 1){
 8002f6e:	bf00      	nop
 8002f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f74:	4817      	ldr	r0, [pc, #92]	; (8002fd4 <DC_motor+0x12c>)
 8002f76:	f004 fdf3 	bl	8007b60 <HAL_GPIO_ReadPin>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d115      	bne.n	8002fac <DC_motor+0x104>
				TIM4->CCR1 = 920;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <DC_motor+0x114>)
 8002f82:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f86:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <DC_motor+0x114>)
 8002f8a:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002f8e:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(2000);
 8002f90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f94:	f003 f8bc 	bl	8006110 <HAL_Delay>
				BLDC = 0;
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <DC_motor+0x118>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
				yellow=2;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <DC_motor+0x130>)
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 0;
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <DC_motor+0x128>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
				break;
 8002faa:	bf00      	nop
			}
		}
    osDelay(50);
 8002fac:	2032      	movs	r0, #50	; 0x32
 8002fae:	f008 fd4a 	bl	800ba46 <osDelay>
		if(BLDC==1 || flag==1){
 8002fb2:	e792      	b.n	8002eda <DC_motor+0x32>
 8002fb4:	200007a0 	.word	0x200007a0
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	20000700 	.word	0x20000700
 8002fc4:	200006fc 	.word	0x200006fc
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	200006f4 	.word	0x200006f4
 8002fd0:	200007dc 	.word	0x200007dc
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	200006f8 	.word	0x200006f8

08002fdc <Colorcheck>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Colorcheck */
void Colorcheck(void const * argument)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Colorcheck */
	Motor.my_pos = TIM5->CNT=0;
 8002fe4:	4b52      	ldr	r3, [pc, #328]	; (8003130 <Colorcheck+0x154>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fea:	4b52      	ldr	r3, [pc, #328]	; (8003134 <Colorcheck+0x158>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
	DC_pid.KP = 0.7;
 8002ff0:	4b51      	ldr	r3, [pc, #324]	; (8003138 <Colorcheck+0x15c>)
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <Colorcheck+0x160>)
 8002ff4:	601a      	str	r2, [r3, #0]
	DC_pid.KI = 0.0005;
 8002ff6:	4b50      	ldr	r3, [pc, #320]	; (8003138 <Colorcheck+0x15c>)
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <Colorcheck+0x164>)
 8002ffa:	605a      	str	r2, [r3, #4]
	DC_pid.KD = 0.00003;
 8002ffc:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <Colorcheck+0x15c>)
 8002ffe:	4a51      	ldr	r2, [pc, #324]	; (8003144 <Colorcheck+0x168>)
 8003000:	609a      	str	r2, [r3, #8]
	Motor.target_pos=0;
 8003002:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <Colorcheck+0x158>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003008:	4b4f      	ldr	r3, [pc, #316]	; (8003148 <Colorcheck+0x16c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d120      	bne.n	8003052 <Colorcheck+0x76>
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <Colorcheck+0x158>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f240 327a 	movw	r2, #890	; 0x37a
 8003018:	4293      	cmp	r3, r2
 800301a:	d11a      	bne.n	8003052 <Colorcheck+0x76>
		 calculatePID();
 800301c:	f7fe fc80 	bl	8001920 <calculatePID>
		 motorspeed();
 8003020:	f7fe fd1c 	bl	8001a5c <motorspeed>
		 Motor.target_pos = 890;
 8003024:	4b43      	ldr	r3, [pc, #268]	; (8003134 <Colorcheck+0x158>)
 8003026:	f240 327a 	movw	r2, #890	; 0x37a
 800302a:	601a      	str	r2, [r3, #0]
		 while(DC_pid.error < 5 ){
 800302c:	bf00      	nop
 800302e:	4b42      	ldr	r3, [pc, #264]	; (8003138 <Colorcheck+0x15c>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b04      	cmp	r3, #4
 8003034:	dc77      	bgt.n	8003126 <Colorcheck+0x14a>
			 MotorStop();
 8003036:	f7fe fc5b 	bl	80018f0 <MotorStop>
			 TIM5->CNT=89000;
 800303a:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <Colorcheck+0x154>)
 800303c:	4a43      	ldr	r2, [pc, #268]	; (800314c <Colorcheck+0x170>)
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=890;
 8003040:	4b3c      	ldr	r3, [pc, #240]	; (8003134 <Colorcheck+0x158>)
 8003042:	f240 327a 	movw	r2, #890	; 0x37a
 8003046:	605a      	str	r2, [r3, #4]
//			 Motor.target_pos = 0;
//			 yellow=2;
			 blue = 0;
 8003048:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <Colorcheck+0x16c>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
			 break;
 800304e:	bf00      	nop
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003050:	e069      	b.n	8003126 <Colorcheck+0x14a>
		}
	 }else if(yellow==2 && Motor.target_pos == 0){//target pos = 0
 8003052:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <Colorcheck+0x174>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d12a      	bne.n	80030b0 <Colorcheck+0xd4>
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <Colorcheck+0x158>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d126      	bne.n	80030b0 <Colorcheck+0xd4>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 8003062:	e00b      	b.n	800307c <Colorcheck+0xa0>
			 MotorStop();
 8003064:	f7fe fc44 	bl	80018f0 <MotorStop>
//			 Motor.target_pos=0;
			 TIM5->CNT=0;
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <Colorcheck+0x154>)
 800306a:	2200      	movs	r2, #0
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=0;
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <Colorcheck+0x158>)
 8003070:	2200      	movs	r2, #0
 8003072:	605a      	str	r2, [r3, #4]
			 yellow=0;
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <Colorcheck+0x174>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
			 break;
 800307a:	e011      	b.n	80030a0 <Colorcheck+0xc4>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 800307c:	2104      	movs	r1, #4
 800307e:	4835      	ldr	r0, [pc, #212]	; (8003154 <Colorcheck+0x178>)
 8003080:	f004 fd6e 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <Colorcheck+0xbc>
 800308a:	2102      	movs	r1, #2
 800308c:	4831      	ldr	r0, [pc, #196]	; (8003154 <Colorcheck+0x178>)
 800308e:	f004 fd67 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d103      	bne.n	80030a0 <Colorcheck+0xc4>
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <Colorcheck+0x15c>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b63      	cmp	r3, #99	; 0x63
 800309e:	dde1      	ble.n	8003064 <Colorcheck+0x88>
		 }
		 	 Motor.target_pos= 0;
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <Colorcheck+0x158>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
			 calculatePID();
 80030a6:	f7fe fc3b 	bl	8001920 <calculatePID>
			 motorspeed();
 80030aa:	f7fe fcd7 	bl	8001a5c <motorspeed>
 80030ae:	e03b      	b.n	8003128 <Colorcheck+0x14c>
	}else if(yellow==1 && Motor.target_pos == 1800){//target pos = 1800
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <Colorcheck+0x174>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d130      	bne.n	800311a <Colorcheck+0x13e>
 80030b8:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <Colorcheck+0x158>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80030c0:	d12b      	bne.n	800311a <Colorcheck+0x13e>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 80030c2:	e00f      	b.n	80030e4 <Colorcheck+0x108>
			 MotorStop();
 80030c4:	f7fe fc14 	bl	80018f0 <MotorStop>
			 Motor.my_pos = 1800;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <Colorcheck+0x158>)
 80030ca:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80030ce:	605a      	str	r2, [r3, #4]
			 Motor.target_pos = 0;
 80030d0:	4b18      	ldr	r3, [pc, #96]	; (8003134 <Colorcheck+0x158>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
			 TIM5->CNT = 180000;
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <Colorcheck+0x154>)
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <Colorcheck+0x17c>)
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
			 yellow=0;
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <Colorcheck+0x174>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
			 break;
 80030e2:	e011      	b.n	8003108 <Colorcheck+0x12c>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 80030e4:	2101      	movs	r1, #1
 80030e6:	481b      	ldr	r0, [pc, #108]	; (8003154 <Colorcheck+0x178>)
 80030e8:	f004 fd3a 	bl	8007b60 <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <Colorcheck+0x124>
 80030f2:	2101      	movs	r1, #1
 80030f4:	4819      	ldr	r0, [pc, #100]	; (800315c <Colorcheck+0x180>)
 80030f6:	f004 fd33 	bl	8007b60 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <Colorcheck+0x12c>
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <Colorcheck+0x15c>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b63      	cmp	r3, #99	; 0x63
 8003106:	dddd      	ble.n	80030c4 <Colorcheck+0xe8>
		 }
		 	 Motor.target_pos = 1800;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <Colorcheck+0x158>)
 800310a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800310e:	601a      	str	r2, [r3, #0]
			 calculatePID();
 8003110:	f7fe fc06 	bl	8001920 <calculatePID>
			 motorspeed();
 8003114:	f7fe fca2 	bl	8001a5c <motorspeed>
 8003118:	e006      	b.n	8003128 <Colorcheck+0x14c>
	}else{
		 MotorStop();
 800311a:	f7fe fbe9 	bl	80018f0 <MotorStop>
		 yellow = 0;
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <Colorcheck+0x174>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e000      	b.n	8003128 <Colorcheck+0x14c>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003126:	bf00      	nop
	 }
    osDelay(5);
 8003128:	2005      	movs	r0, #5
 800312a:	f008 fc8c 	bl	800ba46 <osDelay>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 800312e:	e76b      	b.n	8003008 <Colorcheck+0x2c>
 8003130:	40000c00 	.word	0x40000c00
 8003134:	200007dc 	.word	0x200007dc
 8003138:	200007a0 	.word	0x200007a0
 800313c:	3f333333 	.word	0x3f333333
 8003140:	3a03126f 	.word	0x3a03126f
 8003144:	37fba882 	.word	0x37fba882
 8003148:	200006f4 	.word	0x200006f4
 800314c:	00015ba8 	.word	0x00015ba8
 8003150:	200006f8 	.word	0x200006f8
 8003154:	40020800 	.word	0x40020800
 8003158:	0002bf20 	.word	0x0002bf20
 800315c:	40020400 	.word	0x40020400

08003160 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	setup();
 8003168:	f001 fd9e 	bl	8004ca8 <setup>
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 800316c:	2101      	movs	r1, #1
 800316e:	4861      	ldr	r0, [pc, #388]	; (80032f4 <StartTask05+0x194>)
 8003170:	f004 fcf6 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d108      	bne.n	800318c <StartTask05+0x2c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000001;
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <StartTask05+0x198>)
 800317c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	b21a      	sxth	r2, r3
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <StartTask05+0x198>)
 8003188:	811a      	strh	r2, [r3, #8]
 800318a:	e007      	b.n	800319c <StartTask05+0x3c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111110;
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <StartTask05+0x198>)
 800318e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003192:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003196:	b21a      	sxth	r2, r3
 8003198:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <StartTask05+0x198>)
 800319a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin)==1){
 800319c:	2101      	movs	r1, #1
 800319e:	4857      	ldr	r0, [pc, #348]	; (80032fc <StartTask05+0x19c>)
 80031a0:	f004 fcde 	bl	8007b60 <HAL_GPIO_ReadPin>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <StartTask05+0x5c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000010;
 80031aa:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <StartTask05+0x198>)
 80031ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <StartTask05+0x198>)
 80031b8:	811a      	strh	r2, [r3, #8]
 80031ba:	e007      	b.n	80031cc <StartTask05+0x6c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111101;
 80031bc:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <StartTask05+0x198>)
 80031be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031c2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80031c6:	b21a      	sxth	r2, r3
 80031c8:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <StartTask05+0x198>)
 80031ca:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin)==1){
 80031cc:	2104      	movs	r1, #4
 80031ce:	4849      	ldr	r0, [pc, #292]	; (80032f4 <StartTask05+0x194>)
 80031d0:	f004 fcc6 	bl	8007b60 <HAL_GPIO_ReadPin>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d108      	bne.n	80031ec <StartTask05+0x8c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000100;
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <StartTask05+0x198>)
 80031dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	b21a      	sxth	r2, r3
 80031e6:	4b44      	ldr	r3, [pc, #272]	; (80032f8 <StartTask05+0x198>)
 80031e8:	811a      	strh	r2, [r3, #8]
 80031ea:	e007      	b.n	80031fc <StartTask05+0x9c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111011;
 80031ec:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <StartTask05+0x198>)
 80031ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031f2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 80031f6:	b21a      	sxth	r2, r3
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <StartTask05+0x198>)
 80031fa:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin)==1){
 80031fc:	2102      	movs	r1, #2
 80031fe:	483d      	ldr	r0, [pc, #244]	; (80032f4 <StartTask05+0x194>)
 8003200:	f004 fcae 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <StartTask05+0xbc>
	  		  sensor_buff[4]=sensor_buff[4]|0b00001000;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <StartTask05+0x198>)
 800320c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003210:	f043 0308 	orr.w	r3, r3, #8
 8003214:	b21a      	sxth	r2, r3
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <StartTask05+0x198>)
 8003218:	811a      	strh	r2, [r3, #8]
 800321a:	e007      	b.n	800322c <StartTask05+0xcc>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11110111;
 800321c:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <StartTask05+0x198>)
 800321e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003222:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8003226:	b21a      	sxth	r2, r3
 8003228:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <StartTask05+0x198>)
 800322a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==1){
 800322c:	2108      	movs	r1, #8
 800322e:	4831      	ldr	r0, [pc, #196]	; (80032f4 <StartTask05+0x194>)
 8003230:	f004 fc96 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <StartTask05+0xec>
	  		  sensor_buff[4]=sensor_buff[4]|0b00010000;
 800323a:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <StartTask05+0x198>)
 800323c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003240:	f043 0310 	orr.w	r3, r3, #16
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <StartTask05+0x198>)
 8003248:	811a      	strh	r2, [r3, #8]
 800324a:	e007      	b.n	800325c <StartTask05+0xfc>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11101111;
 800324c:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <StartTask05+0x198>)
 800324e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003252:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003256:	b21a      	sxth	r2, r3
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <StartTask05+0x198>)
 800325a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==1){
 800325c:	2110      	movs	r1, #16
 800325e:	4828      	ldr	r0, [pc, #160]	; (8003300 <StartTask05+0x1a0>)
 8003260:	f004 fc7e 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <StartTask05+0x11c>
	  		  sensor_buff[4]=sensor_buff[4]|0b00100000;
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <StartTask05+0x198>)
 800326c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003270:	f043 0320 	orr.w	r3, r3, #32
 8003274:	b21a      	sxth	r2, r3
 8003276:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <StartTask05+0x198>)
 8003278:	811a      	strh	r2, [r3, #8]
 800327a:	e007      	b.n	800328c <StartTask05+0x12c>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11011111;
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <StartTask05+0x198>)
 800327e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003282:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003286:	b21a      	sxth	r2, r3
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <StartTask05+0x198>)
 800328a:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)==1){
 800328c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003290:	481a      	ldr	r0, [pc, #104]	; (80032fc <StartTask05+0x19c>)
 8003292:	f004 fc65 	bl	8007b60 <HAL_GPIO_ReadPin>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <StartTask05+0x14e>
	  		  sensor_buff[4]=sensor_buff[4]|0b01000000;
 800329c:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <StartTask05+0x198>)
 800329e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <StartTask05+0x198>)
 80032aa:	811a      	strh	r2, [r3, #8]
 80032ac:	e007      	b.n	80032be <StartTask05+0x15e>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b10111111;
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <StartTask05+0x198>)
 80032b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032b4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <StartTask05+0x198>)
 80032bc:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  sensor_buff[0]=M1.en_speed;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <StartTask05+0x1a4>)
 80032c0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <StartTask05+0x198>)
 80032c6:	801a      	strh	r2, [r3, #0]
	  	  sensor_buff[1]=M2.en_speed;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <StartTask05+0x1a8>)
 80032ca:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032ce:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <StartTask05+0x198>)
 80032d0:	805a      	strh	r2, [r3, #2]
	  	  sensor_buff[2]=M3.en_speed;
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <StartTask05+0x1ac>)
 80032d4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <StartTask05+0x198>)
 80032da:	809a      	strh	r2, [r3, #4]
	  	  sensor_buff[3]=M4.en_speed;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <StartTask05+0x1b0>)
 80032de:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <StartTask05+0x198>)
 80032e4:	80da      	strh	r2, [r3, #6]
	  	  loop();
 80032e6:	f001 fcf5 	bl	8004cd4 <loop>
    osDelay(10);
 80032ea:	200a      	movs	r0, #10
 80032ec:	f008 fbab 	bl	800ba46 <osDelay>
	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 80032f0:	e73c      	b.n	800316c <StartTask05+0xc>
 80032f2:	bf00      	nop
 80032f4:	40020800 	.word	0x40020800
 80032f8:	20000710 	.word	0x20000710
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020000 	.word	0x40020000
 8003304:	200007bc 	.word	0x200007bc
 8003308:	200007c4 	.word	0x200007c4
 800330c:	200007cc 	.word	0x200007cc
 8003310:	200007d4 	.word	0x200007d4

08003314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003326:	f002 fed3 	bl	80060d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000

08003338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800333c:	b672      	cpsid	i
}
 800333e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003340:	e7fe      	b.n	8003340 <Error_Handler+0x8>

08003342 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <_ZN3ros3MsgC1Ev+0x1c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	0800ed48 	.word	0x0800ed48

08003384 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
      data()
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ffe8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ffcf 	bl	8003342 <_ZN3ros4TimeC1Ev>
    {
    }
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	0800ed30 	.word	0x0800ed30

080033b4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	b2ca      	uxtb	r2, r1
 80033ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0a19      	lsrs	r1, r3, #8
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	b2ca      	uxtb	r2, r1
 80033e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0c19      	lsrs	r1, r3, #16
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3302      	adds	r3, #2
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	0e19      	lsrs	r1, r3, #24
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3303      	adds	r3, #3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	b2ca      	uxtb	r2, r1
 8003404:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6899      	ldr	r1, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	4413      	add	r3, r2
 8003416:	b2ca      	uxtb	r2, r1
 8003418:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a19      	lsrs	r1, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	4413      	add	r3, r2
 8003428:	b2ca      	uxtb	r2, r1
 800342a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0c19      	lsrs	r1, r3, #16
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3302      	adds	r3, #2
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	4413      	add	r3, r2
 800343a:	b2ca      	uxtb	r2, r1
 800343c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0e19      	lsrs	r1, r3, #24
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3303      	adds	r3, #3
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	4413      	add	r3, r2
 800344c:	b2ca      	uxtb	r2, r1
 800344e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
      return offset;
 8003456:	68fb      	ldr	r3, [r7, #12]
    }
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	4413      	add	r3, r2
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	6839      	ldr	r1, [r7, #0]
 800348a:	440b      	add	r3, r1
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3302      	adds	r3, #2
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	440b      	add	r3, r1
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3303      	adds	r3, #3
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	440b      	add	r3, r1
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	061b      	lsls	r3, r3, #24
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3301      	adds	r3, #1
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	440b      	add	r3, r1
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3302      	adds	r3, #2
 80034f4:	6839      	ldr	r1, [r7, #0]
 80034f6:	440b      	add	r3, r1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	041b      	lsls	r3, r3, #16
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3303      	adds	r3, #3
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	440b      	add	r3, r1
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
     return offset;
 800351e:	68fb      	ldr	r3, [r7, #12]
    }
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	0800ea1c 	.word	0x0800ea1c

08003548 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	0800ea2c 	.word	0x0800ea2c

08003564 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fef8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8003574:	4a0b      	ldr	r2, [pc, #44]	; (80035a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003584:	609a      	str	r2, [r3, #8]
      message_type(""),
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800358a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003590:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
    {
    }
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	0800ed18 	.word	0x0800ed18
 80035a8:	0800ea50 	.word	0x0800ea50

080035ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8899      	ldrh	r1, [r3, #4]
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	b2ca      	uxtb	r2, r1
 80035c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	889b      	ldrh	r3, [r3, #4]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	b299      	uxth	r1, r3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	3301      	adds	r3, #1
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	b2ca      	uxtb	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3302      	adds	r3, #2
 80035e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc fe12 	bl	8000210 <strlen>
 80035ec:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	69b9      	ldr	r1, [r7, #24]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fb86 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3304      	adds	r3, #4
 8003600:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	18d0      	adds	r0, r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4619      	mov	r1, r3
 8003610:	f00b f872 	bl	800e6f8 <memcpy>
      offset += length_topic_name;
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc fdf5 	bl	8000210 <strlen>
 8003626:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	4413      	add	r3, r2
 800362e:	6979      	ldr	r1, [r7, #20]
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fb69 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3304      	adds	r3, #4
 800363a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	18d0      	adds	r0, r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4619      	mov	r1, r3
 800364a:	f00b f855 	bl	800e6f8 <memcpy>
      offset += length_message_type;
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4413      	add	r3, r2
 8003654:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc fdd8 	bl	8000210 <strlen>
 8003660:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	4413      	add	r3, r2
 8003668:	6939      	ldr	r1, [r7, #16]
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fb4c 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	3304      	adds	r3, #4
 8003674:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	18d0      	adds	r0, r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4619      	mov	r1, r3
 8003684:	f00b f838 	bl	800e6f8 <memcpy>
      offset += length_md5sum;
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4413      	add	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	b2ca      	uxtb	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	0a19      	lsrs	r1, r3, #8
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	3301      	adds	r3, #1
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	b2ca      	uxtb	r2, r1
 80036b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	0c19      	lsrs	r1, r3, #16
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3302      	adds	r3, #2
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	b2ca      	uxtb	r2, r1
 80036c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0e19      	lsrs	r1, r3, #24
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3303      	adds	r3, #3
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	b2ca      	uxtb	r2, r1
 80036d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3304      	adds	r3, #4
 80036d6:	61fb      	str	r3, [r7, #28]
      return offset;
 80036d8:	69fb      	ldr	r3, [r7, #28]
    }
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b08a      	sub	sp, #40	; 0x28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	b21a      	sxth	r2, r3
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	3301      	adds	r3, #1
 8003708:	6839      	ldr	r1, [r7, #0]
 800370a:	440b      	add	r3, r1
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	021b      	lsls	r3, r3, #8
 8003710:	b21b      	sxth	r3, r3
 8003712:	4313      	orrs	r3, r2
 8003714:	b21b      	sxth	r3, r3
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	3302      	adds	r3, #2
 8003720:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	441a      	add	r2, r3
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f001 fb09 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	3304      	adds	r3, #4
 8003738:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e00b      	b.n	8003758 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	441a      	add	r2, r3
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	3b01      	subs	r3, #1
 800374a:	6839      	ldr	r1, [r7, #0]
 800374c:	440b      	add	r3, r1
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	3301      	adds	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	429a      	cmp	r2, r3
 8003762:	d3ed      	bcc.n	8003740 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	3b01      	subs	r3, #1
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	3b01      	subs	r3, #1
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	4413      	add	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	441a      	add	r2, r3
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fad6 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3304      	adds	r3, #4
 800379e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	623b      	str	r3, [r7, #32]
 80037a4:	e00b      	b.n	80037be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	441a      	add	r2, r3
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	440b      	add	r3, r1
 80037b4:	7812      	ldrb	r2, [r2, #0]
 80037b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	3301      	adds	r3, #1
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	6a3a      	ldr	r2, [r7, #32]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3ed      	bcc.n	80037a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	4413      	add	r3, r2
 80037d0:	3b01      	subs	r3, #1
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	3b01      	subs	r3, #1
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	441a      	add	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	441a      	add	r2, r3
 80037f4:	f107 030c 	add.w	r3, r7, #12
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 faa3 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	3304      	adds	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e00b      	b.n	8003824 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	441a      	add	r2, r3
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b01      	subs	r3, #1
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	440b      	add	r3, r1
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3301      	adds	r3, #1
 8003822:	61fb      	str	r3, [r7, #28]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4413      	add	r3, r2
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3ed      	bcc.n	800380c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	3b01      	subs	r3, #1
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	4413      	add	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	3b01      	subs	r3, #1
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	6839      	ldr	r1, [r7, #0]
 800385e:	440a      	add	r2, r1
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	3301      	adds	r3, #1
 800386c:	6839      	ldr	r1, [r7, #0]
 800386e:	440b      	add	r3, r1
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	4313      	orrs	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3302      	adds	r3, #2
 800387e:	6839      	ldr	r1, [r7, #0]
 8003880:	440b      	add	r3, r1
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	4313      	orrs	r3, r2
 8003888:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	3303      	adds	r3, #3
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	440b      	add	r3, r1
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	4313      	orrs	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3304      	adds	r3, #4
 80038a6:	61bb      	str	r3, [r7, #24]
     return offset;
 80038a8:	69bb      	ldr	r3, [r7, #24]
    }
 80038aa:	4618      	mov	r0, r3
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	0800ea54 	.word	0x0800ea54

080038d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	0800ea70 	.word	0x0800ea70

080038ec <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fd34 	bl	8003364 <_ZN3ros3MsgC1Ev>
 80038fc:	4a06      	ldr	r2, [pc, #24]	; (8003918 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
      level(0),
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	711a      	strb	r2, [r3, #4]
      msg("")
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800390c:	609a      	str	r2, [r3, #8]
    {
    }
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	0800ed00 	.word	0x0800ed00
 800391c:	0800ea50 	.word	0x0800ea50

08003920 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4413      	add	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	7912      	ldrb	r2, [r2, #4]
 8003938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fc63 	bl	8000210 <strlen>
 800394a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	4413      	add	r3, r2
 8003952:	68b9      	ldr	r1, [r7, #8]
 8003954:	4618      	mov	r0, r3
 8003956:	f001 f9d7 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3304      	adds	r3, #4
 800395e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	18d0      	adds	r0, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4619      	mov	r1, r3
 800396e:	f00a fec3 	bl	800e6f8 <memcpy>
      offset += length_msg;
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
      return offset;
 800397a:	68fb      	ldr	r3, [r7, #12]
    }
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	3301      	adds	r3, #1
 80039a2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	441a      	add	r2, r3
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 f9c8 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	3304      	adds	r3, #4
 80039ba:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e00b      	b.n	80039da <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	441a      	add	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6839      	ldr	r1, [r7, #0]
 80039ce:	440b      	add	r3, r1
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	3301      	adds	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3ed      	bcc.n	80039c2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	3b01      	subs	r3, #1
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
     return offset;
 8003a0a:	693b      	ldr	r3, [r7, #16]
    }
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	0800ea94 	.word	0x0800ea94

08003a30 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	4b03      	ldr	r3, [pc, #12]	; (8003a48 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	0800eaa8 	.word	0x0800eaa8

08003a4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fc84 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	605a      	str	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	615a      	str	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	621a      	str	r2, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	0800ece8 	.word	0x0800ece8

08003aa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	b2ca      	uxtb	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0a19      	lsrs	r1, r3, #8
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b2ca      	uxtb	r2, r1
 8003ad4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c19      	lsrs	r1, r3, #16
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	3302      	adds	r3, #2
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b2ca      	uxtb	r2, r1
 8003ae6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0e19      	lsrs	r1, r3, #24
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	3303      	adds	r3, #3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	b2ca      	uxtb	r2, r1
 8003af8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	3304      	adds	r3, #4
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003b00:	2300      	movs	r3, #0
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	e02a      	b.n	8003b5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003b14:	6939      	ldr	r1, [r7, #16]
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b2ca      	uxtb	r2, r1
 8003b1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	0a19      	lsrs	r1, r3, #8
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	b2ca      	uxtb	r2, r1
 8003b2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	0c19      	lsrs	r1, r3, #16
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	3302      	adds	r3, #2
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	b2ca      	uxtb	r2, r1
 8003b3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	0e19      	lsrs	r1, r3, #24
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	3303      	adds	r3, #3
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	b2ca      	uxtb	r2, r1
 8003b4e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	3304      	adds	r3, #4
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3cf      	bcc.n	8003b06 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6919      	ldr	r1, [r3, #16]
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	b2ca      	uxtb	r2, r1
 8003b72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	0a19      	lsrs	r1, r3, #8
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4413      	add	r3, r2
 8003b82:	b2ca      	uxtb	r2, r1
 8003b84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	0c19      	lsrs	r1, r3, #16
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	3302      	adds	r3, #2
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	b2ca      	uxtb	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	0e19      	lsrs	r1, r3, #24
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3303      	adds	r3, #3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	b2ca      	uxtb	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3304      	adds	r3, #4
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e02a      	b.n	8003c0c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2ca      	uxtb	r2, r1
 8003bce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0a19      	lsrs	r1, r3, #8
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	b2ca      	uxtb	r2, r1
 8003bde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	0c19      	lsrs	r1, r3, #16
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	3302      	adds	r3, #2
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	b2ca      	uxtb	r2, r1
 8003bee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	0e19      	lsrs	r1, r3, #24
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	3303      	adds	r3, #3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b2ca      	uxtb	r2, r1
 8003bfe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	3304      	adds	r3, #4
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d3cf      	bcc.n	8003bb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69d9      	ldr	r1, [r3, #28]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	b2ca      	uxtb	r2, r1
 8003c22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	0a19      	lsrs	r1, r3, #8
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	b2ca      	uxtb	r2, r1
 8003c34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	0c19      	lsrs	r1, r3, #16
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	3302      	adds	r3, #2
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	4413      	add	r3, r2
 8003c44:	b2ca      	uxtb	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	0e19      	lsrs	r1, r3, #24
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3303      	adds	r3, #3
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4413      	add	r3, r2
 8003c56:	b2ca      	uxtb	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
 8003c64:	e027      	b.n	8003cb6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc facc 	bl	8000210 <strlen>
 8003c78:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f840 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	18d0      	adds	r0, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f00a fd28 	bl	800e6f8 <memcpy>
      offset += length_stringsi;
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d3d2      	bcc.n	8003c66 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3728      	adds	r7, #40	; 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b08e      	sub	sp, #56	; 0x38
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d08:	3303      	adds	r3, #3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	6a3a      	ldr	r2, [r7, #32]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d90a      	bls.n	8003d3e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f00a fc74 	bl	800e620 <realloc>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003d44:	2300      	movs	r3, #0
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
 8003d48:	e035      	b.n	8003db6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d52:	6839      	ldr	r1, [r7, #0]
 8003d54:	440a      	add	r2, r1
 8003d56:	7812      	ldrb	r2, [r2, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	3301      	adds	r3, #1
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	440b      	add	r3, r1
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	3302      	adds	r3, #2
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	440b      	add	r3, r1
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	041b      	lsls	r3, r3, #16
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	3303      	adds	r3, #3
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	440b      	add	r3, r1
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	3208      	adds	r2, #8
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	3301      	adds	r3, #1
 8003db4:	633b      	str	r3, [r7, #48]	; 0x30
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3c4      	bcc.n	8003d4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	3301      	adds	r3, #1
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	3302      	adds	r3, #2
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	3303      	adds	r3, #3
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	061b      	lsls	r3, r3, #24
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	3304      	adds	r3, #4
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d90a      	bls.n	8003e26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699a      	ldr	r2, [r3, #24]
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f00a fc00 	bl	800e620 <realloc>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e30:	e035      	b.n	8003e9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3a:	6839      	ldr	r1, [r7, #0]
 8003e3c:	440a      	add	r2, r1
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e48:	3301      	adds	r3, #1
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	440b      	add	r3, r1
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	440b      	add	r3, r1
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	3303      	adds	r3, #3
 8003e6e:	6839      	ldr	r1, [r7, #0]
 8003e70:	440b      	add	r3, r1
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	3304      	adds	r3, #4
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	3214      	adds	r2, #20
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d3c4      	bcc.n	8003e32 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	021b      	lsls	r3, r3, #8
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	3303      	adds	r3, #3
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4413      	add	r3, r2
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eea:	3304      	adds	r3, #4
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d90a      	bls.n	8003f0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4619      	mov	r1, r3
 8003f02:	4610      	mov	r0, r2
 8003f04:	f00a fb8c 	bl	800e620 <realloc>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f14:	2300      	movs	r3, #0
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f18:	e03e      	b.n	8003f98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	441a      	add	r2, r3
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 ff0d 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	3304      	adds	r3, #4
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
 8003f36:	e00b      	b.n	8003f50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	441a      	add	r2, r3
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	3b01      	subs	r3, #1
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	440b      	add	r3, r1
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d3ed      	bcc.n	8003f38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	3b01      	subs	r3, #1
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	441a      	add	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	3220      	adds	r2, #32
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	3301      	adds	r3, #1
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3bb      	bcc.n	8003f1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3738      	adds	r7, #56	; 0x38
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	0800ec3c 	.word	0x0800ec3c

08003fc8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	0800eacc 	.word	0x0800eacc

08003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	611a      	str	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8004012:	b580      	push	{r7, lr}
 8004014:	b082      	sub	sp, #8
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6891      	ldr	r1, [r2, #8]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
  };
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
  }
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	6039      	str	r1, [r7, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	2200      	movs	r2, #0
 800406e:	805a      	strh	r2, [r3, #2]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004076:	2200      	movs	r2, #0
 8004078:	809a      	strh	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	2200      	movs	r2, #0
 8004082:	80da      	strh	r2, [r3, #6]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408a:	461a      	mov	r2, r3
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	689b      	ldr	r3, [r3, #8]
	}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d2:	2200      	movs	r2, #0
 80040d4:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	6898      	ldr	r0, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040e8:	4619      	mov	r1, r3
 80040ea:	f006 fb31 	bl	800a750 <HAL_UART_Receive_DMA>
	}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZN11SerialClass4readEv>:



	inline int read(void)
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8004112:	b29b      	uxth	r3, r3
				& buf_mask;
 8004114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004118:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004120:	885b      	ldrh	r3, [r3, #2]
 8004122:	89fa      	ldrh	r2, [r7, #14]
 8004124:	429a      	cmp	r2, r3
 8004126:	d102      	bne.n	800412e <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800412c:	e01b      	b.n	8004166 <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004134:	885b      	ldrh	r3, [r3, #2]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	b291      	uxth	r1, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004140:	8051      	strh	r1, [r2, #2]
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 800414c:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	885b      	ldrh	r3, [r3, #2]
 8004156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	805a      	strh	r2, [r3, #2]
		return c;
 8004164:	68bb      	ldr	r3, [r7, #8]
	}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	dc35      	bgt.n	80041f2 <_ZN11SerialClass5writeEPKhi+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	dd32      	ble.n	80041f2 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 800418c:	bf00      	nop
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f083 0301 	eor.w	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f6      	bne.n	800418e <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e00b      	b.n	80041be <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	4413      	add	r3, r2
 80041ac:	7819      	ldrb	r1, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	4413      	add	r3, r2
 80041b4:	460a      	mov	r2, r1
 80041b6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	3301      	adds	r3, #1
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	dbef      	blt.n	80041a6 <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d010      	beq.n	80041f4 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	b292      	uxth	r2, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f006 fa40 	bl	800a670 <HAL_UART_Transmit_DMA>
 80041f0:	e000      	b.n	80041f4 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80041f2:	bf00      	nop
		}
	}
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
	}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	6898      	ldr	r0, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004232:	4619      	mov	r1, r3
 8004234:	f006 fa8c 	bl	800a750 <HAL_UART_Receive_DMA>
    }
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004240:	b590      	push	{r4, r7, lr}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681c      	ldr	r4, [r3, #0]
 800424c:	4809      	ldr	r0, [pc, #36]	; (8004274 <HAL_UART_TxCpltCallback+0x34>)
 800424e:	f7ff ff26 	bl	800409e <_ZN11SerialClass10get_handleEv>
 8004252:	4603      	mov	r3, r0
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429c      	cmp	r4, r3
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <HAL_UART_TxCpltCallback+0x34>)
 8004266:	f7ff ffc8 	bl	80041fa <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	bf00      	nop
 8004274:	20000854 	.word	0x20000854

08004278 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8004280:	4803      	ldr	r0, [pc, #12]	; (8004290 <HAL_UART_RxCpltCallback+0x18>)
 8004282:	f7ff ffc9 	bl	8004218 <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000854 	.word	0x20000854

08004294 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
			com(&serial)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a04      	ldr	r2, [pc, #16]	; (80042b0 <_ZN13STM32HardwareC1Ev+0x1c>)
 80042a0:	601a      	str	r2, [r3, #0]
	{

	}
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000854 	.word	0x20000854

080042b4 <_ZN13STM32Hardware4initEv>:

	void init()
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fefa 	bl	80040ba <_ZN11SerialClass9start_dmaEv>
	}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_ZN13STM32Hardware4readEv>:

	int read()
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff0b 	bl	80040f6 <_ZN11SerialClass4readEv>
 80042e0:	4603      	mov	r3, r0
	}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ff37 	bl	8004172 <_ZN11SerialClass5writeEPKhi>
	}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 8004314:	f001 fef0 	bl	80060f8 <HAL_GetTick>
 8004318:	4603      	mov	r3, r0
	}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
      data("")
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f818 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8004334:	4a05      	ldr	r2, [pc, #20]	; (800434c <_ZN8std_msgs6StringC1Ev+0x28>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a04      	ldr	r2, [pc, #16]	; (8004350 <_ZN8std_msgs6StringC1Ev+0x2c>)
 800433e:	605a      	str	r2, [r3, #4]
    {
    }
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	0800ecbc 	.word	0x0800ecbc
 8004350:	0800ea50 	.word	0x0800ea50

08004354 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fb ff52 	bl	8000210 <strlen>
 800436c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	4413      	add	r3, r2
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fcc6 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3304      	adds	r3, #4
 8004380:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	18d0      	adds	r0, r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4619      	mov	r1, r3
 8004390:	f00a f9b2 	bl	800e6f8 <memcpy>
      offset += length_data;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
      return offset;
 800439c:	68fb      	ldr	r3, [r7, #12]
    }
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	441a      	add	r2, r3
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fcc0 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3304      	adds	r3, #4
 80043ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e00b      	b.n	80043ea <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	441a      	add	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3b01      	subs	r3, #1
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	440b      	add	r3, r1
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d3ed      	bcc.n	80043d2 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	3b01      	subs	r3, #1
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	4413      	add	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3b01      	subs	r3, #1
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	441a      	add	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
     return offset;
 800441a:	693b      	ldr	r3, [r7, #16]
    }
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <_ZN8std_msgs6String7getTypeEv+0x18>)
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	0800eaf0 	.word	0x0800eaf0

08004440 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	0800eb00 	.word	0x0800eb00

0800445c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ff7c 	bl	8003364 <_ZN3ros3MsgC1Ev>
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	601a      	str	r2, [r3, #0]
      label(""),
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8004476:	605a      	str	r2, [r3, #4]
      size(0),
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
      stride(0)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	60da      	str	r2, [r3, #12]
    {
    }
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	0800eca4 	.word	0x0800eca4
 8004494:	0800ea50 	.word	0x0800ea50

08004498 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fb feb0 	bl	8000210 <strlen>
 80044b0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fc24 	bl	8004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3304      	adds	r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	18d0      	adds	r0, r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4619      	mov	r1, r3
 80044d4:	f00a f910 	bl	800e6f8 <memcpy>
      offset += length_label;
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4413      	add	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	b2ca      	uxtb	r2, r1
 80044ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0a19      	lsrs	r1, r3, #8
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	b2ca      	uxtb	r2, r1
 80044fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	0c19      	lsrs	r1, r3, #16
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3302      	adds	r3, #2
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4413      	add	r3, r2
 800450e:	b2ca      	uxtb	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0e19      	lsrs	r1, r3, #24
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3303      	adds	r3, #3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	4413      	add	r3, r2
 8004520:	b2ca      	uxtb	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3304      	adds	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68d9      	ldr	r1, [r3, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	4413      	add	r3, r2
 8004534:	b2ca      	uxtb	r2, r1
 8004536:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0a19      	lsrs	r1, r3, #8
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	4413      	add	r3, r2
 8004546:	b2ca      	uxtb	r2, r1
 8004548:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	0c19      	lsrs	r1, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3302      	adds	r3, #2
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	4413      	add	r3, r2
 8004558:	b2ca      	uxtb	r2, r1
 800455a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	0e19      	lsrs	r1, r3, #24
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3303      	adds	r3, #3
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	4413      	add	r3, r2
 800456a:	b2ca      	uxtb	r2, r1
 800456c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3304      	adds	r3, #4
 8004572:	60fb      	str	r3, [r7, #12]
      return offset;
 8004574:	68fb      	ldr	r3, [r7, #12]
    }
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	441a      	add	r2, r3
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fbd4 	bl	8004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	3304      	adds	r3, #4
 80045a2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	e00b      	b.n	80045c2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	441a      	add	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	440b      	add	r3, r1
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d3ed      	bcc.n	80045aa <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	3b01      	subs	r3, #1
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3301      	adds	r3, #1
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	440b      	add	r3, r1
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3302      	adds	r3, #2
 800461e:	6839      	ldr	r1, [r7, #0]
 8004620:	440b      	add	r3, r1
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3303      	adds	r3, #3
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	440b      	add	r3, r1
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	3304      	adds	r3, #4
 8004646:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4413      	add	r3, r2
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	440b      	add	r3, r1
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	3302      	adds	r3, #2
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	440b      	add	r3, r1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3303      	adds	r3, #3
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	440b      	add	r3, r1
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3304      	adds	r3, #4
 800469c:	613b      	str	r3, [r7, #16]
     return offset;
 800469e:	693b      	ldr	r3, [r7, #16]
    }
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	0800eb24 	.word	0x0800eb24

080046c4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	0800eb44 	.word	0x0800eb44

080046e0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fe3a 	bl	8003364 <_ZN3ros3MsgC1Ev>
 80046f0:	4a0a      	ldr	r2, [pc, #40]	; (800471c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3308      	adds	r3, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff feab 	bl	800445c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	619a      	str	r2, [r3, #24]
      data_offset(0)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
    {
    }
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	0800ec8c 	.word	0x0800ec8c

08004720 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	4413      	add	r3, r2
 8004738:	b2ca      	uxtb	r2, r1
 800473a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0a19      	lsrs	r1, r3, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	b2ca      	uxtb	r2, r1
 800474c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	0c19      	lsrs	r1, r3, #16
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3302      	adds	r3, #2
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	4413      	add	r3, r2
 800475c:	b2ca      	uxtb	r2, r1
 800475e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0e19      	lsrs	r1, r3, #24
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3303      	adds	r3, #3
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4413      	add	r3, r2
 800476e:	b2ca      	uxtb	r2, r1
 8004770:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3304      	adds	r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	e017      	b.n	80047ae <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	18d0      	adds	r0, r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	440a      	add	r2, r1
 800479c:	4611      	mov	r1, r2
 800479e:	4798      	blx	r3
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d3e2      	bcc.n	800477e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69d9      	ldr	r1, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4413      	add	r3, r2
 80047c2:	b2ca      	uxtb	r2, r1
 80047c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	0a19      	lsrs	r1, r3, #8
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	b2ca      	uxtb	r2, r1
 80047d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	0c19      	lsrs	r1, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3302      	adds	r3, #2
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	b2ca      	uxtb	r2, r1
 80047e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	0e19      	lsrs	r1, r3, #24
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3303      	adds	r3, #3
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	b2ca      	uxtb	r2, r1
 80047fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3304      	adds	r3, #4
 8004800:	60fb      	str	r3, [r7, #12]
      return offset;
 8004802:	68fb      	ldr	r3, [r7, #12]
    }
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3301      	adds	r3, #1
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	3302      	adds	r3, #2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	4413      	add	r3, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3303      	adds	r3, #3
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	4413      	add	r3, r2
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	061b      	lsls	r3, r3, #24
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3304      	adds	r3, #4
 800485e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90a      	bls.n	8004880 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f009 fed3 	bl	800e620 <realloc>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e01a      	b.n	80048c2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f103 0008 	add.w	r0, r3, #8
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	4619      	mov	r1, r3
 800489a:	f7ff fe70 	bl	800457e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800489e:	4602      	mov	r2, r0
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4413      	add	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	18d0      	adds	r0, r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3308      	adds	r3, #8
 80048b4:	2210      	movs	r2, #16
 80048b6:	4619      	mov	r1, r3
 80048b8:	f009 ff1e 	bl	800e6f8 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3301      	adds	r3, #1
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d3df      	bcc.n	800488c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	3301      	adds	r3, #1
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	440b      	add	r3, r1
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	3302      	adds	r3, #2
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	440b      	add	r3, r1
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	3303      	adds	r3, #3
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	440b      	add	r3, r1
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3304      	adds	r3, #4
 8004920:	617b      	str	r3, [r7, #20]
     return offset;
 8004922:	697b      	ldr	r3, [r7, #20]
    }
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	0800eb68 	.word	0x0800eb68

08004948 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	0800eb84 	.word	0x0800eb84

08004964 <_ZN8std_msgs15Int16MultiArrayC1Ev>:
      uint32_t data_length;
      typedef int16_t _data_type;
      _data_type st_data;
      _data_type * data;

    Int16MultiArray():
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fcf8 	bl	8003364 <_ZN3ros3MsgC1Ev>
 8004974:	4a0a      	ldr	r2, [pc, #40]	; (80049a0 <_ZN8std_msgs15Int16MultiArrayC1Ev+0x3c>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
      layout(),
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff feae 	bl	80046e0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	625a      	str	r2, [r3, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	0800ec74 	.word	0x0800ec74

080049a4 <_ZNK8std_msgs15Int16MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	1d18      	adds	r0, r3, #4
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	4413      	add	r3, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7ff feaf 	bl	8004720 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80049c2:	4602      	mov	r2, r0
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4413      	add	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	4413      	add	r3, r2
 80049d4:	b2ca      	uxtb	r2, r1
 80049d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	0a19      	lsrs	r1, r3, #8
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3301      	adds	r3, #1
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	4413      	add	r3, r2
 80049e6:	b2ca      	uxtb	r2, r1
 80049e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	0c19      	lsrs	r1, r3, #16
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3302      	adds	r3, #2
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	4413      	add	r3, r2
 80049f8:	b2ca      	uxtb	r2, r1
 80049fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	0e19      	lsrs	r1, r3, #24
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3303      	adds	r3, #3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	4413      	add	r3, r2
 8004a0a:	b2ca      	uxtb	r2, r1
 8004a0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3304      	adds	r3, #4
 8004a12:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e01c      	b.n	8004a54 <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0xb0>
      union {
        int16_t real;
        uint16_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a28:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8004a2a:	89b9      	ldrh	r1, [r7, #12]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	b2ca      	uxtb	r2, r1
 8004a34:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8004a36:	89bb      	ldrh	r3, [r7, #12]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b299      	uxth	r1, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	b2ca      	uxtb	r2, r1
 8004a46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3301      	adds	r3, #1
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3dd      	bcc.n	8004a1a <_ZNK8std_msgs15Int16MultiArray9serializeEPh+0x76>
      }
      return offset;
 8004a5e:	697b      	ldr	r3, [r7, #20]
    }
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_ZN8std_msgs15Int16MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	1d18      	adds	r0, r3, #4
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7ff fec3 	bl	800480c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8004a86:	4602      	mov	r2, r0
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	4413      	add	r3, r2
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	3302      	adds	r3, #2
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3303      	adds	r3, #3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d90a      	bls.n	8004af4 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x8c>
        this->data = (int16_t*)realloc(this->data, data_lengthT * sizeof(int16_t));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f009 fd99 	bl	800e620 <realloc>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8004afa:	2300      	movs	r3, #0
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	e02b      	b.n	8004b58 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0xf0>
      union {
        int16_t real;
        uint16_t base;
      } u_st_data;
      u_st_data.base = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	440b      	add	r3, r1
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	813b      	strh	r3, [r7, #8]
      u_st_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b16:	893b      	ldrh	r3, [r7, #8]
 8004b18:	b21a      	sxth	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	440b      	add	r3, r1
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b21b      	sxth	r3, r3
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	b21b      	sxth	r3, r3
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	813b      	strh	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8004b30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	851a      	strh	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int16_t));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	4413      	add	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	3228      	adds	r2, #40	; 0x28
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	801a      	strh	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	3301      	adds	r3, #1
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3ce      	bcc.n	8004b00 <_ZN8std_msgs15Int16MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8004b62:	697b      	ldr	r3, [r7, #20]
    }
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZN8std_msgs15Int16MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16MultiArray"; };
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <_ZN8std_msgs15Int16MultiArray7getTypeEv+0x18>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	0800eba8 	.word	0x0800eba8

08004b88 <_ZN8std_msgs15Int16MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "d9338d7f523fcb692fae9d0a0e9f067c"; };
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <_ZN8std_msgs15Int16MultiArray6getMD5Ev+0x18>)
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	0800ebc4 	.word	0x0800ebc4

08004ba4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	0800ecd4 	.word	0x0800ecd4

08004bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff ffe8 	bl	8004ba4 <_ZN3ros15NodeHandleBase_C1Ev>
 8004bd4:	4a33      	ldr	r2, [pc, #204]	; (8004ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fb58 	bl	8004294 <_ZN13STM32HardwareC1Ev>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	60da      	str	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	615a      	str	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3318      	adds	r3, #24
 8004c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c04:	2100      	movs	r1, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	f009 fd41 	bl	800e68e <memset>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c16:	2100      	movs	r1, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f009 fd38 	bl	800e68e <memset>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8004c24:	2264      	movs	r2, #100	; 0x64
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f009 fd30 	bl	800e68e <memset>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 8004c34:	2264      	movs	r2, #100	; 0x64
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f009 fd28 	bl	800e68e <memset>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe fed9 	bl	8003a4c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	0800ec60 	.word	0x0800ec60

08004ca8 <setup>:
extern int16_t sensor_buff[5];
//extern int16_t sensor_buff[5];
ros::Publisher chatter("chatter", &str_msg);
ros::Publisher sensor("sensor", &Sensor_data);

void setup(void){
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
	nh.initNode();
 8004cac:	4806      	ldr	r0, [pc, #24]	; (8004cc8 <setup+0x20>)
 8004cae:	f000 f870 	bl	8004d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 8004cb2:	4906      	ldr	r1, [pc, #24]	; (8004ccc <setup+0x24>)
 8004cb4:	4804      	ldr	r0, [pc, #16]	; (8004cc8 <setup+0x20>)
 8004cb6:	f000 f889 	bl	8004dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(sensor);
 8004cba:	4905      	ldr	r1, [pc, #20]	; (8004cd0 <setup+0x28>)
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <setup+0x20>)
 8004cbe:	f000 f885 	bl	8004dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20001860 	.word	0x20001860
 8004ccc:	20001dc8 	.word	0x20001dc8
 8004cd0:	20001ddc 	.word	0x20001ddc

08004cd4 <loop>:

void loop(void){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0

//	str_msg.data = hello;
//	chatter.publish(&str_msg);
//	nh.spinOnce();
//	HAL_Delay(1);
	    Sensor_data.data_length =5;
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <loop+0x24>)
 8004cda:	2205      	movs	r2, #5
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
		Sensor_data.data= sensor_buff;
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <loop+0x24>)
 8004ce0:	4a06      	ldr	r2, [pc, #24]	; (8004cfc <loop+0x28>)
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c
		sensor.publish(&Sensor_data);
 8004ce4:	4904      	ldr	r1, [pc, #16]	; (8004cf8 <loop+0x24>)
 8004ce6:	4806      	ldr	r0, [pc, #24]	; (8004d00 <loop+0x2c>)
 8004ce8:	f7ff f993 	bl	8004012 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8004cec:	4805      	ldr	r0, [pc, #20]	; (8004d04 <loop+0x30>)
 8004cee:	f000 f89b 	bl	8004e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20001d98 	.word	0x20001d98
 8004cfc:	20000710 	.word	0x20000710
 8004d00:	20001ddc 	.word	0x20001ddc
 8004d04:	20001860 	.word	0x20001860

08004d08 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e00c      	b.n	8004d32 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	fa22 f103 	lsr.w	r1, r2, r3
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	b2ca      	uxtb	r2, r1
 8004d2a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d9ef      	bls.n	8004d18 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	e010      	b.n	8004d7e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	7812      	ldrb	r2, [r2, #0]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	00d2      	lsls	r2, r2, #3
 8004d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d9eb      	bls.n	8004d5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fa88 	bl	80042b4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e01b      	b.n	8004e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d110      	bne.n	8004e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	60da      	str	r2, [r3, #12]
        return true;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e006      	b.n	8004e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b18      	cmp	r3, #24
 8004e18:	dde0      	ble.n	8004ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8004e1a:	2300      	movs	r3, #0
  }
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fa69 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8004e3a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d903      	bls.n	8004e56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d903      	bls.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fa43 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	bf8c      	ite	hi
 8004e94:	2301      	movhi	r3, #1
 8004e96:	2300      	movls	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8004e9e:	f06f 0301 	mvn.w	r3, #1
 8004ea2:	e190      	b.n	80051c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff fa10 	bl	80042ce <_ZN13STM32Hardware4readEv>
 8004eae:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f2c0 8170 	blt.w	8005198 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004ece:	2b07      	cmp	r3, #7
 8004ed0:	d11d      	bne.n	8004f0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004ed8:	1c59      	adds	r1, r3, #1
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	b2d1      	uxtb	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	460a      	mov	r2, r1
 8004eea:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1b7      	bne.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2208      	movs	r2, #8
 8004f08:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004f0c:	e7b2      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d128      	bne.n	8004f6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2bff      	cmp	r3, #255	; 0xff
 8004f1c:	d10d      	bne.n	8004f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f103 0214 	add.w	r2, r3, #20
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004f38:	e79c      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff f9e4 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	bf8c      	ite	hi
 8004f52:	2301      	movhi	r3, #1
 8004f54:	2300      	movls	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d08b      	beq.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8004f64:	f06f 0301 	mvn.w	r3, #1
 8004f68:	e12d      	b.n	80051c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d118      	bne.n	8004fa6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2bfe      	cmp	r3, #254	; 0xfe
 8004f78:	d107      	bne.n	8004f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004f88:	e774      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f47f af6b 	bne.w	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f915 	bl	80051ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004fa4:	e766      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d113      	bne.n	8004fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004fd6:	e74d      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d110      	bne.n	8005004 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	441a      	add	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005002:	e737      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800500a:	2b04      	cmp	r3, #4
 800500c:	d116      	bne.n	800503c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8005014:	425a      	negs	r2, r3
 8005016:	b2db      	uxtb	r3, r3
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	bf58      	it	pl
 800501c:	4253      	negpl	r3, r2
 800501e:	2bff      	cmp	r3, #255	; 0xff
 8005020:	d107      	bne.n	8005032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8005030:	e720      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800503a:	e71b      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005042:	2b05      	cmp	r3, #5
 8005044:	d10f      	bne.n	8005066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8005064:	e706      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800506c:	2b06      	cmp	r3, #6
 800506e:	d117      	bne.n	80050a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	441a      	add	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2207      	movs	r2, #7
 8005086:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f47f aeef 	bne.w	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2208      	movs	r2, #8
 800509a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800509e:	e6e9      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	f47f aee4 	bne.w	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80050ba:	425a      	negs	r2, r3
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	bf58      	it	pl
 80050c2:	4253      	negpl	r3, r2
 80050c4:	2bff      	cmp	r3, #255	; 0xff
 80050c6:	f47f aed5 	bne.w	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d110      	bne.n	80050f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f87a 	bl	80051ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f894 	bl	8005208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f4:	e067      	b.n	80051c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 80050fc:	2b0a      	cmp	r3, #10
 80050fe:	d106      	bne.n	800510e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3318      	adds	r3, #24
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f95e 	bl	80053c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800510c:	e6b2      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005114:	2b06      	cmp	r3, #6
 8005116:	d10d      	bne.n	8005134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3318      	adds	r3, #24
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe fdd0 	bl	8003cca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8005132:	e69f      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800513a:	2b0b      	cmp	r3, #11
 800513c:	d104      	bne.n	8005148 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8005146:	e695      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800514e:	3b64      	subs	r3, #100	; 0x64
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f43f ae89 	beq.w	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8005168:	3b64      	subs	r3, #100	; 0x64
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	6858      	ldr	r0, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800517c:	3b64      	subs	r3, #100	; 0x64
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	3218      	adds	r2, #24
 8005192:	4611      	mov	r1, r2
 8005194:	4798      	blx	r3
    while (true)
 8005196:	e66d      	b.n	8004e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8005198:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00f      	beq.n	80051c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d906      	bls.n	80051c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f809 	bl	80051ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 80051c4:	2300      	movs	r3, #0
  }
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b086      	sub	sp, #24
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe f8d2 	bl	8003384 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f107 020c 	add.w	r2, r7, #12
 80051ea:	210a      	movs	r1, #10
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
    rt_time = hardware_.time();
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff f889 	bl	800430c <_ZN13STM32Hardware4timeEv>
 80051fa:	4602      	mov	r2, r0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	609a      	str	r2, [r3, #8]
  }
 8005200:	bf00      	nop
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b08b      	sub	sp, #44	; 0x2c
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005210:	f107 030c 	add.w	r3, r7, #12
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe f9a5 	bl	8003564 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	e05a      	b.n	80052d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d04f      	beq.n	80052d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	b29b      	uxth	r3, r3
 8005240:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005246:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800525a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4608      	mov	r0, r1
 8005276:	4798      	blx	r3
 8005278:	4603      	mov	r3, r0
 800527a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8005292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4608      	mov	r0, r1
 80052a0:	4798      	blx	r3
 80052a2:	4603      	mov	r3, r0
 80052a4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80052a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052aa:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681c      	ldr	r4, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80052ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe febb 	bl	800403a <_ZN3ros9Publisher15getEndpointTypeEv>
 80052c4:	4601      	mov	r1, r0
 80052c6:	f107 030c 	add.w	r3, r7, #12
 80052ca:	461a      	mov	r2, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	3301      	adds	r3, #1
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	2b18      	cmp	r3, #24
 80052da:	dda1      	ble.n	8005220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80052dc:	2300      	movs	r3, #0
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
 80052e0:	e067      	b.n	80053b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d05b      	beq.n	80053ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	b29b      	uxth	r3, r3
 8005306:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4608      	mov	r0, r1
 800533e:	4798      	blx	r3
 8005340:	4603      	mov	r3, r0
 8005342:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4608      	mov	r0, r1
 8005368:	4798      	blx	r3
 800536a:	4603      	mov	r3, r0
 800536c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800536e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005372:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681c      	ldr	r4, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3304      	adds	r3, #4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4608      	mov	r0, r1
 800539e:	4798      	blx	r3
 80053a0:	4601      	mov	r1, r0
 80053a2:	f107 030c 	add.w	r3, r7, #12
 80053a6:	461a      	mov	r2, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	3301      	adds	r3, #1
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	2b18      	cmp	r3, #24
 80053b6:	dd94      	ble.n	80052e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 80053c0:	bf00      	nop
 80053c2:	372c      	adds	r7, #44	; 0x2c
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd90      	pop	{r4, r7, pc}

080053c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80053d2:	f107 0308 	add.w	r3, r7, #8
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fd ffd4 	bl	8003384 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3304      	adds	r3, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe ff93 	bl	800430c <_ZN13STM32Hardware4timeEv>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80053f0:	f107 0308 	add.w	r3, r7, #8
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe f834 	bl	8003464 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	4914      	ldr	r1, [pc, #80]	; (8005454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8005402:	fba1 1303 	umull	r1, r3, r1, r3
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	4413      	add	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800540c:	6939      	ldr	r1, [r7, #16]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8005412:	fba3 0302 	umull	r0, r3, r3, r2
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800541c:	fb00 f303 	mul.w	r3, r0, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8005424:	fb02 f303 	mul.w	r3, r2, r3
 8005428:	440b      	add	r3, r1
 800542a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800542c:	f107 0308 	add.w	r3, r7, #8
 8005430:	3304      	adds	r3, #4
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8a5 	bl	8005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe ff64 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8005444:	4602      	mov	r2, r0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 800544c:	bf00      	nop
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	10624dd3 	.word	0x10624dd3
 8005458:	000f4240 	.word	0x000f4240

0800545c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b63      	cmp	r3, #99	; 0x63
 800546c:	dd09      	ble.n	8005482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005474:	f083 0301 	eor.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800547e:	2300      	movs	r3, #0
 8005480:	e079      	b.n	8005576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800548e:	3207      	adds	r2, #7
 8005490:	4611      	mov	r1, r2
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
 8005496:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	22ff      	movs	r2, #255	; 0xff
 800549c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	22fe      	movs	r2, #254	; 0xfe
 80054a4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	0a1b      	lsrs	r3, r3, #8
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 80054ce:	4413      	add	r3, r2
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	b21b      	sxth	r3, r3
 80054ea:	121b      	asrs	r3, r3, #8
 80054ec:	b21b      	sxth	r3, r3
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80054fa:	2305      	movs	r3, #5
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e00c      	b.n	800551a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	4413      	add	r3, r2
 8005506:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	3301      	adds	r3, #1
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	3306      	adds	r3, #6
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	dded      	ble.n	8005500 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3307      	adds	r3, #7
 8005528:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	425a      	negs	r2, r3
 800552e:	b2db      	uxtb	r3, r3
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	bf58      	it	pl
 8005534:	4253      	negpl	r3, r2
 8005536:	b2da      	uxtb	r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	6179      	str	r1, [r7, #20]
 800553e:	43d2      	mvns	r2, r2
 8005540:	b2d1      	uxtb	r1, r2
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	460a      	mov	r2, r1
 8005548:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005552:	dc0a      	bgt.n	800556a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1d18      	adds	r0, r3, #4
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4619      	mov	r1, r3
 8005562:	f7fe fec2 	bl	80042ea <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e005      	b.n	8005576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800556a:	4905      	ldr	r1, [pc, #20]	; (8005580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f847 	bl	8005600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	0800ebe8 	.word	0x0800ebe8

08005584 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe feba 	bl	800430c <_ZN13STM32Hardware4timeEv>
 8005598:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4914      	ldr	r1, [pc, #80]	; (80055f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80055a2:	fba1 1303 	umull	r1, r3, r1, r3
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	1e5a      	subs	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6859      	ldr	r1, [r3, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 80055b8:	fba3 0302 	umull	r0, r3, r3, r2
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055c2:	fb00 f303 	mul.w	r3, r0, r3
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	4a0b      	ldr	r2, [pc, #44]	; (80055f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80055ca:	fb02 f303 	mul.w	r3, r2, r3
 80055ce:	1aca      	subs	r2, r1, r3
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80055d2:	4413      	add	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 020c 	add.w	r2, r3, #12
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3310      	adds	r3, #16
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 fcfb 	bl	8005fe0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	10624dd3 	.word	0x10624dd3
 80055f8:	000f4240 	.word	0x000f4240
 80055fc:	3b9aca00 	.word	0x3b9aca00

08005600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	2103      	movs	r1, #3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f804 	bl	800561c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	460b      	mov	r3, r1
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800562a:	f107 0314 	add.w	r3, r7, #20
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe f95c 	bl	80038ec <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005634:	7afb      	ldrb	r3, [r7, #11]
 8005636:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f107 0214 	add.w	r2, r7, #20
 8005646:	2107      	movs	r1, #7
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	4798      	blx	r3
  }
 800564c:	bf00      	nop
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <_Z41__static_initialization_and_destruction_0ii>:
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d11d      	bne.n	80056a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566a:	4293      	cmp	r3, r2
 800566c:	d118      	bne.n	80056a0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
SerialClass serial(huart2);
 800566e:	490e      	ldr	r1, [pc, #56]	; (80056a8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005670:	480e      	ldr	r0, [pc, #56]	; (80056ac <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005672:	f7fe fcee 	bl	8004052 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 8005676:	480e      	ldr	r0, [pc, #56]	; (80056b0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005678:	f7ff faa4 	bl	8004bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 800567c:	480d      	ldr	r0, [pc, #52]	; (80056b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800567e:	f7fe fe51 	bl	8004324 <_ZN8std_msgs6StringC1Ev>
std_msgs::Int16MultiArray Sensor_data;
 8005682:	480d      	ldr	r0, [pc, #52]	; (80056b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005684:	f7ff f96e 	bl	8004964 <_ZN8std_msgs15Int16MultiArrayC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8005688:	2300      	movs	r3, #0
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800568c:	490b      	ldr	r1, [pc, #44]	; (80056bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800568e:	480c      	ldr	r0, [pc, #48]	; (80056c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005690:	f7fe fca8 	bl	8003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher sensor("sensor", &Sensor_data);
 8005694:	2300      	movs	r3, #0
 8005696:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005698:	490a      	ldr	r1, [pc, #40]	; (80056c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800569a:	480b      	ldr	r0, [pc, #44]	; (80056c8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800569c:	f7fe fca2 	bl	8003fe4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	200004e0 	.word	0x200004e0
 80056ac:	20000854 	.word	0x20000854
 80056b0:	20001860 	.word	0x20001860
 80056b4:	20001d90 	.word	0x20001d90
 80056b8:	20001d98 	.word	0x20001d98
 80056bc:	0800ec24 	.word	0x0800ec24
 80056c0:	20001dc8 	.word	0x20001dc8
 80056c4:	0800ec2c 	.word	0x0800ec2c
 80056c8:	20001ddc 	.word	0x20001ddc

080056cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
    return configured_;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <_GLOBAL__sub_I_serial>:
 80056e6:	b580      	push	{r7, lr}
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80056ee:	2001      	movs	r0, #1
 80056f0:	f7ff ffb0 	bl	8005654 <_Z41__static_initialization_and_destruction_0ii>
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <HAL_MspInit+0x54>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	4a11      	ldr	r2, [pc, #68]	; (800574c <HAL_MspInit+0x54>)
 8005708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800570c:	6453      	str	r3, [r2, #68]	; 0x44
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <HAL_MspInit+0x54>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <HAL_MspInit+0x54>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <HAL_MspInit+0x54>)
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <HAL_MspInit+0x54>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005736:	2200      	movs	r2, #0
 8005738:	210f      	movs	r1, #15
 800573a:	f06f 0001 	mvn.w	r0, #1
 800573e:	f001 fc4f 	bl	8006fe0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800

08005750 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	605a      	str	r2, [r3, #4]
 8005762:	609a      	str	r2, [r3, #8]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <HAL_CAN_MspInit+0x94>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d134      	bne.n	80057dc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	4b1c      	ldr	r3, [pc, #112]	; (80057e8 <HAL_CAN_MspInit+0x98>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a1b      	ldr	r2, [pc, #108]	; (80057e8 <HAL_CAN_MspInit+0x98>)
 800577c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <HAL_CAN_MspInit+0x98>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <HAL_CAN_MspInit+0x98>)
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <HAL_CAN_MspInit+0x98>)
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	6313      	str	r3, [r2, #48]	; 0x30
 800579e:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HAL_CAN_MspInit+0x98>)
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b0:	2302      	movs	r3, #2
 80057b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b8:	2303      	movs	r3, #3
 80057ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80057bc:	2309      	movs	r3, #9
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c0:	f107 0314 	add.w	r3, r7, #20
 80057c4:	4619      	mov	r1, r3
 80057c6:	4809      	ldr	r0, [pc, #36]	; (80057ec <HAL_CAN_MspInit+0x9c>)
 80057c8:	f002 f836 	bl	8007838 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80057cc:	2200      	movs	r2, #0
 80057ce:	2105      	movs	r1, #5
 80057d0:	2014      	movs	r0, #20
 80057d2:	f001 fc05 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80057d6:	2014      	movs	r0, #20
 80057d8:	f001 fc1e 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80057dc:	bf00      	nop
 80057de:	3728      	adds	r7, #40	; 0x28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40006400 	.word	0x40006400
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000

080057f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a22      	ldr	r2, [pc, #136]	; (8005898 <HAL_SPI_MspInit+0xa8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d13d      	bne.n	800588e <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_SPI_MspInit+0xac>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	4a20      	ldr	r2, [pc, #128]	; (800589c <HAL_SPI_MspInit+0xac>)
 800581c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005820:	6413      	str	r3, [r2, #64]	; 0x40
 8005822:	4b1e      	ldr	r3, [pc, #120]	; (800589c <HAL_SPI_MspInit+0xac>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	4b1a      	ldr	r3, [pc, #104]	; (800589c <HAL_SPI_MspInit+0xac>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	4a19      	ldr	r2, [pc, #100]	; (800589c <HAL_SPI_MspInit+0xac>)
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	6313      	str	r3, [r2, #48]	; 0x30
 800583e:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_SPI_MspInit+0xac>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800584a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800584e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005850:	2302      	movs	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005858:	2303      	movs	r3, #3
 800585a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800585c:	2305      	movs	r3, #5
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4619      	mov	r1, r3
 8005866:	480e      	ldr	r0, [pc, #56]	; (80058a0 <HAL_SPI_MspInit+0xb0>)
 8005868:	f001 ffe6 	bl	8007838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800586c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005872:	2302      	movs	r3, #2
 8005874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005876:	2301      	movs	r3, #1
 8005878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800587a:	2303      	movs	r3, #3
 800587c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800587e:	2305      	movs	r3, #5
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005882:	f107 0314 	add.w	r3, r7, #20
 8005886:	4619      	mov	r1, r3
 8005888:	4805      	ldr	r0, [pc, #20]	; (80058a0 <HAL_SPI_MspInit+0xb0>)
 800588a:	f001 ffd5 	bl	8007838 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800588e:	bf00      	nop
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40003800 	.word	0x40003800
 800589c:	40023800 	.word	0x40023800
 80058a0:	40020400 	.word	0x40020400

080058a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	; 0x30
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ac:	f107 031c 	add.w	r3, r7, #28
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	609a      	str	r2, [r3, #8]
 80058b8:	60da      	str	r2, [r3, #12]
 80058ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	; (8005978 <HAL_TIM_Base_MspInit+0xd4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d12c      	bne.n	8005920 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	4b2c      	ldr	r3, [pc, #176]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4a2b      	ldr	r2, [pc, #172]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 80058d0:	f043 0302 	orr.w	r3, r3, #2
 80058d4:	6413      	str	r3, [r2, #64]	; 0x40
 80058d6:	4b29      	ldr	r3, [pc, #164]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	4b25      	ldr	r3, [pc, #148]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6313      	str	r3, [r2, #48]	; 0x30
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005902:	2302      	movs	r3, #2
 8005904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800590a:	2300      	movs	r3, #0
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800590e:	2302      	movs	r3, #2
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005912:	f107 031c 	add.w	r3, r7, #28
 8005916:	4619      	mov	r1, r3
 8005918:	4819      	ldr	r0, [pc, #100]	; (8005980 <HAL_TIM_Base_MspInit+0xdc>)
 800591a:	f001 ff8d 	bl	8007838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800591e:	e026      	b.n	800596e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a17      	ldr	r2, [pc, #92]	; (8005984 <HAL_TIM_Base_MspInit+0xe0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d10e      	bne.n	8005948 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	4a12      	ldr	r2, [pc, #72]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	6413      	str	r3, [r2, #64]	; 0x40
 800593a:	4b10      	ldr	r3, [pc, #64]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	613b      	str	r3, [r7, #16]
 8005944:	693b      	ldr	r3, [r7, #16]
}
 8005946:	e012      	b.n	800596e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a0e      	ldr	r2, [pc, #56]	; (8005988 <HAL_TIM_Base_MspInit+0xe4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b09      	ldr	r3, [pc, #36]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 800595c:	f043 0302 	orr.w	r3, r3, #2
 8005960:	6453      	str	r3, [r2, #68]	; 0x44
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <HAL_TIM_Base_MspInit+0xd8>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
}
 800596e:	bf00      	nop
 8005970:	3730      	adds	r7, #48	; 0x30
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40000400 	.word	0x40000400
 800597c:	40023800 	.word	0x40023800
 8005980:	40020000 	.word	0x40020000
 8005984:	40000800 	.word	0x40000800
 8005988:	40010400 	.word	0x40010400

0800598c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a19      	ldr	r2, [pc, #100]	; (8005a10 <HAL_TIM_Encoder_MspInit+0x84>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d12b      	bne.n	8005a06 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <HAL_TIM_Encoder_MspInit+0x88>)
 80059b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b6:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <HAL_TIM_Encoder_MspInit+0x88>)
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	6413      	str	r3, [r2, #64]	; 0x40
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <HAL_TIM_Encoder_MspInit+0x88>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <HAL_TIM_Encoder_MspInit+0x88>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	4a10      	ldr	r2, [pc, #64]	; (8005a14 <HAL_TIM_Encoder_MspInit+0x88>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6313      	str	r3, [r2, #48]	; 0x30
 80059da:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <HAL_TIM_Encoder_MspInit+0x88>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80059e6:	2303      	movs	r3, #3
 80059e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ea:	2302      	movs	r3, #2
 80059ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80059f6:	2302      	movs	r3, #2
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fa:	f107 0314 	add.w	r3, r7, #20
 80059fe:	4619      	mov	r1, r3
 8005a00:	4805      	ldr	r0, [pc, #20]	; (8005a18 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005a02:	f001 ff19 	bl	8007838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005a06:	bf00      	nop
 8005a08:	3728      	adds	r7, #40	; 0x28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40020000 	.word	0x40020000

08005a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a24      	ldr	r2, [pc, #144]	; (8005acc <HAL_TIM_MspPostInit+0xb0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d11e      	bne.n	8005a7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <HAL_TIM_MspPostInit+0xb4>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <HAL_TIM_MspPostInit+0xb4>)
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_TIM_MspPostInit+0xb4>)
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a5a:	23c0      	movs	r3, #192	; 0xc0
 8005a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a66:	2300      	movs	r3, #0
 8005a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6e:	f107 0314 	add.w	r3, r7, #20
 8005a72:	4619      	mov	r1, r3
 8005a74:	4817      	ldr	r0, [pc, #92]	; (8005ad4 <HAL_TIM_MspPostInit+0xb8>)
 8005a76:	f001 fedf 	bl	8007838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005a7a:	e022      	b.n	8005ac2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_TIM_MspPostInit+0xbc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d11d      	bne.n	8005ac2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a86:	2300      	movs	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_TIM_MspPostInit+0xb4>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8e:	4a10      	ldr	r2, [pc, #64]	; (8005ad0 <HAL_TIM_MspPostInit+0xb4>)
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	6313      	str	r3, [r2, #48]	; 0x30
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <HAL_TIM_MspPostInit+0xb4>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005aa2:	23c0      	movs	r3, #192	; 0xc0
 8005aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ab6:	f107 0314 	add.w	r3, r7, #20
 8005aba:	4619      	mov	r1, r3
 8005abc:	4807      	ldr	r0, [pc, #28]	; (8005adc <HAL_TIM_MspPostInit+0xc0>)
 8005abe:	f001 febb 	bl	8007838 <HAL_GPIO_Init>
}
 8005ac2:	bf00      	nop
 8005ac4:	3728      	adds	r7, #40	; 0x28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40020400 	.word	0x40020400
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40020800 	.word	0x40020800

08005ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08c      	sub	sp, #48	; 0x30
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a9a      	ldr	r2, [pc, #616]	; (8005d68 <HAL_UART_MspInit+0x288>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	f040 8095 	bne.w	8005c2e <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005b04:	2300      	movs	r3, #0
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	4b98      	ldr	r3, [pc, #608]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	4a97      	ldr	r2, [pc, #604]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b12:	6413      	str	r3, [r2, #64]	; 0x40
 8005b14:	4b95      	ldr	r3, [pc, #596]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	4b91      	ldr	r3, [pc, #580]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	4a90      	ldr	r2, [pc, #576]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005b2a:	f043 0304 	orr.w	r3, r3, #4
 8005b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b30:	4b8e      	ldr	r3, [pc, #568]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005b3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b42:	2302      	movs	r3, #2
 8005b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b52:	f107 031c 	add.w	r3, r7, #28
 8005b56:	4619      	mov	r1, r3
 8005b58:	4885      	ldr	r0, [pc, #532]	; (8005d70 <HAL_UART_MspInit+0x290>)
 8005b5a:	f001 fe6d 	bl	8007838 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005b5e:	4b85      	ldr	r3, [pc, #532]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b60:	4a85      	ldr	r2, [pc, #532]	; (8005d78 <HAL_UART_MspInit+0x298>)
 8005b62:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005b64:	4b83      	ldr	r3, [pc, #524]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b6a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b6c:	4b81      	ldr	r3, [pc, #516]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b72:	4b80      	ldr	r3, [pc, #512]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b78:	4b7e      	ldr	r3, [pc, #504]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b7e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b80:	4b7c      	ldr	r3, [pc, #496]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b86:	4b7b      	ldr	r3, [pc, #492]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8005b8c:	4b79      	ldr	r3, [pc, #484]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b92:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005b94:	4b77      	ldr	r3, [pc, #476]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b9a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b9c:	4b75      	ldr	r3, [pc, #468]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005ba2:	4874      	ldr	r0, [pc, #464]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005ba4:	f001 fa46 	bl	8007034 <HAL_DMA_Init>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8005bae:	f7fd fbc3 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a6f      	ldr	r2, [pc, #444]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005bb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bb8:	4a6e      	ldr	r2, [pc, #440]	; (8005d74 <HAL_UART_MspInit+0x294>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005bbe:	4b6f      	ldr	r3, [pc, #444]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bc0:	4a6f      	ldr	r2, [pc, #444]	; (8005d80 <HAL_UART_MspInit+0x2a0>)
 8005bc2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005bc4:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bca:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bcc:	4b6b      	ldr	r3, [pc, #428]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bce:	2240      	movs	r2, #64	; 0x40
 8005bd0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bd2:	4b6a      	ldr	r3, [pc, #424]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bd8:	4b68      	ldr	r3, [pc, #416]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bde:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005be6:	4b65      	ldr	r3, [pc, #404]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005bec:	4b63      	ldr	r3, [pc, #396]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005bf2:	4b62      	ldr	r3, [pc, #392]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bf4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005bf8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005bfa:	4b60      	ldr	r3, [pc, #384]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005c00:	485e      	ldr	r0, [pc, #376]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005c02:	f001 fa17 	bl	8007034 <HAL_DMA_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8005c0c:	f7fd fb94 	bl	8003338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a5a      	ldr	r2, [pc, #360]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005c14:	639a      	str	r2, [r3, #56]	; 0x38
 8005c16:	4a59      	ldr	r2, [pc, #356]	; (8005d7c <HAL_UART_MspInit+0x29c>)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2105      	movs	r1, #5
 8005c20:	2034      	movs	r0, #52	; 0x34
 8005c22:	f001 f9dd 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005c26:	2034      	movs	r0, #52	; 0x34
 8005c28:	f001 f9f6 	bl	8007018 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005c2c:	e098      	b.n	8005d60 <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART2)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a54      	ldr	r2, [pc, #336]	; (8005d84 <HAL_UART_MspInit+0x2a4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f040 8093 	bne.w	8005d60 <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	4a4a      	ldr	r2, [pc, #296]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c48:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4a:	4b48      	ldr	r3, [pc, #288]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	4b44      	ldr	r3, [pc, #272]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	4a43      	ldr	r2, [pc, #268]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6313      	str	r3, [r2, #48]	; 0x30
 8005c66:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <HAL_UART_MspInit+0x28c>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c72:	230c      	movs	r3, #12
 8005c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c76:	2302      	movs	r3, #2
 8005c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c82:	2307      	movs	r3, #7
 8005c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c86:	f107 031c 	add.w	r3, r7, #28
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	483e      	ldr	r0, [pc, #248]	; (8005d88 <HAL_UART_MspInit+0x2a8>)
 8005c8e:	f001 fdd3 	bl	8007838 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005c92:	4b3e      	ldr	r3, [pc, #248]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005c94:	4a3e      	ldr	r2, [pc, #248]	; (8005d90 <HAL_UART_MspInit+0x2b0>)
 8005c96:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005c98:	4b3c      	ldr	r3, [pc, #240]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ca0:	4b3a      	ldr	r3, [pc, #232]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cac:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cb4:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cba:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005cc0:	4b32      	ldr	r3, [pc, #200]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005cc8:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005cce:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cd0:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005cd6:	482d      	ldr	r0, [pc, #180]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cd8:	f001 f9ac 	bl	8007034 <HAL_DMA_Init>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_UART_MspInit+0x206>
      Error_Handler();
 8005ce2:	f7fd fb29 	bl	8003338 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a28      	ldr	r2, [pc, #160]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cea:	63da      	str	r2, [r3, #60]	; 0x3c
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <HAL_UART_MspInit+0x2ac>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005cf2:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005cf4:	4a28      	ldr	r2, [pc, #160]	; (8005d98 <HAL_UART_MspInit+0x2b8>)
 8005cf6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005cf8:	4b26      	ldr	r3, [pc, #152]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d06:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d0c:	4b21      	ldr	r3, [pc, #132]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d12:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d14:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d1a:	4b1e      	ldr	r3, [pc, #120]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d2e:	4b19      	ldr	r3, [pc, #100]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d34:	4817      	ldr	r0, [pc, #92]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d36:	f001 f97d 	bl	8007034 <HAL_DMA_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_UART_MspInit+0x264>
      Error_Handler();
 8005d40:	f7fd fafa 	bl	8003338 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
 8005d4a:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <HAL_UART_MspInit+0x2b4>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005d50:	2200      	movs	r2, #0
 8005d52:	2105      	movs	r1, #5
 8005d54:	2026      	movs	r0, #38	; 0x26
 8005d56:	f001 f943 	bl	8006fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d5a:	2026      	movs	r0, #38	; 0x26
 8005d5c:	f001 f95c 	bl	8007018 <HAL_NVIC_EnableIRQ>
}
 8005d60:	bf00      	nop
 8005d62:	3730      	adds	r7, #48	; 0x30
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40004c00 	.word	0x40004c00
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40020800 	.word	0x40020800
 8005d74:	20000528 	.word	0x20000528
 8005d78:	40026040 	.word	0x40026040
 8005d7c:	20000588 	.word	0x20000588
 8005d80:	40026070 	.word	0x40026070
 8005d84:	40004400 	.word	0x40004400
 8005d88:	40020000 	.word	0x40020000
 8005d8c:	200005e8 	.word	0x200005e8
 8005d90:	40026088 	.word	0x40026088
 8005d94:	20000648 	.word	0x20000648
 8005d98:	400260a0 	.word	0x400260a0

08005d9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	; 0x30
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_InitTick+0xd4>)
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	4a2e      	ldr	r2, [pc, #184]	; (8005e70 <HAL_InitTick+0xd4>)
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	6453      	str	r3, [r2, #68]	; 0x44
 8005dbc:	4b2c      	ldr	r3, [pc, #176]	; (8005e70 <HAL_InitTick+0xd4>)
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005dc8:	f107 020c 	add.w	r2, r7, #12
 8005dcc:	f107 0310 	add.w	r3, r7, #16
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f002 f810 	bl	8007df8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005dd8:	f001 fffa 	bl	8007dd0 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <HAL_InitTick+0xd8>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	0c9b      	lsrs	r3, r3, #18
 8005dec:	3b01      	subs	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005df0:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <HAL_InitTick+0xdc>)
 8005df2:	4a22      	ldr	r2, [pc, #136]	; (8005e7c <HAL_InitTick+0xe0>)
 8005df4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005df6:	4b20      	ldr	r3, [pc, #128]	; (8005e78 <HAL_InitTick+0xdc>)
 8005df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <HAL_InitTick+0xdc>)
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005e04:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <HAL_InitTick+0xdc>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <HAL_InitTick+0xdc>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e10:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <HAL_InitTick+0xdc>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005e16:	4818      	ldr	r0, [pc, #96]	; (8005e78 <HAL_InitTick+0xdc>)
 8005e18:	f003 f804 	bl	8008e24 <HAL_TIM_Base_Init>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d11b      	bne.n	8005e62 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005e2a:	4813      	ldr	r0, [pc, #76]	; (8005e78 <HAL_InitTick+0xdc>)
 8005e2c:	f003 f84a 	bl	8008ec4 <HAL_TIM_Base_Start_IT>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d111      	bne.n	8005e62 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e3e:	2019      	movs	r0, #25
 8005e40:	f001 f8ea 	bl	8007018 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d808      	bhi.n	8005e5c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	2019      	movs	r0, #25
 8005e50:	f001 f8c6 	bl	8006fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e54:	4a0a      	ldr	r2, [pc, #40]	; (8005e80 <HAL_InitTick+0xe4>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e002      	b.n	8005e62 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3730      	adds	r7, #48	; 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	431bde83 	.word	0x431bde83
 8005e78:	20001df0 	.word	0x20001df0
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	20000018 	.word	0x20000018

08005e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e88:	e7fe      	b.n	8005e88 <NMI_Handler+0x4>

08005e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e8e:	e7fe      	b.n	8005e8e <HardFault_Handler+0x4>

08005e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e94:	e7fe      	b.n	8005e94 <MemManage_Handler+0x4>

08005e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e9a:	e7fe      	b.n	8005e9a <BusFault_Handler+0x4>

08005e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ea0:	e7fe      	b.n	8005ea0 <UsageFault_Handler+0x4>

08005ea2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ea6:	bf00      	nop
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005eb4:	4802      	ldr	r0, [pc, #8]	; (8005ec0 <DMA1_Stream2_IRQHandler+0x10>)
 8005eb6:	f001 fa55 	bl	8007364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000528 	.word	0x20000528

08005ec4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005ec8:	4802      	ldr	r0, [pc, #8]	; (8005ed4 <DMA1_Stream4_IRQHandler+0x10>)
 8005eca:	f001 fa4b 	bl	8007364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000588 	.word	0x20000588

08005ed8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005edc:	4802      	ldr	r0, [pc, #8]	; (8005ee8 <DMA1_Stream5_IRQHandler+0x10>)
 8005ede:	f001 fa41 	bl	8007364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005ee2:	bf00      	nop
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	200005e8 	.word	0x200005e8

08005eec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005ef0:	4802      	ldr	r0, [pc, #8]	; (8005efc <DMA1_Stream6_IRQHandler+0x10>)
 8005ef2:	f001 fa37 	bl	8007364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000648 	.word	0x20000648

08005f00 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005f04:	4802      	ldr	r0, [pc, #8]	; (8005f10 <CAN1_RX0_IRQHandler+0x10>)
 8005f06:	f000 fd83 	bl	8006a10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005f0a:	bf00      	nop
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200002f8 	.word	0x200002f8

08005f14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f18:	4802      	ldr	r0, [pc, #8]	; (8005f24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005f1a:	f003 faf2 	bl	8009502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005f1e:	bf00      	nop
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20001df0 	.word	0x20001df0

08005f28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f2c:	4802      	ldr	r0, [pc, #8]	; (8005f38 <USART2_IRQHandler+0x10>)
 8005f2e:	f004 fc35 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f32:	bf00      	nop
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	200004e0 	.word	0x200004e0

08005f3c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005f40:	4802      	ldr	r0, [pc, #8]	; (8005f4c <UART4_IRQHandler+0x10>)
 8005f42:	f004 fc2b 	bl	800a79c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000498 	.word	0x20000498

08005f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <_sbrk+0x5c>)
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <_sbrk+0x60>)
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <_sbrk+0x64>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f6c:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <_sbrk+0x64>)
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <_sbrk+0x68>)
 8005f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <_sbrk+0x64>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4413      	add	r3, r2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d207      	bcs.n	8005f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f80:	f008 fb8e 	bl	800e6a0 <__errno>
 8005f84:	4603      	mov	r3, r0
 8005f86:	220c      	movs	r2, #12
 8005f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f8e:	e009      	b.n	8005fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f90:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <_sbrk+0x64>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f96:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <_sbrk+0x64>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	4a05      	ldr	r2, [pc, #20]	; (8005fb4 <_sbrk+0x64>)
 8005fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20020000 	.word	0x20020000
 8005fb0:	00000400 	.word	0x00000400
 8005fb4:	20001e38 	.word	0x20001e38
 8005fb8:	20005ce0 	.word	0x20005ce0

08005fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <SystemInit+0x20>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <SystemInit+0x20>)
 8005fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005fd0:	bf00      	nop
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	e000ed00 	.word	0xe000ed00

08005fe0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	0a5a      	lsrs	r2, r3, #9
 8005ff0:	490f      	ldr	r1, [pc, #60]	; (8006030 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005ff2:	fba1 1202 	umull	r1, r2, r1, r2
 8005ff6:	09d2      	lsrs	r2, r2, #7
 8005ff8:	490e      	ldr	r1, [pc, #56]	; (8006034 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005ffa:	fb01 f202 	mul.w	r2, r1, r2
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	0a5b      	lsrs	r3, r3, #9
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	09db      	lsrs	r3, r3, #7
 8006010:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	00044b83 	.word	0x00044b83
 8006034:	3b9aca00 	.word	0x3b9aca00

08006038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006070 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800603c:	f7ff ffbe 	bl	8005fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006040:	480c      	ldr	r0, [pc, #48]	; (8006074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006042:	490d      	ldr	r1, [pc, #52]	; (8006078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006048:	e002      	b.n	8006050 <LoopCopyDataInit>

0800604a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800604a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800604c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800604e:	3304      	adds	r3, #4

08006050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006054:	d3f9      	bcc.n	800604a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006056:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006058:	4c0a      	ldr	r4, [pc, #40]	; (8006084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800605a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800605c:	e001      	b.n	8006062 <LoopFillZerobss>

0800605e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800605e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006060:	3204      	adds	r2, #4

08006062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006064:	d3fb      	bcc.n	800605e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006066:	f008 fb21 	bl	800e6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800606a:	f7fa ff05 	bl	8000e78 <main>
  bx  lr    
 800606e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006078:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800607c:	0800efd4 	.word	0x0800efd4
  ldr r2, =_sbss
 8006080:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8006084:	20005cdc 	.word	0x20005cdc

08006088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006088:	e7fe      	b.n	8006088 <ADC_IRQHandler>
	...

0800608c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_Init+0x40>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <HAL_Init+0x40>)
 8006096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800609a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_Init+0x40>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <HAL_Init+0x40>)
 80060a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060a8:	4b08      	ldr	r3, [pc, #32]	; (80060cc <HAL_Init+0x40>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a07      	ldr	r2, [pc, #28]	; (80060cc <HAL_Init+0x40>)
 80060ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060b4:	2003      	movs	r0, #3
 80060b6:	f000 ff88 	bl	8006fca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060ba:	200f      	movs	r0, #15
 80060bc:	f7ff fe6e 	bl	8005d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060c0:	f7ff fb1a 	bl	80056f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	40023c00 	.word	0x40023c00

080060d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_IncTick+0x20>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <HAL_IncTick+0x24>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4413      	add	r3, r2
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <HAL_IncTick+0x24>)
 80060e2:	6013      	str	r3, [r2, #0]
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	2000001c 	.word	0x2000001c
 80060f4:	20001e3c 	.word	0x20001e3c

080060f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return uwTick;
 80060fc:	4b03      	ldr	r3, [pc, #12]	; (800610c <HAL_GetTick+0x14>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20001e3c 	.word	0x20001e3c

08006110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006118:	f7ff ffee 	bl	80060f8 <HAL_GetTick>
 800611c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006128:	d005      	beq.n	8006136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800612a:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <HAL_Delay+0x44>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006136:	bf00      	nop
 8006138:	f7ff ffde 	bl	80060f8 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	429a      	cmp	r2, r3
 8006146:	d8f7      	bhi.n	8006138 <HAL_Delay+0x28>
  {
  }
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	2000001c 	.word	0x2000001c

08006158 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0ed      	b.n	8006346 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d102      	bne.n	800617c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff faea 	bl	8005750 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800618c:	f7ff ffb4 	bl	80060f8 <HAL_GetTick>
 8006190:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006192:	e012      	b.n	80061ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006194:	f7ff ffb0 	bl	80060f8 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b0a      	cmp	r3, #10
 80061a0:	d90b      	bls.n	80061ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2205      	movs	r2, #5
 80061b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e0c5      	b.n	8006346 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0e5      	beq.n	8006194 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0202 	bic.w	r2, r2, #2
 80061d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061d8:	f7ff ff8e 	bl	80060f8 <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80061de:	e012      	b.n	8006206 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80061e0:	f7ff ff8a 	bl	80060f8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b0a      	cmp	r3, #10
 80061ec:	d90b      	bls.n	8006206 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2205      	movs	r2, #5
 80061fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e09f      	b.n	8006346 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	7e1b      	ldrb	r3, [r3, #24]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d108      	bne.n	800622e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	e007      	b.n	800623e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800623c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	7e5b      	ldrb	r3, [r3, #25]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d108      	bne.n	8006258 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e007      	b.n	8006268 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006266:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7e9b      	ldrb	r3, [r3, #26]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d108      	bne.n	8006282 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0220 	orr.w	r2, r2, #32
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e007      	b.n	8006292 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0220 	bic.w	r2, r2, #32
 8006290:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7edb      	ldrb	r3, [r3, #27]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d108      	bne.n	80062ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0210 	bic.w	r2, r2, #16
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	e007      	b.n	80062bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0210 	orr.w	r2, r2, #16
 80062ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7f1b      	ldrb	r3, [r3, #28]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d108      	bne.n	80062d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e007      	b.n	80062e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0208 	bic.w	r2, r2, #8
 80062e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7f5b      	ldrb	r3, [r3, #29]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d108      	bne.n	8006300 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0204 	orr.w	r2, r2, #4
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e007      	b.n	8006310 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	ea42 0103 	orr.w	r1, r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006366:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006368:	7cfb      	ldrb	r3, [r7, #19]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d003      	beq.n	8006376 <HAL_CAN_ConfigFilter+0x26>
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	2b02      	cmp	r3, #2
 8006372:	f040 80be 	bne.w	80064f2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006376:	4b65      	ldr	r3, [pc, #404]	; (800650c <HAL_CAN_ConfigFilter+0x1bc>)
 8006378:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006390:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	431a      	orrs	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	2201      	movs	r2, #1
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	401a      	ands	r2, r3
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d123      	bne.n	8006420 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	401a      	ands	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80063fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	3248      	adds	r2, #72	; 0x48
 8006400:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006414:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006416:	6979      	ldr	r1, [r7, #20]
 8006418:	3348      	adds	r3, #72	; 0x48
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	440b      	add	r3, r1
 800641e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d122      	bne.n	800646e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	431a      	orrs	r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006448:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	3248      	adds	r2, #72	; 0x48
 800644e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006462:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006464:	6979      	ldr	r1, [r7, #20]
 8006466:	3348      	adds	r3, #72	; 0x48
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	440b      	add	r3, r1
 800646c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	43db      	mvns	r3, r3
 8006480:	401a      	ands	r2, r3
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006488:	e007      	b.n	800649a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	431a      	orrs	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	43db      	mvns	r3, r3
 80064ac:	401a      	ands	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80064b4:	e007      	b.n	80064c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	431a      	orrs	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d107      	bne.n	80064de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064e4:	f023 0201 	bic.w	r2, r3, #1
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	e006      	b.n	8006500 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40006400 	.word	0x40006400

08006510 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d12e      	bne.n	8006582 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800653c:	f7ff fddc 	bl	80060f8 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006542:	e012      	b.n	800656a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006544:	f7ff fdd8 	bl	80060f8 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b0a      	cmp	r3, #10
 8006550:	d90b      	bls.n	800656a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2205      	movs	r2, #5
 8006562:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e012      	b.n	8006590 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e5      	bne.n	8006544 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e006      	b.n	8006590 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
  }
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006598:	b480      	push	{r7}
 800659a:	b089      	sub	sp, #36	; 0x24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80065b6:	7ffb      	ldrb	r3, [r7, #31]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d003      	beq.n	80065c4 <HAL_CAN_AddTxMessage+0x2c>
 80065bc:	7ffb      	ldrb	r3, [r7, #31]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	f040 80ad 	bne.w	800671e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d105      	bne.n	80065e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 8095 	beq.w	800670e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	0e1b      	lsrs	r3, r3, #24
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80065ee:	2201      	movs	r2, #1
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	409a      	lsls	r2, r3
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10d      	bne.n	800661c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800660a:	68f9      	ldr	r1, [r7, #12]
 800660c:	6809      	ldr	r1, [r1, #0]
 800660e:	431a      	orrs	r2, r3
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3318      	adds	r3, #24
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	440b      	add	r3, r1
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	e00f      	b.n	800663c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006626:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800662c:	68f9      	ldr	r1, [r7, #12]
 800662e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006630:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	3318      	adds	r3, #24
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	440b      	add	r3, r1
 800663a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6819      	ldr	r1, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3318      	adds	r3, #24
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	440b      	add	r3, r1
 800664c:	3304      	adds	r3, #4
 800664e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	7d1b      	ldrb	r3, [r3, #20]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d111      	bne.n	800667c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	3318      	adds	r3, #24
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	3304      	adds	r3, #4
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	6811      	ldr	r1, [r2, #0]
 800666c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	3318      	adds	r3, #24
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	440b      	add	r3, r1
 8006678:	3304      	adds	r3, #4
 800667a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3307      	adds	r3, #7
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	061a      	lsls	r2, r3, #24
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3306      	adds	r3, #6
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	041b      	lsls	r3, r3, #16
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3305      	adds	r3, #5
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	4313      	orrs	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	3204      	adds	r2, #4
 800669c:	7812      	ldrb	r2, [r2, #0]
 800669e:	4610      	mov	r0, r2
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	6811      	ldr	r1, [r2, #0]
 80066a4:	ea43 0200 	orr.w	r2, r3, r0
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	440b      	add	r3, r1
 80066ae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80066b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3303      	adds	r3, #3
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	061a      	lsls	r2, r3, #24
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3302      	adds	r3, #2
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	041b      	lsls	r3, r3, #16
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3301      	adds	r3, #1
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	4313      	orrs	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	4610      	mov	r0, r2
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	6811      	ldr	r1, [r2, #0]
 80066da:	ea43 0200 	orr.w	r2, r3, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	440b      	add	r3, r1
 80066e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80066e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	3318      	adds	r3, #24
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	4413      	add	r3, r2
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	6811      	ldr	r1, [r2, #0]
 80066fc:	f043 0201 	orr.w	r2, r3, #1
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3318      	adds	r3, #24
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	440b      	add	r3, r1
 8006708:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e00e      	b.n	800672c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e006      	b.n	800672c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
  }
}
 800672c:	4618      	mov	r0, r3
 800672e:	3724      	adds	r7, #36	; 0x24
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800674c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800674e:	7afb      	ldrb	r3, [r7, #11]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d002      	beq.n	800675a <HAL_CAN_IsTxMessagePending+0x22>
 8006754:	7afb      	ldrb	r3, [r7, #11]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d10b      	bne.n	8006772 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	069b      	lsls	r3, r3, #26
 8006764:	401a      	ands	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	069b      	lsls	r3, r3, #26
 800676a:	429a      	cmp	r2, r3
 800676c:	d001      	beq.n	8006772 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800676e:	2301      	movs	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8006772:	68fb      	ldr	r3, [r7, #12]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006794:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d003      	beq.n	80067a4 <HAL_CAN_GetRxMessage+0x24>
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	f040 8103 	bne.w	80069aa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10e      	bne.n	80067c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d116      	bne.n	80067e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0f7      	b.n	80069b8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e0e8      	b.n	80069b8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	331b      	adds	r3, #27
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	4413      	add	r3, r2
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0204 	and.w	r2, r3, #4
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10c      	bne.n	800681e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	331b      	adds	r3, #27
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	4413      	add	r3, r2
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	0d5b      	lsrs	r3, r3, #21
 8006814:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e00b      	b.n	8006836 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	331b      	adds	r3, #27
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	4413      	add	r3, r2
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	08db      	lsrs	r3, r3, #3
 800682e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	331b      	adds	r3, #27
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	4413      	add	r3, r2
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0202 	and.w	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	331b      	adds	r3, #27
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	4413      	add	r3, r2
 8006858:	3304      	adds	r3, #4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2208      	movs	r2, #8
 8006868:	611a      	str	r2, [r3, #16]
 800686a:	e00b      	b.n	8006884 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	331b      	adds	r3, #27
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	4413      	add	r3, r2
 8006878:	3304      	adds	r3, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 020f 	and.w	r2, r3, #15
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	331b      	adds	r3, #27
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	4413      	add	r3, r2
 8006890:	3304      	adds	r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	b2da      	uxtb	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	331b      	adds	r3, #27
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	4413      	add	r3, r2
 80068a8:	3304      	adds	r3, #4
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	4413      	add	r3, r2
 80068be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	0a1a      	lsrs	r2, r3, #8
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	0c1a      	lsrs	r2, r3, #16
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	3302      	adds	r3, #2
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	4413      	add	r3, r2
 8006908:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	0e1a      	lsrs	r2, r3, #24
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	3303      	adds	r3, #3
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	4413      	add	r3, r2
 8006922:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	3304      	adds	r3, #4
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	4413      	add	r3, r2
 800693a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	0a1a      	lsrs	r2, r3, #8
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	3305      	adds	r3, #5
 8006946:	b2d2      	uxtb	r2, r2
 8006948:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	4413      	add	r3, r2
 8006954:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	0c1a      	lsrs	r2, r3, #16
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	3306      	adds	r3, #6
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	0e1a      	lsrs	r2, r3, #24
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	3307      	adds	r3, #7
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d108      	bne.n	8006996 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0220 	orr.w	r2, r2, #32
 8006992:	60da      	str	r2, [r3, #12]
 8006994:	e007      	b.n	80069a6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	691a      	ldr	r2, [r3, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0220 	orr.w	r2, r2, #32
 80069a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e006      	b.n	80069b8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
  }
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d002      	beq.n	80069e2 <HAL_CAN_ActivateNotification+0x1e>
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d109      	bne.n	80069f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6959      	ldr	r1, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e006      	b.n	8006a04 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
  }
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d07c      	beq.n	8006b50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d023      	beq.n	8006aa8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2201      	movs	r2, #1
 8006a66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f983 	bl	8006d7e <HAL_CAN_TxMailbox0CompleteCallback>
 8006a78:	e016      	b.n	8006aa8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8c:	e00c      	b.n	8006aa8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa0:	e002      	b.n	8006aa8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f989 	bl	8006dba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d024      	beq.n	8006afc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f963 	bl	8006d92 <HAL_CAN_TxMailbox1CompleteCallback>
 8006acc:	e016      	b.n	8006afc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	e00c      	b.n	8006afc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	e002      	b.n	8006afc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f969 	bl	8006dce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d024      	beq.n	8006b50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f943 	bl	8006da6 <HAL_CAN_TxMailbox2CompleteCallback>
 8006b20:	e016      	b.n	8006b50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
 8006b34:	e00c      	b.n	8006b50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	e002      	b.n	8006b50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f949 	bl	8006de2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2210      	movs	r2, #16
 8006b72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f003 0304 	and.w	r3, r3, #4
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d006      	beq.n	8006b96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f930 	bl	8006df6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fa ffac 	bl	8001b0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f003 0308 	and.w	r3, r3, #8
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f912 	bl	8006e1e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8f9 	bl	8006e0a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d006      	beq.n	8006c3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2210      	movs	r2, #16
 8006c32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8fc 	bl	8006e32 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d006      	beq.n	8006c5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2208      	movs	r2, #8
 8006c54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8f5 	bl	8006e46 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d07b      	beq.n	8006d5e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d072      	beq.n	8006d56 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d003      	beq.n	8006ca8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	f043 0302 	orr.w	r3, r3, #2
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d008      	beq.n	8006cc4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	f043 0304 	orr.w	r3, r3, #4
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d043      	beq.n	8006d56 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d03e      	beq.n	8006d56 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cde:	2b60      	cmp	r3, #96	; 0x60
 8006ce0:	d02b      	beq.n	8006d3a <HAL_CAN_IRQHandler+0x32a>
 8006ce2:	2b60      	cmp	r3, #96	; 0x60
 8006ce4:	d82e      	bhi.n	8006d44 <HAL_CAN_IRQHandler+0x334>
 8006ce6:	2b50      	cmp	r3, #80	; 0x50
 8006ce8:	d022      	beq.n	8006d30 <HAL_CAN_IRQHandler+0x320>
 8006cea:	2b50      	cmp	r3, #80	; 0x50
 8006cec:	d82a      	bhi.n	8006d44 <HAL_CAN_IRQHandler+0x334>
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d019      	beq.n	8006d26 <HAL_CAN_IRQHandler+0x316>
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d826      	bhi.n	8006d44 <HAL_CAN_IRQHandler+0x334>
 8006cf6:	2b30      	cmp	r3, #48	; 0x30
 8006cf8:	d010      	beq.n	8006d1c <HAL_CAN_IRQHandler+0x30c>
 8006cfa:	2b30      	cmp	r3, #48	; 0x30
 8006cfc:	d822      	bhi.n	8006d44 <HAL_CAN_IRQHandler+0x334>
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d002      	beq.n	8006d08 <HAL_CAN_IRQHandler+0x2f8>
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d005      	beq.n	8006d12 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006d06:	e01d      	b.n	8006d44 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	f043 0308 	orr.w	r3, r3, #8
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d10:	e019      	b.n	8006d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	f043 0310 	orr.w	r3, r3, #16
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d1a:	e014      	b.n	8006d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	f043 0320 	orr.w	r3, r3, #32
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d24:	e00f      	b.n	8006d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d2e:	e00a      	b.n	8006d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d38:	e005      	b.n	8006d46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006d42:	e000      	b.n	8006d46 <HAL_CAN_IRQHandler+0x336>
            break;
 8006d44:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	699a      	ldr	r2, [r3, #24]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006d54:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f872 	bl	8006e5a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006d76:	bf00      	nop
 8006d78:	3728      	adds	r7, #40	; 0x28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b083      	sub	sp, #12
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006e12:	bf00      	nop
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f003 0307 	and.w	r3, r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ea2:	4a04      	ldr	r2, [pc, #16]	; (8006eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	60d3      	str	r3, [r2, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	e000ed00 	.word	0xe000ed00

08006eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	f003 0307 	and.w	r3, r3, #7
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	e000ed00 	.word	0xe000ed00

08006ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	db0b      	blt.n	8006efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 021f 	and.w	r2, r3, #31
 8006eec:	4907      	ldr	r1, [pc, #28]	; (8006f0c <__NVIC_EnableIRQ+0x38>)
 8006eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8006efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	e000e100 	.word	0xe000e100

08006f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	db0a      	blt.n	8006f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	490c      	ldr	r1, [pc, #48]	; (8006f5c <__NVIC_SetPriority+0x4c>)
 8006f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	440b      	add	r3, r1
 8006f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f38:	e00a      	b.n	8006f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	4908      	ldr	r1, [pc, #32]	; (8006f60 <__NVIC_SetPriority+0x50>)
 8006f40:	79fb      	ldrb	r3, [r7, #7]
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	3b04      	subs	r3, #4
 8006f48:	0112      	lsls	r2, r2, #4
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	761a      	strb	r2, [r3, #24]
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	e000e100 	.word	0xe000e100
 8006f60:	e000ed00 	.word	0xe000ed00

08006f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b089      	sub	sp, #36	; 0x24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f1c3 0307 	rsb	r3, r3, #7
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	bf28      	it	cs
 8006f82:	2304      	movcs	r3, #4
 8006f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	2b06      	cmp	r3, #6
 8006f8c:	d902      	bls.n	8006f94 <NVIC_EncodePriority+0x30>
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	3b03      	subs	r3, #3
 8006f92:	e000      	b.n	8006f96 <NVIC_EncodePriority+0x32>
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	43da      	mvns	r2, r3
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	401a      	ands	r2, r3
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb6:	43d9      	mvns	r1, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fbc:	4313      	orrs	r3, r2
         );
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3724      	adds	r7, #36	; 0x24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b082      	sub	sp, #8
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff ff4c 	bl	8006e70 <__NVIC_SetPriorityGrouping>
}
 8006fd8:	bf00      	nop
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ff2:	f7ff ff61 	bl	8006eb8 <__NVIC_GetPriorityGrouping>
 8006ff6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	6978      	ldr	r0, [r7, #20]
 8006ffe:	f7ff ffb1 	bl	8006f64 <NVIC_EncodePriority>
 8007002:	4602      	mov	r2, r0
 8007004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff ff80 	bl	8006f10 <__NVIC_SetPriority>
}
 8007010:	bf00      	nop
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007026:	4618      	mov	r0, r3
 8007028:	f7ff ff54 	bl	8006ed4 <__NVIC_EnableIRQ>
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007040:	f7ff f85a 	bl	80060f8 <HAL_GetTick>
 8007044:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e099      	b.n	8007184 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007070:	e00f      	b.n	8007092 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007072:	f7ff f841 	bl	80060f8 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b05      	cmp	r3, #5
 800707e:	d908      	bls.n	8007092 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2203      	movs	r2, #3
 800708a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e078      	b.n	8007184 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e8      	bne.n	8007072 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4b38      	ldr	r3, [pc, #224]	; (800718c <HAL_DMA_Init+0x158>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d107      	bne.n	80070fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f4:	4313      	orrs	r3, r2
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0307 	bic.w	r3, r3, #7
 8007112:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b04      	cmp	r3, #4
 8007124:	d117      	bne.n	8007156 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00e      	beq.n	8007156 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fb01 	bl	8007740 <DMA_CheckFifoParam>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007152:	2301      	movs	r3, #1
 8007154:	e016      	b.n	8007184 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fab8 	bl	80076d4 <DMA_CalcBaseAndBitshift>
 8007164:	4603      	mov	r3, r0
 8007166:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716c:	223f      	movs	r2, #63	; 0x3f
 800716e:	409a      	lsls	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	f010803f 	.word	0xf010803f

08007190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_DMA_Start_IT+0x26>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e040      	b.n	8007238 <HAL_DMA_Start_IT+0xa8>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d12f      	bne.n	800722a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fa4a 	bl	8007678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e8:	223f      	movs	r2, #63	; 0x3f
 80071ea:	409a      	lsls	r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0216 	orr.w	r2, r2, #22
 80071fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0208 	orr.w	r2, r2, #8
 8007216:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f042 0201 	orr.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e005      	b.n	8007236 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007232:	2302      	movs	r3, #2
 8007234:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007236:	7dfb      	ldrb	r3, [r7, #23]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800724e:	f7fe ff53 	bl	80060f8 <HAL_GetTick>
 8007252:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d008      	beq.n	8007272 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2280      	movs	r2, #128	; 0x80
 8007264:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e052      	b.n	8007318 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0216 	bic.w	r2, r2, #22
 8007280:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007290:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d103      	bne.n	80072a2 <HAL_DMA_Abort+0x62>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0208 	bic.w	r2, r2, #8
 80072b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072c2:	e013      	b.n	80072ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072c4:	f7fe ff18 	bl	80060f8 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d90c      	bls.n	80072ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2203      	movs	r2, #3
 80072dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e015      	b.n	8007318 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1e4      	bne.n	80072c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fe:	223f      	movs	r2, #63	; 0x3f
 8007300:	409a      	lsls	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d004      	beq.n	800733e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e00c      	b.n	8007358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2205      	movs	r2, #5
 8007342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0201 	bic.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007370:	4b8e      	ldr	r3, [pc, #568]	; (80075ac <HAL_DMA_IRQHandler+0x248>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a8e      	ldr	r2, [pc, #568]	; (80075b0 <HAL_DMA_IRQHandler+0x24c>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	0a9b      	lsrs	r3, r3, #10
 800737c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738e:	2208      	movs	r2, #8
 8007390:	409a      	lsls	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01a      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d013      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0204 	bic.w	r2, r2, #4
 80073b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073bc:	2208      	movs	r2, #8
 80073be:	409a      	lsls	r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	f043 0201 	orr.w	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	2201      	movs	r2, #1
 80073d6:	409a      	lsls	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f2:	2201      	movs	r2, #1
 80073f4:	409a      	lsls	r2, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fe:	f043 0202 	orr.w	r2, r3, #2
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740a:	2204      	movs	r2, #4
 800740c:	409a      	lsls	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4013      	ands	r3, r2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d012      	beq.n	800743c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007428:	2204      	movs	r2, #4
 800742a:	409a      	lsls	r2, r3
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	f043 0204 	orr.w	r2, r3, #4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007440:	2210      	movs	r2, #16
 8007442:	409a      	lsls	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d043      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0308 	and.w	r3, r3, #8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d03c      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800745e:	2210      	movs	r2, #16
 8007460:	409a      	lsls	r2, r3
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d018      	beq.n	80074a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d108      	bne.n	8007494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d024      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	4798      	blx	r3
 8007492:	e01f      	b.n	80074d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01b      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
 80074a4:	e016      	b.n	80074d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d107      	bne.n	80074c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0208 	bic.w	r2, r2, #8
 80074c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d8:	2220      	movs	r2, #32
 80074da:	409a      	lsls	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 808f 	beq.w	8007604 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8087 	beq.w	8007604 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	2220      	movs	r2, #32
 80074fc:	409a      	lsls	r2, r3
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b05      	cmp	r3, #5
 800750c:	d136      	bne.n	800757c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0216 	bic.w	r2, r2, #22
 800751c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	695a      	ldr	r2, [r3, #20]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800752c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d103      	bne.n	800753e <HAL_DMA_IRQHandler+0x1da>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0208 	bic.w	r2, r2, #8
 800754c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007552:	223f      	movs	r2, #63	; 0x3f
 8007554:	409a      	lsls	r2, r3
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800756e:	2b00      	cmp	r3, #0
 8007570:	d07e      	beq.n	8007670 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	4798      	blx	r3
        }
        return;
 800757a:	e079      	b.n	8007670 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d01d      	beq.n	80075c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10d      	bne.n	80075b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759c:	2b00      	cmp	r3, #0
 800759e:	d031      	beq.n	8007604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	4798      	blx	r3
 80075a8:	e02c      	b.n	8007604 <HAL_DMA_IRQHandler+0x2a0>
 80075aa:	bf00      	nop
 80075ac:	20000014 	.word	0x20000014
 80075b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d023      	beq.n	8007604 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4798      	blx	r3
 80075c4:	e01e      	b.n	8007604 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10f      	bne.n	80075f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0210 	bic.w	r2, r2, #16
 80075e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	2b00      	cmp	r3, #0
 800760a:	d032      	beq.n	8007672 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d022      	beq.n	800765e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2205      	movs	r2, #5
 800761c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0201 	bic.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	3301      	adds	r3, #1
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	429a      	cmp	r2, r3
 800763a:	d307      	bcc.n	800764c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f2      	bne.n	8007630 <HAL_DMA_IRQHandler+0x2cc>
 800764a:	e000      	b.n	800764e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800764c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
 800766e:	e000      	b.n	8007672 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007670:	bf00      	nop
    }
  }
}
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d108      	bne.n	80076b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80076b6:	e007      	b.n	80076c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	60da      	str	r2, [r3, #12]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	3b10      	subs	r3, #16
 80076e4:	4a14      	ldr	r2, [pc, #80]	; (8007738 <DMA_CalcBaseAndBitshift+0x64>)
 80076e6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ea:	091b      	lsrs	r3, r3, #4
 80076ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80076ee:	4a13      	ldr	r2, [pc, #76]	; (800773c <DMA_CalcBaseAndBitshift+0x68>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d909      	bls.n	8007716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	1d1a      	adds	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	659a      	str	r2, [r3, #88]	; 0x58
 8007714:	e007      	b.n	8007726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	aaaaaaab 	.word	0xaaaaaaab
 800773c:	0800ed70 	.word	0x0800ed70

08007740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d11f      	bne.n	800779a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b03      	cmp	r3, #3
 800775e:	d856      	bhi.n	800780e <DMA_CheckFifoParam+0xce>
 8007760:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <DMA_CheckFifoParam+0x28>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007779 	.word	0x08007779
 800776c:	0800778b 	.word	0x0800778b
 8007770:	08007779 	.word	0x08007779
 8007774:	0800780f 	.word	0x0800780f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d046      	beq.n	8007812 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007788:	e043      	b.n	8007812 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007792:	d140      	bne.n	8007816 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007798:	e03d      	b.n	8007816 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a2:	d121      	bne.n	80077e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d837      	bhi.n	800781a <DMA_CheckFifoParam+0xda>
 80077aa:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <DMA_CheckFifoParam+0x70>)
 80077ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b0:	080077c1 	.word	0x080077c1
 80077b4:	080077c7 	.word	0x080077c7
 80077b8:	080077c1 	.word	0x080077c1
 80077bc:	080077d9 	.word	0x080077d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
      break;
 80077c4:	e030      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d025      	beq.n	800781e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077d6:	e022      	b.n	800781e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077e0:	d11f      	bne.n	8007822 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077e6:	e01c      	b.n	8007822 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d903      	bls.n	80077f6 <DMA_CheckFifoParam+0xb6>
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d003      	beq.n	80077fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077f4:	e018      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
      break;
 80077fa:	e015      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00e      	beq.n	8007826 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
      break;
 800780c:	e00b      	b.n	8007826 <DMA_CheckFifoParam+0xe6>
      break;
 800780e:	bf00      	nop
 8007810:	e00a      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 8007812:	bf00      	nop
 8007814:	e008      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 8007816:	bf00      	nop
 8007818:	e006      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 800781a:	bf00      	nop
 800781c:	e004      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 800781e:	bf00      	nop
 8007820:	e002      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;   
 8007822:	bf00      	nop
 8007824:	e000      	b.n	8007828 <DMA_CheckFifoParam+0xe8>
      break;
 8007826:	bf00      	nop
    }
  } 
  
  return status; 
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop

08007838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007838:	b480      	push	{r7}
 800783a:	b089      	sub	sp, #36	; 0x24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800784a:	2300      	movs	r3, #0
 800784c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800784e:	2300      	movs	r3, #0
 8007850:	61fb      	str	r3, [r7, #28]
 8007852:	e165      	b.n	8007b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007854:	2201      	movs	r2, #1
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4013      	ands	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	429a      	cmp	r2, r3
 800786e:	f040 8154 	bne.w	8007b1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b01      	cmp	r3, #1
 800787c:	d005      	beq.n	800788a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007886:	2b02      	cmp	r3, #2
 8007888:	d130      	bne.n	80078ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	2203      	movs	r2, #3
 8007896:	fa02 f303 	lsl.w	r3, r2, r3
 800789a:	43db      	mvns	r3, r3
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	4013      	ands	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078c0:	2201      	movs	r2, #1
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	69ba      	ldr	r2, [r7, #24]
 80078cc:	4013      	ands	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	091b      	lsrs	r3, r3, #4
 80078d6:	f003 0201 	and.w	r2, r3, #1
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	69ba      	ldr	r2, [r7, #24]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d017      	beq.n	8007928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	2203      	movs	r2, #3
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	43db      	mvns	r3, r3
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	4013      	ands	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689a      	ldr	r2, [r3, #8]
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4313      	orrs	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	2b02      	cmp	r3, #2
 8007932:	d123      	bne.n	800797c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	08da      	lsrs	r2, r3, #3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3208      	adds	r2, #8
 800793c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	220f      	movs	r2, #15
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	43db      	mvns	r3, r3
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4013      	ands	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4313      	orrs	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	08da      	lsrs	r2, r3, #3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3208      	adds	r2, #8
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	2203      	movs	r2, #3
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 0203 	and.w	r2, r3, #3
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80ae 	beq.w	8007b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	4b5d      	ldr	r3, [pc, #372]	; (8007b38 <HAL_GPIO_Init+0x300>)
 80079c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c6:	4a5c      	ldr	r2, [pc, #368]	; (8007b38 <HAL_GPIO_Init+0x300>)
 80079c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079cc:	6453      	str	r3, [r2, #68]	; 0x44
 80079ce:	4b5a      	ldr	r3, [pc, #360]	; (8007b38 <HAL_GPIO_Init+0x300>)
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80079da:	4a58      	ldr	r2, [pc, #352]	; (8007b3c <HAL_GPIO_Init+0x304>)
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	089b      	lsrs	r3, r3, #2
 80079e0:	3302      	adds	r3, #2
 80079e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	220f      	movs	r2, #15
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43db      	mvns	r3, r3
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4013      	ands	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a4f      	ldr	r2, [pc, #316]	; (8007b40 <HAL_GPIO_Init+0x308>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d025      	beq.n	8007a52 <HAL_GPIO_Init+0x21a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a4e      	ldr	r2, [pc, #312]	; (8007b44 <HAL_GPIO_Init+0x30c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d01f      	beq.n	8007a4e <HAL_GPIO_Init+0x216>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a4d      	ldr	r2, [pc, #308]	; (8007b48 <HAL_GPIO_Init+0x310>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d019      	beq.n	8007a4a <HAL_GPIO_Init+0x212>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a4c      	ldr	r2, [pc, #304]	; (8007b4c <HAL_GPIO_Init+0x314>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d013      	beq.n	8007a46 <HAL_GPIO_Init+0x20e>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a4b      	ldr	r2, [pc, #300]	; (8007b50 <HAL_GPIO_Init+0x318>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00d      	beq.n	8007a42 <HAL_GPIO_Init+0x20a>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a4a      	ldr	r2, [pc, #296]	; (8007b54 <HAL_GPIO_Init+0x31c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d007      	beq.n	8007a3e <HAL_GPIO_Init+0x206>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a49      	ldr	r2, [pc, #292]	; (8007b58 <HAL_GPIO_Init+0x320>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d101      	bne.n	8007a3a <HAL_GPIO_Init+0x202>
 8007a36:	2306      	movs	r3, #6
 8007a38:	e00c      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a3a:	2307      	movs	r3, #7
 8007a3c:	e00a      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a3e:	2305      	movs	r3, #5
 8007a40:	e008      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a42:	2304      	movs	r3, #4
 8007a44:	e006      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a46:	2303      	movs	r3, #3
 8007a48:	e004      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e002      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <HAL_GPIO_Init+0x21c>
 8007a52:	2300      	movs	r3, #0
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	f002 0203 	and.w	r2, r2, #3
 8007a5a:	0092      	lsls	r2, r2, #2
 8007a5c:	4093      	lsls	r3, r2
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a64:	4935      	ldr	r1, [pc, #212]	; (8007b3c <HAL_GPIO_Init+0x304>)
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	089b      	lsrs	r3, r3, #2
 8007a6a:	3302      	adds	r3, #2
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a72:	4b3a      	ldr	r3, [pc, #232]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a96:	4a31      	ldr	r2, [pc, #196]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a9c:	4b2f      	ldr	r3, [pc, #188]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ac0:	4a26      	ldr	r2, [pc, #152]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ac6:	4b25      	ldr	r3, [pc, #148]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007aea:	4a1c      	ldr	r2, [pc, #112]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007af0:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	43db      	mvns	r3, r3
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	4013      	ands	r3, r2
 8007afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007b14:	4a11      	ldr	r2, [pc, #68]	; (8007b5c <HAL_GPIO_Init+0x324>)
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b0f      	cmp	r3, #15
 8007b24:	f67f ae96 	bls.w	8007854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	3724      	adds	r7, #36	; 0x24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	40013800 	.word	0x40013800
 8007b40:	40020000 	.word	0x40020000
 8007b44:	40020400 	.word	0x40020400
 8007b48:	40020800 	.word	0x40020800
 8007b4c:	40020c00 	.word	0x40020c00
 8007b50:	40021000 	.word	0x40021000
 8007b54:	40021400 	.word	0x40021400
 8007b58:	40021800 	.word	0x40021800
 8007b5c:	40013c00 	.word	0x40013c00

08007b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	4013      	ands	r3, r2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e001      	b.n	8007b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	807b      	strh	r3, [r7, #2]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ba0:	787b      	ldrb	r3, [r7, #1]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ba6:	887a      	ldrh	r2, [r7, #2]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007bac:	e003      	b.n	8007bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007bae:	887b      	ldrh	r3, [r7, #2]
 8007bb0:	041a      	lsls	r2, r3, #16
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	619a      	str	r2, [r3, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e0cc      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007bd8:	4b68      	ldr	r3, [pc, #416]	; (8007d7c <HAL_RCC_ClockConfig+0x1b8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d90c      	bls.n	8007c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be6:	4b65      	ldr	r3, [pc, #404]	; (8007d7c <HAL_RCC_ClockConfig+0x1b8>)
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bee:	4b63      	ldr	r3, [pc, #396]	; (8007d7c <HAL_RCC_ClockConfig+0x1b8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d001      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e0b8      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d020      	beq.n	8007c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c18:	4b59      	ldr	r3, [pc, #356]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	4a58      	ldr	r2, [pc, #352]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c30:	4b53      	ldr	r3, [pc, #332]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	4a52      	ldr	r2, [pc, #328]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c3c:	4b50      	ldr	r3, [pc, #320]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	494d      	ldr	r1, [pc, #308]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d044      	beq.n	8007ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d107      	bne.n	8007c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c62:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d119      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e07f      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d003      	beq.n	8007c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d107      	bne.n	8007c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c82:	4b3f      	ldr	r3, [pc, #252]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e06f      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c92:	4b3b      	ldr	r3, [pc, #236]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e067      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ca2:	4b37      	ldr	r3, [pc, #220]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f023 0203 	bic.w	r2, r3, #3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4934      	ldr	r1, [pc, #208]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cb4:	f7fe fa20 	bl	80060f8 <HAL_GetTick>
 8007cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cba:	e00a      	b.n	8007cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cbc:	f7fe fa1c 	bl	80060f8 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e04f      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd2:	4b2b      	ldr	r3, [pc, #172]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 020c 	and.w	r2, r3, #12
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d1eb      	bne.n	8007cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ce4:	4b25      	ldr	r3, [pc, #148]	; (8007d7c <HAL_RCC_ClockConfig+0x1b8>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d20c      	bcs.n	8007d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cf2:	4b22      	ldr	r3, [pc, #136]	; (8007d7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfa:	4b20      	ldr	r3, [pc, #128]	; (8007d7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d001      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e032      	b.n	8007d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d18:	4b19      	ldr	r3, [pc, #100]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	4916      	ldr	r1, [pc, #88]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d009      	beq.n	8007d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	490e      	ldr	r1, [pc, #56]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d4a:	f000 f887 	bl	8007e5c <HAL_RCC_GetSysClockFreq>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	091b      	lsrs	r3, r3, #4
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	490a      	ldr	r1, [pc, #40]	; (8007d84 <HAL_RCC_ClockConfig+0x1c0>)
 8007d5c:	5ccb      	ldrb	r3, [r1, r3]
 8007d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d62:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <HAL_RCC_ClockConfig+0x1c4>)
 8007d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d66:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_RCC_ClockConfig+0x1c8>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe f816 	bl	8005d9c <HAL_InitTick>

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023c00 	.word	0x40023c00
 8007d80:	40023800 	.word	0x40023800
 8007d84:	0800ed58 	.word	0x0800ed58
 8007d88:	20000014 	.word	0x20000014
 8007d8c:	20000018 	.word	0x20000018

08007d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d96:	681b      	ldr	r3, [r3, #0]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20000014 	.word	0x20000014

08007da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dac:	f7ff fff0 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0a9b      	lsrs	r3, r3, #10
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4903      	ldr	r1, [pc, #12]	; (8007dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dbe:	5ccb      	ldrb	r3, [r1, r3]
 8007dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	0800ed68 	.word	0x0800ed68

08007dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dd4:	f7ff ffdc 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0b5b      	lsrs	r3, r3, #13
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4903      	ldr	r1, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de6:	5ccb      	ldrb	r3, [r1, r3]
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	0800ed68 	.word	0x0800ed68

08007df8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	220f      	movs	r2, #15
 8007e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e08:	4b12      	ldr	r3, [pc, #72]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0203 	and.w	r2, r3, #3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <HAL_RCC_GetClockConfig+0x5c>)
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <HAL_RCC_GetClockConfig+0x60>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	601a      	str	r2, [r3, #0]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800
 8007e58:	40023c00 	.word	0x40023c00

08007e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e60:	b0ae      	sub	sp, #184	; 0xb8
 8007e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e82:	4bcb      	ldr	r3, [pc, #812]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	2b0c      	cmp	r3, #12
 8007e8c:	f200 8206 	bhi.w	800829c <HAL_RCC_GetSysClockFreq+0x440>
 8007e90:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e96:	bf00      	nop
 8007e98:	08007ecd 	.word	0x08007ecd
 8007e9c:	0800829d 	.word	0x0800829d
 8007ea0:	0800829d 	.word	0x0800829d
 8007ea4:	0800829d 	.word	0x0800829d
 8007ea8:	08007ed5 	.word	0x08007ed5
 8007eac:	0800829d 	.word	0x0800829d
 8007eb0:	0800829d 	.word	0x0800829d
 8007eb4:	0800829d 	.word	0x0800829d
 8007eb8:	08007edd 	.word	0x08007edd
 8007ebc:	0800829d 	.word	0x0800829d
 8007ec0:	0800829d 	.word	0x0800829d
 8007ec4:	0800829d 	.word	0x0800829d
 8007ec8:	080080cd 	.word	0x080080cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ecc:	4bb9      	ldr	r3, [pc, #740]	; (80081b4 <HAL_RCC_GetSysClockFreq+0x358>)
 8007ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007ed2:	e1e7      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ed4:	4bb8      	ldr	r3, [pc, #736]	; (80081b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007eda:	e1e3      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007edc:	4bb4      	ldr	r3, [pc, #720]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ee8:	4bb1      	ldr	r3, [pc, #708]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d071      	beq.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ef4:	4bae      	ldr	r3, [pc, #696]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	099b      	lsrs	r3, r3, #6
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f00:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	f04f 0000 	mov.w	r0, #0
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	0159      	lsls	r1, r3, #5
 8007f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f2c:	0150      	lsls	r0, r2, #5
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4621      	mov	r1, r4
 8007f34:	1a51      	subs	r1, r2, r1
 8007f36:	6439      	str	r1, [r7, #64]	; 0x40
 8007f38:	4629      	mov	r1, r5
 8007f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8007f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	018b      	lsls	r3, r1, #6
 8007f50:	4641      	mov	r1, r8
 8007f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f56:	4641      	mov	r1, r8
 8007f58:	018a      	lsls	r2, r1, #6
 8007f5a:	4641      	mov	r1, r8
 8007f5c:	1a51      	subs	r1, r2, r1
 8007f5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f60:	4649      	mov	r1, r9
 8007f62:	eb63 0301 	sbc.w	r3, r3, r1
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f68:	f04f 0200 	mov.w	r2, #0
 8007f6c:	f04f 0300 	mov.w	r3, #0
 8007f70:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007f74:	4649      	mov	r1, r9
 8007f76:	00cb      	lsls	r3, r1, #3
 8007f78:	4641      	mov	r1, r8
 8007f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7e:	4641      	mov	r1, r8
 8007f80:	00ca      	lsls	r2, r1, #3
 8007f82:	4610      	mov	r0, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	4603      	mov	r3, r0
 8007f88:	4622      	mov	r2, r4
 8007f8a:	189b      	adds	r3, r3, r2
 8007f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f8e:	462b      	mov	r3, r5
 8007f90:	460a      	mov	r2, r1
 8007f92:	eb42 0303 	adc.w	r3, r2, r3
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0300 	mov.w	r3, #0
 8007fa0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	024b      	lsls	r3, r1, #9
 8007fa8:	4621      	mov	r1, r4
 8007faa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007fae:	4621      	mov	r1, r4
 8007fb0:	024a      	lsls	r2, r1, #9
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007fc8:	f7f8 fdbe 	bl	8000b48 <__aeabi_uldivmod>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fd6:	e067      	b.n	80080a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fd8:	4b75      	ldr	r3, [pc, #468]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	099b      	lsrs	r3, r3, #6
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007fe4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ff6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	f04f 0000 	mov.w	r0, #0
 8008002:	f04f 0100 	mov.w	r1, #0
 8008006:	0159      	lsls	r1, r3, #5
 8008008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800800c:	0150      	lsls	r0, r2, #5
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4621      	mov	r1, r4
 8008014:	1a51      	subs	r1, r2, r1
 8008016:	62b9      	str	r1, [r7, #40]	; 0x28
 8008018:	4629      	mov	r1, r5
 800801a:	eb63 0301 	sbc.w	r3, r3, r1
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800802c:	4649      	mov	r1, r9
 800802e:	018b      	lsls	r3, r1, #6
 8008030:	4641      	mov	r1, r8
 8008032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008036:	4641      	mov	r1, r8
 8008038:	018a      	lsls	r2, r1, #6
 800803a:	4641      	mov	r1, r8
 800803c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008040:	4649      	mov	r1, r9
 8008042:	eb63 0b01 	sbc.w	fp, r3, r1
 8008046:	f04f 0200 	mov.w	r2, #0
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008052:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008056:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800805a:	4692      	mov	sl, r2
 800805c:	469b      	mov	fp, r3
 800805e:	4623      	mov	r3, r4
 8008060:	eb1a 0303 	adds.w	r3, sl, r3
 8008064:	623b      	str	r3, [r7, #32]
 8008066:	462b      	mov	r3, r5
 8008068:	eb4b 0303 	adc.w	r3, fp, r3
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
 800806e:	f04f 0200 	mov.w	r2, #0
 8008072:	f04f 0300 	mov.w	r3, #0
 8008076:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800807a:	4629      	mov	r1, r5
 800807c:	028b      	lsls	r3, r1, #10
 800807e:	4621      	mov	r1, r4
 8008080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008084:	4621      	mov	r1, r4
 8008086:	028a      	lsls	r2, r1, #10
 8008088:	4610      	mov	r0, r2
 800808a:	4619      	mov	r1, r3
 800808c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008090:	2200      	movs	r2, #0
 8008092:	673b      	str	r3, [r7, #112]	; 0x70
 8008094:	677a      	str	r2, [r7, #116]	; 0x74
 8008096:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800809a:	f7f8 fd55 	bl	8000b48 <__aeabi_uldivmod>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4613      	mov	r3, r2
 80080a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080a8:	4b41      	ldr	r3, [pc, #260]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	f003 0303 	and.w	r3, r3, #3
 80080b2:	3301      	adds	r3, #1
 80080b4:	005b      	lsls	r3, r3, #1
 80080b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80080ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80080ca:	e0eb      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080cc:	4b38      	ldr	r3, [pc, #224]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080d8:	4b35      	ldr	r3, [pc, #212]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d06b      	beq.n	80081bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080e4:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	099b      	lsrs	r3, r3, #6
 80080ea:	2200      	movs	r2, #0
 80080ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80080ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	663b      	str	r3, [r7, #96]	; 0x60
 80080f8:	2300      	movs	r3, #0
 80080fa:	667b      	str	r3, [r7, #100]	; 0x64
 80080fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8008100:	4622      	mov	r2, r4
 8008102:	462b      	mov	r3, r5
 8008104:	f04f 0000 	mov.w	r0, #0
 8008108:	f04f 0100 	mov.w	r1, #0
 800810c:	0159      	lsls	r1, r3, #5
 800810e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008112:	0150      	lsls	r0, r2, #5
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	4621      	mov	r1, r4
 800811a:	1a51      	subs	r1, r2, r1
 800811c:	61b9      	str	r1, [r7, #24]
 800811e:	4629      	mov	r1, r5
 8008120:	eb63 0301 	sbc.w	r3, r3, r1
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008132:	4659      	mov	r1, fp
 8008134:	018b      	lsls	r3, r1, #6
 8008136:	4651      	mov	r1, sl
 8008138:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800813c:	4651      	mov	r1, sl
 800813e:	018a      	lsls	r2, r1, #6
 8008140:	4651      	mov	r1, sl
 8008142:	ebb2 0801 	subs.w	r8, r2, r1
 8008146:	4659      	mov	r1, fp
 8008148:	eb63 0901 	sbc.w	r9, r3, r1
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008158:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800815c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008160:	4690      	mov	r8, r2
 8008162:	4699      	mov	r9, r3
 8008164:	4623      	mov	r3, r4
 8008166:	eb18 0303 	adds.w	r3, r8, r3
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	462b      	mov	r3, r5
 800816e:	eb49 0303 	adc.w	r3, r9, r3
 8008172:	617b      	str	r3, [r7, #20]
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	f04f 0300 	mov.w	r3, #0
 800817c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008180:	4629      	mov	r1, r5
 8008182:	024b      	lsls	r3, r1, #9
 8008184:	4621      	mov	r1, r4
 8008186:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800818a:	4621      	mov	r1, r4
 800818c:	024a      	lsls	r2, r1, #9
 800818e:	4610      	mov	r0, r2
 8008190:	4619      	mov	r1, r3
 8008192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008196:	2200      	movs	r2, #0
 8008198:	65bb      	str	r3, [r7, #88]	; 0x58
 800819a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800819c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081a0:	f7f8 fcd2 	bl	8000b48 <__aeabi_uldivmod>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4613      	mov	r3, r2
 80081aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081ae:	e065      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x420>
 80081b0:	40023800 	.word	0x40023800
 80081b4:	00f42400 	.word	0x00f42400
 80081b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081bc:	4b3d      	ldr	r3, [pc, #244]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	099b      	lsrs	r3, r3, #6
 80081c2:	2200      	movs	r2, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	4611      	mov	r1, r2
 80081c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081cc:	653b      	str	r3, [r7, #80]	; 0x50
 80081ce:	2300      	movs	r3, #0
 80081d0:	657b      	str	r3, [r7, #84]	; 0x54
 80081d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80081d6:	4642      	mov	r2, r8
 80081d8:	464b      	mov	r3, r9
 80081da:	f04f 0000 	mov.w	r0, #0
 80081de:	f04f 0100 	mov.w	r1, #0
 80081e2:	0159      	lsls	r1, r3, #5
 80081e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e8:	0150      	lsls	r0, r2, #5
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4641      	mov	r1, r8
 80081f0:	1a51      	subs	r1, r2, r1
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	4649      	mov	r1, r9
 80081f6:	eb63 0301 	sbc.w	r3, r3, r1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008208:	4659      	mov	r1, fp
 800820a:	018b      	lsls	r3, r1, #6
 800820c:	4651      	mov	r1, sl
 800820e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008212:	4651      	mov	r1, sl
 8008214:	018a      	lsls	r2, r1, #6
 8008216:	4651      	mov	r1, sl
 8008218:	1a54      	subs	r4, r2, r1
 800821a:	4659      	mov	r1, fp
 800821c:	eb63 0501 	sbc.w	r5, r3, r1
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	00eb      	lsls	r3, r5, #3
 800822a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800822e:	00e2      	lsls	r2, r4, #3
 8008230:	4614      	mov	r4, r2
 8008232:	461d      	mov	r5, r3
 8008234:	4643      	mov	r3, r8
 8008236:	18e3      	adds	r3, r4, r3
 8008238:	603b      	str	r3, [r7, #0]
 800823a:	464b      	mov	r3, r9
 800823c:	eb45 0303 	adc.w	r3, r5, r3
 8008240:	607b      	str	r3, [r7, #4]
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800824e:	4629      	mov	r1, r5
 8008250:	028b      	lsls	r3, r1, #10
 8008252:	4621      	mov	r1, r4
 8008254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008258:	4621      	mov	r1, r4
 800825a:	028a      	lsls	r2, r1, #10
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008264:	2200      	movs	r2, #0
 8008266:	64bb      	str	r3, [r7, #72]	; 0x48
 8008268:	64fa      	str	r2, [r7, #76]	; 0x4c
 800826a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800826e:	f7f8 fc6b 	bl	8000b48 <__aeabi_uldivmod>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4613      	mov	r3, r2
 8008278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	0f1b      	lsrs	r3, r3, #28
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800828a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800828e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008292:	fbb2 f3f3 	udiv	r3, r2, r3
 8008296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800829a:	e003      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800829e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80082a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	37b8      	adds	r7, #184	; 0xb8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082b2:	bf00      	nop
 80082b4:	40023800 	.word	0x40023800
 80082b8:	00f42400 	.word	0x00f42400

080082bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e28d      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8083 	beq.w	80083e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80082dc:	4b94      	ldr	r3, [pc, #592]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f003 030c 	and.w	r3, r3, #12
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d019      	beq.n	800831c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80082e8:	4b91      	ldr	r3, [pc, #580]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d106      	bne.n	8008302 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80082f4:	4b8e      	ldr	r3, [pc, #568]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008300:	d00c      	beq.n	800831c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008302:	4b8b      	ldr	r3, [pc, #556]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800830a:	2b0c      	cmp	r3, #12
 800830c:	d112      	bne.n	8008334 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800830e:	4b88      	ldr	r3, [pc, #544]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800831a:	d10b      	bne.n	8008334 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800831c:	4b84      	ldr	r3, [pc, #528]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d05b      	beq.n	80083e0 <HAL_RCC_OscConfig+0x124>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d157      	bne.n	80083e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e25a      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833c:	d106      	bne.n	800834c <HAL_RCC_OscConfig+0x90>
 800833e:	4b7c      	ldr	r3, [pc, #496]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a7b      	ldr	r2, [pc, #492]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	e01d      	b.n	8008388 <HAL_RCC_OscConfig+0xcc>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008354:	d10c      	bne.n	8008370 <HAL_RCC_OscConfig+0xb4>
 8008356:	4b76      	ldr	r3, [pc, #472]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a75      	ldr	r2, [pc, #468]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 800835c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	4b73      	ldr	r3, [pc, #460]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a72      	ldr	r2, [pc, #456]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	e00b      	b.n	8008388 <HAL_RCC_OscConfig+0xcc>
 8008370:	4b6f      	ldr	r3, [pc, #444]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a6e      	ldr	r2, [pc, #440]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	4b6c      	ldr	r3, [pc, #432]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a6b      	ldr	r2, [pc, #428]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d013      	beq.n	80083b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008390:	f7fd feb2 	bl	80060f8 <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008398:	f7fd feae 	bl	80060f8 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b64      	cmp	r3, #100	; 0x64
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e21f      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083aa:	4b61      	ldr	r3, [pc, #388]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0f0      	beq.n	8008398 <HAL_RCC_OscConfig+0xdc>
 80083b6:	e014      	b.n	80083e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b8:	f7fd fe9e 	bl	80060f8 <HAL_GetTick>
 80083bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083c0:	f7fd fe9a 	bl	80060f8 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b64      	cmp	r3, #100	; 0x64
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e20b      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083d2:	4b57      	ldr	r3, [pc, #348]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1f0      	bne.n	80083c0 <HAL_RCC_OscConfig+0x104>
 80083de:	e000      	b.n	80083e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d06f      	beq.n	80084ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80083ee:	4b50      	ldr	r3, [pc, #320]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 030c 	and.w	r3, r3, #12
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d017      	beq.n	800842a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80083fa:	4b4d      	ldr	r3, [pc, #308]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008402:	2b08      	cmp	r3, #8
 8008404:	d105      	bne.n	8008412 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008406:	4b4a      	ldr	r3, [pc, #296]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008412:	4b47      	ldr	r3, [pc, #284]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800841a:	2b0c      	cmp	r3, #12
 800841c:	d11c      	bne.n	8008458 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800841e:	4b44      	ldr	r3, [pc, #272]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d116      	bne.n	8008458 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800842a:	4b41      	ldr	r3, [pc, #260]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b00      	cmp	r3, #0
 8008434:	d005      	beq.n	8008442 <HAL_RCC_OscConfig+0x186>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d001      	beq.n	8008442 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e1d3      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008442:	4b3b      	ldr	r3, [pc, #236]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4937      	ldr	r1, [pc, #220]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008452:	4313      	orrs	r3, r2
 8008454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008456:	e03a      	b.n	80084ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d020      	beq.n	80084a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008460:	4b34      	ldr	r3, [pc, #208]	; (8008534 <HAL_RCC_OscConfig+0x278>)
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008466:	f7fd fe47 	bl	80060f8 <HAL_GetTick>
 800846a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800846e:	f7fd fe43 	bl	80060f8 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e1b4      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008480:	4b2b      	ldr	r3, [pc, #172]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d0f0      	beq.n	800846e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800848c:	4b28      	ldr	r3, [pc, #160]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	00db      	lsls	r3, r3, #3
 800849a:	4925      	ldr	r1, [pc, #148]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 800849c:	4313      	orrs	r3, r2
 800849e:	600b      	str	r3, [r1, #0]
 80084a0:	e015      	b.n	80084ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084a2:	4b24      	ldr	r3, [pc, #144]	; (8008534 <HAL_RCC_OscConfig+0x278>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a8:	f7fd fe26 	bl	80060f8 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ae:	e008      	b.n	80084c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084b0:	f7fd fe22 	bl	80060f8 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e193      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084c2:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1f0      	bne.n	80084b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d036      	beq.n	8008548 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d016      	beq.n	8008510 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <HAL_RCC_OscConfig+0x27c>)
 80084e4:	2201      	movs	r2, #1
 80084e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e8:	f7fd fe06 	bl	80060f8 <HAL_GetTick>
 80084ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084f0:	f7fd fe02 	bl	80060f8 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e173      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008502:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <HAL_RCC_OscConfig+0x274>)
 8008504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f0      	beq.n	80084f0 <HAL_RCC_OscConfig+0x234>
 800850e:	e01b      	b.n	8008548 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <HAL_RCC_OscConfig+0x27c>)
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008516:	f7fd fdef 	bl	80060f8 <HAL_GetTick>
 800851a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800851c:	e00e      	b.n	800853c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800851e:	f7fd fdeb 	bl	80060f8 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d907      	bls.n	800853c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e15c      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
 8008530:	40023800 	.word	0x40023800
 8008534:	42470000 	.word	0x42470000
 8008538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800853c:	4b8a      	ldr	r3, [pc, #552]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800853e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1ea      	bne.n	800851e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 8097 	beq.w	8008684 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800855a:	4b83      	ldr	r3, [pc, #524]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10f      	bne.n	8008586 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008566:	2300      	movs	r3, #0
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	4b7f      	ldr	r3, [pc, #508]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	4a7e      	ldr	r2, [pc, #504]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008574:	6413      	str	r3, [r2, #64]	; 0x40
 8008576:	4b7c      	ldr	r3, [pc, #496]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800857e:	60bb      	str	r3, [r7, #8]
 8008580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008582:	2301      	movs	r3, #1
 8008584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008586:	4b79      	ldr	r3, [pc, #484]	; (800876c <HAL_RCC_OscConfig+0x4b0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858e:	2b00      	cmp	r3, #0
 8008590:	d118      	bne.n	80085c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008592:	4b76      	ldr	r3, [pc, #472]	; (800876c <HAL_RCC_OscConfig+0x4b0>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a75      	ldr	r2, [pc, #468]	; (800876c <HAL_RCC_OscConfig+0x4b0>)
 8008598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800859e:	f7fd fdab 	bl	80060f8 <HAL_GetTick>
 80085a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a4:	e008      	b.n	80085b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a6:	f7fd fda7 	bl	80060f8 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d901      	bls.n	80085b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e118      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b8:	4b6c      	ldr	r3, [pc, #432]	; (800876c <HAL_RCC_OscConfig+0x4b0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0f0      	beq.n	80085a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d106      	bne.n	80085da <HAL_RCC_OscConfig+0x31e>
 80085cc:	4b66      	ldr	r3, [pc, #408]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d0:	4a65      	ldr	r2, [pc, #404]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085d2:	f043 0301 	orr.w	r3, r3, #1
 80085d6:	6713      	str	r3, [r2, #112]	; 0x70
 80085d8:	e01c      	b.n	8008614 <HAL_RCC_OscConfig+0x358>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b05      	cmp	r3, #5
 80085e0:	d10c      	bne.n	80085fc <HAL_RCC_OscConfig+0x340>
 80085e2:	4b61      	ldr	r3, [pc, #388]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e6:	4a60      	ldr	r2, [pc, #384]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085e8:	f043 0304 	orr.w	r3, r3, #4
 80085ec:	6713      	str	r3, [r2, #112]	; 0x70
 80085ee:	4b5e      	ldr	r3, [pc, #376]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f2:	4a5d      	ldr	r2, [pc, #372]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085f4:	f043 0301 	orr.w	r3, r3, #1
 80085f8:	6713      	str	r3, [r2, #112]	; 0x70
 80085fa:	e00b      	b.n	8008614 <HAL_RCC_OscConfig+0x358>
 80085fc:	4b5a      	ldr	r3, [pc, #360]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80085fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008600:	4a59      	ldr	r2, [pc, #356]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008602:	f023 0301 	bic.w	r3, r3, #1
 8008606:	6713      	str	r3, [r2, #112]	; 0x70
 8008608:	4b57      	ldr	r3, [pc, #348]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	4a56      	ldr	r2, [pc, #344]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800860e:	f023 0304 	bic.w	r3, r3, #4
 8008612:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d015      	beq.n	8008648 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800861c:	f7fd fd6c 	bl	80060f8 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008622:	e00a      	b.n	800863a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f7fd fd68 	bl	80060f8 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e0d7      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800863a:	4b4b      	ldr	r3, [pc, #300]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800863c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863e:	f003 0302 	and.w	r3, r3, #2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0ee      	beq.n	8008624 <HAL_RCC_OscConfig+0x368>
 8008646:	e014      	b.n	8008672 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008648:	f7fd fd56 	bl	80060f8 <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800864e:	e00a      	b.n	8008666 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008650:	f7fd fd52 	bl	80060f8 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f241 3288 	movw	r2, #5000	; 0x1388
 800865e:	4293      	cmp	r3, r2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e0c1      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008666:	4b40      	ldr	r3, [pc, #256]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1ee      	bne.n	8008650 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d105      	bne.n	8008684 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008678:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	4a3a      	ldr	r2, [pc, #232]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 800867e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008682:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80ad 	beq.w	80087e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800868e:	4b36      	ldr	r3, [pc, #216]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 030c 	and.w	r3, r3, #12
 8008696:	2b08      	cmp	r3, #8
 8008698:	d060      	beq.n	800875c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d145      	bne.n	800872e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a2:	4b33      	ldr	r3, [pc, #204]	; (8008770 <HAL_RCC_OscConfig+0x4b4>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a8:	f7fd fd26 	bl	80060f8 <HAL_GetTick>
 80086ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086b0:	f7fd fd22 	bl	80060f8 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e093      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1f0      	bne.n	80086b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69da      	ldr	r2, [r3, #28]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	019b      	lsls	r3, r3, #6
 80086de:	431a      	orrs	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	085b      	lsrs	r3, r3, #1
 80086e6:	3b01      	subs	r3, #1
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	061b      	lsls	r3, r3, #24
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	071b      	lsls	r3, r3, #28
 80086fa:	491b      	ldr	r1, [pc, #108]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008700:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <HAL_RCC_OscConfig+0x4b4>)
 8008702:	2201      	movs	r2, #1
 8008704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008706:	f7fd fcf7 	bl	80060f8 <HAL_GetTick>
 800870a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800870e:	f7fd fcf3 	bl	80060f8 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e064      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008720:	4b11      	ldr	r3, [pc, #68]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0f0      	beq.n	800870e <HAL_RCC_OscConfig+0x452>
 800872c:	e05c      	b.n	80087e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800872e:	4b10      	ldr	r3, [pc, #64]	; (8008770 <HAL_RCC_OscConfig+0x4b4>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fd fce0 	bl	80060f8 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800873c:	f7fd fcdc 	bl	80060f8 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e04d      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874e:	4b06      	ldr	r3, [pc, #24]	; (8008768 <HAL_RCC_OscConfig+0x4ac>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x480>
 800875a:	e045      	b.n	80087e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d107      	bne.n	8008774 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e040      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
 8008768:	40023800 	.word	0x40023800
 800876c:	40007000 	.word	0x40007000
 8008770:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008774:	4b1f      	ldr	r3, [pc, #124]	; (80087f4 <HAL_RCC_OscConfig+0x538>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d030      	beq.n	80087e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800878c:	429a      	cmp	r2, r3
 800878e:	d129      	bne.n	80087e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800879a:	429a      	cmp	r2, r3
 800879c:	d122      	bne.n	80087e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087a4:	4013      	ands	r3, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d119      	bne.n	80087e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	085b      	lsrs	r3, r3, #1
 80087bc:	3b01      	subs	r3, #1
 80087be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d10f      	bne.n	80087e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d107      	bne.n	80087e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d001      	beq.n	80087e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e000      	b.n	80087ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	40023800 	.word	0x40023800

080087f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e07b      	b.n	8008902 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2b00      	cmp	r3, #0
 8008810:	d108      	bne.n	8008824 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800881a:	d009      	beq.n	8008830 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	61da      	str	r2, [r3, #28]
 8008822:	e005      	b.n	8008830 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d106      	bne.n	8008850 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fc ffd0 	bl	80057f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008866:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008878:	431a      	orrs	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a1b      	ldr	r3, [r3, #32]
 80088b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b4:	ea42 0103 	orr.w	r1, r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	f003 0104 	and.w	r1, r3, #4
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	f003 0210 	and.w	r2, r3, #16
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b08c      	sub	sp, #48	; 0x30
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008918:	2301      	movs	r3, #1
 800891a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_SPI_TransmitReceive+0x26>
 800892c:	2302      	movs	r3, #2
 800892e:	e198      	b.n	8008c62 <HAL_SPI_TransmitReceive+0x358>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008938:	f7fd fbde 	bl	80060f8 <HAL_GetTick>
 800893c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800894e:	887b      	ldrh	r3, [r7, #2]
 8008950:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008956:	2b01      	cmp	r3, #1
 8008958:	d00f      	beq.n	800897a <HAL_SPI_TransmitReceive+0x70>
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008960:	d107      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <HAL_SPI_TransmitReceive+0x68>
 800896a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800896e:	2b04      	cmp	r3, #4
 8008970:	d003      	beq.n	800897a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008972:	2302      	movs	r3, #2
 8008974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008978:	e16d      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <HAL_SPI_TransmitReceive+0x82>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_SPI_TransmitReceive+0x82>
 8008986:	887b      	ldrh	r3, [r7, #2]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008992:	e160      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b04      	cmp	r3, #4
 800899e:	d003      	beq.n	80089a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2205      	movs	r2, #5
 80089a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	887a      	ldrh	r2, [r7, #2]
 80089be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	887a      	ldrh	r2, [r7, #2]
 80089ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	887a      	ldrh	r2, [r7, #2]
 80089d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b40      	cmp	r3, #64	; 0x40
 80089ea:	d007      	beq.n	80089fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a04:	d17c      	bne.n	8008b00 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_SPI_TransmitReceive+0x10a>
 8008a0e:	8b7b      	ldrh	r3, [r7, #26]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d16a      	bne.n	8008aea <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	881a      	ldrh	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	1c9a      	adds	r2, r3, #2
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	3b01      	subs	r3, #1
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a38:	e057      	b.n	8008aea <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 0302 	and.w	r3, r3, #2
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d11b      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x176>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d016      	beq.n	8008a80 <HAL_SPI_TransmitReceive+0x176>
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d113      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	881a      	ldrh	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	1c9a      	adds	r2, r3, #2
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d119      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x1b8>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d014      	beq.n	8008ac2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	1c9a      	adds	r2, r3, #2
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ac2:	f7fd fb19 	bl	80060f8 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d80b      	bhi.n	8008aea <HAL_SPI_TransmitReceive+0x1e0>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ad8:	d007      	beq.n	8008aea <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008ae8:	e0b5      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1a2      	bne.n	8008a3a <HAL_SPI_TransmitReceive+0x130>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d19d      	bne.n	8008a3a <HAL_SPI_TransmitReceive+0x130>
 8008afe:	e080      	b.n	8008c02 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_SPI_TransmitReceive+0x204>
 8008b08:	8b7b      	ldrh	r3, [r7, #26]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d16f      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	7812      	ldrb	r2, [r2, #0]
 8008b1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b34:	e05b      	b.n	8008bee <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d11c      	bne.n	8008b7e <HAL_SPI_TransmitReceive+0x274>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d017      	beq.n	8008b7e <HAL_SPI_TransmitReceive+0x274>
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d114      	bne.n	8008b7e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	330c      	adds	r3, #12
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d119      	bne.n	8008bc0 <HAL_SPI_TransmitReceive+0x2b6>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d014      	beq.n	8008bc0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	b2d2      	uxtb	r2, r2
 8008ba2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008bc0:	f7fd fa9a 	bl	80060f8 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d803      	bhi.n	8008bd8 <HAL_SPI_TransmitReceive+0x2ce>
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd6:	d102      	bne.n	8008bde <HAL_SPI_TransmitReceive+0x2d4>
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d107      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008bec:	e033      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d19e      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x22c>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d199      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f8b8 	bl	8008d7c <SPI_EndRxTxTransaction>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d006      	beq.n	8008c20 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008c1e:	e01a      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c4c:	e003      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3730      	adds	r7, #48	; 0x30
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c7c:	f7fd fa3c 	bl	80060f8 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	4413      	add	r3, r2
 8008c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c8c:	f7fd fa34 	bl	80060f8 <HAL_GetTick>
 8008c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c92:	4b39      	ldr	r3, [pc, #228]	; (8008d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	015b      	lsls	r3, r3, #5
 8008c98:	0d1b      	lsrs	r3, r3, #20
 8008c9a:	69fa      	ldr	r2, [r7, #28]
 8008c9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ca2:	e054      	b.n	8008d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008caa:	d050      	beq.n	8008d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cac:	f7fd fa24 	bl	80060f8 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	69fa      	ldr	r2, [r7, #28]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d902      	bls.n	8008cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d13d      	bne.n	8008d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cda:	d111      	bne.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ce4:	d004      	beq.n	8008cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cee:	d107      	bne.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d08:	d10f      	bne.n	8008d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e017      	b.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4013      	ands	r3, r2
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d19b      	bne.n	8008ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000014 	.word	0x20000014

08008d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	2102      	movs	r1, #2
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff ff6a 	bl	8008c6c <SPI_WaitFlagStateUntilTimeout>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008da2:	f043 0220 	orr.w	r2, r3, #32
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e032      	b.n	8008e14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008dae:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <SPI_EndRxTxTransaction+0xa0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <SPI_EndRxTxTransaction+0xa4>)
 8008db4:	fba2 2303 	umull	r2, r3, r2, r3
 8008db8:	0d5b      	lsrs	r3, r3, #21
 8008dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dcc:	d112      	bne.n	8008df4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2180      	movs	r1, #128	; 0x80
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff ff47 	bl	8008c6c <SPI_WaitFlagStateUntilTimeout>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d016      	beq.n	8008e12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de8:	f043 0220 	orr.w	r2, r3, #32
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e00f      	b.n	8008e14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00a      	beq.n	8008e10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e0a:	2b80      	cmp	r3, #128	; 0x80
 8008e0c:	d0f2      	beq.n	8008df4 <SPI_EndRxTxTransaction+0x78>
 8008e0e:	e000      	b.n	8008e12 <SPI_EndRxTxTransaction+0x96>
        break;
 8008e10:	bf00      	nop
  }

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20000014 	.word	0x20000014
 8008e20:	165e9f81 	.word	0x165e9f81

08008e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e041      	b.n	8008eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7fc fd2a 	bl	80058a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	4619      	mov	r1, r3
 8008e62:	4610      	mov	r0, r2
 8008e64:	f000 fe8c 	bl	8009b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d001      	beq.n	8008edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e04e      	b.n	8008f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a23      	ldr	r2, [pc, #140]	; (8008f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d022      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f06:	d01d      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a1f      	ldr	r2, [pc, #124]	; (8008f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d018      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a1e      	ldr	r2, [pc, #120]	; (8008f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d013      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a1c      	ldr	r2, [pc, #112]	; (8008f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00e      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a1b      	ldr	r2, [pc, #108]	; (8008f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d009      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a19      	ldr	r2, [pc, #100]	; (8008f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d004      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0x80>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a18      	ldr	r2, [pc, #96]	; (8008fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d111      	bne.n	8008f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b06      	cmp	r3, #6
 8008f54:	d010      	beq.n	8008f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0201 	orr.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f66:	e007      	b.n	8008f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0201 	orr.w	r2, r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40000400 	.word	0x40000400
 8008f90:	40000800 	.word	0x40000800
 8008f94:	40000c00 	.word	0x40000c00
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40001800 	.word	0x40001800

08008fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e041      	b.n	800903a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f839 	bl	8009042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f000 fdcc 	bl	8009b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800904a:	bf00      	nop
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
	...

08009058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d109      	bne.n	800907c <HAL_TIM_PWM_Start+0x24>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	bf14      	ite	ne
 8009074:	2301      	movne	r3, #1
 8009076:	2300      	moveq	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	e022      	b.n	80090c2 <HAL_TIM_PWM_Start+0x6a>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b04      	cmp	r3, #4
 8009080:	d109      	bne.n	8009096 <HAL_TIM_PWM_Start+0x3e>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b01      	cmp	r3, #1
 800908c:	bf14      	ite	ne
 800908e:	2301      	movne	r3, #1
 8009090:	2300      	moveq	r3, #0
 8009092:	b2db      	uxtb	r3, r3
 8009094:	e015      	b.n	80090c2 <HAL_TIM_PWM_Start+0x6a>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b08      	cmp	r3, #8
 800909a:	d109      	bne.n	80090b0 <HAL_TIM_PWM_Start+0x58>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	bf14      	ite	ne
 80090a8:	2301      	movne	r3, #1
 80090aa:	2300      	moveq	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	e008      	b.n	80090c2 <HAL_TIM_PWM_Start+0x6a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	bf14      	ite	ne
 80090bc:	2301      	movne	r3, #1
 80090be:	2300      	moveq	r3, #0
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e07c      	b.n	80091c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <HAL_TIM_PWM_Start+0x82>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2202      	movs	r2, #2
 80090d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090d8:	e013      	b.n	8009102 <HAL_TIM_PWM_Start+0xaa>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d104      	bne.n	80090ea <HAL_TIM_PWM_Start+0x92>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e8:	e00b      	b.n	8009102 <HAL_TIM_PWM_Start+0xaa>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	d104      	bne.n	80090fa <HAL_TIM_PWM_Start+0xa2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f8:	e003      	b.n	8009102 <HAL_TIM_PWM_Start+0xaa>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2202      	movs	r2, #2
 80090fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2201      	movs	r2, #1
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f001 f958 	bl	800a3c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a2d      	ldr	r2, [pc, #180]	; (80091cc <HAL_TIM_PWM_Start+0x174>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d004      	beq.n	8009124 <HAL_TIM_PWM_Start+0xcc>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a2c      	ldr	r2, [pc, #176]	; (80091d0 <HAL_TIM_PWM_Start+0x178>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d101      	bne.n	8009128 <HAL_TIM_PWM_Start+0xd0>
 8009124:	2301      	movs	r3, #1
 8009126:	e000      	b.n	800912a <HAL_TIM_PWM_Start+0xd2>
 8009128:	2300      	movs	r3, #0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800913c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a22      	ldr	r2, [pc, #136]	; (80091cc <HAL_TIM_PWM_Start+0x174>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d022      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009150:	d01d      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <HAL_TIM_PWM_Start+0x17c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d018      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <HAL_TIM_PWM_Start+0x180>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d013      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <HAL_TIM_PWM_Start+0x184>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00e      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a16      	ldr	r2, [pc, #88]	; (80091d0 <HAL_TIM_PWM_Start+0x178>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d009      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a18      	ldr	r2, [pc, #96]	; (80091e0 <HAL_TIM_PWM_Start+0x188>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d004      	beq.n	800918e <HAL_TIM_PWM_Start+0x136>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a16      	ldr	r2, [pc, #88]	; (80091e4 <HAL_TIM_PWM_Start+0x18c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d111      	bne.n	80091b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b06      	cmp	r3, #6
 800919e:	d010      	beq.n	80091c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b0:	e007      	b.n	80091c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0201 	orr.w	r2, r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	40010000 	.word	0x40010000
 80091d0:	40010400 	.word	0x40010400
 80091d4:	40000400 	.word	0x40000400
 80091d8:	40000800 	.word	0x40000800
 80091dc:	40000c00 	.word	0x40000c00
 80091e0:	40014000 	.word	0x40014000
 80091e4:	40001800 	.word	0x40001800

080091e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e041      	b.n	800927e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d106      	bne.n	8009214 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f839 	bl	8009286 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3304      	adds	r3, #4
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f000 fcaa 	bl	8009b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2201      	movs	r2, #1
 8009230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800928e:	bf00      	nop
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e097      	b.n	80093de <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fc fb62 	bl	800598c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6812      	ldr	r2, [r2, #0]
 80092da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092de:	f023 0307 	bic.w	r3, r3, #7
 80092e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f000 fc46 	bl	8009b80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	4313      	orrs	r3, r2
 8009314:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931c:	f023 0303 	bic.w	r3, r3, #3
 8009320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	689a      	ldr	r2, [r3, #8]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	4313      	orrs	r3, r2
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800933a:	f023 030c 	bic.w	r3, r3, #12
 800933e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800934a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	021b      	lsls	r3, r3, #8
 8009356:	4313      	orrs	r3, r2
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	011a      	lsls	r2, r3, #4
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	031b      	lsls	r3, r3, #12
 800936a:	4313      	orrs	r3, r2
 800936c:	693a      	ldr	r2, [r7, #16]
 800936e:	4313      	orrs	r3, r2
 8009370:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009378:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009380:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	4313      	orrs	r3, r2
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093f6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80093fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009406:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800940e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d110      	bne.n	8009438 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d102      	bne.n	8009422 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800941c:	7b7b      	ldrb	r3, [r7, #13]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d001      	beq.n	8009426 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e069      	b.n	80094fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2202      	movs	r2, #2
 8009432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009436:	e031      	b.n	800949c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b04      	cmp	r3, #4
 800943c:	d110      	bne.n	8009460 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009444:	7b3b      	ldrb	r3, [r7, #12]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d001      	beq.n	800944e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e055      	b.n	80094fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2202      	movs	r2, #2
 800945a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800945e:	e01d      	b.n	800949c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d108      	bne.n	8009478 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d105      	bne.n	8009478 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800946c:	7b7b      	ldrb	r3, [r7, #13]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d102      	bne.n	8009478 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009472:	7b3b      	ldrb	r3, [r7, #12]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d001      	beq.n	800947c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e03e      	b.n	80094fa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <HAL_TIM_Encoder_Start+0xc4>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d008      	beq.n	80094ba <HAL_TIM_Encoder_Start+0xd4>
 80094a8:	e00f      	b.n	80094ca <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2201      	movs	r2, #1
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 ff84 	bl	800a3c0 <TIM_CCxChannelCmd>
      break;
 80094b8:	e016      	b.n	80094e8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2201      	movs	r2, #1
 80094c0:	2104      	movs	r1, #4
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 ff7c 	bl	800a3c0 <TIM_CCxChannelCmd>
      break;
 80094c8:	e00e      	b.n	80094e8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2201      	movs	r2, #1
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 ff74 	bl	800a3c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2201      	movs	r2, #1
 80094de:	2104      	movs	r1, #4
 80094e0:	4618      	mov	r0, r3
 80094e2:	f000 ff6d 	bl	800a3c0 <TIM_CCxChannelCmd>
      break;
 80094e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0201 	orr.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d020      	beq.n	8009566 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01b      	beq.n	8009566 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f06f 0202 	mvn.w	r2, #2
 8009536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 faf8 	bl	8009b42 <HAL_TIM_IC_CaptureCallback>
 8009552:	e005      	b.n	8009560 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 faea 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fafb 	bl	8009b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d020      	beq.n	80095b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01b      	beq.n	80095b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f06f 0204 	mvn.w	r2, #4
 8009582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fad2 	bl	8009b42 <HAL_TIM_IC_CaptureCallback>
 800959e:	e005      	b.n	80095ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fac4 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fad5 	bl	8009b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d020      	beq.n	80095fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 0308 	and.w	r3, r3, #8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01b      	beq.n	80095fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f06f 0208 	mvn.w	r2, #8
 80095ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2204      	movs	r2, #4
 80095d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d003      	beq.n	80095ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 faac 	bl	8009b42 <HAL_TIM_IC_CaptureCallback>
 80095ea:	e005      	b.n	80095f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fa9e 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 faaf 	bl	8009b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f003 0310 	and.w	r3, r3, #16
 8009604:	2b00      	cmp	r3, #0
 8009606:	d020      	beq.n	800964a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f003 0310 	and.w	r3, r3, #16
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01b      	beq.n	800964a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f06f 0210 	mvn.w	r2, #16
 800961a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2208      	movs	r2, #8
 8009620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69db      	ldr	r3, [r3, #28]
 8009628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fa86 	bl	8009b42 <HAL_TIM_IC_CaptureCallback>
 8009636:	e005      	b.n	8009644 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 fa78 	bl	8009b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fa89 	bl	8009b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00c      	beq.n	800966e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d007      	beq.n	800966e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f06f 0201 	mvn.w	r2, #1
 8009666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7f9 fe53 	bl	8003314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967e:	2b00      	cmp	r3, #0
 8009680:	d007      	beq.n	8009692 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800968a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 ff95 	bl	800a5bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00c      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d007      	beq.n	80096b6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fa5a 	bl	8009b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f003 0320 	and.w	r3, r3, #32
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00c      	beq.n	80096da <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f003 0320 	and.w	r3, r3, #32
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d007      	beq.n	80096da <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f06f 0220 	mvn.w	r2, #32
 80096d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 ff67 	bl	800a5a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d101      	bne.n	8009700 <HAL_TIM_IC_ConfigChannel+0x1e>
 80096fc:	2302      	movs	r3, #2
 80096fe:	e088      	b.n	8009812 <HAL_TIM_IC_ConfigChannel+0x130>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d11b      	bne.n	8009746 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800971e:	f000 fc8b 	bl	800a038 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	699a      	ldr	r2, [r3, #24]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 020c 	bic.w	r2, r2, #12
 8009730:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6999      	ldr	r1, [r3, #24]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	430a      	orrs	r2, r1
 8009742:	619a      	str	r2, [r3, #24]
 8009744:	e060      	b.n	8009808 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b04      	cmp	r3, #4
 800974a:	d11c      	bne.n	8009786 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800975c:	f000 fd0f 	bl	800a17e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	699a      	ldr	r2, [r3, #24]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800976e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6999      	ldr	r1, [r3, #24]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	021a      	lsls	r2, r3, #8
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	619a      	str	r2, [r3, #24]
 8009784:	e040      	b.n	8009808 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b08      	cmp	r3, #8
 800978a:	d11b      	bne.n	80097c4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800979c:	f000 fd5c 	bl	800a258 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	69da      	ldr	r2, [r3, #28]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 020c 	bic.w	r2, r2, #12
 80097ae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	69d9      	ldr	r1, [r3, #28]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	689a      	ldr	r2, [r3, #8]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	61da      	str	r2, [r3, #28]
 80097c2:	e021      	b.n	8009808 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b0c      	cmp	r3, #12
 80097c8:	d11c      	bne.n	8009804 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80097da:	f000 fd79 	bl	800a2d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	69da      	ldr	r2, [r3, #28]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80097ec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69d9      	ldr	r1, [r3, #28]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	021a      	lsls	r2, r3, #8
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	61da      	str	r2, [r3, #28]
 8009802:	e001      	b.n	8009808 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009836:	2302      	movs	r3, #2
 8009838:	e0ae      	b.n	8009998 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b0c      	cmp	r3, #12
 8009846:	f200 809f 	bhi.w	8009988 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800984a:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	08009885 	.word	0x08009885
 8009854:	08009989 	.word	0x08009989
 8009858:	08009989 	.word	0x08009989
 800985c:	08009989 	.word	0x08009989
 8009860:	080098c5 	.word	0x080098c5
 8009864:	08009989 	.word	0x08009989
 8009868:	08009989 	.word	0x08009989
 800986c:	08009989 	.word	0x08009989
 8009870:	08009907 	.word	0x08009907
 8009874:	08009989 	.word	0x08009989
 8009878:	08009989 	.word	0x08009989
 800987c:	08009989 	.word	0x08009989
 8009880:	08009947 	.word	0x08009947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fa24 	bl	8009cd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 0208 	orr.w	r2, r2, #8
 800989e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699a      	ldr	r2, [r3, #24]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f022 0204 	bic.w	r2, r2, #4
 80098ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6999      	ldr	r1, [r3, #24]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	619a      	str	r2, [r3, #24]
      break;
 80098c2:	e064      	b.n	800998e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68b9      	ldr	r1, [r7, #8]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 fa74 	bl	8009db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699a      	ldr	r2, [r3, #24]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6999      	ldr	r1, [r3, #24]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	021a      	lsls	r2, r3, #8
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	619a      	str	r2, [r3, #24]
      break;
 8009904:	e043      	b.n	800998e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68b9      	ldr	r1, [r7, #8]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fac9 	bl	8009ea4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69da      	ldr	r2, [r3, #28]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0208 	orr.w	r2, r2, #8
 8009920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69da      	ldr	r2, [r3, #28]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0204 	bic.w	r2, r2, #4
 8009930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69d9      	ldr	r1, [r3, #28]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	430a      	orrs	r2, r1
 8009942:	61da      	str	r2, [r3, #28]
      break;
 8009944:	e023      	b.n	800998e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fb1d 	bl	8009f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	69da      	ldr	r2, [r3, #28]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69d9      	ldr	r1, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	021a      	lsls	r2, r3, #8
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	61da      	str	r2, [r3, #28]
      break;
 8009986:	e002      	b.n	800998e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
      break;
 800998c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_TIM_ConfigClockSource+0x1c>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e0b4      	b.n	8009b26 <HAL_TIM_ConfigClockSource+0x186>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80099da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099f4:	d03e      	beq.n	8009a74 <HAL_TIM_ConfigClockSource+0xd4>
 80099f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099fa:	f200 8087 	bhi.w	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 80099fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a02:	f000 8086 	beq.w	8009b12 <HAL_TIM_ConfigClockSource+0x172>
 8009a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a0a:	d87f      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a0c:	2b70      	cmp	r3, #112	; 0x70
 8009a0e:	d01a      	beq.n	8009a46 <HAL_TIM_ConfigClockSource+0xa6>
 8009a10:	2b70      	cmp	r3, #112	; 0x70
 8009a12:	d87b      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a14:	2b60      	cmp	r3, #96	; 0x60
 8009a16:	d050      	beq.n	8009aba <HAL_TIM_ConfigClockSource+0x11a>
 8009a18:	2b60      	cmp	r3, #96	; 0x60
 8009a1a:	d877      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a1c:	2b50      	cmp	r3, #80	; 0x50
 8009a1e:	d03c      	beq.n	8009a9a <HAL_TIM_ConfigClockSource+0xfa>
 8009a20:	2b50      	cmp	r3, #80	; 0x50
 8009a22:	d873      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a24:	2b40      	cmp	r3, #64	; 0x40
 8009a26:	d058      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0x13a>
 8009a28:	2b40      	cmp	r3, #64	; 0x40
 8009a2a:	d86f      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a2c:	2b30      	cmp	r3, #48	; 0x30
 8009a2e:	d064      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x15a>
 8009a30:	2b30      	cmp	r3, #48	; 0x30
 8009a32:	d86b      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a34:	2b20      	cmp	r3, #32
 8009a36:	d060      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x15a>
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d867      	bhi.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d05c      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x15a>
 8009a40:	2b10      	cmp	r3, #16
 8009a42:	d05a      	beq.n	8009afa <HAL_TIM_ConfigClockSource+0x15a>
 8009a44:	e062      	b.n	8009b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a56:	f000 fc93 	bl	800a380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	609a      	str	r2, [r3, #8]
      break;
 8009a72:	e04f      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a84:	f000 fc7c 	bl	800a380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a96:	609a      	str	r2, [r3, #8]
      break;
 8009a98:	e03c      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f000 fb3a 	bl	800a120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2150      	movs	r1, #80	; 0x50
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fc49 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 8009ab8:	e02c      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f000 fb96 	bl	800a1f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2160      	movs	r1, #96	; 0x60
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fc39 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 8009ad8:	e01c      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f000 fb1a 	bl	800a120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2140      	movs	r1, #64	; 0x40
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fc29 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 8009af8:	e00c      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f000 fc20 	bl	800a34a <TIM_ITRx_SetConfig>
      break;
 8009b0a:	e003      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b10:	e000      	b.n	8009b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b36:	bf00      	nop
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b42:	b480      	push	{r7}
 8009b44:	b083      	sub	sp, #12
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b4a:	bf00      	nop
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a46      	ldr	r2, [pc, #280]	; (8009cac <TIM_Base_SetConfig+0x12c>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d013      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b9e:	d00f      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a43      	ldr	r2, [pc, #268]	; (8009cb0 <TIM_Base_SetConfig+0x130>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d00b      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a42      	ldr	r2, [pc, #264]	; (8009cb4 <TIM_Base_SetConfig+0x134>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d007      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a41      	ldr	r2, [pc, #260]	; (8009cb8 <TIM_Base_SetConfig+0x138>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d003      	beq.n	8009bc0 <TIM_Base_SetConfig+0x40>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a40      	ldr	r2, [pc, #256]	; (8009cbc <TIM_Base_SetConfig+0x13c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d108      	bne.n	8009bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a35      	ldr	r2, [pc, #212]	; (8009cac <TIM_Base_SetConfig+0x12c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d02b      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be0:	d027      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a32      	ldr	r2, [pc, #200]	; (8009cb0 <TIM_Base_SetConfig+0x130>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d023      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a31      	ldr	r2, [pc, #196]	; (8009cb4 <TIM_Base_SetConfig+0x134>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d01f      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a30      	ldr	r2, [pc, #192]	; (8009cb8 <TIM_Base_SetConfig+0x138>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d01b      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a2f      	ldr	r2, [pc, #188]	; (8009cbc <TIM_Base_SetConfig+0x13c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d017      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a2e      	ldr	r2, [pc, #184]	; (8009cc0 <TIM_Base_SetConfig+0x140>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d013      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a2d      	ldr	r2, [pc, #180]	; (8009cc4 <TIM_Base_SetConfig+0x144>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d00f      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a2c      	ldr	r2, [pc, #176]	; (8009cc8 <TIM_Base_SetConfig+0x148>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00b      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a2b      	ldr	r2, [pc, #172]	; (8009ccc <TIM_Base_SetConfig+0x14c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d007      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a2a      	ldr	r2, [pc, #168]	; (8009cd0 <TIM_Base_SetConfig+0x150>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_Base_SetConfig+0xb2>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a29      	ldr	r2, [pc, #164]	; (8009cd4 <TIM_Base_SetConfig+0x154>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d108      	bne.n	8009c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a10      	ldr	r2, [pc, #64]	; (8009cac <TIM_Base_SetConfig+0x12c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_Base_SetConfig+0xf8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a12      	ldr	r2, [pc, #72]	; (8009cbc <TIM_Base_SetConfig+0x13c>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d103      	bne.n	8009c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d105      	bne.n	8009c9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f023 0201 	bic.w	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	611a      	str	r2, [r3, #16]
  }
}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40010000 	.word	0x40010000
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	40000c00 	.word	0x40000c00
 8009cbc:	40010400 	.word	0x40010400
 8009cc0:	40014000 	.word	0x40014000
 8009cc4:	40014400 	.word	0x40014400
 8009cc8:	40014800 	.word	0x40014800
 8009ccc:	40001800 	.word	0x40001800
 8009cd0:	40001c00 	.word	0x40001c00
 8009cd4:	40002000 	.word	0x40002000

08009cd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	f023 0201 	bic.w	r2, r3, #1
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0303 	bic.w	r3, r3, #3
 8009d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f023 0302 	bic.w	r3, r3, #2
 8009d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a20      	ldr	r2, [pc, #128]	; (8009db0 <TIM_OC1_SetConfig+0xd8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d003      	beq.n	8009d3c <TIM_OC1_SetConfig+0x64>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a1f      	ldr	r2, [pc, #124]	; (8009db4 <TIM_OC1_SetConfig+0xdc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d10c      	bne.n	8009d56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f023 0308 	bic.w	r3, r3, #8
 8009d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f023 0304 	bic.w	r3, r3, #4
 8009d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a15      	ldr	r2, [pc, #84]	; (8009db0 <TIM_OC1_SetConfig+0xd8>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d003      	beq.n	8009d66 <TIM_OC1_SetConfig+0x8e>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a14      	ldr	r2, [pc, #80]	; (8009db4 <TIM_OC1_SetConfig+0xdc>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d111      	bne.n	8009d8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	693a      	ldr	r2, [r7, #16]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	621a      	str	r2, [r3, #32]
}
 8009da4:	bf00      	nop
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	40010000 	.word	0x40010000
 8009db4:	40010400 	.word	0x40010400

08009db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	f023 0210 	bic.w	r2, r3, #16
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	021b      	lsls	r3, r3, #8
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	f023 0320 	bic.w	r3, r3, #32
 8009e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	697a      	ldr	r2, [r7, #20]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a22      	ldr	r2, [pc, #136]	; (8009e9c <TIM_OC2_SetConfig+0xe4>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d003      	beq.n	8009e20 <TIM_OC2_SetConfig+0x68>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a21      	ldr	r2, [pc, #132]	; (8009ea0 <TIM_OC2_SetConfig+0xe8>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d10d      	bne.n	8009e3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <TIM_OC2_SetConfig+0xe4>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d003      	beq.n	8009e4c <TIM_OC2_SetConfig+0x94>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a16      	ldr	r2, [pc, #88]	; (8009ea0 <TIM_OC2_SetConfig+0xe8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d113      	bne.n	8009e74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	695b      	ldr	r3, [r3, #20]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	621a      	str	r2, [r3, #32]
}
 8009e8e:	bf00      	nop
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	40010000 	.word	0x40010000
 8009ea0:	40010400 	.word	0x40010400

08009ea4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	021b      	lsls	r3, r3, #8
 8009ef4:	697a      	ldr	r2, [r7, #20]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a21      	ldr	r2, [pc, #132]	; (8009f84 <TIM_OC3_SetConfig+0xe0>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d003      	beq.n	8009f0a <TIM_OC3_SetConfig+0x66>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a20      	ldr	r2, [pc, #128]	; (8009f88 <TIM_OC3_SetConfig+0xe4>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d10d      	bne.n	8009f26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a16      	ldr	r2, [pc, #88]	; (8009f84 <TIM_OC3_SetConfig+0xe0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d003      	beq.n	8009f36 <TIM_OC3_SetConfig+0x92>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a15      	ldr	r2, [pc, #84]	; (8009f88 <TIM_OC3_SetConfig+0xe4>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d113      	bne.n	8009f5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	011b      	lsls	r3, r3, #4
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	621a      	str	r2, [r3, #32]
}
 8009f78:	bf00      	nop
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40010400 	.word	0x40010400

08009f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	031b      	lsls	r3, r3, #12
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a12      	ldr	r2, [pc, #72]	; (800a030 <TIM_OC4_SetConfig+0xa4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d003      	beq.n	8009ff4 <TIM_OC4_SetConfig+0x68>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a11      	ldr	r2, [pc, #68]	; (800a034 <TIM_OC4_SetConfig+0xa8>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d109      	bne.n	800a008 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	019b      	lsls	r3, r3, #6
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	4313      	orrs	r3, r2
 800a006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	621a      	str	r2, [r3, #32]
}
 800a022:	bf00      	nop
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40010000 	.word	0x40010000
 800a034:	40010400 	.word	0x40010400

0800a038 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
 800a044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	f023 0201 	bic.w	r2, r3, #1
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4a28      	ldr	r2, [pc, #160]	; (800a104 <TIM_TI1_SetConfig+0xcc>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d01b      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a06c:	d017      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	4a25      	ldr	r2, [pc, #148]	; (800a108 <TIM_TI1_SetConfig+0xd0>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d013      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a24      	ldr	r2, [pc, #144]	; (800a10c <TIM_TI1_SetConfig+0xd4>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d00f      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4a23      	ldr	r2, [pc, #140]	; (800a110 <TIM_TI1_SetConfig+0xd8>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d00b      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a22      	ldr	r2, [pc, #136]	; (800a114 <TIM_TI1_SetConfig+0xdc>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d007      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4a21      	ldr	r2, [pc, #132]	; (800a118 <TIM_TI1_SetConfig+0xe0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d003      	beq.n	800a09e <TIM_TI1_SetConfig+0x66>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4a20      	ldr	r2, [pc, #128]	; (800a11c <TIM_TI1_SetConfig+0xe4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d101      	bne.n	800a0a2 <TIM_TI1_SetConfig+0x6a>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <TIM_TI1_SetConfig+0x6c>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d008      	beq.n	800a0ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e003      	b.n	800a0c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f043 0301 	orr.w	r3, r3, #1
 800a0c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	f023 030a 	bic.w	r3, r3, #10
 800a0dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	f003 030a 	and.w	r3, r3, #10
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	621a      	str	r2, [r3, #32]
}
 800a0f6:	bf00      	nop
 800a0f8:	371c      	adds	r7, #28
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	40010000 	.word	0x40010000
 800a108:	40000400 	.word	0x40000400
 800a10c:	40000800 	.word	0x40000800
 800a110:	40000c00 	.word	0x40000c00
 800a114:	40010400 	.word	0x40010400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40001800 	.word	0x40001800

0800a120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	f023 0201 	bic.w	r2, r3, #1
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a14a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f023 030a 	bic.w	r3, r3, #10
 800a15c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	621a      	str	r2, [r3, #32]
}
 800a172:	bf00      	nop
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a17e:	b480      	push	{r7}
 800a180:	b087      	sub	sp, #28
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
 800a18a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f023 0210 	bic.w	r2, r3, #16
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	021b      	lsls	r3, r3, #8
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	031b      	lsls	r3, r3, #12
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	011b      	lsls	r3, r3, #4
 800a1d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	621a      	str	r2, [r3, #32]
}
 800a1ec:	bf00      	nop
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0210 	bic.w	r2, r3, #16
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	031b      	lsls	r3, r3, #12
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a234:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	011b      	lsls	r3, r3, #4
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	621a      	str	r2, [r3, #32]
}
 800a24c:	bf00      	nop
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f023 0303 	bic.w	r3, r3, #3
 800a284:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a294:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	011b      	lsls	r3, r3, #4
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a2a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	621a      	str	r2, [r3, #32]
}
 800a2c4:	bf00      	nop
 800a2c6:	371c      	adds	r7, #28
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b087      	sub	sp, #28
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6a1b      	ldr	r3, [r3, #32]
 800a2e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4313      	orrs	r3, r2
 800a306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a30e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	031b      	lsls	r3, r3, #12
 800a314:	b29b      	uxth	r3, r3
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	4313      	orrs	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a322:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	031b      	lsls	r3, r3, #12
 800a328:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	4313      	orrs	r3, r2
 800a330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	621a      	str	r2, [r3, #32]
}
 800a33e:	bf00      	nop
 800a340:	371c      	adds	r7, #28
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b085      	sub	sp, #20
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4313      	orrs	r3, r2
 800a368:	f043 0307 	orr.w	r3, r3, #7
 800a36c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	609a      	str	r2, [r3, #8]
}
 800a374:	bf00      	nop
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a380:	b480      	push	{r7}
 800a382:	b087      	sub	sp, #28
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a39a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	021a      	lsls	r2, r3, #8
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	609a      	str	r2, [r3, #8]
}
 800a3b4:	bf00      	nop
 800a3b6:	371c      	adds	r7, #28
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	f003 031f 	and.w	r3, r3, #31
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a1a      	ldr	r2, [r3, #32]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	43db      	mvns	r3, r3
 800a3e2:	401a      	ands	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6a1a      	ldr	r2, [r3, #32]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f003 031f 	and.w	r3, r3, #31
 800a3f2:	6879      	ldr	r1, [r7, #4]
 800a3f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f8:	431a      	orrs	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
}
 800a3fe:	bf00      	nop
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
	...

0800a40c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a420:	2302      	movs	r3, #2
 800a422:	e05a      	b.n	800a4da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2202      	movs	r2, #2
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a21      	ldr	r2, [pc, #132]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d022      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a470:	d01d      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a1d      	ldr	r2, [pc, #116]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d018      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a1b      	ldr	r2, [pc, #108]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d013      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a1a      	ldr	r2, [pc, #104]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d00e      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d009      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a17      	ldr	r2, [pc, #92]	; (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d004      	beq.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a15      	ldr	r2, [pc, #84]	; (800a500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d10c      	bne.n	800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	40010000 	.word	0x40010000
 800a4ec:	40000400 	.word	0x40000400
 800a4f0:	40000800 	.word	0x40000800
 800a4f4:	40000c00 	.word	0x40000c00
 800a4f8:	40010400 	.word	0x40010400
 800a4fc:	40014000 	.word	0x40014000
 800a500:	40001800 	.word	0x40001800

0800a504 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a50e:	2300      	movs	r3, #0
 800a510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d101      	bne.n	800a520 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a51c:	2302      	movs	r3, #2
 800a51e:	e03d      	b.n	800a59c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	4313      	orrs	r3, r2
 800a534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	4313      	orrs	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e042      	b.n	800a668 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7fb fa72 	bl	8005ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2224      	movs	r2, #36	; 0x24
 800a600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 ff37 	bl	800b488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	691a      	ldr	r2, [r3, #16]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	695a      	ldr	r2, [r3, #20]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68da      	ldr	r2, [r3, #12]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2220      	movs	r2, #32
 800a654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08c      	sub	sp, #48	; 0x30
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b20      	cmp	r3, #32
 800a688:	d156      	bne.n	800a738 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_UART_Transmit_DMA+0x26>
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d101      	bne.n	800a69a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e04f      	b.n	800a73a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	88fa      	ldrh	r2, [r7, #6]
 800a6a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	88fa      	ldrh	r2, [r7, #6]
 800a6aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2221      	movs	r2, #33	; 0x21
 800a6b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6be:	4a21      	ldr	r2, [pc, #132]	; (800a744 <HAL_UART_Transmit_DMA+0xd4>)
 800a6c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	4a20      	ldr	r2, [pc, #128]	; (800a748 <HAL_UART_Transmit_DMA+0xd8>)
 800a6c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ce:	4a1f      	ldr	r2, [pc, #124]	; (800a74c <HAL_UART_Transmit_DMA+0xdc>)
 800a6d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e6:	6819      	ldr	r1, [r3, #0]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	88fb      	ldrh	r3, [r7, #6]
 800a6f2:	f7fc fd4d 	bl	8007190 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3314      	adds	r3, #20
 800a706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	e853 3f00 	ldrex	r3, [r3]
 800a70e:	617b      	str	r3, [r7, #20]
   return(result);
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	3314      	adds	r3, #20
 800a71e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a720:	627a      	str	r2, [r7, #36]	; 0x24
 800a722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	6a39      	ldr	r1, [r7, #32]
 800a726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e5      	bne.n	800a700 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	e000      	b.n	800a73a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a738:	2302      	movs	r3, #2
  }
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3730      	adds	r7, #48	; 0x30
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	0800ad15 	.word	0x0800ad15
 800a748:	0800adaf 	.word	0x0800adaf
 800a74c:	0800af33 	.word	0x0800af33

0800a750 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b20      	cmp	r3, #32
 800a768:	d112      	bne.n	800a790 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <HAL_UART_Receive_DMA+0x26>
 800a770:	88fb      	ldrh	r3, [r7, #6]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e00b      	b.n	800a792 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	461a      	mov	r2, r3
 800a784:	68b9      	ldr	r1, [r7, #8]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f000 fc1e 	bl	800afc8 <UART_Start_Receive_DMA>
 800a78c:	4603      	mov	r3, r0
 800a78e:	e000      	b.n	800a792 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a790:	2302      	movs	r3, #2
  }
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
	...

0800a79c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b0ba      	sub	sp, #232	; 0xe8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a7da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10f      	bne.n	800a802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <HAL_UART_IRQHandler+0x66>
 800a7ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fd85 	bl	800b30a <UART_Receive_IT>
      return;
 800a800:	e25b      	b.n	800acba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80de 	beq.w	800a9c8 <HAL_UART_IRQHandler+0x22c>
 800a80c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d106      	bne.n	800a826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a81c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 80d1 	beq.w	800a9c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00b      	beq.n	800a84a <HAL_UART_IRQHandler+0xae>
 800a832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d005      	beq.n	800a84a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a842:	f043 0201 	orr.w	r2, r3, #1
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <HAL_UART_IRQHandler+0xd2>
 800a856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a85a:	f003 0301 	and.w	r3, r3, #1
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a866:	f043 0202 	orr.w	r2, r3, #2
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a872:	f003 0302 	and.w	r3, r3, #2
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <HAL_UART_IRQHandler+0xf6>
 800a87a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a88a:	f043 0204 	orr.w	r2, r3, #4
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a896:	f003 0308 	and.w	r3, r3, #8
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d011      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x126>
 800a89e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8a2:	f003 0320 	and.w	r3, r3, #32
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d105      	bne.n	800a8b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8ae:	f003 0301 	and.w	r3, r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d005      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ba:	f043 0208 	orr.w	r2, r3, #8
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 81f2 	beq.w	800acb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8d0:	f003 0320 	and.w	r3, r3, #32
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d008      	beq.n	800a8ea <HAL_UART_IRQHandler+0x14e>
 800a8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8dc:	f003 0320 	and.w	r3, r3, #32
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fd10 	bl	800b30a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8f4:	2b40      	cmp	r3, #64	; 0x40
 800a8f6:	bf0c      	ite	eq
 800a8f8:	2301      	moveq	r3, #1
 800a8fa:	2300      	movne	r3, #0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a906:	f003 0308 	and.w	r3, r3, #8
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d103      	bne.n	800a916 <HAL_UART_IRQHandler+0x17a>
 800a90e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a912:	2b00      	cmp	r3, #0
 800a914:	d04f      	beq.n	800a9b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fc18 	bl	800b14c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	d141      	bne.n	800a9ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	3314      	adds	r3, #20
 800a930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a938:	e853 3f00 	ldrex	r3, [r3]
 800a93c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3314      	adds	r3, #20
 800a952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a956:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a95a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a96e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1d9      	bne.n	800a92a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d013      	beq.n	800a9a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	4a7e      	ldr	r2, [pc, #504]	; (800ab7c <HAL_UART_IRQHandler+0x3e0>)
 800a984:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fc fcc8 	bl	8007320 <HAL_DMA_Abort_IT>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d016      	beq.n	800a9c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a4:	e00e      	b.n	800a9c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f99e 	bl	800ace8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ac:	e00a      	b.n	800a9c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f99a 	bl	800ace8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b4:	e006      	b.n	800a9c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f996 	bl	800ace8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a9c2:	e175      	b.n	800acb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9c4:	bf00      	nop
    return;
 800a9c6:	e173      	b.n	800acb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	f040 814f 	bne.w	800ac70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 8148 	beq.w	800ac70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e4:	f003 0310 	and.w	r3, r3, #16
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 8141 	beq.w	800ac70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60bb      	str	r3, [r7, #8]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	60bb      	str	r3, [r7, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	60bb      	str	r3, [r7, #8]
 800aa02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b40      	cmp	r3, #64	; 0x40
 800aa10:	f040 80b6 	bne.w	800ab80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 8145 	beq.w	800acb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa32:	429a      	cmp	r2, r3
 800aa34:	f080 813e 	bcs.w	800acb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa44:	69db      	ldr	r3, [r3, #28]
 800aa46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa4a:	f000 8088 	beq.w	800ab5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	330c      	adds	r3, #12
 800aa54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	330c      	adds	r3, #12
 800aa76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aa7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aa7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1d9      	bne.n	800aa4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3314      	adds	r3, #20
 800aaa0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaac:	f023 0301 	bic.w	r3, r3, #1
 800aab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3314      	adds	r3, #20
 800aaba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aabe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aac2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aaca:	e841 2300 	strex	r3, r2, [r1]
 800aace:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1e1      	bne.n	800aa9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	3314      	adds	r3, #20
 800aadc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae0:	e853 3f00 	ldrex	r3, [r3]
 800aae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3314      	adds	r3, #20
 800aaf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aafa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aafc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aafe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab02:	e841 2300 	strex	r3, r2, [r1]
 800ab06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e3      	bne.n	800aad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2220      	movs	r2, #32
 800ab12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	330c      	adds	r3, #12
 800ab22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab26:	e853 3f00 	ldrex	r3, [r3]
 800ab2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab2e:	f023 0310 	bic.w	r3, r3, #16
 800ab32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	330c      	adds	r3, #12
 800ab3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab40:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e3      	bne.n	800ab1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fc fb71 	bl	8007240 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2202      	movs	r2, #2
 800ab62:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8c1 	bl	800acfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab7a:	e09b      	b.n	800acb4 <HAL_UART_IRQHandler+0x518>
 800ab7c:	0800b213 	.word	0x0800b213
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 808e 	beq.w	800acb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ab9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 8089 	beq.w	800acb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	330c      	adds	r3, #12
 800abac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	e853 3f00 	ldrex	r3, [r3]
 800abb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	330c      	adds	r3, #12
 800abc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800abca:	647a      	str	r2, [r7, #68]	; 0x44
 800abcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e3      	bne.n	800aba6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3314      	adds	r3, #20
 800abe4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	623b      	str	r3, [r7, #32]
   return(result);
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	f023 0301 	bic.w	r3, r3, #1
 800abf4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	3314      	adds	r3, #20
 800abfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac02:	633a      	str	r2, [r7, #48]	; 0x30
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e3      	bne.n	800abde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	330c      	adds	r3, #12
 800ac2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	e853 3f00 	ldrex	r3, [r3]
 800ac32:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f023 0310 	bic.w	r3, r3, #16
 800ac3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	330c      	adds	r3, #12
 800ac44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac48:	61fa      	str	r2, [r7, #28]
 800ac4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4c:	69b9      	ldr	r1, [r7, #24]
 800ac4e:	69fa      	ldr	r2, [r7, #28]
 800ac50:	e841 2300 	strex	r3, r2, [r1]
 800ac54:	617b      	str	r3, [r7, #20]
   return(result);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1e3      	bne.n	800ac24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f847 	bl	800acfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac6e:	e023      	b.n	800acb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d009      	beq.n	800ac90 <HAL_UART_IRQHandler+0x4f4>
 800ac7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d003      	beq.n	800ac90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fad6 	bl	800b23a <UART_Transmit_IT>
    return;
 800ac8e:	e014      	b.n	800acba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ac90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00e      	beq.n	800acba <HAL_UART_IRQHandler+0x51e>
 800ac9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d008      	beq.n	800acba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fb16 	bl	800b2da <UART_EndTransmit_IT>
    return;
 800acae:	e004      	b.n	800acba <HAL_UART_IRQHandler+0x51e>
    return;
 800acb0:	bf00      	nop
 800acb2:	e002      	b.n	800acba <HAL_UART_IRQHandler+0x51e>
      return;
 800acb4:	bf00      	nop
 800acb6:	e000      	b.n	800acba <HAL_UART_IRQHandler+0x51e>
      return;
 800acb8:	bf00      	nop
  }
}
 800acba:	37e8      	adds	r7, #232	; 0xe8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b090      	sub	sp, #64	; 0x40
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d137      	bne.n	800ada0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ad30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad32:	2200      	movs	r2, #0
 800ad34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	3314      	adds	r3, #20
 800ad3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	623b      	str	r3, [r7, #32]
   return(result);
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3314      	adds	r3, #20
 800ad54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad56:	633a      	str	r2, [r7, #48]	; 0x30
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e5      	bne.n	800ad36 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	330c      	adds	r3, #12
 800ad70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad80:	637b      	str	r3, [r7, #52]	; 0x34
 800ad82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	330c      	adds	r3, #12
 800ad88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad8a:	61fa      	str	r2, [r7, #28]
 800ad8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8e:	69b9      	ldr	r1, [r7, #24]
 800ad90:	69fa      	ldr	r2, [r7, #28]
 800ad92:	e841 2300 	strex	r3, r2, [r1]
 800ad96:	617b      	str	r3, [r7, #20]
   return(result);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1e5      	bne.n	800ad6a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad9e:	e002      	b.n	800ada6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ada0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ada2:	f7f9 fa4d 	bl	8004240 <HAL_UART_TxCpltCallback>
}
 800ada6:	bf00      	nop
 800ada8:	3740      	adds	r7, #64	; 0x40
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b084      	sub	sp, #16
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff ff7f 	bl	800acc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b09c      	sub	sp, #112	; 0x70
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d172      	bne.n	800aecc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ade6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade8:	2200      	movs	r2, #0
 800adea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	330c      	adds	r3, #12
 800adf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf6:	e853 3f00 	ldrex	r3, [r3]
 800adfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae02:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	330c      	adds	r3, #12
 800ae0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae0c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ae0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ae12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae14:	e841 2300 	strex	r3, r2, [r1]
 800ae18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ae1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1e5      	bne.n	800adec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3314      	adds	r3, #20
 800ae26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	e853 3f00 	ldrex	r3, [r3]
 800ae2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae32:	f023 0301 	bic.w	r3, r3, #1
 800ae36:	667b      	str	r3, [r7, #100]	; 0x64
 800ae38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3314      	adds	r3, #20
 800ae3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae40:	647a      	str	r2, [r7, #68]	; 0x44
 800ae42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e5      	bne.n	800ae20 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3314      	adds	r3, #20
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	623b      	str	r3, [r7, #32]
   return(result);
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae6a:	663b      	str	r3, [r7, #96]	; 0x60
 800ae6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3314      	adds	r3, #20
 800ae72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae74:	633a      	str	r2, [r7, #48]	; 0x30
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae7c:	e841 2300 	strex	r3, r2, [r1]
 800ae80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e5      	bne.n	800ae54 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d119      	bne.n	800aecc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	e853 3f00 	ldrex	r3, [r3]
 800aea6:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0310 	bic.w	r3, r3, #16
 800aeae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	330c      	adds	r3, #12
 800aeb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aeb8:	61fa      	str	r2, [r7, #28]
 800aeba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	69b9      	ldr	r1, [r7, #24]
 800aebe:	69fa      	ldr	r2, [r7, #28]
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	617b      	str	r3, [r7, #20]
   return(result);
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e5      	bne.n	800ae98 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aece:	2200      	movs	r2, #0
 800aed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d106      	bne.n	800aee8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aedc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aede:	4619      	mov	r1, r3
 800aee0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aee2:	f7ff ff0b 	bl	800acfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aee6:	e002      	b.n	800aeee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800aee8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aeea:	f7f9 f9c5 	bl	8004278 <HAL_UART_RxCpltCallback>
}
 800aeee:	bf00      	nop
 800aef0:	3770      	adds	r7, #112	; 0x70
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af02:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2201      	movs	r2, #1
 800af08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d108      	bne.n	800af24 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4619      	mov	r1, r3
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f7ff feed 	bl	800acfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af22:	e002      	b.n	800af2a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7ff fed5 	bl	800acd4 <HAL_UART_RxHalfCpltCallback>
}
 800af2a:	bf00      	nop
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4e:	2b80      	cmp	r3, #128	; 0x80
 800af50:	bf0c      	ite	eq
 800af52:	2301      	moveq	r3, #1
 800af54:	2300      	movne	r3, #0
 800af56:	b2db      	uxtb	r3, r3
 800af58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b21      	cmp	r3, #33	; 0x21
 800af64:	d108      	bne.n	800af78 <UART_DMAError+0x46>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d005      	beq.n	800af78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2200      	movs	r2, #0
 800af70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800af72:	68b8      	ldr	r0, [r7, #8]
 800af74:	f000 f8c2 	bl	800b0fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	695b      	ldr	r3, [r3, #20]
 800af7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af82:	2b40      	cmp	r3, #64	; 0x40
 800af84:	bf0c      	ite	eq
 800af86:	2301      	moveq	r3, #1
 800af88:	2300      	movne	r3, #0
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af94:	b2db      	uxtb	r3, r3
 800af96:	2b22      	cmp	r3, #34	; 0x22
 800af98:	d108      	bne.n	800afac <UART_DMAError+0x7a>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d005      	beq.n	800afac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2200      	movs	r2, #0
 800afa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800afa6:	68b8      	ldr	r0, [r7, #8]
 800afa8:	f000 f8d0 	bl	800b14c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb0:	f043 0210 	orr.w	r2, r3, #16
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afb8:	68b8      	ldr	r0, [r7, #8]
 800afba:	f7ff fe95 	bl	800ace8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afbe:	bf00      	nop
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b098      	sub	sp, #96	; 0x60
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	88fa      	ldrh	r2, [r7, #6]
 800afe0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2222      	movs	r2, #34	; 0x22
 800afec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff4:	4a3e      	ldr	r2, [pc, #248]	; (800b0f0 <UART_Start_Receive_DMA+0x128>)
 800aff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800affc:	4a3d      	ldr	r2, [pc, #244]	; (800b0f4 <UART_Start_Receive_DMA+0x12c>)
 800affe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b004:	4a3c      	ldr	r2, [pc, #240]	; (800b0f8 <UART_Start_Receive_DMA+0x130>)
 800b006:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00c:	2200      	movs	r2, #0
 800b00e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b010:	f107 0308 	add.w	r3, r7, #8
 800b014:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3304      	adds	r3, #4
 800b020:	4619      	mov	r1, r3
 800b022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	f7fc f8b2 	bl	8007190 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b02c:	2300      	movs	r3, #0
 800b02e:	613b      	str	r3, [r7, #16]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	613b      	str	r3, [r7, #16]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	613b      	str	r3, [r7, #16]
 800b040:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d019      	beq.n	800b07e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	330c      	adds	r3, #12
 800b050:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b060:	65bb      	str	r3, [r7, #88]	; 0x58
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	330c      	adds	r3, #12
 800b068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b06a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b06c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e5      	bne.n	800b04a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3314      	adds	r3, #20
 800b084:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	e853 3f00 	ldrex	r3, [r3]
 800b08c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b090:	f043 0301 	orr.w	r3, r3, #1
 800b094:	657b      	str	r3, [r7, #84]	; 0x54
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3314      	adds	r3, #20
 800b09c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b09e:	63ba      	str	r2, [r7, #56]	; 0x38
 800b0a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e5      	bne.n	800b07e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3314      	adds	r3, #20
 800b0b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c8:	653b      	str	r3, [r7, #80]	; 0x50
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3314      	adds	r3, #20
 800b0d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0d2:	627a      	str	r2, [r7, #36]	; 0x24
 800b0d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d6:	6a39      	ldr	r1, [r7, #32]
 800b0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0da:	e841 2300 	strex	r3, r2, [r1]
 800b0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1e5      	bne.n	800b0b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3760      	adds	r7, #96	; 0x60
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	0800adcb 	.word	0x0800adcb
 800b0f4:	0800aef7 	.word	0x0800aef7
 800b0f8:	0800af33 	.word	0x0800af33

0800b0fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b089      	sub	sp, #36	; 0x24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	330c      	adds	r3, #12
 800b10a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	e853 3f00 	ldrex	r3, [r3]
 800b112:	60bb      	str	r3, [r7, #8]
   return(result);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b11a:	61fb      	str	r3, [r7, #28]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	330c      	adds	r3, #12
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	61ba      	str	r2, [r7, #24]
 800b126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	6979      	ldr	r1, [r7, #20]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	613b      	str	r3, [r7, #16]
   return(result);
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e5      	bne.n	800b104 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b140:	bf00      	nop
 800b142:	3724      	adds	r7, #36	; 0x24
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b095      	sub	sp, #84	; 0x54
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	330c      	adds	r3, #12
 800b15a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b16a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b174:	643a      	str	r2, [r7, #64]	; 0x40
 800b176:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b17a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e5      	bne.n	800b154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3314      	adds	r3, #20
 800b18e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	e853 3f00 	ldrex	r3, [r3]
 800b196:	61fb      	str	r3, [r7, #28]
   return(result);
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	f023 0301 	bic.w	r3, r3, #1
 800b19e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3314      	adds	r3, #20
 800b1a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b0:	e841 2300 	strex	r3, r2, [r1]
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1e5      	bne.n	800b188 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d119      	bne.n	800b1f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	e853 3f00 	ldrex	r3, [r3]
 800b1d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f023 0310 	bic.w	r3, r3, #16
 800b1da:	647b      	str	r3, [r7, #68]	; 0x44
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	330c      	adds	r3, #12
 800b1e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1e4:	61ba      	str	r2, [r7, #24]
 800b1e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e8:	6979      	ldr	r1, [r7, #20]
 800b1ea:	69ba      	ldr	r2, [r7, #24]
 800b1ec:	e841 2300 	strex	r3, r2, [r1]
 800b1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1e5      	bne.n	800b1c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2220      	movs	r2, #32
 800b1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b206:	bf00      	nop
 800b208:	3754      	adds	r7, #84	; 0x54
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f7ff fd5b 	bl	800ace8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b23a:	b480      	push	{r7}
 800b23c:	b085      	sub	sp, #20
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b21      	cmp	r3, #33	; 0x21
 800b24c:	d13e      	bne.n	800b2cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b256:	d114      	bne.n	800b282 <UART_Transmit_IT+0x48>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d110      	bne.n	800b282 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b274:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	1c9a      	adds	r2, r3, #2
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	621a      	str	r2, [r3, #32]
 800b280:	e008      	b.n	800b294 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	1c59      	adds	r1, r3, #1
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	6211      	str	r1, [r2, #32]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10f      	bne.n	800b2c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e000      	b.n	800b2ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b2cc:	2302      	movs	r3, #2
  }
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68da      	ldr	r2, [r3, #12]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2220      	movs	r2, #32
 800b2f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7f8 ffa0 	bl	8004240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b08c      	sub	sp, #48	; 0x30
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	2b22      	cmp	r3, #34	; 0x22
 800b31c:	f040 80ae 	bne.w	800b47c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b328:	d117      	bne.n	800b35a <UART_Receive_IT+0x50>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d113      	bne.n	800b35a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b332:	2300      	movs	r3, #0
 800b334:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b33a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	b29b      	uxth	r3, r3
 800b344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b348:	b29a      	uxth	r2, r3
 800b34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	1c9a      	adds	r2, r3, #2
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	629a      	str	r2, [r3, #40]	; 0x28
 800b358:	e026      	b.n	800b3a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b360:	2300      	movs	r3, #0
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b36c:	d007      	beq.n	800b37e <UART_Receive_IT+0x74>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10a      	bne.n	800b38c <UART_Receive_IT+0x82>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	b2da      	uxtb	r2, r3
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	701a      	strb	r2, [r3, #0]
 800b38a:	e008      	b.n	800b39e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d15d      	bne.n	800b478 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f022 0220 	bic.w	r2, r2, #32
 800b3ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68da      	ldr	r2, [r3, #12]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b3da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695a      	ldr	r2, [r3, #20]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f022 0201 	bic.w	r2, r2, #1
 800b3ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2220      	movs	r2, #32
 800b3f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d135      	bne.n	800b46e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	330c      	adds	r3, #12
 800b40e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	e853 3f00 	ldrex	r3, [r3]
 800b416:	613b      	str	r3, [r7, #16]
   return(result);
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f023 0310 	bic.w	r3, r3, #16
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	330c      	adds	r3, #12
 800b426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b428:	623a      	str	r2, [r7, #32]
 800b42a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42c:	69f9      	ldr	r1, [r7, #28]
 800b42e:	6a3a      	ldr	r2, [r7, #32]
 800b430:	e841 2300 	strex	r3, r2, [r1]
 800b434:	61bb      	str	r3, [r7, #24]
   return(result);
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e5      	bne.n	800b408 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0310 	and.w	r3, r3, #16
 800b446:	2b10      	cmp	r3, #16
 800b448:	d10a      	bne.n	800b460 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b44a:	2300      	movs	r3, #0
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7ff fc48 	bl	800acfc <HAL_UARTEx_RxEventCallback>
 800b46c:	e002      	b.n	800b474 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f8 ff02 	bl	8004278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	e002      	b.n	800b47e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	e000      	b.n	800b47e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b47c:	2302      	movs	r3, #2
  }
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3730      	adds	r7, #48	; 0x30
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b48c:	b0c0      	sub	sp, #256	; 0x100
 800b48e:	af00      	add	r7, sp, #0
 800b490:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4a4:	68d9      	ldr	r1, [r3, #12]
 800b4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	ea40 0301 	orr.w	r3, r0, r1
 800b4b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b4b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4b6:	689a      	ldr	r2, [r3, #8]
 800b4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	431a      	orrs	r2, r3
 800b4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b4e0:	f021 010c 	bic.w	r1, r1, #12
 800b4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4ee:	430b      	orrs	r3, r1
 800b4f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b502:	6999      	ldr	r1, [r3, #24]
 800b504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	ea40 0301 	orr.w	r3, r0, r1
 800b50e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	4b8f      	ldr	r3, [pc, #572]	; (800b754 <UART_SetConfig+0x2cc>)
 800b518:	429a      	cmp	r2, r3
 800b51a:	d005      	beq.n	800b528 <UART_SetConfig+0xa0>
 800b51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	4b8d      	ldr	r3, [pc, #564]	; (800b758 <UART_SetConfig+0x2d0>)
 800b524:	429a      	cmp	r2, r3
 800b526:	d104      	bne.n	800b532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b528:	f7fc fc52 	bl	8007dd0 <HAL_RCC_GetPCLK2Freq>
 800b52c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b530:	e003      	b.n	800b53a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b532:	f7fc fc39 	bl	8007da8 <HAL_RCC_GetPCLK1Freq>
 800b536:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b544:	f040 810c 	bne.w	800b760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b552:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b55a:	4622      	mov	r2, r4
 800b55c:	462b      	mov	r3, r5
 800b55e:	1891      	adds	r1, r2, r2
 800b560:	65b9      	str	r1, [r7, #88]	; 0x58
 800b562:	415b      	adcs	r3, r3
 800b564:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b56a:	4621      	mov	r1, r4
 800b56c:	eb12 0801 	adds.w	r8, r2, r1
 800b570:	4629      	mov	r1, r5
 800b572:	eb43 0901 	adc.w	r9, r3, r1
 800b576:	f04f 0200 	mov.w	r2, #0
 800b57a:	f04f 0300 	mov.w	r3, #0
 800b57e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b58a:	4690      	mov	r8, r2
 800b58c:	4699      	mov	r9, r3
 800b58e:	4623      	mov	r3, r4
 800b590:	eb18 0303 	adds.w	r3, r8, r3
 800b594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b598:	462b      	mov	r3, r5
 800b59a:	eb49 0303 	adc.w	r3, r9, r3
 800b59e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b5ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b5b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	18db      	adds	r3, r3, r3
 800b5ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b5bc:	4613      	mov	r3, r2
 800b5be:	eb42 0303 	adc.w	r3, r2, r3
 800b5c2:	657b      	str	r3, [r7, #84]	; 0x54
 800b5c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b5c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b5cc:	f7f5 fabc 	bl	8000b48 <__aeabi_uldivmod>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4b61      	ldr	r3, [pc, #388]	; (800b75c <UART_SetConfig+0x2d4>)
 800b5d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5da:	095b      	lsrs	r3, r3, #5
 800b5dc:	011c      	lsls	r4, r3, #4
 800b5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b5ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b5f0:	4642      	mov	r2, r8
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	1891      	adds	r1, r2, r2
 800b5f6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b5f8:	415b      	adcs	r3, r3
 800b5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b600:	4641      	mov	r1, r8
 800b602:	eb12 0a01 	adds.w	sl, r2, r1
 800b606:	4649      	mov	r1, r9
 800b608:	eb43 0b01 	adc.w	fp, r3, r1
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	f04f 0300 	mov.w	r3, #0
 800b614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b61c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b620:	4692      	mov	sl, r2
 800b622:	469b      	mov	fp, r3
 800b624:	4643      	mov	r3, r8
 800b626:	eb1a 0303 	adds.w	r3, sl, r3
 800b62a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b62e:	464b      	mov	r3, r9
 800b630:	eb4b 0303 	adc.w	r3, fp, r3
 800b634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b644:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b64c:	460b      	mov	r3, r1
 800b64e:	18db      	adds	r3, r3, r3
 800b650:	643b      	str	r3, [r7, #64]	; 0x40
 800b652:	4613      	mov	r3, r2
 800b654:	eb42 0303 	adc.w	r3, r2, r3
 800b658:	647b      	str	r3, [r7, #68]	; 0x44
 800b65a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b65e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b662:	f7f5 fa71 	bl	8000b48 <__aeabi_uldivmod>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4611      	mov	r1, r2
 800b66c:	4b3b      	ldr	r3, [pc, #236]	; (800b75c <UART_SetConfig+0x2d4>)
 800b66e:	fba3 2301 	umull	r2, r3, r3, r1
 800b672:	095b      	lsrs	r3, r3, #5
 800b674:	2264      	movs	r2, #100	; 0x64
 800b676:	fb02 f303 	mul.w	r3, r2, r3
 800b67a:	1acb      	subs	r3, r1, r3
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b682:	4b36      	ldr	r3, [pc, #216]	; (800b75c <UART_SetConfig+0x2d4>)
 800b684:	fba3 2302 	umull	r2, r3, r3, r2
 800b688:	095b      	lsrs	r3, r3, #5
 800b68a:	005b      	lsls	r3, r3, #1
 800b68c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b690:	441c      	add	r4, r3
 800b692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b696:	2200      	movs	r2, #0
 800b698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b69c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b6a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	1891      	adds	r1, r2, r2
 800b6aa:	63b9      	str	r1, [r7, #56]	; 0x38
 800b6ac:	415b      	adcs	r3, r3
 800b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b6b4:	4641      	mov	r1, r8
 800b6b6:	1851      	adds	r1, r2, r1
 800b6b8:	6339      	str	r1, [r7, #48]	; 0x30
 800b6ba:	4649      	mov	r1, r9
 800b6bc:	414b      	adcs	r3, r1
 800b6be:	637b      	str	r3, [r7, #52]	; 0x34
 800b6c0:	f04f 0200 	mov.w	r2, #0
 800b6c4:	f04f 0300 	mov.w	r3, #0
 800b6c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b6cc:	4659      	mov	r1, fp
 800b6ce:	00cb      	lsls	r3, r1, #3
 800b6d0:	4651      	mov	r1, sl
 800b6d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6d6:	4651      	mov	r1, sl
 800b6d8:	00ca      	lsls	r2, r1, #3
 800b6da:	4610      	mov	r0, r2
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4603      	mov	r3, r0
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	189b      	adds	r3, r3, r2
 800b6e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6e8:	464b      	mov	r3, r9
 800b6ea:	460a      	mov	r2, r1
 800b6ec:	eb42 0303 	adc.w	r3, r2, r3
 800b6f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b700:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b708:	460b      	mov	r3, r1
 800b70a:	18db      	adds	r3, r3, r3
 800b70c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b70e:	4613      	mov	r3, r2
 800b710:	eb42 0303 	adc.w	r3, r2, r3
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b71a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b71e:	f7f5 fa13 	bl	8000b48 <__aeabi_uldivmod>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <UART_SetConfig+0x2d4>)
 800b728:	fba3 1302 	umull	r1, r3, r3, r2
 800b72c:	095b      	lsrs	r3, r3, #5
 800b72e:	2164      	movs	r1, #100	; 0x64
 800b730:	fb01 f303 	mul.w	r3, r1, r3
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	3332      	adds	r3, #50	; 0x32
 800b73a:	4a08      	ldr	r2, [pc, #32]	; (800b75c <UART_SetConfig+0x2d4>)
 800b73c:	fba2 2303 	umull	r2, r3, r2, r3
 800b740:	095b      	lsrs	r3, r3, #5
 800b742:	f003 0207 	and.w	r2, r3, #7
 800b746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4422      	add	r2, r4
 800b74e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b750:	e106      	b.n	800b960 <UART_SetConfig+0x4d8>
 800b752:	bf00      	nop
 800b754:	40011000 	.word	0x40011000
 800b758:	40011400 	.word	0x40011400
 800b75c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b764:	2200      	movs	r2, #0
 800b766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b76a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b76e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b772:	4642      	mov	r2, r8
 800b774:	464b      	mov	r3, r9
 800b776:	1891      	adds	r1, r2, r2
 800b778:	6239      	str	r1, [r7, #32]
 800b77a:	415b      	adcs	r3, r3
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
 800b77e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b782:	4641      	mov	r1, r8
 800b784:	1854      	adds	r4, r2, r1
 800b786:	4649      	mov	r1, r9
 800b788:	eb43 0501 	adc.w	r5, r3, r1
 800b78c:	f04f 0200 	mov.w	r2, #0
 800b790:	f04f 0300 	mov.w	r3, #0
 800b794:	00eb      	lsls	r3, r5, #3
 800b796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b79a:	00e2      	lsls	r2, r4, #3
 800b79c:	4614      	mov	r4, r2
 800b79e:	461d      	mov	r5, r3
 800b7a0:	4643      	mov	r3, r8
 800b7a2:	18e3      	adds	r3, r4, r3
 800b7a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7a8:	464b      	mov	r3, r9
 800b7aa:	eb45 0303 	adc.w	r3, r5, r3
 800b7ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7c2:	f04f 0200 	mov.w	r2, #0
 800b7c6:	f04f 0300 	mov.w	r3, #0
 800b7ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	008b      	lsls	r3, r1, #2
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7d8:	4621      	mov	r1, r4
 800b7da:	008a      	lsls	r2, r1, #2
 800b7dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b7e0:	f7f5 f9b2 	bl	8000b48 <__aeabi_uldivmod>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4b60      	ldr	r3, [pc, #384]	; (800b96c <UART_SetConfig+0x4e4>)
 800b7ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ee:	095b      	lsrs	r3, r3, #5
 800b7f0:	011c      	lsls	r4, r3, #4
 800b7f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b7fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b804:	4642      	mov	r2, r8
 800b806:	464b      	mov	r3, r9
 800b808:	1891      	adds	r1, r2, r2
 800b80a:	61b9      	str	r1, [r7, #24]
 800b80c:	415b      	adcs	r3, r3
 800b80e:	61fb      	str	r3, [r7, #28]
 800b810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b814:	4641      	mov	r1, r8
 800b816:	1851      	adds	r1, r2, r1
 800b818:	6139      	str	r1, [r7, #16]
 800b81a:	4649      	mov	r1, r9
 800b81c:	414b      	adcs	r3, r1
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	f04f 0300 	mov.w	r3, #0
 800b828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b82c:	4659      	mov	r1, fp
 800b82e:	00cb      	lsls	r3, r1, #3
 800b830:	4651      	mov	r1, sl
 800b832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b836:	4651      	mov	r1, sl
 800b838:	00ca      	lsls	r2, r1, #3
 800b83a:	4610      	mov	r0, r2
 800b83c:	4619      	mov	r1, r3
 800b83e:	4603      	mov	r3, r0
 800b840:	4642      	mov	r2, r8
 800b842:	189b      	adds	r3, r3, r2
 800b844:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b848:	464b      	mov	r3, r9
 800b84a:	460a      	mov	r2, r1
 800b84c:	eb42 0303 	adc.w	r3, r2, r3
 800b850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b85e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b860:	f04f 0200 	mov.w	r2, #0
 800b864:	f04f 0300 	mov.w	r3, #0
 800b868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b86c:	4649      	mov	r1, r9
 800b86e:	008b      	lsls	r3, r1, #2
 800b870:	4641      	mov	r1, r8
 800b872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b876:	4641      	mov	r1, r8
 800b878:	008a      	lsls	r2, r1, #2
 800b87a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b87e:	f7f5 f963 	bl	8000b48 <__aeabi_uldivmod>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4611      	mov	r1, r2
 800b888:	4b38      	ldr	r3, [pc, #224]	; (800b96c <UART_SetConfig+0x4e4>)
 800b88a:	fba3 2301 	umull	r2, r3, r3, r1
 800b88e:	095b      	lsrs	r3, r3, #5
 800b890:	2264      	movs	r2, #100	; 0x64
 800b892:	fb02 f303 	mul.w	r3, r2, r3
 800b896:	1acb      	subs	r3, r1, r3
 800b898:	011b      	lsls	r3, r3, #4
 800b89a:	3332      	adds	r3, #50	; 0x32
 800b89c:	4a33      	ldr	r2, [pc, #204]	; (800b96c <UART_SetConfig+0x4e4>)
 800b89e:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8a8:	441c      	add	r4, r3
 800b8aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	673b      	str	r3, [r7, #112]	; 0x70
 800b8b2:	677a      	str	r2, [r7, #116]	; 0x74
 800b8b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	1891      	adds	r1, r2, r2
 800b8be:	60b9      	str	r1, [r7, #8]
 800b8c0:	415b      	adcs	r3, r3
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	1851      	adds	r1, r2, r1
 800b8cc:	6039      	str	r1, [r7, #0]
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	414b      	adcs	r3, r1
 800b8d2:	607b      	str	r3, [r7, #4]
 800b8d4:	f04f 0200 	mov.w	r2, #0
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8e0:	4659      	mov	r1, fp
 800b8e2:	00cb      	lsls	r3, r1, #3
 800b8e4:	4651      	mov	r1, sl
 800b8e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ea:	4651      	mov	r1, sl
 800b8ec:	00ca      	lsls	r2, r1, #3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	189b      	adds	r3, r3, r2
 800b8f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8fa:	464b      	mov	r3, r9
 800b8fc:	460a      	mov	r2, r1
 800b8fe:	eb42 0303 	adc.w	r3, r2, r3
 800b902:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	663b      	str	r3, [r7, #96]	; 0x60
 800b90e:	667a      	str	r2, [r7, #100]	; 0x64
 800b910:	f04f 0200 	mov.w	r2, #0
 800b914:	f04f 0300 	mov.w	r3, #0
 800b918:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b91c:	4649      	mov	r1, r9
 800b91e:	008b      	lsls	r3, r1, #2
 800b920:	4641      	mov	r1, r8
 800b922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b926:	4641      	mov	r1, r8
 800b928:	008a      	lsls	r2, r1, #2
 800b92a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b92e:	f7f5 f90b 	bl	8000b48 <__aeabi_uldivmod>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	4b0d      	ldr	r3, [pc, #52]	; (800b96c <UART_SetConfig+0x4e4>)
 800b938:	fba3 1302 	umull	r1, r3, r3, r2
 800b93c:	095b      	lsrs	r3, r3, #5
 800b93e:	2164      	movs	r1, #100	; 0x64
 800b940:	fb01 f303 	mul.w	r3, r1, r3
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	011b      	lsls	r3, r3, #4
 800b948:	3332      	adds	r3, #50	; 0x32
 800b94a:	4a08      	ldr	r2, [pc, #32]	; (800b96c <UART_SetConfig+0x4e4>)
 800b94c:	fba2 2303 	umull	r2, r3, r2, r3
 800b950:	095b      	lsrs	r3, r3, #5
 800b952:	f003 020f 	and.w	r2, r3, #15
 800b956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4422      	add	r2, r4
 800b95e:	609a      	str	r2, [r3, #8]
}
 800b960:	bf00      	nop
 800b962:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b966:	46bd      	mov	sp, r7
 800b968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b96c:	51eb851f 	.word	0x51eb851f

0800b970 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b97a:	2300      	movs	r3, #0
 800b97c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b97e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b982:	2b84      	cmp	r3, #132	; 0x84
 800b984:	d005      	beq.n	800b992 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b986:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4413      	add	r3, r2
 800b98e:	3303      	adds	r3, #3
 800b990:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b992:	68fb      	ldr	r3, [r7, #12]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b9a4:	f000 fade 	bl	800bf64 <vTaskStartScheduler>
  
  return osOK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b9ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b0:	b089      	sub	sp, #36	; 0x24
 800b9b2:	af04      	add	r7, sp, #16
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d020      	beq.n	800ba02 <osThreadCreate+0x54>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d01c      	beq.n	800ba02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685c      	ldr	r4, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	691e      	ldr	r6, [r3, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff ffc8 	bl	800b970 <makeFreeRtosPriority>
 800b9e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9ea:	9202      	str	r2, [sp, #8]
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	9100      	str	r1, [sp, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	4632      	mov	r2, r6
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 f8ed 	bl	800bbd6 <xTaskCreateStatic>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	e01c      	b.n	800ba3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685c      	ldr	r4, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba0e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff ffaa 	bl	800b970 <makeFreeRtosPriority>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	f107 030c 	add.w	r3, r7, #12
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	9200      	str	r2, [sp, #0]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 f92f 	bl	800bc90 <xTaskCreate>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d001      	beq.n	800ba3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e000      	b.n	800ba3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <osDelay+0x16>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	e000      	b.n	800ba5e <osDelay+0x18>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 fa4c 	bl	800befc <vTaskDelay>
  
  return osOK;
 800ba64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f103 0208 	add.w	r2, r3, #8
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f103 0208 	add.w	r2, r3, #8
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800baa2:	bf00      	nop
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	689a      	ldr	r2, [r3, #8]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	683a      	ldr	r2, [r7, #0]
 800baf2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
}
 800bb04:	bf00      	nop
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb26:	d103      	bne.n	800bb30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	e00c      	b.n	800bb4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3308      	adds	r3, #8
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	e002      	b.n	800bb3e <vListInsert+0x2e>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d2f6      	bcs.n	800bb38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr

0800bb82 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb82:	b480      	push	{r7}
 800bb84:	b085      	sub	sp, #20
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	6892      	ldr	r2, [r2, #8]
 800bb98:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	6852      	ldr	r2, [r2, #4]
 800bba2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d103      	bne.n	800bbb6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	689a      	ldr	r2, [r3, #8]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	1e5a      	subs	r2, r3, #1
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b08e      	sub	sp, #56	; 0x38
 800bbda:	af04      	add	r7, sp, #16
 800bbdc:	60f8      	str	r0, [r7, #12]
 800bbde:	60b9      	str	r1, [r7, #8]
 800bbe0:	607a      	str	r2, [r7, #4]
 800bbe2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10a      	bne.n	800bc00 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d10a      	bne.n	800bc1c <xTaskCreateStatic+0x46>
	__asm volatile
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	61fb      	str	r3, [r7, #28]
}
 800bc18:	bf00      	nop
 800bc1a:	e7fe      	b.n	800bc1a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc1c:	2354      	movs	r3, #84	; 0x54
 800bc1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b54      	cmp	r3, #84	; 0x54
 800bc24:	d00a      	beq.n	800bc3c <xTaskCreateStatic+0x66>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	61bb      	str	r3, [r7, #24]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d01e      	beq.n	800bc82 <xTaskCreateStatic+0xac>
 800bc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d01b      	beq.n	800bc82 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc52:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	9303      	str	r3, [sp, #12]
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	9302      	str	r3, [sp, #8]
 800bc64:	f107 0314 	add.w	r3, r7, #20
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	9300      	str	r3, [sp, #0]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	68b9      	ldr	r1, [r7, #8]
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f850 	bl	800bd1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc7c:	f000 f8d4 	bl	800be28 <prvAddNewTaskToReadyList>
 800bc80:	e001      	b.n	800bc86 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc86:	697b      	ldr	r3, [r7, #20]
	}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3728      	adds	r7, #40	; 0x28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08c      	sub	sp, #48	; 0x30
 800bc94:	af04      	add	r7, sp, #16
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 fec7 	bl	800ca38 <pvPortMalloc>
 800bcaa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00e      	beq.n	800bcd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcb2:	2054      	movs	r0, #84	; 0x54
 800bcb4:	f000 fec0 	bl	800ca38 <pvPortMalloc>
 800bcb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d003      	beq.n	800bcc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	697a      	ldr	r2, [r7, #20]
 800bcc4:	631a      	str	r2, [r3, #48]	; 0x30
 800bcc6:	e005      	b.n	800bcd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bcc8:	6978      	ldr	r0, [r7, #20]
 800bcca:	f000 ff81 	bl	800cbd0 <vPortFree>
 800bcce:	e001      	b.n	800bcd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d017      	beq.n	800bd0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bce2:	88fa      	ldrh	r2, [r7, #6]
 800bce4:	2300      	movs	r3, #0
 800bce6:	9303      	str	r3, [sp, #12]
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	9302      	str	r3, [sp, #8]
 800bcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcee:	9301      	str	r3, [sp, #4]
 800bcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	68b9      	ldr	r1, [r7, #8]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f000 f80e 	bl	800bd1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcfe:	69f8      	ldr	r0, [r7, #28]
 800bd00:	f000 f892 	bl	800be28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd04:	2301      	movs	r3, #1
 800bd06:	61bb      	str	r3, [r7, #24]
 800bd08:	e002      	b.n	800bd10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd10:	69bb      	ldr	r3, [r7, #24]
	}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3720      	adds	r7, #32
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b088      	sub	sp, #32
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
 800bd26:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd32:	3b01      	subs	r3, #1
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	f023 0307 	bic.w	r3, r3, #7
 800bd40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	f003 0307 	and.w	r3, r3, #7
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00a      	beq.n	800bd62 <prvInitialiseNewTask+0x48>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	617b      	str	r3, [r7, #20]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01f      	beq.n	800bda8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd68:	2300      	movs	r3, #0
 800bd6a:	61fb      	str	r3, [r7, #28]
 800bd6c:	e012      	b.n	800bd94 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	4413      	add	r3, r2
 800bd74:	7819      	ldrb	r1, [r3, #0]
 800bd76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	3334      	adds	r3, #52	; 0x34
 800bd7e:	460a      	mov	r2, r1
 800bd80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	4413      	add	r3, r2
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d006      	beq.n	800bd9c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	3301      	adds	r3, #1
 800bd92:	61fb      	str	r3, [r7, #28]
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	2b0f      	cmp	r3, #15
 800bd98:	d9e9      	bls.n	800bd6e <prvInitialiseNewTask+0x54>
 800bd9a:	e000      	b.n	800bd9e <prvInitialiseNewTask+0x84>
			{
				break;
 800bd9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bda6:	e003      	b.n	800bdb0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	2b06      	cmp	r3, #6
 800bdb4:	d901      	bls.n	800bdba <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bdb6:	2306      	movs	r3, #6
 800bdb8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdbe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	2200      	movs	r2, #0
 800bdca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fe6c 	bl	800baae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	3318      	adds	r3, #24
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fe67 	bl	800baae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bde4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	f1c3 0207 	rsb	r2, r3, #7
 800bdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	2200      	movs	r2, #0
 800be00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	69b8      	ldr	r0, [r7, #24]
 800be0a:	f000 fc05 	bl	800c618 <pxPortInitialiseStack>
 800be0e:	4602      	mov	r2, r0
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d002      	beq.n	800be20 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be20:	bf00      	nop
 800be22:	3720      	adds	r7, #32
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be30:	f000 fd20 	bl	800c874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be34:	4b2a      	ldr	r3, [pc, #168]	; (800bee0 <prvAddNewTaskToReadyList+0xb8>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	3301      	adds	r3, #1
 800be3a:	4a29      	ldr	r2, [pc, #164]	; (800bee0 <prvAddNewTaskToReadyList+0xb8>)
 800be3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be3e:	4b29      	ldr	r3, [pc, #164]	; (800bee4 <prvAddNewTaskToReadyList+0xbc>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d109      	bne.n	800be5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be46:	4a27      	ldr	r2, [pc, #156]	; (800bee4 <prvAddNewTaskToReadyList+0xbc>)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be4c:	4b24      	ldr	r3, [pc, #144]	; (800bee0 <prvAddNewTaskToReadyList+0xb8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d110      	bne.n	800be76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be54:	f000 fabc 	bl	800c3d0 <prvInitialiseTaskLists>
 800be58:	e00d      	b.n	800be76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be5a:	4b23      	ldr	r3, [pc, #140]	; (800bee8 <prvAddNewTaskToReadyList+0xc0>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d109      	bne.n	800be76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be62:	4b20      	ldr	r3, [pc, #128]	; (800bee4 <prvAddNewTaskToReadyList+0xbc>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d802      	bhi.n	800be76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be70:	4a1c      	ldr	r2, [pc, #112]	; (800bee4 <prvAddNewTaskToReadyList+0xbc>)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be76:	4b1d      	ldr	r3, [pc, #116]	; (800beec <prvAddNewTaskToReadyList+0xc4>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	3301      	adds	r3, #1
 800be7c:	4a1b      	ldr	r2, [pc, #108]	; (800beec <prvAddNewTaskToReadyList+0xc4>)
 800be7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be84:	2201      	movs	r2, #1
 800be86:	409a      	lsls	r2, r3
 800be88:	4b19      	ldr	r3, [pc, #100]	; (800bef0 <prvAddNewTaskToReadyList+0xc8>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	4a18      	ldr	r2, [pc, #96]	; (800bef0 <prvAddNewTaskToReadyList+0xc8>)
 800be90:	6013      	str	r3, [r2, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be96:	4613      	mov	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4a15      	ldr	r2, [pc, #84]	; (800bef4 <prvAddNewTaskToReadyList+0xcc>)
 800bea0:	441a      	add	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4619      	mov	r1, r3
 800bea8:	4610      	mov	r0, r2
 800beaa:	f7ff fe0d 	bl	800bac8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800beae:	f000 fd11 	bl	800c8d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800beb2:	4b0d      	ldr	r3, [pc, #52]	; (800bee8 <prvAddNewTaskToReadyList+0xc0>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00e      	beq.n	800bed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800beba:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <prvAddNewTaskToReadyList+0xbc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d207      	bcs.n	800bed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bec8:	4b0b      	ldr	r3, [pc, #44]	; (800bef8 <prvAddNewTaskToReadyList+0xd0>)
 800beca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bece:	601a      	str	r2, [r3, #0]
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	20001f40 	.word	0x20001f40
 800bee4:	20001e40 	.word	0x20001e40
 800bee8:	20001f4c 	.word	0x20001f4c
 800beec:	20001f5c 	.word	0x20001f5c
 800bef0:	20001f48 	.word	0x20001f48
 800bef4:	20001e44 	.word	0x20001e44
 800bef8:	e000ed04 	.word	0xe000ed04

0800befc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d017      	beq.n	800bf3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf0e:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <vTaskDelay+0x60>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <vTaskDelay+0x30>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	60bb      	str	r3, [r7, #8]
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf2c:	f000 f87a 	bl	800c024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf30:	2100      	movs	r1, #0
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fb0a 	bl	800c54c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf38:	f000 f882 	bl	800c040 <xTaskResumeAll>
 800bf3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d107      	bne.n	800bf54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bf44:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <vTaskDelay+0x64>)
 800bf46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4a:	601a      	str	r2, [r3, #0]
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf54:	bf00      	nop
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20001f68 	.word	0x20001f68
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08a      	sub	sp, #40	; 0x28
 800bf68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf72:	463a      	mov	r2, r7
 800bf74:	1d39      	adds	r1, r7, #4
 800bf76:	f107 0308 	add.w	r3, r7, #8
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f4 ff62 	bl	8000e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	9202      	str	r2, [sp, #8]
 800bf88:	9301      	str	r3, [sp, #4]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	460a      	mov	r2, r1
 800bf92:	491e      	ldr	r1, [pc, #120]	; (800c00c <vTaskStartScheduler+0xa8>)
 800bf94:	481e      	ldr	r0, [pc, #120]	; (800c010 <vTaskStartScheduler+0xac>)
 800bf96:	f7ff fe1e 	bl	800bbd6 <xTaskCreateStatic>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	4a1d      	ldr	r2, [pc, #116]	; (800c014 <vTaskStartScheduler+0xb0>)
 800bf9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfa0:	4b1c      	ldr	r3, [pc, #112]	; (800c014 <vTaskStartScheduler+0xb0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d002      	beq.n	800bfae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e001      	b.n	800bfb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d116      	bne.n	800bfe6 <vTaskStartScheduler+0x82>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	613b      	str	r3, [r7, #16]
}
 800bfca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bfcc:	4b12      	ldr	r3, [pc, #72]	; (800c018 <vTaskStartScheduler+0xb4>)
 800bfce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfd4:	4b11      	ldr	r3, [pc, #68]	; (800c01c <vTaskStartScheduler+0xb8>)
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfda:	4b11      	ldr	r3, [pc, #68]	; (800c020 <vTaskStartScheduler+0xbc>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfe0:	f000 fba6 	bl	800c730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfe4:	e00e      	b.n	800c004 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfec:	d10a      	bne.n	800c004 <vTaskStartScheduler+0xa0>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	60fb      	str	r3, [r7, #12]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <vTaskStartScheduler+0x9e>
}
 800c004:	bf00      	nop
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	0800ec34 	.word	0x0800ec34
 800c010:	0800c3a1 	.word	0x0800c3a1
 800c014:	20001f64 	.word	0x20001f64
 800c018:	20001f60 	.word	0x20001f60
 800c01c:	20001f4c 	.word	0x20001f4c
 800c020:	20001f44 	.word	0x20001f44

0800c024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c024:	b480      	push	{r7}
 800c026:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c028:	4b04      	ldr	r3, [pc, #16]	; (800c03c <vTaskSuspendAll+0x18>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	3301      	adds	r3, #1
 800c02e:	4a03      	ldr	r2, [pc, #12]	; (800c03c <vTaskSuspendAll+0x18>)
 800c030:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c032:	bf00      	nop
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	20001f68 	.word	0x20001f68

0800c040 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c04e:	4b41      	ldr	r3, [pc, #260]	; (800c154 <xTaskResumeAll+0x114>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <xTaskResumeAll+0x2c>
	__asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	603b      	str	r3, [r7, #0]
}
 800c068:	bf00      	nop
 800c06a:	e7fe      	b.n	800c06a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c06c:	f000 fc02 	bl	800c874 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c070:	4b38      	ldr	r3, [pc, #224]	; (800c154 <xTaskResumeAll+0x114>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3b01      	subs	r3, #1
 800c076:	4a37      	ldr	r2, [pc, #220]	; (800c154 <xTaskResumeAll+0x114>)
 800c078:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c07a:	4b36      	ldr	r3, [pc, #216]	; (800c154 <xTaskResumeAll+0x114>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d161      	bne.n	800c146 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c082:	4b35      	ldr	r3, [pc, #212]	; (800c158 <xTaskResumeAll+0x118>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d05d      	beq.n	800c146 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c08a:	e02e      	b.n	800c0ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c08c:	4b33      	ldr	r3, [pc, #204]	; (800c15c <xTaskResumeAll+0x11c>)
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	3318      	adds	r3, #24
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff fd72 	bl	800bb82 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fd6d 	bl	800bb82 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	409a      	lsls	r2, r3
 800c0b0:	4b2b      	ldr	r3, [pc, #172]	; (800c160 <xTaskResumeAll+0x120>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	4a2a      	ldr	r2, [pc, #168]	; (800c160 <xTaskResumeAll+0x120>)
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4a27      	ldr	r2, [pc, #156]	; (800c164 <xTaskResumeAll+0x124>)
 800c0c8:	441a      	add	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7ff fcf9 	bl	800bac8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0da:	4b23      	ldr	r3, [pc, #140]	; (800c168 <xTaskResumeAll+0x128>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d302      	bcc.n	800c0ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c0e4:	4b21      	ldr	r3, [pc, #132]	; (800c16c <xTaskResumeAll+0x12c>)
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0ea:	4b1c      	ldr	r3, [pc, #112]	; (800c15c <xTaskResumeAll+0x11c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1cc      	bne.n	800c08c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d001      	beq.n	800c0fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0f8:	f000 fa08 	bl	800c50c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0fc:	4b1c      	ldr	r3, [pc, #112]	; (800c170 <xTaskResumeAll+0x130>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d010      	beq.n	800c12a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c108:	f000 f836 	bl	800c178 <xTaskIncrementTick>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c112:	4b16      	ldr	r3, [pc, #88]	; (800c16c <xTaskResumeAll+0x12c>)
 800c114:	2201      	movs	r2, #1
 800c116:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3b01      	subs	r3, #1
 800c11c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1f1      	bne.n	800c108 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c124:	4b12      	ldr	r3, [pc, #72]	; (800c170 <xTaskResumeAll+0x130>)
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c12a:	4b10      	ldr	r3, [pc, #64]	; (800c16c <xTaskResumeAll+0x12c>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d009      	beq.n	800c146 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c132:	2301      	movs	r3, #1
 800c134:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c136:	4b0f      	ldr	r3, [pc, #60]	; (800c174 <xTaskResumeAll+0x134>)
 800c138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c146:	f000 fbc5 	bl	800c8d4 <vPortExitCritical>

	return xAlreadyYielded;
 800c14a:	68bb      	ldr	r3, [r7, #8]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	20001f68 	.word	0x20001f68
 800c158:	20001f40 	.word	0x20001f40
 800c15c:	20001f00 	.word	0x20001f00
 800c160:	20001f48 	.word	0x20001f48
 800c164:	20001e44 	.word	0x20001e44
 800c168:	20001e40 	.word	0x20001e40
 800c16c:	20001f54 	.word	0x20001f54
 800c170:	20001f50 	.word	0x20001f50
 800c174:	e000ed04 	.word	0xe000ed04

0800c178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c17e:	2300      	movs	r3, #0
 800c180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c182:	4b4e      	ldr	r3, [pc, #312]	; (800c2bc <xTaskIncrementTick+0x144>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f040 808e 	bne.w	800c2a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c18c:	4b4c      	ldr	r3, [pc, #304]	; (800c2c0 <xTaskIncrementTick+0x148>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c194:	4a4a      	ldr	r2, [pc, #296]	; (800c2c0 <xTaskIncrementTick+0x148>)
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d120      	bne.n	800c1e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1a0:	4b48      	ldr	r3, [pc, #288]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00a      	beq.n	800c1c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	603b      	str	r3, [r7, #0]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <xTaskIncrementTick+0x46>
 800c1c0:	4b40      	ldr	r3, [pc, #256]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	4b40      	ldr	r3, [pc, #256]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a3e      	ldr	r2, [pc, #248]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4a3e      	ldr	r2, [pc, #248]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	4b3d      	ldr	r3, [pc, #244]	; (800c2cc <xTaskIncrementTick+0x154>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	4a3c      	ldr	r2, [pc, #240]	; (800c2cc <xTaskIncrementTick+0x154>)
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	f000 f995 	bl	800c50c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1e2:	4b3b      	ldr	r3, [pc, #236]	; (800c2d0 <xTaskIncrementTick+0x158>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d348      	bcc.n	800c27e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ec:	4b35      	ldr	r3, [pc, #212]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d104      	bne.n	800c200 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f6:	4b36      	ldr	r3, [pc, #216]	; (800c2d0 <xTaskIncrementTick+0x158>)
 800c1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1fc:	601a      	str	r2, [r3, #0]
					break;
 800c1fe:	e03e      	b.n	800c27e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c200:	4b30      	ldr	r3, [pc, #192]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d203      	bcs.n	800c220 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c218:	4a2d      	ldr	r2, [pc, #180]	; (800c2d0 <xTaskIncrementTick+0x158>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c21e:	e02e      	b.n	800c27e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff fcac 	bl	800bb82 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	3318      	adds	r3, #24
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fca3 	bl	800bb82 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c240:	2201      	movs	r2, #1
 800c242:	409a      	lsls	r2, r3
 800c244:	4b23      	ldr	r3, [pc, #140]	; (800c2d4 <xTaskIncrementTick+0x15c>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4313      	orrs	r3, r2
 800c24a:	4a22      	ldr	r2, [pc, #136]	; (800c2d4 <xTaskIncrementTick+0x15c>)
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4a1f      	ldr	r2, [pc, #124]	; (800c2d8 <xTaskIncrementTick+0x160>)
 800c25c:	441a      	add	r2, r3
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	3304      	adds	r3, #4
 800c262:	4619      	mov	r1, r3
 800c264:	4610      	mov	r0, r2
 800c266:	f7ff fc2f 	bl	800bac8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26e:	4b1b      	ldr	r3, [pc, #108]	; (800c2dc <xTaskIncrementTick+0x164>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	429a      	cmp	r2, r3
 800c276:	d3b9      	bcc.n	800c1ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c278:	2301      	movs	r3, #1
 800c27a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c27c:	e7b6      	b.n	800c1ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c27e:	4b17      	ldr	r3, [pc, #92]	; (800c2dc <xTaskIncrementTick+0x164>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c284:	4914      	ldr	r1, [pc, #80]	; (800c2d8 <xTaskIncrementTick+0x160>)
 800c286:	4613      	mov	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	440b      	add	r3, r1
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d901      	bls.n	800c29a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c296:	2301      	movs	r3, #1
 800c298:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c29a:	4b11      	ldr	r3, [pc, #68]	; (800c2e0 <xTaskIncrementTick+0x168>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d007      	beq.n	800c2b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	617b      	str	r3, [r7, #20]
 800c2a6:	e004      	b.n	800c2b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2a8:	4b0e      	ldr	r3, [pc, #56]	; (800c2e4 <xTaskIncrementTick+0x16c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	4a0d      	ldr	r2, [pc, #52]	; (800c2e4 <xTaskIncrementTick+0x16c>)
 800c2b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2b2:	697b      	ldr	r3, [r7, #20]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3718      	adds	r7, #24
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20001f68 	.word	0x20001f68
 800c2c0:	20001f44 	.word	0x20001f44
 800c2c4:	20001ef8 	.word	0x20001ef8
 800c2c8:	20001efc 	.word	0x20001efc
 800c2cc:	20001f58 	.word	0x20001f58
 800c2d0:	20001f60 	.word	0x20001f60
 800c2d4:	20001f48 	.word	0x20001f48
 800c2d8:	20001e44 	.word	0x20001e44
 800c2dc:	20001e40 	.word	0x20001e40
 800c2e0:	20001f54 	.word	0x20001f54
 800c2e4:	20001f50 	.word	0x20001f50

0800c2e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2ee:	4b27      	ldr	r3, [pc, #156]	; (800c38c <vTaskSwitchContext+0xa4>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2f6:	4b26      	ldr	r3, [pc, #152]	; (800c390 <vTaskSwitchContext+0xa8>)
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c2fc:	e03f      	b.n	800c37e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800c2fe:	4b24      	ldr	r3, [pc, #144]	; (800c390 <vTaskSwitchContext+0xa8>)
 800c300:	2200      	movs	r2, #0
 800c302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c304:	4b23      	ldr	r3, [pc, #140]	; (800c394 <vTaskSwitchContext+0xac>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	fab3 f383 	clz	r3, r3
 800c310:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c312:	7afb      	ldrb	r3, [r7, #11]
 800c314:	f1c3 031f 	rsb	r3, r3, #31
 800c318:	617b      	str	r3, [r7, #20]
 800c31a:	491f      	ldr	r1, [pc, #124]	; (800c398 <vTaskSwitchContext+0xb0>)
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	4613      	mov	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	440b      	add	r3, r1
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10a      	bne.n	800c344 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	607b      	str	r3, [r7, #4]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <vTaskSwitchContext+0x5a>
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4a12      	ldr	r2, [pc, #72]	; (800c398 <vTaskSwitchContext+0xb0>)
 800c350:	4413      	add	r3, r2
 800c352:	613b      	str	r3, [r7, #16]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	605a      	str	r2, [r3, #4]
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	3308      	adds	r3, #8
 800c366:	429a      	cmp	r2, r3
 800c368:	d104      	bne.n	800c374 <vTaskSwitchContext+0x8c>
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	605a      	str	r2, [r3, #4]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	4a08      	ldr	r2, [pc, #32]	; (800c39c <vTaskSwitchContext+0xb4>)
 800c37c:	6013      	str	r3, [r2, #0]
}
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	20001f68 	.word	0x20001f68
 800c390:	20001f54 	.word	0x20001f54
 800c394:	20001f48 	.word	0x20001f48
 800c398:	20001e44 	.word	0x20001e44
 800c39c:	20001e40 	.word	0x20001e40

0800c3a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c3a8:	f000 f852 	bl	800c450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c3ac:	4b06      	ldr	r3, [pc, #24]	; (800c3c8 <prvIdleTask+0x28>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d9f9      	bls.n	800c3a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <prvIdleTask+0x2c>)
 800c3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c3c4:	e7f0      	b.n	800c3a8 <prvIdleTask+0x8>
 800c3c6:	bf00      	nop
 800c3c8:	20001e44 	.word	0x20001e44
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	e00c      	b.n	800c3f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4a12      	ldr	r2, [pc, #72]	; (800c430 <prvInitialiseTaskLists+0x60>)
 800c3e8:	4413      	add	r3, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fb3f 	bl	800ba6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	607b      	str	r3, [r7, #4]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b06      	cmp	r3, #6
 800c3fa:	d9ef      	bls.n	800c3dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3fc:	480d      	ldr	r0, [pc, #52]	; (800c434 <prvInitialiseTaskLists+0x64>)
 800c3fe:	f7ff fb36 	bl	800ba6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c402:	480d      	ldr	r0, [pc, #52]	; (800c438 <prvInitialiseTaskLists+0x68>)
 800c404:	f7ff fb33 	bl	800ba6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c408:	480c      	ldr	r0, [pc, #48]	; (800c43c <prvInitialiseTaskLists+0x6c>)
 800c40a:	f7ff fb30 	bl	800ba6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c40e:	480c      	ldr	r0, [pc, #48]	; (800c440 <prvInitialiseTaskLists+0x70>)
 800c410:	f7ff fb2d 	bl	800ba6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c414:	480b      	ldr	r0, [pc, #44]	; (800c444 <prvInitialiseTaskLists+0x74>)
 800c416:	f7ff fb2a 	bl	800ba6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c41a:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <prvInitialiseTaskLists+0x78>)
 800c41c:	4a05      	ldr	r2, [pc, #20]	; (800c434 <prvInitialiseTaskLists+0x64>)
 800c41e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <prvInitialiseTaskLists+0x7c>)
 800c422:	4a05      	ldr	r2, [pc, #20]	; (800c438 <prvInitialiseTaskLists+0x68>)
 800c424:	601a      	str	r2, [r3, #0]
}
 800c426:	bf00      	nop
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	20001e44 	.word	0x20001e44
 800c434:	20001ed0 	.word	0x20001ed0
 800c438:	20001ee4 	.word	0x20001ee4
 800c43c:	20001f00 	.word	0x20001f00
 800c440:	20001f14 	.word	0x20001f14
 800c444:	20001f2c 	.word	0x20001f2c
 800c448:	20001ef8 	.word	0x20001ef8
 800c44c:	20001efc 	.word	0x20001efc

0800c450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c456:	e019      	b.n	800c48c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c458:	f000 fa0c 	bl	800c874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45c:	4b10      	ldr	r3, [pc, #64]	; (800c4a0 <prvCheckTasksWaitingTermination+0x50>)
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3304      	adds	r3, #4
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fb8a 	bl	800bb82 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c46e:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <prvCheckTasksWaitingTermination+0x54>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3b01      	subs	r3, #1
 800c474:	4a0b      	ldr	r2, [pc, #44]	; (800c4a4 <prvCheckTasksWaitingTermination+0x54>)
 800c476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c478:	4b0b      	ldr	r3, [pc, #44]	; (800c4a8 <prvCheckTasksWaitingTermination+0x58>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	4a0a      	ldr	r2, [pc, #40]	; (800c4a8 <prvCheckTasksWaitingTermination+0x58>)
 800c480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c482:	f000 fa27 	bl	800c8d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 f810 	bl	800c4ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <prvCheckTasksWaitingTermination+0x58>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e1      	bne.n	800c458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	3708      	adds	r7, #8
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20001f14 	.word	0x20001f14
 800c4a4:	20001f40 	.word	0x20001f40
 800c4a8:	20001f28 	.word	0x20001f28

0800c4ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d108      	bne.n	800c4d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fb84 	bl	800cbd0 <vPortFree>
				vPortFree( pxTCB );
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fb81 	bl	800cbd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c4ce:	e018      	b.n	800c502 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d103      	bne.n	800c4e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fb78 	bl	800cbd0 <vPortFree>
	}
 800c4e0:	e00f      	b.n	800c502 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d00a      	beq.n	800c502 <prvDeleteTCB+0x56>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	60fb      	str	r3, [r7, #12]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <prvDeleteTCB+0x54>
	}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c512:	4b0c      	ldr	r3, [pc, #48]	; (800c544 <prvResetNextTaskUnblockTime+0x38>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d104      	bne.n	800c526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c51c:	4b0a      	ldr	r3, [pc, #40]	; (800c548 <prvResetNextTaskUnblockTime+0x3c>)
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c524:	e008      	b.n	800c538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c526:	4b07      	ldr	r3, [pc, #28]	; (800c544 <prvResetNextTaskUnblockTime+0x38>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	4a04      	ldr	r2, [pc, #16]	; (800c548 <prvResetNextTaskUnblockTime+0x3c>)
 800c536:	6013      	str	r3, [r2, #0]
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	20001ef8 	.word	0x20001ef8
 800c548:	20001f60 	.word	0x20001f60

0800c54c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c556:	4b29      	ldr	r3, [pc, #164]	; (800c5fc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c55c:	4b28      	ldr	r3, [pc, #160]	; (800c600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3304      	adds	r3, #4
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fb0d 	bl	800bb82 <uxListRemove>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10b      	bne.n	800c586 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c56e:	4b24      	ldr	r3, [pc, #144]	; (800c600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	2201      	movs	r2, #1
 800c576:	fa02 f303 	lsl.w	r3, r2, r3
 800c57a:	43da      	mvns	r2, r3
 800c57c:	4b21      	ldr	r3, [pc, #132]	; (800c604 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4013      	ands	r3, r2
 800c582:	4a20      	ldr	r2, [pc, #128]	; (800c604 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c584:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c58c:	d10a      	bne.n	800c5a4 <prvAddCurrentTaskToDelayedList+0x58>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d007      	beq.n	800c5a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c594:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3304      	adds	r3, #4
 800c59a:	4619      	mov	r1, r3
 800c59c:	481a      	ldr	r0, [pc, #104]	; (800c608 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c59e:	f7ff fa93 	bl	800bac8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5a2:	e026      	b.n	800c5f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5ac:	4b14      	ldr	r3, [pc, #80]	; (800c600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d209      	bcs.n	800c5d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5bc:	4b13      	ldr	r3, [pc, #76]	; (800c60c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7ff faa1 	bl	800bb10 <vListInsert>
}
 800c5ce:	e010      	b.n	800c5f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5d0:	4b0f      	ldr	r3, [pc, #60]	; (800c610 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	4b0a      	ldr	r3, [pc, #40]	; (800c600 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7ff fa97 	bl	800bb10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5e2:	4b0c      	ldr	r3, [pc, #48]	; (800c614 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d202      	bcs.n	800c5f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5ec:	4a09      	ldr	r2, [pc, #36]	; (800c614 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	6013      	str	r3, [r2, #0]
}
 800c5f2:	bf00      	nop
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20001f44 	.word	0x20001f44
 800c600:	20001e40 	.word	0x20001e40
 800c604:	20001f48 	.word	0x20001f48
 800c608:	20001f2c 	.word	0x20001f2c
 800c60c:	20001efc 	.word	0x20001efc
 800c610:	20001ef8 	.word	0x20001ef8
 800c614:	20001f60 	.word	0x20001f60

0800c618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	3b04      	subs	r3, #4
 800c628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3b04      	subs	r3, #4
 800c636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f023 0201 	bic.w	r2, r3, #1
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	3b04      	subs	r3, #4
 800c646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c648:	4a0c      	ldr	r2, [pc, #48]	; (800c67c <pxPortInitialiseStack+0x64>)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3b14      	subs	r3, #20
 800c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3b04      	subs	r3, #4
 800c65e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f06f 0202 	mvn.w	r2, #2
 800c666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3b20      	subs	r3, #32
 800c66c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c66e:	68fb      	ldr	r3, [r7, #12]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	0800c681 	.word	0x0800c681

0800c680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c68a:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <prvTaskExitError+0x54>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c692:	d00a      	beq.n	800c6aa <prvTaskExitError+0x2a>
	__asm volatile
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	60fb      	str	r3, [r7, #12]
}
 800c6a6:	bf00      	nop
 800c6a8:	e7fe      	b.n	800c6a8 <prvTaskExitError+0x28>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	60bb      	str	r3, [r7, #8]
}
 800c6bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6be:	bf00      	nop
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0fc      	beq.n	800c6c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	bf00      	nop
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	20000020 	.word	0x20000020
	...

0800c6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <pxCurrentTCBConst2>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	6808      	ldr	r0, [r1, #0]
 800c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	f380 8809 	msr	PSP, r0
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8811 	msr	BASEPRI, r0
 800c6fa:	4770      	bx	lr
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst2>:
 800c700:	20001e40 	.word	0x20001e40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop

0800c708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c708:	4808      	ldr	r0, [pc, #32]	; (800c72c <prvPortStartFirstTask+0x24>)
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	f380 8808 	msr	MSP, r0
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8814 	msr	CONTROL, r0
 800c71a:	b662      	cpsie	i
 800c71c:	b661      	cpsie	f
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	df00      	svc	0
 800c728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c72a:	bf00      	nop
 800c72c:	e000ed08 	.word	0xe000ed08

0800c730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c736:	4b46      	ldr	r3, [pc, #280]	; (800c850 <xPortStartScheduler+0x120>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a46      	ldr	r2, [pc, #280]	; (800c854 <xPortStartScheduler+0x124>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d10a      	bne.n	800c756 <xPortStartScheduler+0x26>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c756:	4b3e      	ldr	r3, [pc, #248]	; (800c850 <xPortStartScheduler+0x120>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <xPortStartScheduler+0x128>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d10a      	bne.n	800c776 <xPortStartScheduler+0x46>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c776:	4b39      	ldr	r3, [pc, #228]	; (800c85c <xPortStartScheduler+0x12c>)
 800c778:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	4b31      	ldr	r3, [pc, #196]	; (800c860 <xPortStartScheduler+0x130>)
 800c79c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c79e:	4b31      	ldr	r3, [pc, #196]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7a4:	e009      	b.n	800c7ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7a6:	4b2f      	ldr	r3, [pc, #188]	; (800c864 <xPortStartScheduler+0x134>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	4a2d      	ldr	r2, [pc, #180]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7b0:	78fb      	ldrb	r3, [r7, #3]
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7ba:	78fb      	ldrb	r3, [r7, #3]
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c2:	2b80      	cmp	r3, #128	; 0x80
 800c7c4:	d0ef      	beq.n	800c7a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <xPortStartScheduler+0x134>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1c3 0307 	rsb	r3, r3, #7
 800c7ce:	2b04      	cmp	r3, #4
 800c7d0:	d00a      	beq.n	800c7e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	60bb      	str	r3, [r7, #8]
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <xPortStartScheduler+0x134>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	021b      	lsls	r3, r3, #8
 800c7ee:	4a1d      	ldr	r2, [pc, #116]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7f2:	4b1c      	ldr	r3, [pc, #112]	; (800c864 <xPortStartScheduler+0x134>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <xPortStartScheduler+0x134>)
 800c7fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	b2da      	uxtb	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c806:	4b18      	ldr	r3, [pc, #96]	; (800c868 <xPortStartScheduler+0x138>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a17      	ldr	r2, [pc, #92]	; (800c868 <xPortStartScheduler+0x138>)
 800c80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c810:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <xPortStartScheduler+0x138>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a14      	ldr	r2, [pc, #80]	; (800c868 <xPortStartScheduler+0x138>)
 800c818:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c81c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c81e:	f000 f8dd 	bl	800c9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c822:	4b12      	ldr	r3, [pc, #72]	; (800c86c <xPortStartScheduler+0x13c>)
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c828:	f000 f8fc 	bl	800ca24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c82c:	4b10      	ldr	r3, [pc, #64]	; (800c870 <xPortStartScheduler+0x140>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a0f      	ldr	r2, [pc, #60]	; (800c870 <xPortStartScheduler+0x140>)
 800c832:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c836:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c838:	f7ff ff66 	bl	800c708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c83c:	f7ff fd54 	bl	800c2e8 <vTaskSwitchContext>
	prvTaskExitError();
 800c840:	f7ff ff1e 	bl	800c680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	e000ed00 	.word	0xe000ed00
 800c854:	410fc271 	.word	0x410fc271
 800c858:	410fc270 	.word	0x410fc270
 800c85c:	e000e400 	.word	0xe000e400
 800c860:	20001f6c 	.word	0x20001f6c
 800c864:	20001f70 	.word	0x20001f70
 800c868:	e000ed20 	.word	0xe000ed20
 800c86c:	20000020 	.word	0x20000020
 800c870:	e000ef34 	.word	0xe000ef34

0800c874 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
	__asm volatile
 800c87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	607b      	str	r3, [r7, #4]
}
 800c88c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c88e:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <vPortEnterCritical+0x58>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <vPortEnterCritical+0x58>)
 800c896:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <vPortEnterCritical+0x58>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d10f      	bne.n	800c8c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <vPortEnterCritical+0x5c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00a      	beq.n	800c8c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	603b      	str	r3, [r7, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <vPortEnterCritical+0x4a>
	}
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr
 800c8cc:	20000020 	.word	0x20000020
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8da:	4b12      	ldr	r3, [pc, #72]	; (800c924 <vPortExitCritical+0x50>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <vPortExitCritical+0x24>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	607b      	str	r3, [r7, #4]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <vPortExitCritical+0x50>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	4a09      	ldr	r2, [pc, #36]	; (800c924 <vPortExitCritical+0x50>)
 800c900:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c902:	4b08      	ldr	r3, [pc, #32]	; (800c924 <vPortExitCritical+0x50>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <vPortExitCritical+0x42>
 800c90a:	2300      	movs	r3, #0
 800c90c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c914:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c916:	bf00      	nop
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20000020 	.word	0x20000020
	...

0800c930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c930:	f3ef 8009 	mrs	r0, PSP
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	4b15      	ldr	r3, [pc, #84]	; (800c990 <pxCurrentTCBConst>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	f01e 0f10 	tst.w	lr, #16
 800c940:	bf08      	it	eq
 800c942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	6010      	str	r0, [r2, #0]
 800c94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c950:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c954:	f380 8811 	msr	BASEPRI, r0
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f7ff fcc2 	bl	800c2e8 <vTaskSwitchContext>
 800c964:	f04f 0000 	mov.w	r0, #0
 800c968:	f380 8811 	msr	BASEPRI, r0
 800c96c:	bc09      	pop	{r0, r3}
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	6808      	ldr	r0, [r1, #0]
 800c972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c976:	f01e 0f10 	tst.w	lr, #16
 800c97a:	bf08      	it	eq
 800c97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c980:	f380 8809 	msr	PSP, r0
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst>:
 800c990:	20001e40 	.word	0x20001e40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	607b      	str	r3, [r7, #4]
}
 800c9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9b2:	f7ff fbe1 	bl	800c178 <xTaskIncrementTick>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <SysTick_Handler+0x40>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ca14 <vPortSetupTimerInterrupt+0x38>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ca18 <vPortSetupTimerInterrupt+0x3c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	; (800ca1c <vPortSetupTimerInterrupt+0x40>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	099b      	lsrs	r3, r3, #6
 800c9f8:	4a09      	ldr	r2, [pc, #36]	; (800ca20 <vPortSetupTimerInterrupt+0x44>)
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9fe:	4b04      	ldr	r3, [pc, #16]	; (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	e000e010 	.word	0xe000e010
 800ca14:	e000e018 	.word	0xe000e018
 800ca18:	20000014 	.word	0x20000014
 800ca1c:	10624dd3 	.word	0x10624dd3
 800ca20:	e000e014 	.word	0xe000e014

0800ca24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca34 <vPortEnableVFP+0x10>
 800ca28:	6801      	ldr	r1, [r0, #0]
 800ca2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca2e:	6001      	str	r1, [r0, #0]
 800ca30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca32:	bf00      	nop
 800ca34:	e000ed88 	.word	0xe000ed88

0800ca38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ca44:	f7ff faee 	bl	800c024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ca48:	4b5b      	ldr	r3, [pc, #364]	; (800cbb8 <pvPortMalloc+0x180>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ca50:	f000 f920 	bl	800cc94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ca54:	4b59      	ldr	r3, [pc, #356]	; (800cbbc <pvPortMalloc+0x184>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f040 8093 	bne.w	800cb88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d01d      	beq.n	800caa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ca68:	2208      	movs	r2, #8
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d014      	beq.n	800caa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f023 0307 	bic.w	r3, r3, #7
 800ca80:	3308      	adds	r3, #8
 800ca82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f003 0307 	and.w	r3, r3, #7
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <pvPortMalloc+0x6c>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	617b      	str	r3, [r7, #20]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d06e      	beq.n	800cb88 <pvPortMalloc+0x150>
 800caaa:	4b45      	ldr	r3, [pc, #276]	; (800cbc0 <pvPortMalloc+0x188>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d869      	bhi.n	800cb88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cab4:	4b43      	ldr	r3, [pc, #268]	; (800cbc4 <pvPortMalloc+0x18c>)
 800cab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cab8:	4b42      	ldr	r3, [pc, #264]	; (800cbc4 <pvPortMalloc+0x18c>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cabe:	e004      	b.n	800caca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d903      	bls.n	800cadc <pvPortMalloc+0xa4>
 800cad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1f1      	bne.n	800cac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cadc:	4b36      	ldr	r3, [pc, #216]	; (800cbb8 <pvPortMalloc+0x180>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d050      	beq.n	800cb88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2208      	movs	r2, #8
 800caec:	4413      	add	r3, r2
 800caee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800caf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800caf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	2308      	movs	r3, #8
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d91f      	bls.n	800cb48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	f003 0307 	and.w	r3, r3, #7
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <pvPortMalloc+0xf8>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	613b      	str	r3, [r7, #16]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	1ad2      	subs	r2, r2, r3
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cb42:	69b8      	ldr	r0, [r7, #24]
 800cb44:	f000 f908 	bl	800cd58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cb48:	4b1d      	ldr	r3, [pc, #116]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cb56:	4b1a      	ldr	r3, [pc, #104]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	4b1b      	ldr	r3, [pc, #108]	; (800cbc8 <pvPortMalloc+0x190>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d203      	bcs.n	800cb6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb62:	4b17      	ldr	r3, [pc, #92]	; (800cbc0 <pvPortMalloc+0x188>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <pvPortMalloc+0x190>)
 800cb68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	685a      	ldr	r2, [r3, #4]
 800cb6e:	4b13      	ldr	r3, [pc, #76]	; (800cbbc <pvPortMalloc+0x184>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	431a      	orrs	r2, r3
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb7e:	4b13      	ldr	r3, [pc, #76]	; (800cbcc <pvPortMalloc+0x194>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	4a11      	ldr	r2, [pc, #68]	; (800cbcc <pvPortMalloc+0x194>)
 800cb86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb88:	f7ff fa5a 	bl	800c040 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	f003 0307 	and.w	r3, r3, #7
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00a      	beq.n	800cbac <pvPortMalloc+0x174>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	f383 8811 	msr	BASEPRI, r3
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f3bf 8f4f 	dsb	sy
 800cba6:	60fb      	str	r3, [r7, #12]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <pvPortMalloc+0x172>
	return pvReturn;
 800cbac:	69fb      	ldr	r3, [r7, #28]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3728      	adds	r7, #40	; 0x28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20005b7c 	.word	0x20005b7c
 800cbbc:	20005b90 	.word	0x20005b90
 800cbc0:	20005b80 	.word	0x20005b80
 800cbc4:	20005b74 	.word	0x20005b74
 800cbc8:	20005b84 	.word	0x20005b84
 800cbcc:	20005b88 	.word	0x20005b88

0800cbd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d04d      	beq.n	800cc7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cbe2:	2308      	movs	r3, #8
 800cbe4:	425b      	negs	r3, r3
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	4413      	add	r3, r2
 800cbea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	685a      	ldr	r2, [r3, #4]
 800cbf4:	4b24      	ldr	r3, [pc, #144]	; (800cc88 <vPortFree+0xb8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d10a      	bne.n	800cc14 <vPortFree+0x44>
	__asm volatile
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	60fb      	str	r3, [r7, #12]
}
 800cc10:	bf00      	nop
 800cc12:	e7fe      	b.n	800cc12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00a      	beq.n	800cc32 <vPortFree+0x62>
	__asm volatile
 800cc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc20:	f383 8811 	msr	BASEPRI, r3
 800cc24:	f3bf 8f6f 	isb	sy
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	60bb      	str	r3, [r7, #8]
}
 800cc2e:	bf00      	nop
 800cc30:	e7fe      	b.n	800cc30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	4b14      	ldr	r3, [pc, #80]	; (800cc88 <vPortFree+0xb8>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d01e      	beq.n	800cc7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11a      	bne.n	800cc7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <vPortFree+0xb8>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	43db      	mvns	r3, r3
 800cc52:	401a      	ands	r2, r3
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc58:	f7ff f9e4 	bl	800c024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	4b0a      	ldr	r3, [pc, #40]	; (800cc8c <vPortFree+0xbc>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4413      	add	r3, r2
 800cc66:	4a09      	ldr	r2, [pc, #36]	; (800cc8c <vPortFree+0xbc>)
 800cc68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc6a:	6938      	ldr	r0, [r7, #16]
 800cc6c:	f000 f874 	bl	800cd58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc70:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <vPortFree+0xc0>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	3301      	adds	r3, #1
 800cc76:	4a06      	ldr	r2, [pc, #24]	; (800cc90 <vPortFree+0xc0>)
 800cc78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc7a:	f7ff f9e1 	bl	800c040 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc7e:	bf00      	nop
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20005b90 	.word	0x20005b90
 800cc8c:	20005b80 	.word	0x20005b80
 800cc90:	20005b8c 	.word	0x20005b8c

0800cc94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cc9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cca0:	4b27      	ldr	r3, [pc, #156]	; (800cd40 <prvHeapInit+0xac>)
 800cca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00c      	beq.n	800ccc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3307      	adds	r3, #7
 800ccb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f023 0307 	bic.w	r3, r3, #7
 800ccba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	4a1f      	ldr	r2, [pc, #124]	; (800cd40 <prvHeapInit+0xac>)
 800ccc4:	4413      	add	r3, r2
 800ccc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cccc:	4a1d      	ldr	r2, [pc, #116]	; (800cd44 <prvHeapInit+0xb0>)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <prvHeapInit+0xb0>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	4413      	add	r3, r2
 800ccde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cce0:	2208      	movs	r2, #8
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	1a9b      	subs	r3, r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f023 0307 	bic.w	r3, r3, #7
 800ccee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4a15      	ldr	r2, [pc, #84]	; (800cd48 <prvHeapInit+0xb4>)
 800ccf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ccf6:	4b14      	ldr	r3, [pc, #80]	; (800cd48 <prvHeapInit+0xb4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccfe:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <prvHeapInit+0xb4>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	1ad2      	subs	r2, r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cd14:	4b0c      	ldr	r3, [pc, #48]	; (800cd48 <prvHeapInit+0xb4>)
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	4a0a      	ldr	r2, [pc, #40]	; (800cd4c <prvHeapInit+0xb8>)
 800cd22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <prvHeapInit+0xbc>)
 800cd2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cd2c:	4b09      	ldr	r3, [pc, #36]	; (800cd54 <prvHeapInit+0xc0>)
 800cd2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cd32:	601a      	str	r2, [r3, #0]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	20001f74 	.word	0x20001f74
 800cd44:	20005b74 	.word	0x20005b74
 800cd48:	20005b7c 	.word	0x20005b7c
 800cd4c:	20005b84 	.word	0x20005b84
 800cd50:	20005b80 	.word	0x20005b80
 800cd54:	20005b90 	.word	0x20005b90

0800cd58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd60:	4b28      	ldr	r3, [pc, #160]	; (800ce04 <prvInsertBlockIntoFreeList+0xac>)
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	e002      	b.n	800cd6c <prvInsertBlockIntoFreeList+0x14>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d8f7      	bhi.n	800cd66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	4413      	add	r3, r2
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d108      	bne.n	800cd9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	441a      	add	r2, r3
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	441a      	add	r2, r3
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d118      	bne.n	800cde0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <prvInsertBlockIntoFreeList+0xb0>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d00d      	beq.n	800cdd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	441a      	add	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	e008      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cdd6:	4b0c      	ldr	r3, [pc, #48]	; (800ce08 <prvInsertBlockIntoFreeList+0xb0>)
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	601a      	str	r2, [r3, #0]
 800cdde:	e003      	b.n	800cde8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681a      	ldr	r2, [r3, #0]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d002      	beq.n	800cdf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	20005b74 	.word	0x20005b74
 800ce08:	20005b7c 	.word	0x20005b7c

0800ce0c <atan2>:
 800ce0c:	f000 b800 	b.w	800ce10 <__ieee754_atan2>

0800ce10 <__ieee754_atan2>:
 800ce10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce14:	ec57 6b11 	vmov	r6, r7, d1
 800ce18:	4273      	negs	r3, r6
 800ce1a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800cf98 <__ieee754_atan2+0x188>
 800ce1e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ce22:	4333      	orrs	r3, r6
 800ce24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ce28:	4543      	cmp	r3, r8
 800ce2a:	ec51 0b10 	vmov	r0, r1, d0
 800ce2e:	ee11 5a10 	vmov	r5, s2
 800ce32:	d80a      	bhi.n	800ce4a <__ieee754_atan2+0x3a>
 800ce34:	4244      	negs	r4, r0
 800ce36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce3a:	4304      	orrs	r4, r0
 800ce3c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ce40:	4544      	cmp	r4, r8
 800ce42:	ee10 9a10 	vmov	r9, s0
 800ce46:	468e      	mov	lr, r1
 800ce48:	d907      	bls.n	800ce5a <__ieee754_atan2+0x4a>
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	463b      	mov	r3, r7
 800ce4e:	f7f3 f9ed 	bl	800022c <__adddf3>
 800ce52:	ec41 0b10 	vmov	d0, r0, r1
 800ce56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce5a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ce5e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce62:	4334      	orrs	r4, r6
 800ce64:	d103      	bne.n	800ce6e <__ieee754_atan2+0x5e>
 800ce66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce6a:	f000 b8c5 	b.w	800cff8 <atan>
 800ce6e:	17bc      	asrs	r4, r7, #30
 800ce70:	f004 0402 	and.w	r4, r4, #2
 800ce74:	ea53 0909 	orrs.w	r9, r3, r9
 800ce78:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ce7c:	d107      	bne.n	800ce8e <__ieee754_atan2+0x7e>
 800ce7e:	2c02      	cmp	r4, #2
 800ce80:	d05f      	beq.n	800cf42 <__ieee754_atan2+0x132>
 800ce82:	2c03      	cmp	r4, #3
 800ce84:	d1e5      	bne.n	800ce52 <__ieee754_atan2+0x42>
 800ce86:	a140      	add	r1, pc, #256	; (adr r1, 800cf88 <__ieee754_atan2+0x178>)
 800ce88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce8c:	e7e1      	b.n	800ce52 <__ieee754_atan2+0x42>
 800ce8e:	4315      	orrs	r5, r2
 800ce90:	d106      	bne.n	800cea0 <__ieee754_atan2+0x90>
 800ce92:	f1be 0f00 	cmp.w	lr, #0
 800ce96:	da5f      	bge.n	800cf58 <__ieee754_atan2+0x148>
 800ce98:	a13d      	add	r1, pc, #244	; (adr r1, 800cf90 <__ieee754_atan2+0x180>)
 800ce9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce9e:	e7d8      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cea0:	4542      	cmp	r2, r8
 800cea2:	d10f      	bne.n	800cec4 <__ieee754_atan2+0xb4>
 800cea4:	4293      	cmp	r3, r2
 800cea6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ceaa:	d107      	bne.n	800cebc <__ieee754_atan2+0xac>
 800ceac:	2c02      	cmp	r4, #2
 800ceae:	d84c      	bhi.n	800cf4a <__ieee754_atan2+0x13a>
 800ceb0:	4b33      	ldr	r3, [pc, #204]	; (800cf80 <__ieee754_atan2+0x170>)
 800ceb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ceb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ceba:	e7ca      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cebc:	2c02      	cmp	r4, #2
 800cebe:	d848      	bhi.n	800cf52 <__ieee754_atan2+0x142>
 800cec0:	4b30      	ldr	r3, [pc, #192]	; (800cf84 <__ieee754_atan2+0x174>)
 800cec2:	e7f6      	b.n	800ceb2 <__ieee754_atan2+0xa2>
 800cec4:	4543      	cmp	r3, r8
 800cec6:	d0e4      	beq.n	800ce92 <__ieee754_atan2+0x82>
 800cec8:	1a9b      	subs	r3, r3, r2
 800ceca:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cece:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ced2:	da1e      	bge.n	800cf12 <__ieee754_atan2+0x102>
 800ced4:	2f00      	cmp	r7, #0
 800ced6:	da01      	bge.n	800cedc <__ieee754_atan2+0xcc>
 800ced8:	323c      	adds	r2, #60	; 0x3c
 800ceda:	db1e      	blt.n	800cf1a <__ieee754_atan2+0x10a>
 800cedc:	4632      	mov	r2, r6
 800cede:	463b      	mov	r3, r7
 800cee0:	f7f3 fc84 	bl	80007ec <__aeabi_ddiv>
 800cee4:	ec41 0b10 	vmov	d0, r0, r1
 800cee8:	f000 fa7a 	bl	800d3e0 <fabs>
 800ceec:	f000 f884 	bl	800cff8 <atan>
 800cef0:	ec51 0b10 	vmov	r0, r1, d0
 800cef4:	2c01      	cmp	r4, #1
 800cef6:	d013      	beq.n	800cf20 <__ieee754_atan2+0x110>
 800cef8:	2c02      	cmp	r4, #2
 800cefa:	d015      	beq.n	800cf28 <__ieee754_atan2+0x118>
 800cefc:	2c00      	cmp	r4, #0
 800cefe:	d0a8      	beq.n	800ce52 <__ieee754_atan2+0x42>
 800cf00:	a317      	add	r3, pc, #92	; (adr r3, 800cf60 <__ieee754_atan2+0x150>)
 800cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf06:	f7f3 f98f 	bl	8000228 <__aeabi_dsub>
 800cf0a:	a317      	add	r3, pc, #92	; (adr r3, 800cf68 <__ieee754_atan2+0x158>)
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	e014      	b.n	800cf3c <__ieee754_atan2+0x12c>
 800cf12:	a117      	add	r1, pc, #92	; (adr r1, 800cf70 <__ieee754_atan2+0x160>)
 800cf14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf18:	e7ec      	b.n	800cef4 <__ieee754_atan2+0xe4>
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	e7e9      	b.n	800cef4 <__ieee754_atan2+0xe4>
 800cf20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf24:	4619      	mov	r1, r3
 800cf26:	e794      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cf28:	a30d      	add	r3, pc, #52	; (adr r3, 800cf60 <__ieee754_atan2+0x150>)
 800cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2e:	f7f3 f97b 	bl	8000228 <__aeabi_dsub>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	a10c      	add	r1, pc, #48	; (adr r1, 800cf68 <__ieee754_atan2+0x158>)
 800cf38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3c:	f7f3 f974 	bl	8000228 <__aeabi_dsub>
 800cf40:	e787      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cf42:	a109      	add	r1, pc, #36	; (adr r1, 800cf68 <__ieee754_atan2+0x158>)
 800cf44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf48:	e783      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cf4a:	a10b      	add	r1, pc, #44	; (adr r1, 800cf78 <__ieee754_atan2+0x168>)
 800cf4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf50:	e77f      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cf52:	2000      	movs	r0, #0
 800cf54:	2100      	movs	r1, #0
 800cf56:	e77c      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cf58:	a105      	add	r1, pc, #20	; (adr r1, 800cf70 <__ieee754_atan2+0x160>)
 800cf5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf5e:	e778      	b.n	800ce52 <__ieee754_atan2+0x42>
 800cf60:	33145c07 	.word	0x33145c07
 800cf64:	3ca1a626 	.word	0x3ca1a626
 800cf68:	54442d18 	.word	0x54442d18
 800cf6c:	400921fb 	.word	0x400921fb
 800cf70:	54442d18 	.word	0x54442d18
 800cf74:	3ff921fb 	.word	0x3ff921fb
 800cf78:	54442d18 	.word	0x54442d18
 800cf7c:	3fe921fb 	.word	0x3fe921fb
 800cf80:	0800ed78 	.word	0x0800ed78
 800cf84:	0800ed90 	.word	0x0800ed90
 800cf88:	54442d18 	.word	0x54442d18
 800cf8c:	c00921fb 	.word	0xc00921fb
 800cf90:	54442d18 	.word	0x54442d18
 800cf94:	bff921fb 	.word	0xbff921fb
 800cf98:	7ff00000 	.word	0x7ff00000

0800cf9c <sqrt>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	ed2d 8b02 	vpush	{d8}
 800cfa2:	ec55 4b10 	vmov	r4, r5, d0
 800cfa6:	f000 fa7f 	bl	800d4a8 <__ieee754_sqrt>
 800cfaa:	4622      	mov	r2, r4
 800cfac:	462b      	mov	r3, r5
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	eeb0 8a40 	vmov.f32	s16, s0
 800cfb6:	eef0 8a60 	vmov.f32	s17, s1
 800cfba:	f7f3 fd87 	bl	8000acc <__aeabi_dcmpun>
 800cfbe:	b990      	cbnz	r0, 800cfe6 <sqrt+0x4a>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	4629      	mov	r1, r5
 800cfc8:	f7f3 fd58 	bl	8000a7c <__aeabi_dcmplt>
 800cfcc:	b158      	cbz	r0, 800cfe6 <sqrt+0x4a>
 800cfce:	f001 fb67 	bl	800e6a0 <__errno>
 800cfd2:	2321      	movs	r3, #33	; 0x21
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4610      	mov	r0, r2
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f7f3 fc05 	bl	80007ec <__aeabi_ddiv>
 800cfe2:	ec41 0b18 	vmov	d8, r0, r1
 800cfe6:	eeb0 0a48 	vmov.f32	s0, s16
 800cfea:	eef0 0a68 	vmov.f32	s1, s17
 800cfee:	ecbd 8b02 	vpop	{d8}
 800cff2:	bd38      	pop	{r3, r4, r5, pc}
 800cff4:	0000      	movs	r0, r0
	...

0800cff8 <atan>:
 800cff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	ec55 4b10 	vmov	r4, r5, d0
 800d000:	4bc3      	ldr	r3, [pc, #780]	; (800d310 <atan+0x318>)
 800d002:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d006:	429e      	cmp	r6, r3
 800d008:	46ab      	mov	fp, r5
 800d00a:	dd18      	ble.n	800d03e <atan+0x46>
 800d00c:	4bc1      	ldr	r3, [pc, #772]	; (800d314 <atan+0x31c>)
 800d00e:	429e      	cmp	r6, r3
 800d010:	dc01      	bgt.n	800d016 <atan+0x1e>
 800d012:	d109      	bne.n	800d028 <atan+0x30>
 800d014:	b144      	cbz	r4, 800d028 <atan+0x30>
 800d016:	4622      	mov	r2, r4
 800d018:	462b      	mov	r3, r5
 800d01a:	4620      	mov	r0, r4
 800d01c:	4629      	mov	r1, r5
 800d01e:	f7f3 f905 	bl	800022c <__adddf3>
 800d022:	4604      	mov	r4, r0
 800d024:	460d      	mov	r5, r1
 800d026:	e006      	b.n	800d036 <atan+0x3e>
 800d028:	f1bb 0f00 	cmp.w	fp, #0
 800d02c:	f300 8131 	bgt.w	800d292 <atan+0x29a>
 800d030:	a59b      	add	r5, pc, #620	; (adr r5, 800d2a0 <atan+0x2a8>)
 800d032:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d036:	ec45 4b10 	vmov	d0, r4, r5
 800d03a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d03e:	4bb6      	ldr	r3, [pc, #728]	; (800d318 <atan+0x320>)
 800d040:	429e      	cmp	r6, r3
 800d042:	dc14      	bgt.n	800d06e <atan+0x76>
 800d044:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d048:	429e      	cmp	r6, r3
 800d04a:	dc0d      	bgt.n	800d068 <atan+0x70>
 800d04c:	a396      	add	r3, pc, #600	; (adr r3, 800d2a8 <atan+0x2b0>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	ee10 0a10 	vmov	r0, s0
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 f8e8 	bl	800022c <__adddf3>
 800d05c:	4baf      	ldr	r3, [pc, #700]	; (800d31c <atan+0x324>)
 800d05e:	2200      	movs	r2, #0
 800d060:	f7f3 fd2a 	bl	8000ab8 <__aeabi_dcmpgt>
 800d064:	2800      	cmp	r0, #0
 800d066:	d1e6      	bne.n	800d036 <atan+0x3e>
 800d068:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d06c:	e02b      	b.n	800d0c6 <atan+0xce>
 800d06e:	f000 f9b7 	bl	800d3e0 <fabs>
 800d072:	4bab      	ldr	r3, [pc, #684]	; (800d320 <atan+0x328>)
 800d074:	429e      	cmp	r6, r3
 800d076:	ec55 4b10 	vmov	r4, r5, d0
 800d07a:	f300 80bf 	bgt.w	800d1fc <atan+0x204>
 800d07e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d082:	429e      	cmp	r6, r3
 800d084:	f300 80a0 	bgt.w	800d1c8 <atan+0x1d0>
 800d088:	ee10 2a10 	vmov	r2, s0
 800d08c:	ee10 0a10 	vmov	r0, s0
 800d090:	462b      	mov	r3, r5
 800d092:	4629      	mov	r1, r5
 800d094:	f7f3 f8ca 	bl	800022c <__adddf3>
 800d098:	4ba0      	ldr	r3, [pc, #640]	; (800d31c <atan+0x324>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	f7f3 f8c4 	bl	8000228 <__aeabi_dsub>
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	f7f3 f8bd 	bl	800022c <__adddf3>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	4639      	mov	r1, r7
 800d0ba:	f7f3 fb97 	bl	80007ec <__aeabi_ddiv>
 800d0be:	f04f 0a00 	mov.w	sl, #0
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	460d      	mov	r5, r1
 800d0c6:	4622      	mov	r2, r4
 800d0c8:	462b      	mov	r3, r5
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	f7f3 fa63 	bl	8000598 <__aeabi_dmul>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4680      	mov	r8, r0
 800d0d8:	4689      	mov	r9, r1
 800d0da:	f7f3 fa5d 	bl	8000598 <__aeabi_dmul>
 800d0de:	a374      	add	r3, pc, #464	; (adr r3, 800d2b0 <atan+0x2b8>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	4606      	mov	r6, r0
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	f7f3 fa56 	bl	8000598 <__aeabi_dmul>
 800d0ec:	a372      	add	r3, pc, #456	; (adr r3, 800d2b8 <atan+0x2c0>)
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	f7f3 f89b 	bl	800022c <__adddf3>
 800d0f6:	4632      	mov	r2, r6
 800d0f8:	463b      	mov	r3, r7
 800d0fa:	f7f3 fa4d 	bl	8000598 <__aeabi_dmul>
 800d0fe:	a370      	add	r3, pc, #448	; (adr r3, 800d2c0 <atan+0x2c8>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 f892 	bl	800022c <__adddf3>
 800d108:	4632      	mov	r2, r6
 800d10a:	463b      	mov	r3, r7
 800d10c:	f7f3 fa44 	bl	8000598 <__aeabi_dmul>
 800d110:	a36d      	add	r3, pc, #436	; (adr r3, 800d2c8 <atan+0x2d0>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 f889 	bl	800022c <__adddf3>
 800d11a:	4632      	mov	r2, r6
 800d11c:	463b      	mov	r3, r7
 800d11e:	f7f3 fa3b 	bl	8000598 <__aeabi_dmul>
 800d122:	a36b      	add	r3, pc, #428	; (adr r3, 800d2d0 <atan+0x2d8>)
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f7f3 f880 	bl	800022c <__adddf3>
 800d12c:	4632      	mov	r2, r6
 800d12e:	463b      	mov	r3, r7
 800d130:	f7f3 fa32 	bl	8000598 <__aeabi_dmul>
 800d134:	a368      	add	r3, pc, #416	; (adr r3, 800d2d8 <atan+0x2e0>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	f7f3 f877 	bl	800022c <__adddf3>
 800d13e:	4642      	mov	r2, r8
 800d140:	464b      	mov	r3, r9
 800d142:	f7f3 fa29 	bl	8000598 <__aeabi_dmul>
 800d146:	a366      	add	r3, pc, #408	; (adr r3, 800d2e0 <atan+0x2e8>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	4680      	mov	r8, r0
 800d14e:	4689      	mov	r9, r1
 800d150:	4630      	mov	r0, r6
 800d152:	4639      	mov	r1, r7
 800d154:	f7f3 fa20 	bl	8000598 <__aeabi_dmul>
 800d158:	a363      	add	r3, pc, #396	; (adr r3, 800d2e8 <atan+0x2f0>)
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	f7f3 f863 	bl	8000228 <__aeabi_dsub>
 800d162:	4632      	mov	r2, r6
 800d164:	463b      	mov	r3, r7
 800d166:	f7f3 fa17 	bl	8000598 <__aeabi_dmul>
 800d16a:	a361      	add	r3, pc, #388	; (adr r3, 800d2f0 <atan+0x2f8>)
 800d16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d170:	f7f3 f85a 	bl	8000228 <__aeabi_dsub>
 800d174:	4632      	mov	r2, r6
 800d176:	463b      	mov	r3, r7
 800d178:	f7f3 fa0e 	bl	8000598 <__aeabi_dmul>
 800d17c:	a35e      	add	r3, pc, #376	; (adr r3, 800d2f8 <atan+0x300>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	f7f3 f851 	bl	8000228 <__aeabi_dsub>
 800d186:	4632      	mov	r2, r6
 800d188:	463b      	mov	r3, r7
 800d18a:	f7f3 fa05 	bl	8000598 <__aeabi_dmul>
 800d18e:	a35c      	add	r3, pc, #368	; (adr r3, 800d300 <atan+0x308>)
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	f7f3 f848 	bl	8000228 <__aeabi_dsub>
 800d198:	4632      	mov	r2, r6
 800d19a:	463b      	mov	r3, r7
 800d19c:	f7f3 f9fc 	bl	8000598 <__aeabi_dmul>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	f7f3 f840 	bl	800022c <__adddf3>
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	462b      	mov	r3, r5
 800d1b0:	f7f3 f9f2 	bl	8000598 <__aeabi_dmul>
 800d1b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	d14b      	bne.n	800d256 <atan+0x25e>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	f7f3 f831 	bl	8000228 <__aeabi_dsub>
 800d1c6:	e72c      	b.n	800d022 <atan+0x2a>
 800d1c8:	ee10 0a10 	vmov	r0, s0
 800d1cc:	4b53      	ldr	r3, [pc, #332]	; (800d31c <atan+0x324>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7f3 f829 	bl	8000228 <__aeabi_dsub>
 800d1d6:	4b51      	ldr	r3, [pc, #324]	; (800d31c <atan+0x324>)
 800d1d8:	4606      	mov	r6, r0
 800d1da:	460f      	mov	r7, r1
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f7f3 f823 	bl	800022c <__adddf3>
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	4639      	mov	r1, r7
 800d1ee:	f7f3 fafd 	bl	80007ec <__aeabi_ddiv>
 800d1f2:	f04f 0a01 	mov.w	sl, #1
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	460d      	mov	r5, r1
 800d1fa:	e764      	b.n	800d0c6 <atan+0xce>
 800d1fc:	4b49      	ldr	r3, [pc, #292]	; (800d324 <atan+0x32c>)
 800d1fe:	429e      	cmp	r6, r3
 800d200:	da1d      	bge.n	800d23e <atan+0x246>
 800d202:	ee10 0a10 	vmov	r0, s0
 800d206:	4b48      	ldr	r3, [pc, #288]	; (800d328 <atan+0x330>)
 800d208:	2200      	movs	r2, #0
 800d20a:	4629      	mov	r1, r5
 800d20c:	f7f3 f80c 	bl	8000228 <__aeabi_dsub>
 800d210:	4b45      	ldr	r3, [pc, #276]	; (800d328 <atan+0x330>)
 800d212:	4606      	mov	r6, r0
 800d214:	460f      	mov	r7, r1
 800d216:	2200      	movs	r2, #0
 800d218:	4620      	mov	r0, r4
 800d21a:	4629      	mov	r1, r5
 800d21c:	f7f3 f9bc 	bl	8000598 <__aeabi_dmul>
 800d220:	4b3e      	ldr	r3, [pc, #248]	; (800d31c <atan+0x324>)
 800d222:	2200      	movs	r2, #0
 800d224:	f7f3 f802 	bl	800022c <__adddf3>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4630      	mov	r0, r6
 800d22e:	4639      	mov	r1, r7
 800d230:	f7f3 fadc 	bl	80007ec <__aeabi_ddiv>
 800d234:	f04f 0a02 	mov.w	sl, #2
 800d238:	4604      	mov	r4, r0
 800d23a:	460d      	mov	r5, r1
 800d23c:	e743      	b.n	800d0c6 <atan+0xce>
 800d23e:	462b      	mov	r3, r5
 800d240:	ee10 2a10 	vmov	r2, s0
 800d244:	4939      	ldr	r1, [pc, #228]	; (800d32c <atan+0x334>)
 800d246:	2000      	movs	r0, #0
 800d248:	f7f3 fad0 	bl	80007ec <__aeabi_ddiv>
 800d24c:	f04f 0a03 	mov.w	sl, #3
 800d250:	4604      	mov	r4, r0
 800d252:	460d      	mov	r5, r1
 800d254:	e737      	b.n	800d0c6 <atan+0xce>
 800d256:	4b36      	ldr	r3, [pc, #216]	; (800d330 <atan+0x338>)
 800d258:	4e36      	ldr	r6, [pc, #216]	; (800d334 <atan+0x33c>)
 800d25a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d262:	f7f2 ffe1 	bl	8000228 <__aeabi_dsub>
 800d266:	4622      	mov	r2, r4
 800d268:	462b      	mov	r3, r5
 800d26a:	f7f2 ffdd 	bl	8000228 <__aeabi_dsub>
 800d26e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d27a:	f7f2 ffd5 	bl	8000228 <__aeabi_dsub>
 800d27e:	f1bb 0f00 	cmp.w	fp, #0
 800d282:	4604      	mov	r4, r0
 800d284:	460d      	mov	r5, r1
 800d286:	f6bf aed6 	bge.w	800d036 <atan+0x3e>
 800d28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d28e:	461d      	mov	r5, r3
 800d290:	e6d1      	b.n	800d036 <atan+0x3e>
 800d292:	a51d      	add	r5, pc, #116	; (adr r5, 800d308 <atan+0x310>)
 800d294:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d298:	e6cd      	b.n	800d036 <atan+0x3e>
 800d29a:	bf00      	nop
 800d29c:	f3af 8000 	nop.w
 800d2a0:	54442d18 	.word	0x54442d18
 800d2a4:	bff921fb 	.word	0xbff921fb
 800d2a8:	8800759c 	.word	0x8800759c
 800d2ac:	7e37e43c 	.word	0x7e37e43c
 800d2b0:	e322da11 	.word	0xe322da11
 800d2b4:	3f90ad3a 	.word	0x3f90ad3a
 800d2b8:	24760deb 	.word	0x24760deb
 800d2bc:	3fa97b4b 	.word	0x3fa97b4b
 800d2c0:	a0d03d51 	.word	0xa0d03d51
 800d2c4:	3fb10d66 	.word	0x3fb10d66
 800d2c8:	c54c206e 	.word	0xc54c206e
 800d2cc:	3fb745cd 	.word	0x3fb745cd
 800d2d0:	920083ff 	.word	0x920083ff
 800d2d4:	3fc24924 	.word	0x3fc24924
 800d2d8:	5555550d 	.word	0x5555550d
 800d2dc:	3fd55555 	.word	0x3fd55555
 800d2e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d2e4:	bfa2b444 	.word	0xbfa2b444
 800d2e8:	52defd9a 	.word	0x52defd9a
 800d2ec:	3fadde2d 	.word	0x3fadde2d
 800d2f0:	af749a6d 	.word	0xaf749a6d
 800d2f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d2f8:	fe231671 	.word	0xfe231671
 800d2fc:	3fbc71c6 	.word	0x3fbc71c6
 800d300:	9998ebc4 	.word	0x9998ebc4
 800d304:	3fc99999 	.word	0x3fc99999
 800d308:	54442d18 	.word	0x54442d18
 800d30c:	3ff921fb 	.word	0x3ff921fb
 800d310:	440fffff 	.word	0x440fffff
 800d314:	7ff00000 	.word	0x7ff00000
 800d318:	3fdbffff 	.word	0x3fdbffff
 800d31c:	3ff00000 	.word	0x3ff00000
 800d320:	3ff2ffff 	.word	0x3ff2ffff
 800d324:	40038000 	.word	0x40038000
 800d328:	3ff80000 	.word	0x3ff80000
 800d32c:	bff00000 	.word	0xbff00000
 800d330:	0800edc8 	.word	0x0800edc8
 800d334:	0800eda8 	.word	0x0800eda8

0800d338 <cos>:
 800d338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d33a:	ec53 2b10 	vmov	r2, r3, d0
 800d33e:	4826      	ldr	r0, [pc, #152]	; (800d3d8 <cos+0xa0>)
 800d340:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d344:	4281      	cmp	r1, r0
 800d346:	dc06      	bgt.n	800d356 <cos+0x1e>
 800d348:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d3d0 <cos+0x98>
 800d34c:	b005      	add	sp, #20
 800d34e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d352:	f000 bedd 	b.w	800e110 <__kernel_cos>
 800d356:	4821      	ldr	r0, [pc, #132]	; (800d3dc <cos+0xa4>)
 800d358:	4281      	cmp	r1, r0
 800d35a:	dd09      	ble.n	800d370 <cos+0x38>
 800d35c:	ee10 0a10 	vmov	r0, s0
 800d360:	4619      	mov	r1, r3
 800d362:	f7f2 ff61 	bl	8000228 <__aeabi_dsub>
 800d366:	ec41 0b10 	vmov	d0, r0, r1
 800d36a:	b005      	add	sp, #20
 800d36c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d370:	4668      	mov	r0, sp
 800d372:	f000 f975 	bl	800d660 <__ieee754_rem_pio2>
 800d376:	f000 0003 	and.w	r0, r0, #3
 800d37a:	2801      	cmp	r0, #1
 800d37c:	d00b      	beq.n	800d396 <cos+0x5e>
 800d37e:	2802      	cmp	r0, #2
 800d380:	d016      	beq.n	800d3b0 <cos+0x78>
 800d382:	b9e0      	cbnz	r0, 800d3be <cos+0x86>
 800d384:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d388:	ed9d 0b00 	vldr	d0, [sp]
 800d38c:	f000 fec0 	bl	800e110 <__kernel_cos>
 800d390:	ec51 0b10 	vmov	r0, r1, d0
 800d394:	e7e7      	b.n	800d366 <cos+0x2e>
 800d396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d39a:	ed9d 0b00 	vldr	d0, [sp]
 800d39e:	f000 ff7f 	bl	800e2a0 <__kernel_sin>
 800d3a2:	ec53 2b10 	vmov	r2, r3, d0
 800d3a6:	ee10 0a10 	vmov	r0, s0
 800d3aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d3ae:	e7da      	b.n	800d366 <cos+0x2e>
 800d3b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3b4:	ed9d 0b00 	vldr	d0, [sp]
 800d3b8:	f000 feaa 	bl	800e110 <__kernel_cos>
 800d3bc:	e7f1      	b.n	800d3a2 <cos+0x6a>
 800d3be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3c2:	ed9d 0b00 	vldr	d0, [sp]
 800d3c6:	2001      	movs	r0, #1
 800d3c8:	f000 ff6a 	bl	800e2a0 <__kernel_sin>
 800d3cc:	e7e0      	b.n	800d390 <cos+0x58>
 800d3ce:	bf00      	nop
	...
 800d3d8:	3fe921fb 	.word	0x3fe921fb
 800d3dc:	7fefffff 	.word	0x7fefffff

0800d3e0 <fabs>:
 800d3e0:	ec51 0b10 	vmov	r0, r1, d0
 800d3e4:	ee10 2a10 	vmov	r2, s0
 800d3e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d3ec:	ec43 2b10 	vmov	d0, r2, r3
 800d3f0:	4770      	bx	lr
 800d3f2:	0000      	movs	r0, r0
 800d3f4:	0000      	movs	r0, r0
	...

0800d3f8 <sin>:
 800d3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3fa:	ec53 2b10 	vmov	r2, r3, d0
 800d3fe:	4828      	ldr	r0, [pc, #160]	; (800d4a0 <sin+0xa8>)
 800d400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d404:	4281      	cmp	r1, r0
 800d406:	dc07      	bgt.n	800d418 <sin+0x20>
 800d408:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d498 <sin+0xa0>
 800d40c:	2000      	movs	r0, #0
 800d40e:	b005      	add	sp, #20
 800d410:	f85d eb04 	ldr.w	lr, [sp], #4
 800d414:	f000 bf44 	b.w	800e2a0 <__kernel_sin>
 800d418:	4822      	ldr	r0, [pc, #136]	; (800d4a4 <sin+0xac>)
 800d41a:	4281      	cmp	r1, r0
 800d41c:	dd09      	ble.n	800d432 <sin+0x3a>
 800d41e:	ee10 0a10 	vmov	r0, s0
 800d422:	4619      	mov	r1, r3
 800d424:	f7f2 ff00 	bl	8000228 <__aeabi_dsub>
 800d428:	ec41 0b10 	vmov	d0, r0, r1
 800d42c:	b005      	add	sp, #20
 800d42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d432:	4668      	mov	r0, sp
 800d434:	f000 f914 	bl	800d660 <__ieee754_rem_pio2>
 800d438:	f000 0003 	and.w	r0, r0, #3
 800d43c:	2801      	cmp	r0, #1
 800d43e:	d00c      	beq.n	800d45a <sin+0x62>
 800d440:	2802      	cmp	r0, #2
 800d442:	d011      	beq.n	800d468 <sin+0x70>
 800d444:	b9f0      	cbnz	r0, 800d484 <sin+0x8c>
 800d446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d44a:	ed9d 0b00 	vldr	d0, [sp]
 800d44e:	2001      	movs	r0, #1
 800d450:	f000 ff26 	bl	800e2a0 <__kernel_sin>
 800d454:	ec51 0b10 	vmov	r0, r1, d0
 800d458:	e7e6      	b.n	800d428 <sin+0x30>
 800d45a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d45e:	ed9d 0b00 	vldr	d0, [sp]
 800d462:	f000 fe55 	bl	800e110 <__kernel_cos>
 800d466:	e7f5      	b.n	800d454 <sin+0x5c>
 800d468:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d46c:	ed9d 0b00 	vldr	d0, [sp]
 800d470:	2001      	movs	r0, #1
 800d472:	f000 ff15 	bl	800e2a0 <__kernel_sin>
 800d476:	ec53 2b10 	vmov	r2, r3, d0
 800d47a:	ee10 0a10 	vmov	r0, s0
 800d47e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d482:	e7d1      	b.n	800d428 <sin+0x30>
 800d484:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d488:	ed9d 0b00 	vldr	d0, [sp]
 800d48c:	f000 fe40 	bl	800e110 <__kernel_cos>
 800d490:	e7f1      	b.n	800d476 <sin+0x7e>
 800d492:	bf00      	nop
 800d494:	f3af 8000 	nop.w
	...
 800d4a0:	3fe921fb 	.word	0x3fe921fb
 800d4a4:	7fefffff 	.word	0x7fefffff

0800d4a8 <__ieee754_sqrt>:
 800d4a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ac:	ec55 4b10 	vmov	r4, r5, d0
 800d4b0:	4e67      	ldr	r6, [pc, #412]	; (800d650 <__ieee754_sqrt+0x1a8>)
 800d4b2:	43ae      	bics	r6, r5
 800d4b4:	ee10 0a10 	vmov	r0, s0
 800d4b8:	ee10 2a10 	vmov	r2, s0
 800d4bc:	4629      	mov	r1, r5
 800d4be:	462b      	mov	r3, r5
 800d4c0:	d10d      	bne.n	800d4de <__ieee754_sqrt+0x36>
 800d4c2:	f7f3 f869 	bl	8000598 <__aeabi_dmul>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	f7f2 fead 	bl	800022c <__adddf3>
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	460d      	mov	r5, r1
 800d4d6:	ec45 4b10 	vmov	d0, r4, r5
 800d4da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4de:	2d00      	cmp	r5, #0
 800d4e0:	dc0b      	bgt.n	800d4fa <__ieee754_sqrt+0x52>
 800d4e2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d4e6:	4326      	orrs	r6, r4
 800d4e8:	d0f5      	beq.n	800d4d6 <__ieee754_sqrt+0x2e>
 800d4ea:	b135      	cbz	r5, 800d4fa <__ieee754_sqrt+0x52>
 800d4ec:	f7f2 fe9c 	bl	8000228 <__aeabi_dsub>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	f7f3 f97a 	bl	80007ec <__aeabi_ddiv>
 800d4f8:	e7eb      	b.n	800d4d2 <__ieee754_sqrt+0x2a>
 800d4fa:	1509      	asrs	r1, r1, #20
 800d4fc:	f000 808d 	beq.w	800d61a <__ieee754_sqrt+0x172>
 800d500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d504:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d50c:	07c9      	lsls	r1, r1, #31
 800d50e:	bf5c      	itt	pl
 800d510:	005b      	lslpl	r3, r3, #1
 800d512:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d51a:	bf58      	it	pl
 800d51c:	0052      	lslpl	r2, r2, #1
 800d51e:	2500      	movs	r5, #0
 800d520:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d524:	1076      	asrs	r6, r6, #1
 800d526:	0052      	lsls	r2, r2, #1
 800d528:	f04f 0e16 	mov.w	lr, #22
 800d52c:	46ac      	mov	ip, r5
 800d52e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d532:	eb0c 0001 	add.w	r0, ip, r1
 800d536:	4298      	cmp	r0, r3
 800d538:	bfde      	ittt	le
 800d53a:	1a1b      	suble	r3, r3, r0
 800d53c:	eb00 0c01 	addle.w	ip, r0, r1
 800d540:	186d      	addle	r5, r5, r1
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	f1be 0e01 	subs.w	lr, lr, #1
 800d548:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d54c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d550:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d554:	d1ed      	bne.n	800d532 <__ieee754_sqrt+0x8a>
 800d556:	4674      	mov	r4, lr
 800d558:	2720      	movs	r7, #32
 800d55a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d55e:	4563      	cmp	r3, ip
 800d560:	eb01 000e 	add.w	r0, r1, lr
 800d564:	dc02      	bgt.n	800d56c <__ieee754_sqrt+0xc4>
 800d566:	d113      	bne.n	800d590 <__ieee754_sqrt+0xe8>
 800d568:	4290      	cmp	r0, r2
 800d56a:	d811      	bhi.n	800d590 <__ieee754_sqrt+0xe8>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	eb00 0e01 	add.w	lr, r0, r1
 800d572:	da57      	bge.n	800d624 <__ieee754_sqrt+0x17c>
 800d574:	f1be 0f00 	cmp.w	lr, #0
 800d578:	db54      	blt.n	800d624 <__ieee754_sqrt+0x17c>
 800d57a:	f10c 0801 	add.w	r8, ip, #1
 800d57e:	eba3 030c 	sub.w	r3, r3, ip
 800d582:	4290      	cmp	r0, r2
 800d584:	bf88      	it	hi
 800d586:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800d58a:	1a12      	subs	r2, r2, r0
 800d58c:	440c      	add	r4, r1
 800d58e:	46c4      	mov	ip, r8
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	3f01      	subs	r7, #1
 800d594:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d598:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d59c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d5a0:	d1dd      	bne.n	800d55e <__ieee754_sqrt+0xb6>
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	d01b      	beq.n	800d5de <__ieee754_sqrt+0x136>
 800d5a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d654 <__ieee754_sqrt+0x1ac>
 800d5aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d658 <__ieee754_sqrt+0x1b0>
 800d5ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800d5b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d5b6:	f7f2 fe37 	bl	8000228 <__aeabi_dsub>
 800d5ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5be:	4602      	mov	r2, r0
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	f7f3 fa63 	bl	8000a90 <__aeabi_dcmple>
 800d5ca:	b140      	cbz	r0, 800d5de <__ieee754_sqrt+0x136>
 800d5cc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800d5d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800d5d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800d5d8:	d126      	bne.n	800d628 <__ieee754_sqrt+0x180>
 800d5da:	3501      	adds	r5, #1
 800d5dc:	463c      	mov	r4, r7
 800d5de:	106a      	asrs	r2, r5, #1
 800d5e0:	0863      	lsrs	r3, r4, #1
 800d5e2:	07e9      	lsls	r1, r5, #31
 800d5e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d5e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d5ec:	bf48      	it	mi
 800d5ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d5f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d5f6:	461c      	mov	r4, r3
 800d5f8:	e76d      	b.n	800d4d6 <__ieee754_sqrt+0x2e>
 800d5fa:	0ad3      	lsrs	r3, r2, #11
 800d5fc:	3815      	subs	r0, #21
 800d5fe:	0552      	lsls	r2, r2, #21
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0fa      	beq.n	800d5fa <__ieee754_sqrt+0x152>
 800d604:	02dc      	lsls	r4, r3, #11
 800d606:	d50a      	bpl.n	800d61e <__ieee754_sqrt+0x176>
 800d608:	f1c1 0420 	rsb	r4, r1, #32
 800d60c:	fa22 f404 	lsr.w	r4, r2, r4
 800d610:	1e4d      	subs	r5, r1, #1
 800d612:	408a      	lsls	r2, r1
 800d614:	4323      	orrs	r3, r4
 800d616:	1b41      	subs	r1, r0, r5
 800d618:	e772      	b.n	800d500 <__ieee754_sqrt+0x58>
 800d61a:	4608      	mov	r0, r1
 800d61c:	e7f0      	b.n	800d600 <__ieee754_sqrt+0x158>
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	3101      	adds	r1, #1
 800d622:	e7ef      	b.n	800d604 <__ieee754_sqrt+0x15c>
 800d624:	46e0      	mov	r8, ip
 800d626:	e7aa      	b.n	800d57e <__ieee754_sqrt+0xd6>
 800d628:	f7f2 fe00 	bl	800022c <__adddf3>
 800d62c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4640      	mov	r0, r8
 800d636:	4649      	mov	r1, r9
 800d638:	f7f3 fa20 	bl	8000a7c <__aeabi_dcmplt>
 800d63c:	b120      	cbz	r0, 800d648 <__ieee754_sqrt+0x1a0>
 800d63e:	1ca0      	adds	r0, r4, #2
 800d640:	bf08      	it	eq
 800d642:	3501      	addeq	r5, #1
 800d644:	3402      	adds	r4, #2
 800d646:	e7ca      	b.n	800d5de <__ieee754_sqrt+0x136>
 800d648:	3401      	adds	r4, #1
 800d64a:	f024 0401 	bic.w	r4, r4, #1
 800d64e:	e7c6      	b.n	800d5de <__ieee754_sqrt+0x136>
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	20000028 	.word	0x20000028
 800d658:	20000030 	.word	0x20000030
 800d65c:	00000000 	.word	0x00000000

0800d660 <__ieee754_rem_pio2>:
 800d660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d664:	ed2d 8b02 	vpush	{d8}
 800d668:	ec55 4b10 	vmov	r4, r5, d0
 800d66c:	4bca      	ldr	r3, [pc, #808]	; (800d998 <__ieee754_rem_pio2+0x338>)
 800d66e:	b08b      	sub	sp, #44	; 0x2c
 800d670:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d674:	4598      	cmp	r8, r3
 800d676:	4682      	mov	sl, r0
 800d678:	9502      	str	r5, [sp, #8]
 800d67a:	dc08      	bgt.n	800d68e <__ieee754_rem_pio2+0x2e>
 800d67c:	2200      	movs	r2, #0
 800d67e:	2300      	movs	r3, #0
 800d680:	ed80 0b00 	vstr	d0, [r0]
 800d684:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d688:	f04f 0b00 	mov.w	fp, #0
 800d68c:	e028      	b.n	800d6e0 <__ieee754_rem_pio2+0x80>
 800d68e:	4bc3      	ldr	r3, [pc, #780]	; (800d99c <__ieee754_rem_pio2+0x33c>)
 800d690:	4598      	cmp	r8, r3
 800d692:	dc78      	bgt.n	800d786 <__ieee754_rem_pio2+0x126>
 800d694:	9b02      	ldr	r3, [sp, #8]
 800d696:	4ec2      	ldr	r6, [pc, #776]	; (800d9a0 <__ieee754_rem_pio2+0x340>)
 800d698:	2b00      	cmp	r3, #0
 800d69a:	ee10 0a10 	vmov	r0, s0
 800d69e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d960 <__ieee754_rem_pio2+0x300>)
 800d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	dd39      	ble.n	800d71c <__ieee754_rem_pio2+0xbc>
 800d6a8:	f7f2 fdbe 	bl	8000228 <__aeabi_dsub>
 800d6ac:	45b0      	cmp	r8, r6
 800d6ae:	4604      	mov	r4, r0
 800d6b0:	460d      	mov	r5, r1
 800d6b2:	d01b      	beq.n	800d6ec <__ieee754_rem_pio2+0x8c>
 800d6b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800d968 <__ieee754_rem_pio2+0x308>)
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	f7f2 fdb5 	bl	8000228 <__aeabi_dsub>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	e9ca 2300 	strd	r2, r3, [sl]
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	4629      	mov	r1, r5
 800d6ca:	f7f2 fdad 	bl	8000228 <__aeabi_dsub>
 800d6ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800d968 <__ieee754_rem_pio2+0x308>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	f7f2 fda8 	bl	8000228 <__aeabi_dsub>
 800d6d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d6dc:	f04f 0b01 	mov.w	fp, #1
 800d6e0:	4658      	mov	r0, fp
 800d6e2:	b00b      	add	sp, #44	; 0x2c
 800d6e4:	ecbd 8b02 	vpop	{d8}
 800d6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800d970 <__ieee754_rem_pio2+0x310>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f2 fd99 	bl	8000228 <__aeabi_dsub>
 800d6f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d978 <__ieee754_rem_pio2+0x318>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	460d      	mov	r5, r1
 800d700:	f7f2 fd92 	bl	8000228 <__aeabi_dsub>
 800d704:	4602      	mov	r2, r0
 800d706:	460b      	mov	r3, r1
 800d708:	e9ca 2300 	strd	r2, r3, [sl]
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f2 fd8a 	bl	8000228 <__aeabi_dsub>
 800d714:	a398      	add	r3, pc, #608	; (adr r3, 800d978 <__ieee754_rem_pio2+0x318>)
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	e7db      	b.n	800d6d4 <__ieee754_rem_pio2+0x74>
 800d71c:	f7f2 fd86 	bl	800022c <__adddf3>
 800d720:	45b0      	cmp	r8, r6
 800d722:	4604      	mov	r4, r0
 800d724:	460d      	mov	r5, r1
 800d726:	d016      	beq.n	800d756 <__ieee754_rem_pio2+0xf6>
 800d728:	a38f      	add	r3, pc, #572	; (adr r3, 800d968 <__ieee754_rem_pio2+0x308>)
 800d72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72e:	f7f2 fd7d 	bl	800022c <__adddf3>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	e9ca 2300 	strd	r2, r3, [sl]
 800d73a:	4620      	mov	r0, r4
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7f2 fd73 	bl	8000228 <__aeabi_dsub>
 800d742:	a389      	add	r3, pc, #548	; (adr r3, 800d968 <__ieee754_rem_pio2+0x308>)
 800d744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d748:	f7f2 fd70 	bl	800022c <__adddf3>
 800d74c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d750:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d754:	e7c4      	b.n	800d6e0 <__ieee754_rem_pio2+0x80>
 800d756:	a386      	add	r3, pc, #536	; (adr r3, 800d970 <__ieee754_rem_pio2+0x310>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	f7f2 fd66 	bl	800022c <__adddf3>
 800d760:	a385      	add	r3, pc, #532	; (adr r3, 800d978 <__ieee754_rem_pio2+0x318>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	4604      	mov	r4, r0
 800d768:	460d      	mov	r5, r1
 800d76a:	f7f2 fd5f 	bl	800022c <__adddf3>
 800d76e:	4602      	mov	r2, r0
 800d770:	460b      	mov	r3, r1
 800d772:	e9ca 2300 	strd	r2, r3, [sl]
 800d776:	4620      	mov	r0, r4
 800d778:	4629      	mov	r1, r5
 800d77a:	f7f2 fd55 	bl	8000228 <__aeabi_dsub>
 800d77e:	a37e      	add	r3, pc, #504	; (adr r3, 800d978 <__ieee754_rem_pio2+0x318>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	e7e0      	b.n	800d748 <__ieee754_rem_pio2+0xe8>
 800d786:	4b87      	ldr	r3, [pc, #540]	; (800d9a4 <__ieee754_rem_pio2+0x344>)
 800d788:	4598      	cmp	r8, r3
 800d78a:	f300 80d8 	bgt.w	800d93e <__ieee754_rem_pio2+0x2de>
 800d78e:	f7ff fe27 	bl	800d3e0 <fabs>
 800d792:	ec55 4b10 	vmov	r4, r5, d0
 800d796:	ee10 0a10 	vmov	r0, s0
 800d79a:	a379      	add	r3, pc, #484	; (adr r3, 800d980 <__ieee754_rem_pio2+0x320>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	f7f2 fef9 	bl	8000598 <__aeabi_dmul>
 800d7a6:	4b80      	ldr	r3, [pc, #512]	; (800d9a8 <__ieee754_rem_pio2+0x348>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f7f2 fd3f 	bl	800022c <__adddf3>
 800d7ae:	f7f3 f9a3 	bl	8000af8 <__aeabi_d2iz>
 800d7b2:	4683      	mov	fp, r0
 800d7b4:	f7f2 fe86 	bl	80004c4 <__aeabi_i2d>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	ec43 2b18 	vmov	d8, r2, r3
 800d7c0:	a367      	add	r3, pc, #412	; (adr r3, 800d960 <__ieee754_rem_pio2+0x300>)
 800d7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c6:	f7f2 fee7 	bl	8000598 <__aeabi_dmul>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	f7f2 fd29 	bl	8000228 <__aeabi_dsub>
 800d7d6:	a364      	add	r3, pc, #400	; (adr r3, 800d968 <__ieee754_rem_pio2+0x308>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	4606      	mov	r6, r0
 800d7de:	460f      	mov	r7, r1
 800d7e0:	ec51 0b18 	vmov	r0, r1, d8
 800d7e4:	f7f2 fed8 	bl	8000598 <__aeabi_dmul>
 800d7e8:	f1bb 0f1f 	cmp.w	fp, #31
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	460d      	mov	r5, r1
 800d7f0:	dc0d      	bgt.n	800d80e <__ieee754_rem_pio2+0x1ae>
 800d7f2:	4b6e      	ldr	r3, [pc, #440]	; (800d9ac <__ieee754_rem_pio2+0x34c>)
 800d7f4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7fc:	4543      	cmp	r3, r8
 800d7fe:	d006      	beq.n	800d80e <__ieee754_rem_pio2+0x1ae>
 800d800:	4622      	mov	r2, r4
 800d802:	462b      	mov	r3, r5
 800d804:	4630      	mov	r0, r6
 800d806:	4639      	mov	r1, r7
 800d808:	f7f2 fd0e 	bl	8000228 <__aeabi_dsub>
 800d80c:	e00e      	b.n	800d82c <__ieee754_rem_pio2+0x1cc>
 800d80e:	462b      	mov	r3, r5
 800d810:	4622      	mov	r2, r4
 800d812:	4630      	mov	r0, r6
 800d814:	4639      	mov	r1, r7
 800d816:	f7f2 fd07 	bl	8000228 <__aeabi_dsub>
 800d81a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d81e:	9303      	str	r3, [sp, #12]
 800d820:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d824:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d828:	2b10      	cmp	r3, #16
 800d82a:	dc02      	bgt.n	800d832 <__ieee754_rem_pio2+0x1d2>
 800d82c:	e9ca 0100 	strd	r0, r1, [sl]
 800d830:	e039      	b.n	800d8a6 <__ieee754_rem_pio2+0x246>
 800d832:	a34f      	add	r3, pc, #316	; (adr r3, 800d970 <__ieee754_rem_pio2+0x310>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	ec51 0b18 	vmov	r0, r1, d8
 800d83c:	f7f2 feac 	bl	8000598 <__aeabi_dmul>
 800d840:	4604      	mov	r4, r0
 800d842:	460d      	mov	r5, r1
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	4630      	mov	r0, r6
 800d84a:	4639      	mov	r1, r7
 800d84c:	f7f2 fcec 	bl	8000228 <__aeabi_dsub>
 800d850:	4602      	mov	r2, r0
 800d852:	460b      	mov	r3, r1
 800d854:	4680      	mov	r8, r0
 800d856:	4689      	mov	r9, r1
 800d858:	4630      	mov	r0, r6
 800d85a:	4639      	mov	r1, r7
 800d85c:	f7f2 fce4 	bl	8000228 <__aeabi_dsub>
 800d860:	4622      	mov	r2, r4
 800d862:	462b      	mov	r3, r5
 800d864:	f7f2 fce0 	bl	8000228 <__aeabi_dsub>
 800d868:	a343      	add	r3, pc, #268	; (adr r3, 800d978 <__ieee754_rem_pio2+0x318>)
 800d86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86e:	4604      	mov	r4, r0
 800d870:	460d      	mov	r5, r1
 800d872:	ec51 0b18 	vmov	r0, r1, d8
 800d876:	f7f2 fe8f 	bl	8000598 <__aeabi_dmul>
 800d87a:	4622      	mov	r2, r4
 800d87c:	462b      	mov	r3, r5
 800d87e:	f7f2 fcd3 	bl	8000228 <__aeabi_dsub>
 800d882:	4602      	mov	r2, r0
 800d884:	460b      	mov	r3, r1
 800d886:	4604      	mov	r4, r0
 800d888:	460d      	mov	r5, r1
 800d88a:	4640      	mov	r0, r8
 800d88c:	4649      	mov	r1, r9
 800d88e:	f7f2 fccb 	bl	8000228 <__aeabi_dsub>
 800d892:	9a03      	ldr	r2, [sp, #12]
 800d894:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	2b31      	cmp	r3, #49	; 0x31
 800d89c:	dc24      	bgt.n	800d8e8 <__ieee754_rem_pio2+0x288>
 800d89e:	e9ca 0100 	strd	r0, r1, [sl]
 800d8a2:	4646      	mov	r6, r8
 800d8a4:	464f      	mov	r7, r9
 800d8a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	4642      	mov	r2, r8
 800d8ae:	464b      	mov	r3, r9
 800d8b0:	4639      	mov	r1, r7
 800d8b2:	f7f2 fcb9 	bl	8000228 <__aeabi_dsub>
 800d8b6:	462b      	mov	r3, r5
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	f7f2 fcb5 	bl	8000228 <__aeabi_dsub>
 800d8be:	9b02      	ldr	r3, [sp, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d8c6:	f6bf af0b 	bge.w	800d6e0 <__ieee754_rem_pio2+0x80>
 800d8ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d8ce:	f8ca 3004 	str.w	r3, [sl, #4]
 800d8d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8d6:	f8ca 8000 	str.w	r8, [sl]
 800d8da:	f8ca 0008 	str.w	r0, [sl, #8]
 800d8de:	f8ca 300c 	str.w	r3, [sl, #12]
 800d8e2:	f1cb 0b00 	rsb	fp, fp, #0
 800d8e6:	e6fb      	b.n	800d6e0 <__ieee754_rem_pio2+0x80>
 800d8e8:	a327      	add	r3, pc, #156	; (adr r3, 800d988 <__ieee754_rem_pio2+0x328>)
 800d8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ee:	ec51 0b18 	vmov	r0, r1, d8
 800d8f2:	f7f2 fe51 	bl	8000598 <__aeabi_dmul>
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	460d      	mov	r5, r1
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4640      	mov	r0, r8
 800d900:	4649      	mov	r1, r9
 800d902:	f7f2 fc91 	bl	8000228 <__aeabi_dsub>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	4606      	mov	r6, r0
 800d90c:	460f      	mov	r7, r1
 800d90e:	4640      	mov	r0, r8
 800d910:	4649      	mov	r1, r9
 800d912:	f7f2 fc89 	bl	8000228 <__aeabi_dsub>
 800d916:	4622      	mov	r2, r4
 800d918:	462b      	mov	r3, r5
 800d91a:	f7f2 fc85 	bl	8000228 <__aeabi_dsub>
 800d91e:	a31c      	add	r3, pc, #112	; (adr r3, 800d990 <__ieee754_rem_pio2+0x330>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	4604      	mov	r4, r0
 800d926:	460d      	mov	r5, r1
 800d928:	ec51 0b18 	vmov	r0, r1, d8
 800d92c:	f7f2 fe34 	bl	8000598 <__aeabi_dmul>
 800d930:	4622      	mov	r2, r4
 800d932:	462b      	mov	r3, r5
 800d934:	f7f2 fc78 	bl	8000228 <__aeabi_dsub>
 800d938:	4604      	mov	r4, r0
 800d93a:	460d      	mov	r5, r1
 800d93c:	e760      	b.n	800d800 <__ieee754_rem_pio2+0x1a0>
 800d93e:	4b1c      	ldr	r3, [pc, #112]	; (800d9b0 <__ieee754_rem_pio2+0x350>)
 800d940:	4598      	cmp	r8, r3
 800d942:	dd37      	ble.n	800d9b4 <__ieee754_rem_pio2+0x354>
 800d944:	ee10 2a10 	vmov	r2, s0
 800d948:	462b      	mov	r3, r5
 800d94a:	4620      	mov	r0, r4
 800d94c:	4629      	mov	r1, r5
 800d94e:	f7f2 fc6b 	bl	8000228 <__aeabi_dsub>
 800d952:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d956:	e9ca 0100 	strd	r0, r1, [sl]
 800d95a:	e695      	b.n	800d688 <__ieee754_rem_pio2+0x28>
 800d95c:	f3af 8000 	nop.w
 800d960:	54400000 	.word	0x54400000
 800d964:	3ff921fb 	.word	0x3ff921fb
 800d968:	1a626331 	.word	0x1a626331
 800d96c:	3dd0b461 	.word	0x3dd0b461
 800d970:	1a600000 	.word	0x1a600000
 800d974:	3dd0b461 	.word	0x3dd0b461
 800d978:	2e037073 	.word	0x2e037073
 800d97c:	3ba3198a 	.word	0x3ba3198a
 800d980:	6dc9c883 	.word	0x6dc9c883
 800d984:	3fe45f30 	.word	0x3fe45f30
 800d988:	2e000000 	.word	0x2e000000
 800d98c:	3ba3198a 	.word	0x3ba3198a
 800d990:	252049c1 	.word	0x252049c1
 800d994:	397b839a 	.word	0x397b839a
 800d998:	3fe921fb 	.word	0x3fe921fb
 800d99c:	4002d97b 	.word	0x4002d97b
 800d9a0:	3ff921fb 	.word	0x3ff921fb
 800d9a4:	413921fb 	.word	0x413921fb
 800d9a8:	3fe00000 	.word	0x3fe00000
 800d9ac:	0800ede8 	.word	0x0800ede8
 800d9b0:	7fefffff 	.word	0x7fefffff
 800d9b4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d9b8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d9bc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	460d      	mov	r5, r1
 800d9c4:	f7f3 f898 	bl	8000af8 <__aeabi_d2iz>
 800d9c8:	f7f2 fd7c 	bl	80004c4 <__aeabi_i2d>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d9d8:	f7f2 fc26 	bl	8000228 <__aeabi_dsub>
 800d9dc:	4b21      	ldr	r3, [pc, #132]	; (800da64 <__ieee754_rem_pio2+0x404>)
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f7f2 fdda 	bl	8000598 <__aeabi_dmul>
 800d9e4:	460d      	mov	r5, r1
 800d9e6:	4604      	mov	r4, r0
 800d9e8:	f7f3 f886 	bl	8000af8 <__aeabi_d2iz>
 800d9ec:	f7f2 fd6a 	bl	80004c4 <__aeabi_i2d>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d9fc:	f7f2 fc14 	bl	8000228 <__aeabi_dsub>
 800da00:	4b18      	ldr	r3, [pc, #96]	; (800da64 <__ieee754_rem_pio2+0x404>)
 800da02:	2200      	movs	r2, #0
 800da04:	f7f2 fdc8 	bl	8000598 <__aeabi_dmul>
 800da08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800da10:	2703      	movs	r7, #3
 800da12:	2400      	movs	r4, #0
 800da14:	2500      	movs	r5, #0
 800da16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800da1a:	4622      	mov	r2, r4
 800da1c:	462b      	mov	r3, r5
 800da1e:	46b9      	mov	r9, r7
 800da20:	3f01      	subs	r7, #1
 800da22:	f7f3 f821 	bl	8000a68 <__aeabi_dcmpeq>
 800da26:	2800      	cmp	r0, #0
 800da28:	d1f5      	bne.n	800da16 <__ieee754_rem_pio2+0x3b6>
 800da2a:	4b0f      	ldr	r3, [pc, #60]	; (800da68 <__ieee754_rem_pio2+0x408>)
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	2302      	movs	r3, #2
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	4632      	mov	r2, r6
 800da34:	464b      	mov	r3, r9
 800da36:	4651      	mov	r1, sl
 800da38:	a804      	add	r0, sp, #16
 800da3a:	f000 f819 	bl	800da70 <__kernel_rem_pio2>
 800da3e:	9b02      	ldr	r3, [sp, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	4683      	mov	fp, r0
 800da44:	f6bf ae4c 	bge.w	800d6e0 <__ieee754_rem_pio2+0x80>
 800da48:	e9da 2100 	ldrd	r2, r1, [sl]
 800da4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da50:	e9ca 2300 	strd	r2, r3, [sl]
 800da54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800da58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800da60:	e73f      	b.n	800d8e2 <__ieee754_rem_pio2+0x282>
 800da62:	bf00      	nop
 800da64:	41700000 	.word	0x41700000
 800da68:	0800ee68 	.word	0x0800ee68
 800da6c:	00000000 	.word	0x00000000

0800da70 <__kernel_rem_pio2>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	ed2d 8b02 	vpush	{d8}
 800da78:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800da7c:	f112 0f14 	cmn.w	r2, #20
 800da80:	9306      	str	r3, [sp, #24]
 800da82:	9104      	str	r1, [sp, #16]
 800da84:	4bc2      	ldr	r3, [pc, #776]	; (800dd90 <__kernel_rem_pio2+0x320>)
 800da86:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800da88:	9009      	str	r0, [sp, #36]	; 0x24
 800da8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	9b06      	ldr	r3, [sp, #24]
 800da92:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800da96:	bfa8      	it	ge
 800da98:	1ed4      	subge	r4, r2, #3
 800da9a:	9305      	str	r3, [sp, #20]
 800da9c:	bfb2      	itee	lt
 800da9e:	2400      	movlt	r4, #0
 800daa0:	2318      	movge	r3, #24
 800daa2:	fb94 f4f3 	sdivge	r4, r4, r3
 800daa6:	f06f 0317 	mvn.w	r3, #23
 800daaa:	fb04 3303 	mla	r3, r4, r3, r3
 800daae:	eb03 0a02 	add.w	sl, r3, r2
 800dab2:	9b00      	ldr	r3, [sp, #0]
 800dab4:	9a05      	ldr	r2, [sp, #20]
 800dab6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800dd80 <__kernel_rem_pio2+0x310>
 800daba:	eb03 0802 	add.w	r8, r3, r2
 800dabe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dac0:	1aa7      	subs	r7, r4, r2
 800dac2:	ae20      	add	r6, sp, #128	; 0x80
 800dac4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dac8:	2500      	movs	r5, #0
 800daca:	4545      	cmp	r5, r8
 800dacc:	dd13      	ble.n	800daf6 <__kernel_rem_pio2+0x86>
 800dace:	9b06      	ldr	r3, [sp, #24]
 800dad0:	aa20      	add	r2, sp, #128	; 0x80
 800dad2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dad6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dada:	f04f 0800 	mov.w	r8, #0
 800dade:	9b00      	ldr	r3, [sp, #0]
 800dae0:	4598      	cmp	r8, r3
 800dae2:	dc31      	bgt.n	800db48 <__kernel_rem_pio2+0xd8>
 800dae4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800dd80 <__kernel_rem_pio2+0x310>
 800dae8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800daec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800daf0:	462f      	mov	r7, r5
 800daf2:	2600      	movs	r6, #0
 800daf4:	e01b      	b.n	800db2e <__kernel_rem_pio2+0xbe>
 800daf6:	42ef      	cmn	r7, r5
 800daf8:	d407      	bmi.n	800db0a <__kernel_rem_pio2+0x9a>
 800dafa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dafe:	f7f2 fce1 	bl	80004c4 <__aeabi_i2d>
 800db02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db06:	3501      	adds	r5, #1
 800db08:	e7df      	b.n	800daca <__kernel_rem_pio2+0x5a>
 800db0a:	ec51 0b18 	vmov	r0, r1, d8
 800db0e:	e7f8      	b.n	800db02 <__kernel_rem_pio2+0x92>
 800db10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800db18:	f7f2 fd3e 	bl	8000598 <__aeabi_dmul>
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db24:	f7f2 fb82 	bl	800022c <__adddf3>
 800db28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db2c:	3601      	adds	r6, #1
 800db2e:	9b05      	ldr	r3, [sp, #20]
 800db30:	429e      	cmp	r6, r3
 800db32:	f1a7 0708 	sub.w	r7, r7, #8
 800db36:	ddeb      	ble.n	800db10 <__kernel_rem_pio2+0xa0>
 800db38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db3c:	f108 0801 	add.w	r8, r8, #1
 800db40:	ecab 7b02 	vstmia	fp!, {d7}
 800db44:	3508      	adds	r5, #8
 800db46:	e7ca      	b.n	800dade <__kernel_rem_pio2+0x6e>
 800db48:	9b00      	ldr	r3, [sp, #0]
 800db4a:	aa0c      	add	r2, sp, #48	; 0x30
 800db4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800db50:	930b      	str	r3, [sp, #44]	; 0x2c
 800db52:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800db54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800db58:	9c00      	ldr	r4, [sp, #0]
 800db5a:	930a      	str	r3, [sp, #40]	; 0x28
 800db5c:	00e3      	lsls	r3, r4, #3
 800db5e:	9308      	str	r3, [sp, #32]
 800db60:	ab98      	add	r3, sp, #608	; 0x260
 800db62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800db6a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800db6e:	ab70      	add	r3, sp, #448	; 0x1c0
 800db70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800db74:	46c3      	mov	fp, r8
 800db76:	46a1      	mov	r9, r4
 800db78:	f1b9 0f00 	cmp.w	r9, #0
 800db7c:	f1a5 0508 	sub.w	r5, r5, #8
 800db80:	dc77      	bgt.n	800dc72 <__kernel_rem_pio2+0x202>
 800db82:	ec47 6b10 	vmov	d0, r6, r7
 800db86:	4650      	mov	r0, sl
 800db88:	f000 fc4a 	bl	800e420 <scalbn>
 800db8c:	ec57 6b10 	vmov	r6, r7, d0
 800db90:	2200      	movs	r2, #0
 800db92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800db96:	ee10 0a10 	vmov	r0, s0
 800db9a:	4639      	mov	r1, r7
 800db9c:	f7f2 fcfc 	bl	8000598 <__aeabi_dmul>
 800dba0:	ec41 0b10 	vmov	d0, r0, r1
 800dba4:	f000 fcbc 	bl	800e520 <floor>
 800dba8:	4b7a      	ldr	r3, [pc, #488]	; (800dd94 <__kernel_rem_pio2+0x324>)
 800dbaa:	ec51 0b10 	vmov	r0, r1, d0
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f7f2 fcf2 	bl	8000598 <__aeabi_dmul>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4630      	mov	r0, r6
 800dbba:	4639      	mov	r1, r7
 800dbbc:	f7f2 fb34 	bl	8000228 <__aeabi_dsub>
 800dbc0:	460f      	mov	r7, r1
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	f7f2 ff98 	bl	8000af8 <__aeabi_d2iz>
 800dbc8:	9002      	str	r0, [sp, #8]
 800dbca:	f7f2 fc7b 	bl	80004c4 <__aeabi_i2d>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	4639      	mov	r1, r7
 800dbd6:	f7f2 fb27 	bl	8000228 <__aeabi_dsub>
 800dbda:	f1ba 0f00 	cmp.w	sl, #0
 800dbde:	4606      	mov	r6, r0
 800dbe0:	460f      	mov	r7, r1
 800dbe2:	dd6d      	ble.n	800dcc0 <__kernel_rem_pio2+0x250>
 800dbe4:	1e61      	subs	r1, r4, #1
 800dbe6:	ab0c      	add	r3, sp, #48	; 0x30
 800dbe8:	9d02      	ldr	r5, [sp, #8]
 800dbea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbee:	f1ca 0018 	rsb	r0, sl, #24
 800dbf2:	fa43 f200 	asr.w	r2, r3, r0
 800dbf6:	4415      	add	r5, r2
 800dbf8:	4082      	lsls	r2, r0
 800dbfa:	1a9b      	subs	r3, r3, r2
 800dbfc:	aa0c      	add	r2, sp, #48	; 0x30
 800dbfe:	9502      	str	r5, [sp, #8]
 800dc00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dc04:	f1ca 0217 	rsb	r2, sl, #23
 800dc08:	fa43 fb02 	asr.w	fp, r3, r2
 800dc0c:	f1bb 0f00 	cmp.w	fp, #0
 800dc10:	dd65      	ble.n	800dcde <__kernel_rem_pio2+0x26e>
 800dc12:	9b02      	ldr	r3, [sp, #8]
 800dc14:	2200      	movs	r2, #0
 800dc16:	3301      	adds	r3, #1
 800dc18:	9302      	str	r3, [sp, #8]
 800dc1a:	4615      	mov	r5, r2
 800dc1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dc20:	4294      	cmp	r4, r2
 800dc22:	f300 809f 	bgt.w	800dd64 <__kernel_rem_pio2+0x2f4>
 800dc26:	f1ba 0f00 	cmp.w	sl, #0
 800dc2a:	dd07      	ble.n	800dc3c <__kernel_rem_pio2+0x1cc>
 800dc2c:	f1ba 0f01 	cmp.w	sl, #1
 800dc30:	f000 80c1 	beq.w	800ddb6 <__kernel_rem_pio2+0x346>
 800dc34:	f1ba 0f02 	cmp.w	sl, #2
 800dc38:	f000 80c7 	beq.w	800ddca <__kernel_rem_pio2+0x35a>
 800dc3c:	f1bb 0f02 	cmp.w	fp, #2
 800dc40:	d14d      	bne.n	800dcde <__kernel_rem_pio2+0x26e>
 800dc42:	4632      	mov	r2, r6
 800dc44:	463b      	mov	r3, r7
 800dc46:	4954      	ldr	r1, [pc, #336]	; (800dd98 <__kernel_rem_pio2+0x328>)
 800dc48:	2000      	movs	r0, #0
 800dc4a:	f7f2 faed 	bl	8000228 <__aeabi_dsub>
 800dc4e:	4606      	mov	r6, r0
 800dc50:	460f      	mov	r7, r1
 800dc52:	2d00      	cmp	r5, #0
 800dc54:	d043      	beq.n	800dcde <__kernel_rem_pio2+0x26e>
 800dc56:	4650      	mov	r0, sl
 800dc58:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800dd88 <__kernel_rem_pio2+0x318>
 800dc5c:	f000 fbe0 	bl	800e420 <scalbn>
 800dc60:	4630      	mov	r0, r6
 800dc62:	4639      	mov	r1, r7
 800dc64:	ec53 2b10 	vmov	r2, r3, d0
 800dc68:	f7f2 fade 	bl	8000228 <__aeabi_dsub>
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	460f      	mov	r7, r1
 800dc70:	e035      	b.n	800dcde <__kernel_rem_pio2+0x26e>
 800dc72:	4b4a      	ldr	r3, [pc, #296]	; (800dd9c <__kernel_rem_pio2+0x32c>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	4630      	mov	r0, r6
 800dc78:	4639      	mov	r1, r7
 800dc7a:	f7f2 fc8d 	bl	8000598 <__aeabi_dmul>
 800dc7e:	f7f2 ff3b 	bl	8000af8 <__aeabi_d2iz>
 800dc82:	f7f2 fc1f 	bl	80004c4 <__aeabi_i2d>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	ec43 2b18 	vmov	d8, r2, r3
 800dc8e:	4b44      	ldr	r3, [pc, #272]	; (800dda0 <__kernel_rem_pio2+0x330>)
 800dc90:	2200      	movs	r2, #0
 800dc92:	f7f2 fc81 	bl	8000598 <__aeabi_dmul>
 800dc96:	4602      	mov	r2, r0
 800dc98:	460b      	mov	r3, r1
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	f7f2 fac3 	bl	8000228 <__aeabi_dsub>
 800dca2:	f7f2 ff29 	bl	8000af8 <__aeabi_d2iz>
 800dca6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dcaa:	f84b 0b04 	str.w	r0, [fp], #4
 800dcae:	ec51 0b18 	vmov	r0, r1, d8
 800dcb2:	f7f2 fabb 	bl	800022c <__adddf3>
 800dcb6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800dcba:	4606      	mov	r6, r0
 800dcbc:	460f      	mov	r7, r1
 800dcbe:	e75b      	b.n	800db78 <__kernel_rem_pio2+0x108>
 800dcc0:	d106      	bne.n	800dcd0 <__kernel_rem_pio2+0x260>
 800dcc2:	1e63      	subs	r3, r4, #1
 800dcc4:	aa0c      	add	r2, sp, #48	; 0x30
 800dcc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcca:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800dcce:	e79d      	b.n	800dc0c <__kernel_rem_pio2+0x19c>
 800dcd0:	4b34      	ldr	r3, [pc, #208]	; (800dda4 <__kernel_rem_pio2+0x334>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	f7f2 fee6 	bl	8000aa4 <__aeabi_dcmpge>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d140      	bne.n	800dd5e <__kernel_rem_pio2+0x2ee>
 800dcdc:	4683      	mov	fp, r0
 800dcde:	2200      	movs	r2, #0
 800dce0:	2300      	movs	r3, #0
 800dce2:	4630      	mov	r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	f7f2 febf 	bl	8000a68 <__aeabi_dcmpeq>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	f000 80c1 	beq.w	800de72 <__kernel_rem_pio2+0x402>
 800dcf0:	1e65      	subs	r5, r4, #1
 800dcf2:	462b      	mov	r3, r5
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	9900      	ldr	r1, [sp, #0]
 800dcf8:	428b      	cmp	r3, r1
 800dcfa:	da6d      	bge.n	800ddd8 <__kernel_rem_pio2+0x368>
 800dcfc:	2a00      	cmp	r2, #0
 800dcfe:	f000 808a 	beq.w	800de16 <__kernel_rem_pio2+0x3a6>
 800dd02:	ab0c      	add	r3, sp, #48	; 0x30
 800dd04:	f1aa 0a18 	sub.w	sl, sl, #24
 800dd08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f000 80ae 	beq.w	800de6e <__kernel_rem_pio2+0x3fe>
 800dd12:	4650      	mov	r0, sl
 800dd14:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800dd88 <__kernel_rem_pio2+0x318>
 800dd18:	f000 fb82 	bl	800e420 <scalbn>
 800dd1c:	1c6b      	adds	r3, r5, #1
 800dd1e:	00da      	lsls	r2, r3, #3
 800dd20:	9205      	str	r2, [sp, #20]
 800dd22:	ec57 6b10 	vmov	r6, r7, d0
 800dd26:	aa70      	add	r2, sp, #448	; 0x1c0
 800dd28:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800dd9c <__kernel_rem_pio2+0x32c>
 800dd2c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800dd30:	462c      	mov	r4, r5
 800dd32:	f04f 0800 	mov.w	r8, #0
 800dd36:	2c00      	cmp	r4, #0
 800dd38:	f280 80d4 	bge.w	800dee4 <__kernel_rem_pio2+0x474>
 800dd3c:	462c      	mov	r4, r5
 800dd3e:	2c00      	cmp	r4, #0
 800dd40:	f2c0 8102 	blt.w	800df48 <__kernel_rem_pio2+0x4d8>
 800dd44:	4b18      	ldr	r3, [pc, #96]	; (800dda8 <__kernel_rem_pio2+0x338>)
 800dd46:	461e      	mov	r6, r3
 800dd48:	ab70      	add	r3, sp, #448	; 0x1c0
 800dd4a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800dd4e:	1b2b      	subs	r3, r5, r4
 800dd50:	f04f 0900 	mov.w	r9, #0
 800dd54:	f04f 0a00 	mov.w	sl, #0
 800dd58:	2700      	movs	r7, #0
 800dd5a:	9306      	str	r3, [sp, #24]
 800dd5c:	e0e6      	b.n	800df2c <__kernel_rem_pio2+0x4bc>
 800dd5e:	f04f 0b02 	mov.w	fp, #2
 800dd62:	e756      	b.n	800dc12 <__kernel_rem_pio2+0x1a2>
 800dd64:	f8d8 3000 	ldr.w	r3, [r8]
 800dd68:	bb05      	cbnz	r5, 800ddac <__kernel_rem_pio2+0x33c>
 800dd6a:	b123      	cbz	r3, 800dd76 <__kernel_rem_pio2+0x306>
 800dd6c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dd70:	f8c8 3000 	str.w	r3, [r8]
 800dd74:	2301      	movs	r3, #1
 800dd76:	3201      	adds	r2, #1
 800dd78:	f108 0804 	add.w	r8, r8, #4
 800dd7c:	461d      	mov	r5, r3
 800dd7e:	e74f      	b.n	800dc20 <__kernel_rem_pio2+0x1b0>
	...
 800dd8c:	3ff00000 	.word	0x3ff00000
 800dd90:	0800efb0 	.word	0x0800efb0
 800dd94:	40200000 	.word	0x40200000
 800dd98:	3ff00000 	.word	0x3ff00000
 800dd9c:	3e700000 	.word	0x3e700000
 800dda0:	41700000 	.word	0x41700000
 800dda4:	3fe00000 	.word	0x3fe00000
 800dda8:	0800ef70 	.word	0x0800ef70
 800ddac:	1acb      	subs	r3, r1, r3
 800ddae:	f8c8 3000 	str.w	r3, [r8]
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	e7df      	b.n	800dd76 <__kernel_rem_pio2+0x306>
 800ddb6:	1e62      	subs	r2, r4, #1
 800ddb8:	ab0c      	add	r3, sp, #48	; 0x30
 800ddba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddbe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ddc2:	a90c      	add	r1, sp, #48	; 0x30
 800ddc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ddc8:	e738      	b.n	800dc3c <__kernel_rem_pio2+0x1cc>
 800ddca:	1e62      	subs	r2, r4, #1
 800ddcc:	ab0c      	add	r3, sp, #48	; 0x30
 800ddce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddd2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ddd6:	e7f4      	b.n	800ddc2 <__kernel_rem_pio2+0x352>
 800ddd8:	a90c      	add	r1, sp, #48	; 0x30
 800ddda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ddde:	3b01      	subs	r3, #1
 800dde0:	430a      	orrs	r2, r1
 800dde2:	e788      	b.n	800dcf6 <__kernel_rem_pio2+0x286>
 800dde4:	3301      	adds	r3, #1
 800dde6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ddea:	2900      	cmp	r1, #0
 800ddec:	d0fa      	beq.n	800dde4 <__kernel_rem_pio2+0x374>
 800ddee:	9a08      	ldr	r2, [sp, #32]
 800ddf0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ddf4:	446a      	add	r2, sp
 800ddf6:	3a98      	subs	r2, #152	; 0x98
 800ddf8:	9208      	str	r2, [sp, #32]
 800ddfa:	9a06      	ldr	r2, [sp, #24]
 800ddfc:	a920      	add	r1, sp, #128	; 0x80
 800ddfe:	18a2      	adds	r2, r4, r2
 800de00:	18e3      	adds	r3, r4, r3
 800de02:	f104 0801 	add.w	r8, r4, #1
 800de06:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800de0a:	9302      	str	r3, [sp, #8]
 800de0c:	9b02      	ldr	r3, [sp, #8]
 800de0e:	4543      	cmp	r3, r8
 800de10:	da04      	bge.n	800de1c <__kernel_rem_pio2+0x3ac>
 800de12:	461c      	mov	r4, r3
 800de14:	e6a2      	b.n	800db5c <__kernel_rem_pio2+0xec>
 800de16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de18:	2301      	movs	r3, #1
 800de1a:	e7e4      	b.n	800dde6 <__kernel_rem_pio2+0x376>
 800de1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800de22:	f7f2 fb4f 	bl	80004c4 <__aeabi_i2d>
 800de26:	e8e5 0102 	strd	r0, r1, [r5], #8
 800de2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de2c:	46ab      	mov	fp, r5
 800de2e:	461c      	mov	r4, r3
 800de30:	f04f 0900 	mov.w	r9, #0
 800de34:	2600      	movs	r6, #0
 800de36:	2700      	movs	r7, #0
 800de38:	9b05      	ldr	r3, [sp, #20]
 800de3a:	4599      	cmp	r9, r3
 800de3c:	dd06      	ble.n	800de4c <__kernel_rem_pio2+0x3dc>
 800de3e:	9b08      	ldr	r3, [sp, #32]
 800de40:	e8e3 6702 	strd	r6, r7, [r3], #8
 800de44:	f108 0801 	add.w	r8, r8, #1
 800de48:	9308      	str	r3, [sp, #32]
 800de4a:	e7df      	b.n	800de0c <__kernel_rem_pio2+0x39c>
 800de4c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800de50:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800de54:	f7f2 fba0 	bl	8000598 <__aeabi_dmul>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7f2 f9e4 	bl	800022c <__adddf3>
 800de64:	f109 0901 	add.w	r9, r9, #1
 800de68:	4606      	mov	r6, r0
 800de6a:	460f      	mov	r7, r1
 800de6c:	e7e4      	b.n	800de38 <__kernel_rem_pio2+0x3c8>
 800de6e:	3d01      	subs	r5, #1
 800de70:	e747      	b.n	800dd02 <__kernel_rem_pio2+0x292>
 800de72:	ec47 6b10 	vmov	d0, r6, r7
 800de76:	f1ca 0000 	rsb	r0, sl, #0
 800de7a:	f000 fad1 	bl	800e420 <scalbn>
 800de7e:	ec57 6b10 	vmov	r6, r7, d0
 800de82:	4ba0      	ldr	r3, [pc, #640]	; (800e104 <__kernel_rem_pio2+0x694>)
 800de84:	ee10 0a10 	vmov	r0, s0
 800de88:	2200      	movs	r2, #0
 800de8a:	4639      	mov	r1, r7
 800de8c:	f7f2 fe0a 	bl	8000aa4 <__aeabi_dcmpge>
 800de90:	b1f8      	cbz	r0, 800ded2 <__kernel_rem_pio2+0x462>
 800de92:	4b9d      	ldr	r3, [pc, #628]	; (800e108 <__kernel_rem_pio2+0x698>)
 800de94:	2200      	movs	r2, #0
 800de96:	4630      	mov	r0, r6
 800de98:	4639      	mov	r1, r7
 800de9a:	f7f2 fb7d 	bl	8000598 <__aeabi_dmul>
 800de9e:	f7f2 fe2b 	bl	8000af8 <__aeabi_d2iz>
 800dea2:	4680      	mov	r8, r0
 800dea4:	f7f2 fb0e 	bl	80004c4 <__aeabi_i2d>
 800dea8:	4b96      	ldr	r3, [pc, #600]	; (800e104 <__kernel_rem_pio2+0x694>)
 800deaa:	2200      	movs	r2, #0
 800deac:	f7f2 fb74 	bl	8000598 <__aeabi_dmul>
 800deb0:	460b      	mov	r3, r1
 800deb2:	4602      	mov	r2, r0
 800deb4:	4639      	mov	r1, r7
 800deb6:	4630      	mov	r0, r6
 800deb8:	f7f2 f9b6 	bl	8000228 <__aeabi_dsub>
 800debc:	f7f2 fe1c 	bl	8000af8 <__aeabi_d2iz>
 800dec0:	1c65      	adds	r5, r4, #1
 800dec2:	ab0c      	add	r3, sp, #48	; 0x30
 800dec4:	f10a 0a18 	add.w	sl, sl, #24
 800dec8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800decc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ded0:	e71f      	b.n	800dd12 <__kernel_rem_pio2+0x2a2>
 800ded2:	4630      	mov	r0, r6
 800ded4:	4639      	mov	r1, r7
 800ded6:	f7f2 fe0f 	bl	8000af8 <__aeabi_d2iz>
 800deda:	ab0c      	add	r3, sp, #48	; 0x30
 800dedc:	4625      	mov	r5, r4
 800dede:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dee2:	e716      	b.n	800dd12 <__kernel_rem_pio2+0x2a2>
 800dee4:	ab0c      	add	r3, sp, #48	; 0x30
 800dee6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800deea:	f7f2 faeb 	bl	80004c4 <__aeabi_i2d>
 800deee:	4632      	mov	r2, r6
 800def0:	463b      	mov	r3, r7
 800def2:	f7f2 fb51 	bl	8000598 <__aeabi_dmul>
 800def6:	4642      	mov	r2, r8
 800def8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800defc:	464b      	mov	r3, r9
 800defe:	4630      	mov	r0, r6
 800df00:	4639      	mov	r1, r7
 800df02:	f7f2 fb49 	bl	8000598 <__aeabi_dmul>
 800df06:	3c01      	subs	r4, #1
 800df08:	4606      	mov	r6, r0
 800df0a:	460f      	mov	r7, r1
 800df0c:	e713      	b.n	800dd36 <__kernel_rem_pio2+0x2c6>
 800df0e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800df12:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800df16:	f7f2 fb3f 	bl	8000598 <__aeabi_dmul>
 800df1a:	4602      	mov	r2, r0
 800df1c:	460b      	mov	r3, r1
 800df1e:	4648      	mov	r0, r9
 800df20:	4651      	mov	r1, sl
 800df22:	f7f2 f983 	bl	800022c <__adddf3>
 800df26:	3701      	adds	r7, #1
 800df28:	4681      	mov	r9, r0
 800df2a:	468a      	mov	sl, r1
 800df2c:	9b00      	ldr	r3, [sp, #0]
 800df2e:	429f      	cmp	r7, r3
 800df30:	dc02      	bgt.n	800df38 <__kernel_rem_pio2+0x4c8>
 800df32:	9b06      	ldr	r3, [sp, #24]
 800df34:	429f      	cmp	r7, r3
 800df36:	ddea      	ble.n	800df0e <__kernel_rem_pio2+0x49e>
 800df38:	9a06      	ldr	r2, [sp, #24]
 800df3a:	ab48      	add	r3, sp, #288	; 0x120
 800df3c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800df40:	e9c6 9a00 	strd	r9, sl, [r6]
 800df44:	3c01      	subs	r4, #1
 800df46:	e6fa      	b.n	800dd3e <__kernel_rem_pio2+0x2ce>
 800df48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	dc0b      	bgt.n	800df66 <__kernel_rem_pio2+0x4f6>
 800df4e:	2b00      	cmp	r3, #0
 800df50:	dc39      	bgt.n	800dfc6 <__kernel_rem_pio2+0x556>
 800df52:	d05d      	beq.n	800e010 <__kernel_rem_pio2+0x5a0>
 800df54:	9b02      	ldr	r3, [sp, #8]
 800df56:	f003 0007 	and.w	r0, r3, #7
 800df5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800df5e:	ecbd 8b02 	vpop	{d8}
 800df62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800df68:	2b03      	cmp	r3, #3
 800df6a:	d1f3      	bne.n	800df54 <__kernel_rem_pio2+0x4e4>
 800df6c:	9b05      	ldr	r3, [sp, #20]
 800df6e:	9500      	str	r5, [sp, #0]
 800df70:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800df74:	eb0d 0403 	add.w	r4, sp, r3
 800df78:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800df7c:	46a2      	mov	sl, r4
 800df7e:	9b00      	ldr	r3, [sp, #0]
 800df80:	2b00      	cmp	r3, #0
 800df82:	f1aa 0a08 	sub.w	sl, sl, #8
 800df86:	dc69      	bgt.n	800e05c <__kernel_rem_pio2+0x5ec>
 800df88:	46aa      	mov	sl, r5
 800df8a:	f1ba 0f01 	cmp.w	sl, #1
 800df8e:	f1a4 0408 	sub.w	r4, r4, #8
 800df92:	f300 8083 	bgt.w	800e09c <__kernel_rem_pio2+0x62c>
 800df96:	9c05      	ldr	r4, [sp, #20]
 800df98:	ab48      	add	r3, sp, #288	; 0x120
 800df9a:	441c      	add	r4, r3
 800df9c:	2000      	movs	r0, #0
 800df9e:	2100      	movs	r1, #0
 800dfa0:	2d01      	cmp	r5, #1
 800dfa2:	f300 809a 	bgt.w	800e0da <__kernel_rem_pio2+0x66a>
 800dfa6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800dfaa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dfae:	f1bb 0f00 	cmp.w	fp, #0
 800dfb2:	f040 8098 	bne.w	800e0e6 <__kernel_rem_pio2+0x676>
 800dfb6:	9b04      	ldr	r3, [sp, #16]
 800dfb8:	e9c3 7800 	strd	r7, r8, [r3]
 800dfbc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800dfc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dfc4:	e7c6      	b.n	800df54 <__kernel_rem_pio2+0x4e4>
 800dfc6:	9e05      	ldr	r6, [sp, #20]
 800dfc8:	ab48      	add	r3, sp, #288	; 0x120
 800dfca:	441e      	add	r6, r3
 800dfcc:	462c      	mov	r4, r5
 800dfce:	2000      	movs	r0, #0
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	2c00      	cmp	r4, #0
 800dfd4:	da33      	bge.n	800e03e <__kernel_rem_pio2+0x5ce>
 800dfd6:	f1bb 0f00 	cmp.w	fp, #0
 800dfda:	d036      	beq.n	800e04a <__kernel_rem_pio2+0x5da>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfe2:	9c04      	ldr	r4, [sp, #16]
 800dfe4:	e9c4 2300 	strd	r2, r3, [r4]
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800dff0:	f7f2 f91a 	bl	8000228 <__aeabi_dsub>
 800dff4:	ae4a      	add	r6, sp, #296	; 0x128
 800dff6:	2401      	movs	r4, #1
 800dff8:	42a5      	cmp	r5, r4
 800dffa:	da29      	bge.n	800e050 <__kernel_rem_pio2+0x5e0>
 800dffc:	f1bb 0f00 	cmp.w	fp, #0
 800e000:	d002      	beq.n	800e008 <__kernel_rem_pio2+0x598>
 800e002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e006:	4619      	mov	r1, r3
 800e008:	9b04      	ldr	r3, [sp, #16]
 800e00a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e00e:	e7a1      	b.n	800df54 <__kernel_rem_pio2+0x4e4>
 800e010:	9c05      	ldr	r4, [sp, #20]
 800e012:	ab48      	add	r3, sp, #288	; 0x120
 800e014:	441c      	add	r4, r3
 800e016:	2000      	movs	r0, #0
 800e018:	2100      	movs	r1, #0
 800e01a:	2d00      	cmp	r5, #0
 800e01c:	da09      	bge.n	800e032 <__kernel_rem_pio2+0x5c2>
 800e01e:	f1bb 0f00 	cmp.w	fp, #0
 800e022:	d002      	beq.n	800e02a <__kernel_rem_pio2+0x5ba>
 800e024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e028:	4619      	mov	r1, r3
 800e02a:	9b04      	ldr	r3, [sp, #16]
 800e02c:	e9c3 0100 	strd	r0, r1, [r3]
 800e030:	e790      	b.n	800df54 <__kernel_rem_pio2+0x4e4>
 800e032:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e036:	f7f2 f8f9 	bl	800022c <__adddf3>
 800e03a:	3d01      	subs	r5, #1
 800e03c:	e7ed      	b.n	800e01a <__kernel_rem_pio2+0x5aa>
 800e03e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e042:	f7f2 f8f3 	bl	800022c <__adddf3>
 800e046:	3c01      	subs	r4, #1
 800e048:	e7c3      	b.n	800dfd2 <__kernel_rem_pio2+0x562>
 800e04a:	4602      	mov	r2, r0
 800e04c:	460b      	mov	r3, r1
 800e04e:	e7c8      	b.n	800dfe2 <__kernel_rem_pio2+0x572>
 800e050:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e054:	f7f2 f8ea 	bl	800022c <__adddf3>
 800e058:	3401      	adds	r4, #1
 800e05a:	e7cd      	b.n	800dff8 <__kernel_rem_pio2+0x588>
 800e05c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e060:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e064:	9b00      	ldr	r3, [sp, #0]
 800e066:	3b01      	subs	r3, #1
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	4632      	mov	r2, r6
 800e06c:	463b      	mov	r3, r7
 800e06e:	4640      	mov	r0, r8
 800e070:	4649      	mov	r1, r9
 800e072:	f7f2 f8db 	bl	800022c <__adddf3>
 800e076:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4640      	mov	r0, r8
 800e080:	4649      	mov	r1, r9
 800e082:	f7f2 f8d1 	bl	8000228 <__aeabi_dsub>
 800e086:	4632      	mov	r2, r6
 800e088:	463b      	mov	r3, r7
 800e08a:	f7f2 f8cf 	bl	800022c <__adddf3>
 800e08e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e092:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e096:	ed8a 7b00 	vstr	d7, [sl]
 800e09a:	e770      	b.n	800df7e <__kernel_rem_pio2+0x50e>
 800e09c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e0a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	4632      	mov	r2, r6
 800e0a8:	463b      	mov	r3, r7
 800e0aa:	4649      	mov	r1, r9
 800e0ac:	f7f2 f8be 	bl	800022c <__adddf3>
 800e0b0:	e9cd 0100 	strd	r0, r1, [sp]
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4640      	mov	r0, r8
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	f7f2 f8b4 	bl	8000228 <__aeabi_dsub>
 800e0c0:	4632      	mov	r2, r6
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	f7f2 f8b2 	bl	800022c <__adddf3>
 800e0c8:	ed9d 7b00 	vldr	d7, [sp]
 800e0cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e0d0:	ed84 7b00 	vstr	d7, [r4]
 800e0d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e0d8:	e757      	b.n	800df8a <__kernel_rem_pio2+0x51a>
 800e0da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0de:	f7f2 f8a5 	bl	800022c <__adddf3>
 800e0e2:	3d01      	subs	r5, #1
 800e0e4:	e75c      	b.n	800dfa0 <__kernel_rem_pio2+0x530>
 800e0e6:	9b04      	ldr	r3, [sp, #16]
 800e0e8:	9a04      	ldr	r2, [sp, #16]
 800e0ea:	601f      	str	r7, [r3, #0]
 800e0ec:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e0f0:	605c      	str	r4, [r3, #4]
 800e0f2:	609d      	str	r5, [r3, #8]
 800e0f4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e0f8:	60d3      	str	r3, [r2, #12]
 800e0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0fe:	6110      	str	r0, [r2, #16]
 800e100:	6153      	str	r3, [r2, #20]
 800e102:	e727      	b.n	800df54 <__kernel_rem_pio2+0x4e4>
 800e104:	41700000 	.word	0x41700000
 800e108:	3e700000 	.word	0x3e700000
 800e10c:	00000000 	.word	0x00000000

0800e110 <__kernel_cos>:
 800e110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	ec57 6b10 	vmov	r6, r7, d0
 800e118:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e11c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e120:	ed8d 1b00 	vstr	d1, [sp]
 800e124:	da07      	bge.n	800e136 <__kernel_cos+0x26>
 800e126:	ee10 0a10 	vmov	r0, s0
 800e12a:	4639      	mov	r1, r7
 800e12c:	f7f2 fce4 	bl	8000af8 <__aeabi_d2iz>
 800e130:	2800      	cmp	r0, #0
 800e132:	f000 8088 	beq.w	800e246 <__kernel_cos+0x136>
 800e136:	4632      	mov	r2, r6
 800e138:	463b      	mov	r3, r7
 800e13a:	4630      	mov	r0, r6
 800e13c:	4639      	mov	r1, r7
 800e13e:	f7f2 fa2b 	bl	8000598 <__aeabi_dmul>
 800e142:	4b51      	ldr	r3, [pc, #324]	; (800e288 <__kernel_cos+0x178>)
 800e144:	2200      	movs	r2, #0
 800e146:	4604      	mov	r4, r0
 800e148:	460d      	mov	r5, r1
 800e14a:	f7f2 fa25 	bl	8000598 <__aeabi_dmul>
 800e14e:	a340      	add	r3, pc, #256	; (adr r3, 800e250 <__kernel_cos+0x140>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	4682      	mov	sl, r0
 800e156:	468b      	mov	fp, r1
 800e158:	4620      	mov	r0, r4
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7f2 fa1c 	bl	8000598 <__aeabi_dmul>
 800e160:	a33d      	add	r3, pc, #244	; (adr r3, 800e258 <__kernel_cos+0x148>)
 800e162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e166:	f7f2 f861 	bl	800022c <__adddf3>
 800e16a:	4622      	mov	r2, r4
 800e16c:	462b      	mov	r3, r5
 800e16e:	f7f2 fa13 	bl	8000598 <__aeabi_dmul>
 800e172:	a33b      	add	r3, pc, #236	; (adr r3, 800e260 <__kernel_cos+0x150>)
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	f7f2 f856 	bl	8000228 <__aeabi_dsub>
 800e17c:	4622      	mov	r2, r4
 800e17e:	462b      	mov	r3, r5
 800e180:	f7f2 fa0a 	bl	8000598 <__aeabi_dmul>
 800e184:	a338      	add	r3, pc, #224	; (adr r3, 800e268 <__kernel_cos+0x158>)
 800e186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18a:	f7f2 f84f 	bl	800022c <__adddf3>
 800e18e:	4622      	mov	r2, r4
 800e190:	462b      	mov	r3, r5
 800e192:	f7f2 fa01 	bl	8000598 <__aeabi_dmul>
 800e196:	a336      	add	r3, pc, #216	; (adr r3, 800e270 <__kernel_cos+0x160>)
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	f7f2 f844 	bl	8000228 <__aeabi_dsub>
 800e1a0:	4622      	mov	r2, r4
 800e1a2:	462b      	mov	r3, r5
 800e1a4:	f7f2 f9f8 	bl	8000598 <__aeabi_dmul>
 800e1a8:	a333      	add	r3, pc, #204	; (adr r3, 800e278 <__kernel_cos+0x168>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 f83d 	bl	800022c <__adddf3>
 800e1b2:	4622      	mov	r2, r4
 800e1b4:	462b      	mov	r3, r5
 800e1b6:	f7f2 f9ef 	bl	8000598 <__aeabi_dmul>
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	462b      	mov	r3, r5
 800e1be:	f7f2 f9eb 	bl	8000598 <__aeabi_dmul>
 800e1c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	f7f2 f9e3 	bl	8000598 <__aeabi_dmul>
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f7f2 f825 	bl	8000228 <__aeabi_dsub>
 800e1de:	4b2b      	ldr	r3, [pc, #172]	; (800e28c <__kernel_cos+0x17c>)
 800e1e0:	4598      	cmp	r8, r3
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	460f      	mov	r7, r1
 800e1e6:	dc10      	bgt.n	800e20a <__kernel_cos+0xfa>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4650      	mov	r0, sl
 800e1ee:	4659      	mov	r1, fp
 800e1f0:	f7f2 f81a 	bl	8000228 <__aeabi_dsub>
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4926      	ldr	r1, [pc, #152]	; (800e290 <__kernel_cos+0x180>)
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	f7f2 f814 	bl	8000228 <__aeabi_dsub>
 800e200:	ec41 0b10 	vmov	d0, r0, r1
 800e204:	b003      	add	sp, #12
 800e206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e20a:	4b22      	ldr	r3, [pc, #136]	; (800e294 <__kernel_cos+0x184>)
 800e20c:	4920      	ldr	r1, [pc, #128]	; (800e290 <__kernel_cos+0x180>)
 800e20e:	4598      	cmp	r8, r3
 800e210:	bfcc      	ite	gt
 800e212:	4d21      	ldrgt	r5, [pc, #132]	; (800e298 <__kernel_cos+0x188>)
 800e214:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e218:	2400      	movs	r4, #0
 800e21a:	4622      	mov	r2, r4
 800e21c:	462b      	mov	r3, r5
 800e21e:	2000      	movs	r0, #0
 800e220:	f7f2 f802 	bl	8000228 <__aeabi_dsub>
 800e224:	4622      	mov	r2, r4
 800e226:	4680      	mov	r8, r0
 800e228:	4689      	mov	r9, r1
 800e22a:	462b      	mov	r3, r5
 800e22c:	4650      	mov	r0, sl
 800e22e:	4659      	mov	r1, fp
 800e230:	f7f1 fffa 	bl	8000228 <__aeabi_dsub>
 800e234:	4632      	mov	r2, r6
 800e236:	463b      	mov	r3, r7
 800e238:	f7f1 fff6 	bl	8000228 <__aeabi_dsub>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	e7da      	b.n	800e1fc <__kernel_cos+0xec>
 800e246:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e280 <__kernel_cos+0x170>
 800e24a:	e7db      	b.n	800e204 <__kernel_cos+0xf4>
 800e24c:	f3af 8000 	nop.w
 800e250:	be8838d4 	.word	0xbe8838d4
 800e254:	bda8fae9 	.word	0xbda8fae9
 800e258:	bdb4b1c4 	.word	0xbdb4b1c4
 800e25c:	3e21ee9e 	.word	0x3e21ee9e
 800e260:	809c52ad 	.word	0x809c52ad
 800e264:	3e927e4f 	.word	0x3e927e4f
 800e268:	19cb1590 	.word	0x19cb1590
 800e26c:	3efa01a0 	.word	0x3efa01a0
 800e270:	16c15177 	.word	0x16c15177
 800e274:	3f56c16c 	.word	0x3f56c16c
 800e278:	5555554c 	.word	0x5555554c
 800e27c:	3fa55555 	.word	0x3fa55555
 800e280:	00000000 	.word	0x00000000
 800e284:	3ff00000 	.word	0x3ff00000
 800e288:	3fe00000 	.word	0x3fe00000
 800e28c:	3fd33332 	.word	0x3fd33332
 800e290:	3ff00000 	.word	0x3ff00000
 800e294:	3fe90000 	.word	0x3fe90000
 800e298:	3fd20000 	.word	0x3fd20000
 800e29c:	00000000 	.word	0x00000000

0800e2a0 <__kernel_sin>:
 800e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a4:	ed2d 8b04 	vpush	{d8-d9}
 800e2a8:	eeb0 8a41 	vmov.f32	s16, s2
 800e2ac:	eef0 8a61 	vmov.f32	s17, s3
 800e2b0:	ec55 4b10 	vmov	r4, r5, d0
 800e2b4:	b083      	sub	sp, #12
 800e2b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e2ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e2be:	9001      	str	r0, [sp, #4]
 800e2c0:	da06      	bge.n	800e2d0 <__kernel_sin+0x30>
 800e2c2:	ee10 0a10 	vmov	r0, s0
 800e2c6:	4629      	mov	r1, r5
 800e2c8:	f7f2 fc16 	bl	8000af8 <__aeabi_d2iz>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d051      	beq.n	800e374 <__kernel_sin+0xd4>
 800e2d0:	4622      	mov	r2, r4
 800e2d2:	462b      	mov	r3, r5
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	4629      	mov	r1, r5
 800e2d8:	f7f2 f95e 	bl	8000598 <__aeabi_dmul>
 800e2dc:	4682      	mov	sl, r0
 800e2de:	468b      	mov	fp, r1
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	f7f2 f956 	bl	8000598 <__aeabi_dmul>
 800e2ec:	a341      	add	r3, pc, #260	; (adr r3, 800e3f4 <__kernel_sin+0x154>)
 800e2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f2:	4680      	mov	r8, r0
 800e2f4:	4689      	mov	r9, r1
 800e2f6:	4650      	mov	r0, sl
 800e2f8:	4659      	mov	r1, fp
 800e2fa:	f7f2 f94d 	bl	8000598 <__aeabi_dmul>
 800e2fe:	a33f      	add	r3, pc, #252	; (adr r3, 800e3fc <__kernel_sin+0x15c>)
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	f7f1 ff90 	bl	8000228 <__aeabi_dsub>
 800e308:	4652      	mov	r2, sl
 800e30a:	465b      	mov	r3, fp
 800e30c:	f7f2 f944 	bl	8000598 <__aeabi_dmul>
 800e310:	a33c      	add	r3, pc, #240	; (adr r3, 800e404 <__kernel_sin+0x164>)
 800e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e316:	f7f1 ff89 	bl	800022c <__adddf3>
 800e31a:	4652      	mov	r2, sl
 800e31c:	465b      	mov	r3, fp
 800e31e:	f7f2 f93b 	bl	8000598 <__aeabi_dmul>
 800e322:	a33a      	add	r3, pc, #232	; (adr r3, 800e40c <__kernel_sin+0x16c>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f7f1 ff7e 	bl	8000228 <__aeabi_dsub>
 800e32c:	4652      	mov	r2, sl
 800e32e:	465b      	mov	r3, fp
 800e330:	f7f2 f932 	bl	8000598 <__aeabi_dmul>
 800e334:	a337      	add	r3, pc, #220	; (adr r3, 800e414 <__kernel_sin+0x174>)
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f7f1 ff77 	bl	800022c <__adddf3>
 800e33e:	9b01      	ldr	r3, [sp, #4]
 800e340:	4606      	mov	r6, r0
 800e342:	460f      	mov	r7, r1
 800e344:	b9eb      	cbnz	r3, 800e382 <__kernel_sin+0xe2>
 800e346:	4602      	mov	r2, r0
 800e348:	460b      	mov	r3, r1
 800e34a:	4650      	mov	r0, sl
 800e34c:	4659      	mov	r1, fp
 800e34e:	f7f2 f923 	bl	8000598 <__aeabi_dmul>
 800e352:	a325      	add	r3, pc, #148	; (adr r3, 800e3e8 <__kernel_sin+0x148>)
 800e354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e358:	f7f1 ff66 	bl	8000228 <__aeabi_dsub>
 800e35c:	4642      	mov	r2, r8
 800e35e:	464b      	mov	r3, r9
 800e360:	f7f2 f91a 	bl	8000598 <__aeabi_dmul>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	4620      	mov	r0, r4
 800e36a:	4629      	mov	r1, r5
 800e36c:	f7f1 ff5e 	bl	800022c <__adddf3>
 800e370:	4604      	mov	r4, r0
 800e372:	460d      	mov	r5, r1
 800e374:	ec45 4b10 	vmov	d0, r4, r5
 800e378:	b003      	add	sp, #12
 800e37a:	ecbd 8b04 	vpop	{d8-d9}
 800e37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e382:	4b1b      	ldr	r3, [pc, #108]	; (800e3f0 <__kernel_sin+0x150>)
 800e384:	ec51 0b18 	vmov	r0, r1, d8
 800e388:	2200      	movs	r2, #0
 800e38a:	f7f2 f905 	bl	8000598 <__aeabi_dmul>
 800e38e:	4632      	mov	r2, r6
 800e390:	ec41 0b19 	vmov	d9, r0, r1
 800e394:	463b      	mov	r3, r7
 800e396:	4640      	mov	r0, r8
 800e398:	4649      	mov	r1, r9
 800e39a:	f7f2 f8fd 	bl	8000598 <__aeabi_dmul>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	ec51 0b19 	vmov	r0, r1, d9
 800e3a6:	f7f1 ff3f 	bl	8000228 <__aeabi_dsub>
 800e3aa:	4652      	mov	r2, sl
 800e3ac:	465b      	mov	r3, fp
 800e3ae:	f7f2 f8f3 	bl	8000598 <__aeabi_dmul>
 800e3b2:	ec53 2b18 	vmov	r2, r3, d8
 800e3b6:	f7f1 ff37 	bl	8000228 <__aeabi_dsub>
 800e3ba:	a30b      	add	r3, pc, #44	; (adr r3, 800e3e8 <__kernel_sin+0x148>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	460f      	mov	r7, r1
 800e3c4:	4640      	mov	r0, r8
 800e3c6:	4649      	mov	r1, r9
 800e3c8:	f7f2 f8e6 	bl	8000598 <__aeabi_dmul>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	f7f1 ff2a 	bl	800022c <__adddf3>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	4620      	mov	r0, r4
 800e3de:	4629      	mov	r1, r5
 800e3e0:	f7f1 ff22 	bl	8000228 <__aeabi_dsub>
 800e3e4:	e7c4      	b.n	800e370 <__kernel_sin+0xd0>
 800e3e6:	bf00      	nop
 800e3e8:	55555549 	.word	0x55555549
 800e3ec:	3fc55555 	.word	0x3fc55555
 800e3f0:	3fe00000 	.word	0x3fe00000
 800e3f4:	5acfd57c 	.word	0x5acfd57c
 800e3f8:	3de5d93a 	.word	0x3de5d93a
 800e3fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e400:	3e5ae5e6 	.word	0x3e5ae5e6
 800e404:	57b1fe7d 	.word	0x57b1fe7d
 800e408:	3ec71de3 	.word	0x3ec71de3
 800e40c:	19c161d5 	.word	0x19c161d5
 800e410:	3f2a01a0 	.word	0x3f2a01a0
 800e414:	1110f8a6 	.word	0x1110f8a6
 800e418:	3f811111 	.word	0x3f811111
 800e41c:	00000000 	.word	0x00000000

0800e420 <scalbn>:
 800e420:	b570      	push	{r4, r5, r6, lr}
 800e422:	ec55 4b10 	vmov	r4, r5, d0
 800e426:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e42a:	4606      	mov	r6, r0
 800e42c:	462b      	mov	r3, r5
 800e42e:	b999      	cbnz	r1, 800e458 <scalbn+0x38>
 800e430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e434:	4323      	orrs	r3, r4
 800e436:	d03f      	beq.n	800e4b8 <scalbn+0x98>
 800e438:	4b35      	ldr	r3, [pc, #212]	; (800e510 <scalbn+0xf0>)
 800e43a:	4629      	mov	r1, r5
 800e43c:	ee10 0a10 	vmov	r0, s0
 800e440:	2200      	movs	r2, #0
 800e442:	f7f2 f8a9 	bl	8000598 <__aeabi_dmul>
 800e446:	4b33      	ldr	r3, [pc, #204]	; (800e514 <scalbn+0xf4>)
 800e448:	429e      	cmp	r6, r3
 800e44a:	4604      	mov	r4, r0
 800e44c:	460d      	mov	r5, r1
 800e44e:	da10      	bge.n	800e472 <scalbn+0x52>
 800e450:	a327      	add	r3, pc, #156	; (adr r3, 800e4f0 <scalbn+0xd0>)
 800e452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e456:	e01f      	b.n	800e498 <scalbn+0x78>
 800e458:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e45c:	4291      	cmp	r1, r2
 800e45e:	d10c      	bne.n	800e47a <scalbn+0x5a>
 800e460:	ee10 2a10 	vmov	r2, s0
 800e464:	4620      	mov	r0, r4
 800e466:	4629      	mov	r1, r5
 800e468:	f7f1 fee0 	bl	800022c <__adddf3>
 800e46c:	4604      	mov	r4, r0
 800e46e:	460d      	mov	r5, r1
 800e470:	e022      	b.n	800e4b8 <scalbn+0x98>
 800e472:	460b      	mov	r3, r1
 800e474:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e478:	3936      	subs	r1, #54	; 0x36
 800e47a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e47e:	4296      	cmp	r6, r2
 800e480:	dd0d      	ble.n	800e49e <scalbn+0x7e>
 800e482:	2d00      	cmp	r5, #0
 800e484:	a11c      	add	r1, pc, #112	; (adr r1, 800e4f8 <scalbn+0xd8>)
 800e486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e48a:	da02      	bge.n	800e492 <scalbn+0x72>
 800e48c:	a11c      	add	r1, pc, #112	; (adr r1, 800e500 <scalbn+0xe0>)
 800e48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e492:	a319      	add	r3, pc, #100	; (adr r3, 800e4f8 <scalbn+0xd8>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	f7f2 f87e 	bl	8000598 <__aeabi_dmul>
 800e49c:	e7e6      	b.n	800e46c <scalbn+0x4c>
 800e49e:	1872      	adds	r2, r6, r1
 800e4a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e4a4:	428a      	cmp	r2, r1
 800e4a6:	dcec      	bgt.n	800e482 <scalbn+0x62>
 800e4a8:	2a00      	cmp	r2, #0
 800e4aa:	dd08      	ble.n	800e4be <scalbn+0x9e>
 800e4ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4b8:	ec45 4b10 	vmov	d0, r4, r5
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e4c2:	da08      	bge.n	800e4d6 <scalbn+0xb6>
 800e4c4:	2d00      	cmp	r5, #0
 800e4c6:	a10a      	add	r1, pc, #40	; (adr r1, 800e4f0 <scalbn+0xd0>)
 800e4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4cc:	dac0      	bge.n	800e450 <scalbn+0x30>
 800e4ce:	a10e      	add	r1, pc, #56	; (adr r1, 800e508 <scalbn+0xe8>)
 800e4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d4:	e7bc      	b.n	800e450 <scalbn+0x30>
 800e4d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4da:	3236      	adds	r2, #54	; 0x36
 800e4dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	4b0c      	ldr	r3, [pc, #48]	; (800e518 <scalbn+0xf8>)
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	e7d5      	b.n	800e498 <scalbn+0x78>
 800e4ec:	f3af 8000 	nop.w
 800e4f0:	c2f8f359 	.word	0xc2f8f359
 800e4f4:	01a56e1f 	.word	0x01a56e1f
 800e4f8:	8800759c 	.word	0x8800759c
 800e4fc:	7e37e43c 	.word	0x7e37e43c
 800e500:	8800759c 	.word	0x8800759c
 800e504:	fe37e43c 	.word	0xfe37e43c
 800e508:	c2f8f359 	.word	0xc2f8f359
 800e50c:	81a56e1f 	.word	0x81a56e1f
 800e510:	43500000 	.word	0x43500000
 800e514:	ffff3cb0 	.word	0xffff3cb0
 800e518:	3c900000 	.word	0x3c900000
 800e51c:	00000000 	.word	0x00000000

0800e520 <floor>:
 800e520:	ec51 0b10 	vmov	r0, r1, d0
 800e524:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800e530:	2e13      	cmp	r6, #19
 800e532:	ee10 5a10 	vmov	r5, s0
 800e536:	ee10 8a10 	vmov	r8, s0
 800e53a:	460c      	mov	r4, r1
 800e53c:	dc31      	bgt.n	800e5a2 <floor+0x82>
 800e53e:	2e00      	cmp	r6, #0
 800e540:	da14      	bge.n	800e56c <floor+0x4c>
 800e542:	a333      	add	r3, pc, #204	; (adr r3, 800e610 <floor+0xf0>)
 800e544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e548:	f7f1 fe70 	bl	800022c <__adddf3>
 800e54c:	2200      	movs	r2, #0
 800e54e:	2300      	movs	r3, #0
 800e550:	f7f2 fab2 	bl	8000ab8 <__aeabi_dcmpgt>
 800e554:	b138      	cbz	r0, 800e566 <floor+0x46>
 800e556:	2c00      	cmp	r4, #0
 800e558:	da53      	bge.n	800e602 <floor+0xe2>
 800e55a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800e55e:	4325      	orrs	r5, r4
 800e560:	d052      	beq.n	800e608 <floor+0xe8>
 800e562:	4c2d      	ldr	r4, [pc, #180]	; (800e618 <floor+0xf8>)
 800e564:	2500      	movs	r5, #0
 800e566:	4621      	mov	r1, r4
 800e568:	4628      	mov	r0, r5
 800e56a:	e024      	b.n	800e5b6 <floor+0x96>
 800e56c:	4f2b      	ldr	r7, [pc, #172]	; (800e61c <floor+0xfc>)
 800e56e:	4137      	asrs	r7, r6
 800e570:	ea01 0307 	and.w	r3, r1, r7
 800e574:	4303      	orrs	r3, r0
 800e576:	d01e      	beq.n	800e5b6 <floor+0x96>
 800e578:	a325      	add	r3, pc, #148	; (adr r3, 800e610 <floor+0xf0>)
 800e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57e:	f7f1 fe55 	bl	800022c <__adddf3>
 800e582:	2200      	movs	r2, #0
 800e584:	2300      	movs	r3, #0
 800e586:	f7f2 fa97 	bl	8000ab8 <__aeabi_dcmpgt>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d0eb      	beq.n	800e566 <floor+0x46>
 800e58e:	2c00      	cmp	r4, #0
 800e590:	bfbe      	ittt	lt
 800e592:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e596:	4133      	asrlt	r3, r6
 800e598:	18e4      	addlt	r4, r4, r3
 800e59a:	ea24 0407 	bic.w	r4, r4, r7
 800e59e:	2500      	movs	r5, #0
 800e5a0:	e7e1      	b.n	800e566 <floor+0x46>
 800e5a2:	2e33      	cmp	r6, #51	; 0x33
 800e5a4:	dd0b      	ble.n	800e5be <floor+0x9e>
 800e5a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e5aa:	d104      	bne.n	800e5b6 <floor+0x96>
 800e5ac:	ee10 2a10 	vmov	r2, s0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	f7f1 fe3b 	bl	800022c <__adddf3>
 800e5b6:	ec41 0b10 	vmov	d0, r0, r1
 800e5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5be:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e5c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e5c6:	40df      	lsrs	r7, r3
 800e5c8:	4238      	tst	r0, r7
 800e5ca:	d0f4      	beq.n	800e5b6 <floor+0x96>
 800e5cc:	a310      	add	r3, pc, #64	; (adr r3, 800e610 <floor+0xf0>)
 800e5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d2:	f7f1 fe2b 	bl	800022c <__adddf3>
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	2300      	movs	r3, #0
 800e5da:	f7f2 fa6d 	bl	8000ab8 <__aeabi_dcmpgt>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0c1      	beq.n	800e566 <floor+0x46>
 800e5e2:	2c00      	cmp	r4, #0
 800e5e4:	da0a      	bge.n	800e5fc <floor+0xdc>
 800e5e6:	2e14      	cmp	r6, #20
 800e5e8:	d101      	bne.n	800e5ee <floor+0xce>
 800e5ea:	3401      	adds	r4, #1
 800e5ec:	e006      	b.n	800e5fc <floor+0xdc>
 800e5ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	40b3      	lsls	r3, r6
 800e5f6:	441d      	add	r5, r3
 800e5f8:	45a8      	cmp	r8, r5
 800e5fa:	d8f6      	bhi.n	800e5ea <floor+0xca>
 800e5fc:	ea25 0507 	bic.w	r5, r5, r7
 800e600:	e7b1      	b.n	800e566 <floor+0x46>
 800e602:	2500      	movs	r5, #0
 800e604:	462c      	mov	r4, r5
 800e606:	e7ae      	b.n	800e566 <floor+0x46>
 800e608:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e60c:	e7ab      	b.n	800e566 <floor+0x46>
 800e60e:	bf00      	nop
 800e610:	8800759c 	.word	0x8800759c
 800e614:	7e37e43c 	.word	0x7e37e43c
 800e618:	bff00000 	.word	0xbff00000
 800e61c:	000fffff 	.word	0x000fffff

0800e620 <realloc>:
 800e620:	4b02      	ldr	r3, [pc, #8]	; (800e62c <realloc+0xc>)
 800e622:	460a      	mov	r2, r1
 800e624:	4601      	mov	r1, r0
 800e626:	6818      	ldr	r0, [r3, #0]
 800e628:	f000 b802 	b.w	800e630 <_realloc_r>
 800e62c:	20000084 	.word	0x20000084

0800e630 <_realloc_r>:
 800e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e634:	4680      	mov	r8, r0
 800e636:	4614      	mov	r4, r2
 800e638:	460e      	mov	r6, r1
 800e63a:	b921      	cbnz	r1, 800e646 <_realloc_r+0x16>
 800e63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e640:	4611      	mov	r1, r2
 800e642:	f000 b8d3 	b.w	800e7ec <_malloc_r>
 800e646:	b92a      	cbnz	r2, 800e654 <_realloc_r+0x24>
 800e648:	f000 f864 	bl	800e714 <_free_r>
 800e64c:	4625      	mov	r5, r4
 800e64e:	4628      	mov	r0, r5
 800e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e654:	f000 f956 	bl	800e904 <_malloc_usable_size_r>
 800e658:	4284      	cmp	r4, r0
 800e65a:	4607      	mov	r7, r0
 800e65c:	d802      	bhi.n	800e664 <_realloc_r+0x34>
 800e65e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e662:	d812      	bhi.n	800e68a <_realloc_r+0x5a>
 800e664:	4621      	mov	r1, r4
 800e666:	4640      	mov	r0, r8
 800e668:	f000 f8c0 	bl	800e7ec <_malloc_r>
 800e66c:	4605      	mov	r5, r0
 800e66e:	2800      	cmp	r0, #0
 800e670:	d0ed      	beq.n	800e64e <_realloc_r+0x1e>
 800e672:	42bc      	cmp	r4, r7
 800e674:	4622      	mov	r2, r4
 800e676:	4631      	mov	r1, r6
 800e678:	bf28      	it	cs
 800e67a:	463a      	movcs	r2, r7
 800e67c:	f000 f83c 	bl	800e6f8 <memcpy>
 800e680:	4631      	mov	r1, r6
 800e682:	4640      	mov	r0, r8
 800e684:	f000 f846 	bl	800e714 <_free_r>
 800e688:	e7e1      	b.n	800e64e <_realloc_r+0x1e>
 800e68a:	4635      	mov	r5, r6
 800e68c:	e7df      	b.n	800e64e <_realloc_r+0x1e>

0800e68e <memset>:
 800e68e:	4402      	add	r2, r0
 800e690:	4603      	mov	r3, r0
 800e692:	4293      	cmp	r3, r2
 800e694:	d100      	bne.n	800e698 <memset+0xa>
 800e696:	4770      	bx	lr
 800e698:	f803 1b01 	strb.w	r1, [r3], #1
 800e69c:	e7f9      	b.n	800e692 <memset+0x4>
	...

0800e6a0 <__errno>:
 800e6a0:	4b01      	ldr	r3, [pc, #4]	; (800e6a8 <__errno+0x8>)
 800e6a2:	6818      	ldr	r0, [r3, #0]
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	20000084 	.word	0x20000084

0800e6ac <__libc_init_array>:
 800e6ac:	b570      	push	{r4, r5, r6, lr}
 800e6ae:	4d0d      	ldr	r5, [pc, #52]	; (800e6e4 <__libc_init_array+0x38>)
 800e6b0:	4c0d      	ldr	r4, [pc, #52]	; (800e6e8 <__libc_init_array+0x3c>)
 800e6b2:	1b64      	subs	r4, r4, r5
 800e6b4:	10a4      	asrs	r4, r4, #2
 800e6b6:	2600      	movs	r6, #0
 800e6b8:	42a6      	cmp	r6, r4
 800e6ba:	d109      	bne.n	800e6d0 <__libc_init_array+0x24>
 800e6bc:	4d0b      	ldr	r5, [pc, #44]	; (800e6ec <__libc_init_array+0x40>)
 800e6be:	4c0c      	ldr	r4, [pc, #48]	; (800e6f0 <__libc_init_array+0x44>)
 800e6c0:	f000 f938 	bl	800e934 <_init>
 800e6c4:	1b64      	subs	r4, r4, r5
 800e6c6:	10a4      	asrs	r4, r4, #2
 800e6c8:	2600      	movs	r6, #0
 800e6ca:	42a6      	cmp	r6, r4
 800e6cc:	d105      	bne.n	800e6da <__libc_init_array+0x2e>
 800e6ce:	bd70      	pop	{r4, r5, r6, pc}
 800e6d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6d4:	4798      	blx	r3
 800e6d6:	3601      	adds	r6, #1
 800e6d8:	e7ee      	b.n	800e6b8 <__libc_init_array+0xc>
 800e6da:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6de:	4798      	blx	r3
 800e6e0:	3601      	adds	r6, #1
 800e6e2:	e7f2      	b.n	800e6ca <__libc_init_array+0x1e>
 800e6e4:	0800efc8 	.word	0x0800efc8
 800e6e8:	0800efc8 	.word	0x0800efc8
 800e6ec:	0800efc8 	.word	0x0800efc8
 800e6f0:	0800efd0 	.word	0x0800efd0

0800e6f4 <__retarget_lock_acquire_recursive>:
 800e6f4:	4770      	bx	lr

0800e6f6 <__retarget_lock_release_recursive>:
 800e6f6:	4770      	bx	lr

0800e6f8 <memcpy>:
 800e6f8:	440a      	add	r2, r1
 800e6fa:	4291      	cmp	r1, r2
 800e6fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e700:	d100      	bne.n	800e704 <memcpy+0xc>
 800e702:	4770      	bx	lr
 800e704:	b510      	push	{r4, lr}
 800e706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e70e:	4291      	cmp	r1, r2
 800e710:	d1f9      	bne.n	800e706 <memcpy+0xe>
 800e712:	bd10      	pop	{r4, pc}

0800e714 <_free_r>:
 800e714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e716:	2900      	cmp	r1, #0
 800e718:	d044      	beq.n	800e7a4 <_free_r+0x90>
 800e71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e71e:	9001      	str	r0, [sp, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	f1a1 0404 	sub.w	r4, r1, #4
 800e726:	bfb8      	it	lt
 800e728:	18e4      	addlt	r4, r4, r3
 800e72a:	f000 f8df 	bl	800e8ec <__malloc_lock>
 800e72e:	4a1e      	ldr	r2, [pc, #120]	; (800e7a8 <_free_r+0x94>)
 800e730:	9801      	ldr	r0, [sp, #4]
 800e732:	6813      	ldr	r3, [r2, #0]
 800e734:	b933      	cbnz	r3, 800e744 <_free_r+0x30>
 800e736:	6063      	str	r3, [r4, #4]
 800e738:	6014      	str	r4, [r2, #0]
 800e73a:	b003      	add	sp, #12
 800e73c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e740:	f000 b8da 	b.w	800e8f8 <__malloc_unlock>
 800e744:	42a3      	cmp	r3, r4
 800e746:	d908      	bls.n	800e75a <_free_r+0x46>
 800e748:	6825      	ldr	r5, [r4, #0]
 800e74a:	1961      	adds	r1, r4, r5
 800e74c:	428b      	cmp	r3, r1
 800e74e:	bf01      	itttt	eq
 800e750:	6819      	ldreq	r1, [r3, #0]
 800e752:	685b      	ldreq	r3, [r3, #4]
 800e754:	1949      	addeq	r1, r1, r5
 800e756:	6021      	streq	r1, [r4, #0]
 800e758:	e7ed      	b.n	800e736 <_free_r+0x22>
 800e75a:	461a      	mov	r2, r3
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	b10b      	cbz	r3, 800e764 <_free_r+0x50>
 800e760:	42a3      	cmp	r3, r4
 800e762:	d9fa      	bls.n	800e75a <_free_r+0x46>
 800e764:	6811      	ldr	r1, [r2, #0]
 800e766:	1855      	adds	r5, r2, r1
 800e768:	42a5      	cmp	r5, r4
 800e76a:	d10b      	bne.n	800e784 <_free_r+0x70>
 800e76c:	6824      	ldr	r4, [r4, #0]
 800e76e:	4421      	add	r1, r4
 800e770:	1854      	adds	r4, r2, r1
 800e772:	42a3      	cmp	r3, r4
 800e774:	6011      	str	r1, [r2, #0]
 800e776:	d1e0      	bne.n	800e73a <_free_r+0x26>
 800e778:	681c      	ldr	r4, [r3, #0]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	6053      	str	r3, [r2, #4]
 800e77e:	440c      	add	r4, r1
 800e780:	6014      	str	r4, [r2, #0]
 800e782:	e7da      	b.n	800e73a <_free_r+0x26>
 800e784:	d902      	bls.n	800e78c <_free_r+0x78>
 800e786:	230c      	movs	r3, #12
 800e788:	6003      	str	r3, [r0, #0]
 800e78a:	e7d6      	b.n	800e73a <_free_r+0x26>
 800e78c:	6825      	ldr	r5, [r4, #0]
 800e78e:	1961      	adds	r1, r4, r5
 800e790:	428b      	cmp	r3, r1
 800e792:	bf04      	itt	eq
 800e794:	6819      	ldreq	r1, [r3, #0]
 800e796:	685b      	ldreq	r3, [r3, #4]
 800e798:	6063      	str	r3, [r4, #4]
 800e79a:	bf04      	itt	eq
 800e79c:	1949      	addeq	r1, r1, r5
 800e79e:	6021      	streq	r1, [r4, #0]
 800e7a0:	6054      	str	r4, [r2, #4]
 800e7a2:	e7ca      	b.n	800e73a <_free_r+0x26>
 800e7a4:	b003      	add	sp, #12
 800e7a6:	bd30      	pop	{r4, r5, pc}
 800e7a8:	20005cd0 	.word	0x20005cd0

0800e7ac <sbrk_aligned>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	4e0e      	ldr	r6, [pc, #56]	; (800e7e8 <sbrk_aligned+0x3c>)
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	6831      	ldr	r1, [r6, #0]
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	b911      	cbnz	r1, 800e7be <sbrk_aligned+0x12>
 800e7b8:	f000 f8ac 	bl	800e914 <_sbrk_r>
 800e7bc:	6030      	str	r0, [r6, #0]
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	f000 f8a7 	bl	800e914 <_sbrk_r>
 800e7c6:	1c43      	adds	r3, r0, #1
 800e7c8:	d00a      	beq.n	800e7e0 <sbrk_aligned+0x34>
 800e7ca:	1cc4      	adds	r4, r0, #3
 800e7cc:	f024 0403 	bic.w	r4, r4, #3
 800e7d0:	42a0      	cmp	r0, r4
 800e7d2:	d007      	beq.n	800e7e4 <sbrk_aligned+0x38>
 800e7d4:	1a21      	subs	r1, r4, r0
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f000 f89c 	bl	800e914 <_sbrk_r>
 800e7dc:	3001      	adds	r0, #1
 800e7de:	d101      	bne.n	800e7e4 <sbrk_aligned+0x38>
 800e7e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
 800e7e8:	20005cd4 	.word	0x20005cd4

0800e7ec <_malloc_r>:
 800e7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7f0:	1ccd      	adds	r5, r1, #3
 800e7f2:	f025 0503 	bic.w	r5, r5, #3
 800e7f6:	3508      	adds	r5, #8
 800e7f8:	2d0c      	cmp	r5, #12
 800e7fa:	bf38      	it	cc
 800e7fc:	250c      	movcc	r5, #12
 800e7fe:	2d00      	cmp	r5, #0
 800e800:	4607      	mov	r7, r0
 800e802:	db01      	blt.n	800e808 <_malloc_r+0x1c>
 800e804:	42a9      	cmp	r1, r5
 800e806:	d905      	bls.n	800e814 <_malloc_r+0x28>
 800e808:	230c      	movs	r3, #12
 800e80a:	603b      	str	r3, [r7, #0]
 800e80c:	2600      	movs	r6, #0
 800e80e:	4630      	mov	r0, r6
 800e810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e8e8 <_malloc_r+0xfc>
 800e818:	f000 f868 	bl	800e8ec <__malloc_lock>
 800e81c:	f8d8 3000 	ldr.w	r3, [r8]
 800e820:	461c      	mov	r4, r3
 800e822:	bb5c      	cbnz	r4, 800e87c <_malloc_r+0x90>
 800e824:	4629      	mov	r1, r5
 800e826:	4638      	mov	r0, r7
 800e828:	f7ff ffc0 	bl	800e7ac <sbrk_aligned>
 800e82c:	1c43      	adds	r3, r0, #1
 800e82e:	4604      	mov	r4, r0
 800e830:	d155      	bne.n	800e8de <_malloc_r+0xf2>
 800e832:	f8d8 4000 	ldr.w	r4, [r8]
 800e836:	4626      	mov	r6, r4
 800e838:	2e00      	cmp	r6, #0
 800e83a:	d145      	bne.n	800e8c8 <_malloc_r+0xdc>
 800e83c:	2c00      	cmp	r4, #0
 800e83e:	d048      	beq.n	800e8d2 <_malloc_r+0xe6>
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	4631      	mov	r1, r6
 800e844:	4638      	mov	r0, r7
 800e846:	eb04 0903 	add.w	r9, r4, r3
 800e84a:	f000 f863 	bl	800e914 <_sbrk_r>
 800e84e:	4581      	cmp	r9, r0
 800e850:	d13f      	bne.n	800e8d2 <_malloc_r+0xe6>
 800e852:	6821      	ldr	r1, [r4, #0]
 800e854:	1a6d      	subs	r5, r5, r1
 800e856:	4629      	mov	r1, r5
 800e858:	4638      	mov	r0, r7
 800e85a:	f7ff ffa7 	bl	800e7ac <sbrk_aligned>
 800e85e:	3001      	adds	r0, #1
 800e860:	d037      	beq.n	800e8d2 <_malloc_r+0xe6>
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	442b      	add	r3, r5
 800e866:	6023      	str	r3, [r4, #0]
 800e868:	f8d8 3000 	ldr.w	r3, [r8]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d038      	beq.n	800e8e2 <_malloc_r+0xf6>
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	42a2      	cmp	r2, r4
 800e874:	d12b      	bne.n	800e8ce <_malloc_r+0xe2>
 800e876:	2200      	movs	r2, #0
 800e878:	605a      	str	r2, [r3, #4]
 800e87a:	e00f      	b.n	800e89c <_malloc_r+0xb0>
 800e87c:	6822      	ldr	r2, [r4, #0]
 800e87e:	1b52      	subs	r2, r2, r5
 800e880:	d41f      	bmi.n	800e8c2 <_malloc_r+0xd6>
 800e882:	2a0b      	cmp	r2, #11
 800e884:	d917      	bls.n	800e8b6 <_malloc_r+0xca>
 800e886:	1961      	adds	r1, r4, r5
 800e888:	42a3      	cmp	r3, r4
 800e88a:	6025      	str	r5, [r4, #0]
 800e88c:	bf18      	it	ne
 800e88e:	6059      	strne	r1, [r3, #4]
 800e890:	6863      	ldr	r3, [r4, #4]
 800e892:	bf08      	it	eq
 800e894:	f8c8 1000 	streq.w	r1, [r8]
 800e898:	5162      	str	r2, [r4, r5]
 800e89a:	604b      	str	r3, [r1, #4]
 800e89c:	4638      	mov	r0, r7
 800e89e:	f104 060b 	add.w	r6, r4, #11
 800e8a2:	f000 f829 	bl	800e8f8 <__malloc_unlock>
 800e8a6:	f026 0607 	bic.w	r6, r6, #7
 800e8aa:	1d23      	adds	r3, r4, #4
 800e8ac:	1af2      	subs	r2, r6, r3
 800e8ae:	d0ae      	beq.n	800e80e <_malloc_r+0x22>
 800e8b0:	1b9b      	subs	r3, r3, r6
 800e8b2:	50a3      	str	r3, [r4, r2]
 800e8b4:	e7ab      	b.n	800e80e <_malloc_r+0x22>
 800e8b6:	42a3      	cmp	r3, r4
 800e8b8:	6862      	ldr	r2, [r4, #4]
 800e8ba:	d1dd      	bne.n	800e878 <_malloc_r+0x8c>
 800e8bc:	f8c8 2000 	str.w	r2, [r8]
 800e8c0:	e7ec      	b.n	800e89c <_malloc_r+0xb0>
 800e8c2:	4623      	mov	r3, r4
 800e8c4:	6864      	ldr	r4, [r4, #4]
 800e8c6:	e7ac      	b.n	800e822 <_malloc_r+0x36>
 800e8c8:	4634      	mov	r4, r6
 800e8ca:	6876      	ldr	r6, [r6, #4]
 800e8cc:	e7b4      	b.n	800e838 <_malloc_r+0x4c>
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	e7cc      	b.n	800e86c <_malloc_r+0x80>
 800e8d2:	230c      	movs	r3, #12
 800e8d4:	603b      	str	r3, [r7, #0]
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	f000 f80e 	bl	800e8f8 <__malloc_unlock>
 800e8dc:	e797      	b.n	800e80e <_malloc_r+0x22>
 800e8de:	6025      	str	r5, [r4, #0]
 800e8e0:	e7dc      	b.n	800e89c <_malloc_r+0xb0>
 800e8e2:	605b      	str	r3, [r3, #4]
 800e8e4:	deff      	udf	#255	; 0xff
 800e8e6:	bf00      	nop
 800e8e8:	20005cd0 	.word	0x20005cd0

0800e8ec <__malloc_lock>:
 800e8ec:	4801      	ldr	r0, [pc, #4]	; (800e8f4 <__malloc_lock+0x8>)
 800e8ee:	f7ff bf01 	b.w	800e6f4 <__retarget_lock_acquire_recursive>
 800e8f2:	bf00      	nop
 800e8f4:	20005ccc 	.word	0x20005ccc

0800e8f8 <__malloc_unlock>:
 800e8f8:	4801      	ldr	r0, [pc, #4]	; (800e900 <__malloc_unlock+0x8>)
 800e8fa:	f7ff befc 	b.w	800e6f6 <__retarget_lock_release_recursive>
 800e8fe:	bf00      	nop
 800e900:	20005ccc 	.word	0x20005ccc

0800e904 <_malloc_usable_size_r>:
 800e904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e908:	1f18      	subs	r0, r3, #4
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bfbc      	itt	lt
 800e90e:	580b      	ldrlt	r3, [r1, r0]
 800e910:	18c0      	addlt	r0, r0, r3
 800e912:	4770      	bx	lr

0800e914 <_sbrk_r>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	4d06      	ldr	r5, [pc, #24]	; (800e930 <_sbrk_r+0x1c>)
 800e918:	2300      	movs	r3, #0
 800e91a:	4604      	mov	r4, r0
 800e91c:	4608      	mov	r0, r1
 800e91e:	602b      	str	r3, [r5, #0]
 800e920:	f7f7 fb16 	bl	8005f50 <_sbrk>
 800e924:	1c43      	adds	r3, r0, #1
 800e926:	d102      	bne.n	800e92e <_sbrk_r+0x1a>
 800e928:	682b      	ldr	r3, [r5, #0]
 800e92a:	b103      	cbz	r3, 800e92e <_sbrk_r+0x1a>
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	bd38      	pop	{r3, r4, r5, pc}
 800e930:	20005cd8 	.word	0x20005cd8

0800e934 <_init>:
 800e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e936:	bf00      	nop
 800e938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e93a:	bc08      	pop	{r3}
 800e93c:	469e      	mov	lr, r3
 800e93e:	4770      	bx	lr

0800e940 <_fini>:
 800e940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e942:	bf00      	nop
 800e944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e946:	bc08      	pop	{r3}
 800e948:	469e      	mov	lr, r3
 800e94a:	4770      	bx	lr
