
ros_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1cc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800e3a0  0800e3a0  0001e3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e900  0800e900  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e900  0800e900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e908  0800e908  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e908  0800e908  0001e908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e910  0800e910  0001e910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800e914  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c10  200000a0  0800e9b4  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005cb0  0800e9b4  00025cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000200bf  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000408c  00000000  00000000  000401d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  00044260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012a6  00000000  00000000  00045a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259eb  00000000  00000000  00046cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb32  00000000  00000000  0006c6d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4166  00000000  00000000  0008820b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dc4  00000000  00000000  0016c374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00173138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e384 	.word	0x0800e384

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	0800e384 	.word	0x0800e384

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b970 	b.w	8000e40 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9e08      	ldr	r6, [sp, #32]
 8000b7e:	460d      	mov	r5, r1
 8000b80:	4604      	mov	r4, r0
 8000b82:	460f      	mov	r7, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14a      	bne.n	8000c1e <__udivmoddi4+0xa6>
 8000b88:	428a      	cmp	r2, r1
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	d965      	bls.n	8000c5a <__udivmoddi4+0xe2>
 8000b8e:	fab2 f382 	clz	r3, r2
 8000b92:	b143      	cbz	r3, 8000ba6 <__udivmoddi4+0x2e>
 8000b94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b98:	f1c3 0220 	rsb	r2, r3, #32
 8000b9c:	409f      	lsls	r7, r3
 8000b9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba2:	4317      	orrs	r7, r2
 8000ba4:	409c      	lsls	r4, r3
 8000ba6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb2:	0c22      	lsrs	r2, r4, #16
 8000bb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bbc:	fb01 f005 	mul.w	r0, r1, r5
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x62>
 8000bc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bcc:	f080 811c 	bcs.w	8000e08 <__udivmoddi4+0x290>
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	f240 8119 	bls.w	8000e08 <__udivmoddi4+0x290>
 8000bd6:	3902      	subs	r1, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	1a12      	subs	r2, r2, r0
 8000bdc:	b2a4      	uxth	r4, r4
 8000bde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	fb00 f505 	mul.w	r5, r0, r5
 8000bee:	42a5      	cmp	r5, r4
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x90>
 8000bf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bfa:	f080 8107 	bcs.w	8000e0c <__udivmoddi4+0x294>
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	f240 8104 	bls.w	8000e0c <__udivmoddi4+0x294>
 8000c04:	4464      	add	r4, ip
 8000c06:	3802      	subs	r0, #2
 8000c08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	2100      	movs	r1, #0
 8000c10:	b11e      	cbz	r6, 8000c1a <__udivmoddi4+0xa2>
 8000c12:	40dc      	lsrs	r4, r3
 8000c14:	2300      	movs	r3, #0
 8000c16:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0xbc>
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	f000 80ed 	beq.w	8000e02 <__udivmoddi4+0x28a>
 8000c28:	2100      	movs	r1, #0
 8000c2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	fab3 f183 	clz	r1, r3
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	d149      	bne.n	8000cd0 <__udivmoddi4+0x158>
 8000c3c:	42ab      	cmp	r3, r5
 8000c3e:	d302      	bcc.n	8000c46 <__udivmoddi4+0xce>
 8000c40:	4282      	cmp	r2, r0
 8000c42:	f200 80f8 	bhi.w	8000e36 <__udivmoddi4+0x2be>
 8000c46:	1a84      	subs	r4, r0, r2
 8000c48:	eb65 0203 	sbc.w	r2, r5, r3
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d0e2      	beq.n	8000c1a <__udivmoddi4+0xa2>
 8000c54:	e9c6 4700 	strd	r4, r7, [r6]
 8000c58:	e7df      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000c5a:	b902      	cbnz	r2, 8000c5e <__udivmoddi4+0xe6>
 8000c5c:	deff      	udf	#255	; 0xff
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x210>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2101      	movs	r1, #1
 8000c74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c78:	fb07 2015 	mls	r0, r7, r5, r2
 8000c7c:	0c22      	lsrs	r2, r4, #16
 8000c7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c82:	fb0e f005 	mul.w	r0, lr, r5
 8000c86:	4290      	cmp	r0, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x124>
 8000c8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x122>
 8000c94:	4290      	cmp	r0, r2
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2b8>
 8000c9a:	4645      	mov	r5, r8
 8000c9c:	1a12      	subs	r2, r2, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x14e>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x14c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2c2>
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cce:	e79f      	b.n	8000c10 <__udivmoddi4+0x98>
 8000cd0:	f1c1 0720 	rsb	r7, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	40fd      	lsrs	r5, r7
 8000ce8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cec:	4323      	orrs	r3, r4
 8000cee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf2:	fa1f fe8c 	uxth.w	lr, ip
 8000cf6:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfa:	0c1c      	lsrs	r4, r3, #16
 8000cfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d00:	fb08 f50e 	mul.w	r5, r8, lr
 8000d04:	42a5      	cmp	r5, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b0>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2b4>
 8000d1c:	42a5      	cmp	r5, r4
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2b4>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	1b64      	subs	r4, r4, r5
 8000d2a:	b29d      	uxth	r5, r3
 8000d2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d30:	fb09 4413 	mls	r4, r9, r3, r4
 8000d34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1da>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2ac>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d56:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5a:	eba4 040e 	sub.w	r4, r4, lr
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46ae      	mov	lr, r5
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x29c>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x298>
 8000d68:	b156      	cbz	r6, 8000d80 <__udivmoddi4+0x208>
 8000d6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d72:	fa04 f707 	lsl.w	r7, r4, r7
 8000d76:	40ca      	lsrs	r2, r1
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	f1c3 0120 	rsb	r1, r3, #32
 8000d8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d90:	fa20 f201 	lsr.w	r2, r0, r1
 8000d94:	fa25 f101 	lsr.w	r1, r5, r1
 8000d98:	409d      	lsls	r5, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dac:	0c11      	lsrs	r1, r2, #16
 8000dae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db2:	fb00 f50e 	mul.w	r5, r0, lr
 8000db6:	428d      	cmp	r5, r1
 8000db8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x258>
 8000dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dc8:	428d      	cmp	r5, r1
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1b49      	subs	r1, r1, r5
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ddc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de0:	fb05 f10e 	mul.w	r1, r5, lr
 8000de4:	4291      	cmp	r1, r2
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x282>
 8000de8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2a8>
 8000df2:	4291      	cmp	r1, r2
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2a8>
 8000df6:	3d02      	subs	r5, #2
 8000df8:	4462      	add	r2, ip
 8000dfa:	1a52      	subs	r2, r2, r1
 8000dfc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0xfc>
 8000e02:	4631      	mov	r1, r6
 8000e04:	4630      	mov	r0, r6
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xa2>
 8000e08:	4639      	mov	r1, r7
 8000e0a:	e6e6      	b.n	8000bda <__udivmoddi4+0x62>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	e6fb      	b.n	8000c08 <__udivmoddi4+0x90>
 8000e10:	4548      	cmp	r0, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f0>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f0>
 8000e20:	4645      	mov	r5, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x282>
 8000e24:	462b      	mov	r3, r5
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1da>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x258>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b0>
 8000e30:	3d02      	subs	r5, #2
 8000e32:	4462      	add	r2, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x124>
 8000e36:	4608      	mov	r0, r1
 8000e38:	e70a      	b.n	8000c50 <__udivmoddi4+0xd8>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x14e>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <vApplicationGetIdleTaskMemory+0x30>)
 8000e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200000bc 	.word	0x200000bc
 8000e74:	20000110 	.word	0x20000110

08000e78 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e86:	eef0 7ae7 	vabs.f32	s15, s15
 8000e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b0a4      	sub	sp, #144	; 0x90
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f004 fe1b 	bl	8005ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f8a3 	bl	8000fec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 fcdf 	bl	8001868 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000eaa:	f000 fca5 	bl	80017f8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000eae:	f000 fc75 	bl	800179c <_ZL19MX_USART2_UART_Initv>
  MX_CAN1_Init();
 8000eb2:	f000 f913 	bl	80010dc <_ZL12MX_CAN1_Initv>
  MX_UART4_Init();
 8000eb6:	f000 fc43 	bl	8001740 <_ZL13MX_UART4_Initv>
  MX_SPI2_Init();
 8000eba:	f000 f9ad 	bl	8001218 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8000ebe:	f000 f9e7 	bl	8001290 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000ec2:	f000 fb0f 	bl	80014e4 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8000ec6:	f000 fb6b 	bl	80015a0 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8000eca:	f000 fa6b 	bl	80013a4 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

//  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
  //HAL_UART_Receive_IT(&huart4, RxData, 1);
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000ece:	213c      	movs	r1, #60	; 0x3c
 8000ed0:	4839      	ldr	r0, [pc, #228]	; (8000fb8 <main+0x120>)
 8000ed2:	f007 ffae 	bl	8008e32 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4838      	ldr	r0, [pc, #224]	; (8000fbc <main+0x124>)
 8000eda:	f007 fde3 	bl	8008aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4836      	ldr	r0, [pc, #216]	; (8000fbc <main+0x124>)
 8000ee2:	f007 fddf 	bl	8008aa4 <HAL_TIM_PWM_Start>
//  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4835      	ldr	r0, [pc, #212]	; (8000fc0 <main+0x128>)
 8000eea:	f007 fddb 	bl	8008aa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4833      	ldr	r0, [pc, #204]	; (8000fc0 <main+0x128>)
 8000ef2:	f007 fdd7 	bl	8008aa4 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WheelControl */
  osThreadDef(WheelControl, Wheel_task, osPriorityNormal, 0, 128);
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <main+0x12c>)
 8000ef8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000efc:	461d      	mov	r5, r3
 8000efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WheelControlHandle = osThreadCreate(osThread(WheelControl), NULL);
 8000f0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00a fa72 	bl	800b3fa <osThreadCreate>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a2b      	ldr	r2, [pc, #172]	; (8000fc8 <main+0x130>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Joystick */
  osThreadDef(Joystick, task2_joystick, osPriorityNormal, 0, 2048);
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <main+0x134>)
 8000f1e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  JoystickHandle = osThreadCreate(osThread(Joystick), NULL);
 8000f30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00a fa5f 	bl	800b3fa <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <main+0x138>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of up_down_control */
  osThreadDef(up_down_control, DC_motor, osPriorityNormal, 0, 512);
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <main+0x13c>)
 8000f44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f48:	461d      	mov	r5, r3
 8000f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  up_down_controlHandle = osThreadCreate(osThread(up_down_control), NULL);
 8000f56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a fa4c 	bl	800b3fa <osThreadCreate>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <main+0x140>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* definition and creation of Target_pos */
  osThreadDef(Target_pos, Colorcheck, osPriorityNormal, 0, 512);
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <main+0x144>)
 8000f6a:	f107 0420 	add.w	r4, r7, #32
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Target_posHandle = osThreadCreate(osThread(Target_pos), NULL);
 8000f7c:	f107 0320 	add.w	r3, r7, #32
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00a fa39 	bl	800b3fa <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <main+0x148>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Color */
  osThreadDef(Color, StartTask05, osPriorityNormal, 0, 128);
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <main+0x14c>)
 8000f90:	1d3c      	adds	r4, r7, #4
 8000f92:	461d      	mov	r5, r3
 8000f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ColorHandle = osThreadCreate(osThread(Color), NULL);
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a fa28 	bl	800b3fa <osThreadCreate>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <main+0x150>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fb0:	f00a fa1c 	bl	800b3ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x11c>
 8000fb6:	bf00      	nop
 8000fb8:	20000420 	.word	0x20000420
 8000fbc:	200003d8 	.word	0x200003d8
 8000fc0:	20000468 	.word	0x20000468
 8000fc4:	0800e3b0 	.word	0x0800e3b0
 8000fc8:	200006c0 	.word	0x200006c0
 8000fcc:	0800e3d8 	.word	0x0800e3d8
 8000fd0:	200006c4 	.word	0x200006c4
 8000fd4:	0800e404 	.word	0x0800e404
 8000fd8:	200006c8 	.word	0x200006c8
 8000fdc:	0800e42c 	.word	0x0800e42c
 8000fe0:	200006cc 	.word	0x200006cc
 8000fe4:	0800e450 	.word	0x0800e450
 8000fe8:	200006d0 	.word	0x200006d0

08000fec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2234      	movs	r2, #52	; 0x34
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f00d f86f 	bl	800e0de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <_Z18SystemClock_Configv+0xe8>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a2e      	ldr	r2, [pc, #184]	; (80010d4 <_Z18SystemClock_Configv+0xe8>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <_Z18SystemClock_Configv+0xe8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <_Z18SystemClock_Configv+0xec>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <_Z18SystemClock_Configv+0xec>)
 800103a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <_Z18SystemClock_Configv+0xec>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f006 fe45 	bl	8007d08 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800108e:	f002 fa35 	bl	80034fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800109e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f006 faad 	bl	8007610 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80010c6:	f002 fa19 	bl	80034fc <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	; 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40007000 	.word	0x40007000

080010dc <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <_ZL12MX_CAN1_Initv+0x124>)
 80010e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010ec:	4b43      	ldr	r3, [pc, #268]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80010fa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80010fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001100:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001102:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001106:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 800110a:	2200      	movs	r2, #0
 800110c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001110:	2200      	movs	r2, #0
 8001112:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001114:	4b39      	ldr	r3, [pc, #228]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001116:	2200      	movs	r2, #0
 8001118:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 800111c:	2201      	movs	r2, #1
 800111e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001122:	2200      	movs	r2, #0
 8001124:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001126:	4b35      	ldr	r3, [pc, #212]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 8001128:	2200      	movs	r2, #0
 800112a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800112c:	4833      	ldr	r0, [pc, #204]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 800112e:	f004 fd39 	bl	8005ba4 <HAL_CAN_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8001142:	f002 f9db 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  M1.ID=0x201;
 8001146:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <_ZL12MX_CAN1_Initv+0x128>)
 8001148:	f240 2201 	movw	r2, #513	; 0x201
 800114c:	809a      	strh	r2, [r3, #4]
  M2.ID=0X202;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <_ZL12MX_CAN1_Initv+0x12c>)
 8001150:	f240 2202 	movw	r2, #514	; 0x202
 8001154:	809a      	strh	r2, [r3, #4]
  M3.ID=0x203;
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <_ZL12MX_CAN1_Initv+0x130>)
 8001158:	f240 2203 	movw	r2, #515	; 0x203
 800115c:	809a      	strh	r2, [r3, #4]
  M4.ID=0x204;
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <_ZL12MX_CAN1_Initv+0x134>)
 8001160:	f44f 7201 	mov.w	r2, #516	; 0x204
 8001164:	809a      	strh	r2, [r3, #4]
  sFilterConfig.FilterBank = 0;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001174:	2201      	movs	r2, #1
 8001176:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x205;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800117a:	f240 2205 	movw	r2, #517	; 0x205
 800117e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x200;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001186:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 800119c:	2201      	movs	r2, #1
 800119e:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 80011a2:	220e      	movs	r2, #14
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80011a6:	491b      	ldr	r1, [pc, #108]	; (8001214 <_ZL12MX_CAN1_Initv+0x138>)
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80011aa:	f004 fdf7 	bl	8005d9c <HAL_CAN_ConfigFilter>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_ZL12MX_CAN1_Initv+0xe6>
    	Error_Handler();
 80011be:	f002 f99d 	bl	80034fc <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80011c4:	f004 feca 	bl	8005f5c <HAL_CAN_Start>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <_ZL12MX_CAN1_Initv+0x100>
    	Error_Handler();
 80011d8:	f002 f990 	bl	80034fc <Error_Handler>
  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80011dc:	2102      	movs	r1, #2
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <_ZL12MX_CAN1_Initv+0x120>)
 80011e0:	f005 f916 	bl	8006410 <HAL_CAN_ActivateNotification>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <_ZL12MX_CAN1_Initv+0x11c>
    	Error_Handler();
 80011f4:	f002 f982 	bl	80034fc <Error_Handler>
  }


  /* USER CODE END CAN1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000310 	.word	0x20000310
 8001200:	40006400 	.word	0x40006400
 8001204:	200007d4 	.word	0x200007d4
 8001208:	200007dc 	.word	0x200007dc
 800120c:	200007e4 	.word	0x200007e4
 8001210:	200007ec 	.word	0x200007ec
 8001214:	20000828 	.word	0x20000828

08001218 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <_ZL12MX_SPI2_Initv+0x74>)
 8001220:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001228:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001238:	2202      	movs	r2, #2
 800123a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800123e:	2201      	movs	r2, #1
 8001240:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001248:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800124c:	2238      	movs	r2, #56	; 0x38
 800124e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001258:	2200      	movs	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 8001264:	220a      	movs	r2, #10
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <_ZL12MX_SPI2_Initv+0x70>)
 800126a:	f006 ffeb 	bl	8008244 <HAL_SPI_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800127e:	f002 f93d 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000338 	.word	0x20000338
 800128c:	40003800 	.word	0x40003800

08001290 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0318 	add.w	r3, r7, #24
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012ae:	463b      	mov	r3, r7
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012bc:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <_ZL12MX_TIM3_Initv+0x110>)
 80012be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012e0:	482e      	ldr	r0, [pc, #184]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 80012e2:	f007 fac5 	bl	8008870 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <_ZL12MX_TIM3_Initv+0x6a>
  {
    Error_Handler();
 80012f6:	f002 f901 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	4619      	mov	r1, r3
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 8001308:	f008 f870 	bl	80093ec <HAL_TIM_ConfigClockSource>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <_ZL12MX_TIM3_Initv+0x90>
  {
    Error_Handler();
 800131c:	f002 f8ee 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 8001322:	f007 fc87 	bl	8008c34 <HAL_TIM_IC_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf14      	ite	ne
 800132c:	2301      	movne	r3, #1
 800132e:	2300      	moveq	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <_ZL12MX_TIM3_Initv+0xaa>
  {
    Error_Handler();
 8001336:	f002 f8e1 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 800134a:	f008 fd85 	bl	8009e58 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_ZL12MX_TIM3_Initv+0xd2>
  {
    Error_Handler();
 800135e:	f002 f8cd 	bl	80034fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001366:	2301      	movs	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	4619      	mov	r1, r3
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <_ZL12MX_TIM3_Initv+0x10c>)
 800137a:	f007 fed8 	bl	800912e <HAL_TIM_IC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf14      	ite	ne
 8001384:	2301      	movne	r3, #1
 8001386:	2300      	moveq	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 800138e:	f002 f8b5 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000390 	.word	0x20000390
 80013a0:	40000400 	.word	0x40000400

080013a4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013d6:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <_ZL12MX_TIM4_Initv+0x13c>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 640-1;
 80013da:	4b40      	ldr	r3, [pc, #256]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013dc:	f240 227f 	movw	r2, #639	; 0x27f
 80013e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80013e8:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013fc:	4837      	ldr	r0, [pc, #220]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80013fe:	f007 fa37 	bl	8008870 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001412:	f002 f873 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800141c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001420:	4619      	mov	r1, r3
 8001422:	482e      	ldr	r0, [pc, #184]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 8001424:	f007 ffe2 	bl	80093ec <HAL_TIM_ConfigClockSource>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001438:	f002 f860 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800143c:	4827      	ldr	r0, [pc, #156]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 800143e:	f007 fad7 	bl	80089f0 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001452:	f002 f853 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	4619      	mov	r1, r3
 8001464:	481d      	ldr	r0, [pc, #116]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 8001466:	f008 fcf7 	bl	8009e58 <HAL_TIMEx_MasterConfigSynchronization>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800147a:	f002 f83f 	bl	80034fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 8001496:	f007 fee7 	bl	8009268 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf14      	ite	ne
 80014a0:	2301      	movne	r3, #1
 80014a2:	2300      	moveq	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 80014aa:	f002 f827 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80014b6:	f007 fed7 	bl	8009268 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL12MX_TIM4_Initv+0x12a>
  {
    Error_Handler();
 80014ca:	f002 f817 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <_ZL12MX_TIM4_Initv+0x138>)
 80014d0:	f003 ffca 	bl	8005468 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200003d8 	.word	0x200003d8
 80014e0:	40000800 	.word	0x40000800

080014e4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00c fdf3 	bl	800e0de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <_ZL12MX_TIM5_Initv+0xb8>)
 8001504:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001506:	4b24      	ldr	r3, [pc, #144]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001518:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001552:	f007 fbc8 	bl	8008ce6 <HAL_TIM_Encoder_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf14      	ite	ne
 800155c:	2301      	movne	r3, #1
 800155e:	2300      	moveq	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8001566:	f001 ffc9 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <_ZL12MX_TIM5_Initv+0xb4>)
 8001578:	f008 fc6e 	bl	8009e58 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 800158c:	f001 ffb6 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	3730      	adds	r7, #48	; 0x30
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000420 	.word	0x20000420
 800159c:	40000c00 	.word	0x40000c00

080015a0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	; 0x58
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00c fd80 	bl	800e0de <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015de:	4b56      	ldr	r3, [pc, #344]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015e0:	4a56      	ldr	r2, [pc, #344]	; (800173c <_ZL12MX_TIM8_Initv+0x19c>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2650-1;
 80015e4:	4b54      	ldr	r3, [pc, #336]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015e6:	f640 2259 	movw	r2, #2649	; 0xa59
 80015ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b52      	ldr	r3, [pc, #328]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80015f2:	4b51      	ldr	r3, [pc, #324]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015f4:	2263      	movs	r2, #99	; 0x63
 80015f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b4f      	ldr	r3, [pc, #316]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800160a:	484b      	ldr	r0, [pc, #300]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 800160c:	f007 f930 	bl	8008870 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 8001620:	f001 ff6c 	bl	80034fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800162a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800162e:	4619      	mov	r1, r3
 8001630:	4841      	ldr	r0, [pc, #260]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001632:	f007 fedb 	bl	80093ec <HAL_TIM_ConfigClockSource>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf14      	ite	ne
 800163c:	2301      	movne	r3, #1
 800163e:	2300      	moveq	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 8001646:	f001 ff59 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800164a:	483b      	ldr	r0, [pc, #236]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 800164c:	f007 f9d0 	bl	80089f0 <HAL_TIM_PWM_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8001660:	f001 ff4c 	bl	80034fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800166c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001670:	4619      	mov	r1, r3
 8001672:	4831      	ldr	r0, [pc, #196]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001674:	f008 fbf0 	bl	8009e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 8001688:	f001 ff38 	bl	80034fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	2200      	movs	r2, #0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4821      	ldr	r0, [pc, #132]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80016b2:	f007 fdd9 	bl	8009268 <HAL_TIM_PWM_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 80016c6:	f001 ff19 	bl	80034fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	2204      	movs	r2, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 80016d4:	f007 fdc8 	bl	8009268 <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf14      	ite	ne
 80016de:	2301      	movne	r3, #1
 80016e0:	2300      	moveq	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 80016e8:	f001 ff08 	bl	80034fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001704:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	480a      	ldr	r0, [pc, #40]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 8001710:	f008 fc1e 	bl	8009f50 <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	bf14      	ite	ne
 800171a:	2301      	movne	r3, #1
 800171c:	2300      	moveq	r3, #0
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 8001724:	f001 feea 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <_ZL12MX_TIM8_Initv+0x198>)
 800172a:	f003 fe9d 	bl	8005468 <HAL_TIM_MspPostInit>

}
 800172e:	bf00      	nop
 8001730:	3758      	adds	r7, #88	; 0x58
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000468 	.word	0x20000468
 800173c:	40010400 	.word	0x40010400

08001740 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_ZL13MX_UART4_Initv+0x58>)
 8001748:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <_ZL13MX_UART4_Initv+0x54>)
 8001778:	f008 fc50 	bl	800a01c <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	bf14      	ite	ne
 8001782:	2301      	movne	r3, #1
 8001784:	2300      	moveq	r3, #0
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800178c:	f001 feb6 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200004b0 	.word	0x200004b0
 8001798:	40004c00 	.word	0x40004c00

0800179c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_ZL19MX_USART2_UART_Initv+0x58>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017d4:	f008 fc22 	bl	800a01c <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bf14      	ite	ne
 80017de:	2301      	movne	r3, #1
 80017e0:	2300      	moveq	r3, #0
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80017e8:	f001 fe88 	bl	80034fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200004f8 	.word	0x200004f8
 80017f4:	40004400 	.word	0x40004400

080017f8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <_ZL11MX_DMA_Initv+0x6c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <_ZL11MX_DMA_Initv+0x6c>)
 8001808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_ZL11MX_DMA_Initv+0x6c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2105      	movs	r1, #5
 800181e:	200d      	movs	r0, #13
 8001820:	f005 f904 	bl	8006a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001824:	200d      	movs	r0, #13
 8001826:	f005 f91d 	bl	8006a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2105      	movs	r1, #5
 800182e:	200f      	movs	r0, #15
 8001830:	f005 f8fc 	bl	8006a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001834:	200f      	movs	r0, #15
 8001836:	f005 f915 	bl	8006a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	2010      	movs	r0, #16
 8001840:	f005 f8f4 	bl	8006a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001844:	2010      	movs	r0, #16
 8001846:	f005 f90d 	bl	8006a64 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2011      	movs	r0, #17
 8001850:	f005 f8ec 	bl	8006a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001854:	2011      	movs	r0, #17
 8001856:	f005 f905 	bl	8006a64 <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a54      	ldr	r2, [pc, #336]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a46      	ldr	r2, [pc, #280]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b44      	ldr	r3, [pc, #272]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a3f      	ldr	r2, [pc, #252]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b3d      	ldr	r3, [pc, #244]	; (80019d8 <_ZL12MX_GPIO_Initv+0x170>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S2_Pin|S3_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 80018f4:	4839      	ldr	r0, [pc, #228]	; (80019dc <_ZL12MX_GPIO_Initv+0x174>)
 80018f6:	f005 fe71 	bl	80075dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2102      	movs	r1, #2
 80018fe:	4838      	ldr	r0, [pc, #224]	; (80019e0 <_ZL12MX_GPIO_Initv+0x178>)
 8001900:	f005 fe6c 	bl	80075dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 7140 	mov.w	r1, #768	; 0x300
 800190a:	4836      	ldr	r0, [pc, #216]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 800190c:	f005 fe66 	bl	80075dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001916:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	482f      	ldr	r0, [pc, #188]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001928:	f005 fcac 	bl	8007284 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP1_Pin DOWN2_Pin DOWN1_Pin BALL1_Pin */
  GPIO_InitStruct.Pin = UP1_Pin|DOWN2_Pin|DOWN1_Pin|BALL1_Pin;
 800192c:	230f      	movs	r3, #15
 800192e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4829      	ldr	r0, [pc, #164]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 8001940:	f005 fca0 	bl	8007284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BALL2_Pin */
  GPIO_InitStruct.Pin = BALL2_Pin;
 8001944:	2310      	movs	r3, #16
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BALL2_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4821      	ldr	r0, [pc, #132]	; (80019dc <_ZL12MX_GPIO_Initv+0x174>)
 8001958:	f005 fc94 	bl	8007284 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S3_Pin IN4_Pin IN3_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S3_Pin|IN4_Pin|IN3_Pin;
 800195c:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4819      	ldr	r0, [pc, #100]	; (80019dc <_ZL12MX_GPIO_Initv+0x174>)
 8001976:	f005 fc85 	bl	8007284 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP2_Pin IR_Pin */
  GPIO_InitStruct.Pin = UP2_Pin|IR_Pin;
 800197a:	f240 2301 	movw	r3, #513	; 0x201
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4814      	ldr	r0, [pc, #80]	; (80019e0 <_ZL12MX_GPIO_Initv+0x178>)
 8001990:	f005 fc78 	bl	8007284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001994:	2302      	movs	r3, #2
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <_ZL12MX_GPIO_Initv+0x178>)
 80019ac:	f005 fc6a 	bl	8007284 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN1_Pin;
 80019b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b6:	2301      	movs	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c2:	f107 0314 	add.w	r3, r7, #20
 80019c6:	4619      	mov	r1, r3
 80019c8:	4806      	ldr	r0, [pc, #24]	; (80019e4 <_ZL12MX_GPIO_Initv+0x17c>)
 80019ca:	f005 fc5b 	bl	8007284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40020800 	.word	0x40020800

080019e8 <_Z7MotorUpv>:
//		  }
//	  }
//}

void MotorUp(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <_Z7MotorUpv+0x20>)
 80019f4:	f005 fdf2 	bl	80075dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <_Z7MotorUpv+0x20>)
 8001a00:	f005 fdec 	bl	80075dc <HAL_GPIO_WritePin>
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40020800 	.word	0x40020800

08001a0c <_Z9MotorDownv>:

void MotorDown(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <_Z9MotorDownv+0x20>)
 8001a18:	f005 fde0 	bl	80075dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a22:	4802      	ldr	r0, [pc, #8]	; (8001a2c <_Z9MotorDownv+0x20>)
 8001a24:	f005 fdda 	bl	80075dc <HAL_GPIO_WritePin>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40020800 	.word	0x40020800

08001a30 <_Z9MotorStopv>:

void MotorStop(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	TIM8 -> CCR1 = 99;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_Z9MotorStopv+0x28>)
 8001a36:	2263      	movs	r2, #99	; 0x63
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a40:	4806      	ldr	r0, [pc, #24]	; (8001a5c <_Z9MotorStopv+0x2c>)
 8001a42:	f005 fdcb 	bl	80075dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4c:	4803      	ldr	r0, [pc, #12]	; (8001a5c <_Z9MotorStopv+0x2c>)
 8001a4e:	f005 fdc5 	bl	80075dc <HAL_GPIO_WritePin>
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40010400 	.word	0x40010400
 8001a5c:	40020800 	.word	0x40020800

08001a60 <_Z12calculatePIDv>:

void calculatePID()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	cTime = HAL_GetTick();
 8001a64:	f004 f86e 	bl	8005b44 <HAL_GetTick>
 8001a68:	ee07 0a90 	vmov	s15, r0
 8001a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <_Z12calculatePIDv+0x11c>)
 8001a72:	edc3 7a00 	vstr	s15, [r3]
	Motor.my_pos = ((int32_t)TIM5->CNT)/100;
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <_Z12calculatePIDv+0x120>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4a42      	ldr	r2, [pc, #264]	; (8001b84 <_Z12calculatePIDv+0x124>)
 8001a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a80:	1152      	asrs	r2, r2, #5
 8001a82:	17db      	asrs	r3, r3, #31
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001a88:	6053      	str	r3, [r2, #4]
	dTime = (cTime - pTime)/10000;
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <_Z12calculatePIDv+0x11c>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <_Z12calculatePIDv+0x12c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001b90 <_Z12calculatePIDv+0x130>
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	4b3c      	ldr	r3, [pc, #240]	; (8001b94 <_Z12calculatePIDv+0x134>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	DC_pid.error = Motor.target_pos - Motor.my_pos;
 8001aa8:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ab4:	60d3      	str	r3, [r2, #12]
	DC_pid.I_error += (DC_pid.error * dTime);
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	4b35      	ldr	r3, [pc, #212]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <_Z12calculatePIDv+0x134>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae0:	ee17 2a90 	vmov	r2, s15
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001ae6:	611a      	str	r2, [r3, #16]
	DC_pid.D_error = (DC_pid.error - DC_pid.lastError)/dTime;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <_Z12calculatePIDv+0x134>)
 8001afc:	ed93 7a00 	vldr	s14, [r3]
 8001b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b08:	ee17 2a90 	vmov	r2, s15
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b0e:	615a      	str	r2, [r3, #20]
	Motor.ControlSignal = (DC_pid.KP*DC_pid.error) + (DC_pid.I_error*DC_pid.KI) + (DC_pid.D_error*DC_pid.KD);
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <_Z12calculatePIDv+0x128>)
 8001b5c:	edc3 7a02 	vstr	s15, [r3, #8]
	HAL_Delay(1);
 8001b60:	2001      	movs	r0, #1
 8001b62:	f003 fffb 	bl	8005b5c <HAL_Delay>
	pTime = cTime;
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <_Z12calculatePIDv+0x11c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a08      	ldr	r2, [pc, #32]	; (8001b8c <_Z12calculatePIDv+0x12c>)
 8001b6c:	6013      	str	r3, [r2, #0]
	DC_pid.lastError = DC_pid.error;
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <_Z12calculatePIDv+0x138>)
 8001b74:	6193      	str	r3, [r2, #24]
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200006f8 	.word	0x200006f8
 8001b80:	40000c00 	.word	0x40000c00
 8001b84:	51eb851f 	.word	0x51eb851f
 8001b88:	200007f4 	.word	0x200007f4
 8001b8c:	200006fc 	.word	0x200006fc
 8001b90:	461c4000 	.word	0x461c4000
 8001b94:	20000700 	.word	0x20000700
 8001b98:	200007b8 	.word	0x200007b8

08001b9c <_Z10motorspeedv>:

void motorspeed(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	if(Motor.ControlSignal<0)
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001ba2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d504      	bpl.n	8001bba <_Z10motorspeedv+0x1e>
		motor_dir = -1;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001bb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e00e      	b.n	8001bd8 <_Z10motorspeedv+0x3c>
	else if(Motor.ControlSignal>0)
 8001bba:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	dd03      	ble.n	8001bd2 <_Z10motorspeedv+0x36>
		motor_dir = 1;
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e002      	b.n	8001bd8 <_Z10motorspeedv+0x3c>
	else
		motor_dir = 0;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
	Motor.PWM = (int)fabs(Motor.ControlSignal);
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	f7ff f949 	bl	8000e78 <_ZSt4fabsf>
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
 8001bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bee:	ee17 2a90 	vmov	r2, s15
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bf4:	60da      	str	r2, [r3, #12]
	if(Motor.PWM > 300)
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bfe:	dd02      	ble.n	8001c06 <_Z10motorspeedv+0x6a>
		TIM8 -> CCR1 = 99;
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <_Z10motorspeedv+0xb0>)
 8001c02:	2263      	movs	r2, #99	; 0x63
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
//	TIM8 -> CCR2 = 50;
	if(Motor.PWM < 300 && DC_pid.error != 0){
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <_Z10motorspeedv+0xa8>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c0e:	da06      	bge.n	8001c1e <_Z10motorspeedv+0x82>
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <_Z10motorspeedv+0xb4>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <_Z10motorspeedv+0x82>
		TIM8 -> CCR1 = 40;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <_Z10motorspeedv+0xb0>)
 8001c1a:	2228      	movs	r2, #40	; 0x28
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(motor_dir == 1){
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <_Z10motorspeedv+0x90>
		MotorUp();
 8001c26:	f7ff fedf 	bl	80019e8 <_Z7MotorUpv>
	}else if(motor_dir == (-1)){
		MotorDown();
	}else{
		MotorStop();
	}
}
 8001c2a:	e009      	b.n	8001c40 <_Z10motorspeedv+0xa4>
	}else if(motor_dir == (-1)){
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <_Z10motorspeedv+0xac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c34:	d102      	bne.n	8001c3c <_Z10motorspeedv+0xa0>
		MotorDown();
 8001c36:	f7ff fee9 	bl	8001a0c <_Z9MotorDownv>
}
 8001c3a:	e001      	b.n	8001c40 <_Z10motorspeedv+0xa4>
		MotorStop();
 8001c3c:	f7ff fef8 	bl	8001a30 <_Z9MotorStopv>
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200007f4 	.word	0x200007f4
 8001c48:	20000708 	.word	0x20000708
 8001c4c:	40010400 	.word	0x40010400
 8001c50:	200007b8 	.word	0x200007b8

08001c54 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
//	uint8_t rxData[8];
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, rxData);
 8001c5c:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c5e:	4a60      	ldr	r2, [pc, #384]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	4860      	ldr	r0, [pc, #384]	; (8001de4 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001c64:	f004 fab2 	bl	80061cc <HAL_CAN_GetRxMessage>
	if(rxHeader.StdId == 0x201){
 8001c68:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f240 2201 	movw	r2, #513	; 0x201
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d126      	bne.n	8001cc2 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
		M1.en_speed = rxData[2] << 8;
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c7e:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed + rxData[3];
 8001c80:	4b59      	ldr	r3, [pc, #356]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001c8a:	78db      	ldrb	r3, [r3, #3]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	4b54      	ldr	r3, [pc, #336]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c96:	80da      	strh	r2, [r3, #6]
		M1.en_speed = M1.en_speed * 1.5;
 8001c98:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001c9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc10 	bl	80004c4 <__aeabi_i2d>
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001caa:	f7fe fc75 	bl	8000598 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe ff1f 	bl	8000af8 <__aeabi_d2iz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	4b4a      	ldr	r3, [pc, #296]	; (8001de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001cc0:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x202){
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f240 2202 	movw	r2, #514	; 0x202
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d126      	bne.n	8001d1c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		M2.en_speed = rxData[2] << 8;
 8001cce:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cd8:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed + rxData[3];
 8001cda:	4b45      	ldr	r3, [pc, #276]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cdc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001ce4:	78db      	ldrb	r3, [r3, #3]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cf0:	80da      	strh	r2, [r3, #6]
		M2.en_speed = M2.en_speed * 1.5;
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001cf4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fbe3 	bl	80004c4 <__aeabi_i2d>
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001d04:	f7fe fc48 	bl	8000598 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fef2 	bl	8000af8 <__aeabi_d2iz>
 8001d14:	4603      	mov	r3, r0
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8001d1a:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x203){
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f240 2203 	movw	r2, #515	; 0x203
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d126      	bne.n	8001d76 <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
		M3.en_speed = rxData[2] << 8;
 8001d28:	4b2c      	ldr	r3, [pc, #176]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d32:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed + rxData[3];
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b21a      	sxth	r2, r3
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d4a:	80da      	strh	r2, [r3, #6]
		M3.en_speed = M3.en_speed * 1.5;
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbb6 	bl	80004c4 <__aeabi_i2d>
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001d5e:	f7fe fc1b 	bl	8000598 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fec5 	bl	8000af8 <__aeabi_d2iz>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8001d74:	80da      	strh	r2, [r3, #6]
	}
	if(rxHeader.StdId == 0x204){
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8001d7e:	d129      	bne.n	8001dd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		M4.en_speed = rxData[2] << 8;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d82:	789b      	ldrb	r3, [r3, #2]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001d8a:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed + rxData[3];
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001d8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001d96:	78db      	ldrb	r3, [r3, #3]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001da2:	80da      	strh	r2, [r3, #6]
		M4.en_speed = M4.en_speed * 1.5;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001da6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb8a 	bl	80004c4 <__aeabi_i2d>
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001db6:	f7fe fbef 	bl	8000598 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fe99 	bl	8000af8 <__aeabi_d2iz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8001dcc:	80da      	strh	r2, [r3, #6]
		vel_up = 1;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000740 	.word	0x20000740
 8001de0:	20000850 	.word	0x20000850
 8001de4:	20000310 	.word	0x20000310
 8001de8:	200007d4 	.word	0x200007d4
 8001dec:	3ff80000 	.word	0x3ff80000
 8001df0:	200007dc 	.word	0x200007dc
 8001df4:	200007e4 	.word	0x200007e4
 8001df8:	200007ec 	.word	0x200007ec
 8001dfc:	20000704 	.word	0x20000704

08001e00 <_Z12can_transmitP17CAN_HandleTypeDeftssss>:
void can_transmit(CAN_HandleTypeDef* hcan, uint16_t id, int16_t msg1, int16_t msg2, int16_t msg3, int16_t msg4){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	4608      	mov	r0, r1
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4603      	mov	r3, r0
 8001e10:	817b      	strh	r3, [r7, #10]
 8001e12:	460b      	mov	r3, r1
 8001e14:	813b      	strh	r3, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80fb      	strh	r3, [r7, #6]
    CAN_TxHeaderTypeDef tx_header;
//    uint8_t             data[8];
//    uint32_t            pTxMailbox;

    tx_header.StdId = id;
 8001e1a:	897b      	ldrh	r3, [r7, #10]
 8001e1c:	613b      	str	r3, [r7, #16]
    tx_header.IDE   = CAN_ID_STD;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
    tx_header.RTR   = CAN_RTR_DATA;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    tx_header.DLC   = CAN_DATA_SIZE;
 8001e26:	2308      	movs	r3, #8
 8001e28:	623b      	str	r3, [r7, #32]
    tx_header.TransmitGlobalTime = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[0] = msg1 >> 8;
 8001e30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e34:	121b      	asrs	r3, r3, #8
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e3c:	701a      	strb	r2, [r3, #0]
    data[1] = msg1;
 8001e3e:	893b      	ldrh	r3, [r7, #8]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e44:	705a      	strb	r2, [r3, #1]
    data[2] = msg2 >> 8;
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	121b      	asrs	r3, r3, #8
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e52:	709a      	strb	r2, [r3, #2]
    data[3] = msg2;
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e5a:	70da      	strb	r2, [r3, #3]
    data[4] = msg3 >> 8;
 8001e5c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001e60:	121b      	asrs	r3, r3, #8
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e68:	711a      	strb	r2, [r3, #4]
    data[5] = msg3;
 8001e6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e70:	715a      	strb	r2, [r3, #5]
    data[6] = msg4 >> 8;
 8001e72:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001e76:	121b      	asrs	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e7e:	719a      	strb	r2, [r3, #6]
    data[7] = msg4;
 8001e80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e86:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_AddTxMessage(hcan, &tx_header, data, &pTxMailbox) == HAL_OK){
 8001e88:	f107 0110 	add.w	r1, r7, #16
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xd0>)
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xcc>)
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f004 f8a7 	bl	8005fe4 <HAL_CAN_AddTxMessage>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xc4>
        while (HAL_CAN_IsTxMessagePending(hcan, pTxMailbox));
 8001ea6:	bf00      	nop
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xd0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f004 f968 	bl	8006184 <HAL_CAN_IsTxMessagePending>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f1      	bne.n	8001ea8 <_Z12can_transmitP17CAN_HandleTypeDeftssss+0xa8>
    }
}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000734 	.word	0x20000734
 8001ed0:	2000073c 	.word	0x2000073c

08001ed4 <_Z10Wheel_taskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Wheel_task */
void Wheel_task(void const * argument)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	M1_pid.KP = 1.5;
 8001edc:	4ba9      	ldr	r3, [pc, #676]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001ede:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001ee2:	601a      	str	r2, [r3, #0]
	M1_pid.KI = 0.0005;
 8001ee4:	4ba7      	ldr	r3, [pc, #668]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001ee6:	4aa8      	ldr	r2, [pc, #672]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001ee8:	605a      	str	r2, [r3, #4]
	M1_pid.KD = 0.01;
 8001eea:	4ba6      	ldr	r3, [pc, #664]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001eec:	4aa7      	ldr	r2, [pc, #668]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001eee:	609a      	str	r2, [r3, #8]

	M2_pid.KP = 1.5;
 8001ef0:	4ba7      	ldr	r3, [pc, #668]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ef2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001ef6:	601a      	str	r2, [r3, #0]
	M2_pid.KI = 0.0005;
 8001ef8:	4ba5      	ldr	r3, [pc, #660]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001efa:	4aa3      	ldr	r2, [pc, #652]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001efc:	605a      	str	r2, [r3, #4]
	M2_pid.KD = 0.01;
 8001efe:	4ba4      	ldr	r3, [pc, #656]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001f00:	4aa2      	ldr	r2, [pc, #648]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001f02:	609a      	str	r2, [r3, #8]

	M3_pid.KP = 1.5;
 8001f04:	4ba3      	ldr	r3, [pc, #652]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8001f06:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001f0a:	601a      	str	r2, [r3, #0]
	M3_pid.KI = 0.0005;
 8001f0c:	4ba1      	ldr	r3, [pc, #644]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8001f0e:	4a9e      	ldr	r2, [pc, #632]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001f10:	605a      	str	r2, [r3, #4]
	M3_pid.KD = 0.01;
 8001f12:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8001f14:	4a9d      	ldr	r2, [pc, #628]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001f16:	609a      	str	r2, [r3, #8]

	M4_pid.KP = 1.5;
 8001f18:	4b9f      	ldr	r3, [pc, #636]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8001f1a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8001f1e:	601a      	str	r2, [r3, #0]
	M4_pid.KI = 0.0005;
 8001f20:	4b9d      	ldr	r3, [pc, #628]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8001f22:	4a99      	ldr	r2, [pc, #612]	; (8002188 <_Z10Wheel_taskPKv+0x2b4>)
 8001f24:	605a      	str	r2, [r3, #4]
	M4_pid.KD = 0.01;
 8001f26:	4b9c      	ldr	r3, [pc, #624]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8001f28:	4a98      	ldr	r2, [pc, #608]	; (800218c <_Z10Wheel_taskPKv+0x2b8>)
 8001f2a:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {

  if(vel_up==1){
 8001f2c:	4b9b      	ldr	r3, [pc, #620]	; (800219c <_Z10Wheel_taskPKv+0x2c8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	f040 814f 	bne.w	80021d4 <_Z10Wheel_taskPKv+0x300>
	  vel_up=0;
 8001f36:	4b99      	ldr	r3, [pc, #612]	; (800219c <_Z10Wheel_taskPKv+0x2c8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
		  M1_pid.error=M1.setpoint-M1.en_speed;
 8001f3c:	4b98      	ldr	r3, [pc, #608]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 8001f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b96      	ldr	r3, [pc, #600]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 8001f46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a8d      	ldr	r2, [pc, #564]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f4e:	60d3      	str	r3, [r2, #12]
		  M1_pid.I_error+=M1_pid.error;
 8001f50:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a8a      	ldr	r2, [pc, #552]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f5c:	6113      	str	r3, [r2, #16]
		  M1_pid.D_error=M1_pid.lastError-M1_pid.error;
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	4b88      	ldr	r3, [pc, #544]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	4a86      	ldr	r2, [pc, #536]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f6a:	6153      	str	r3, [r2, #20]
		  M1_pid.lastError=M1_pid.error;
 8001f6c:	4b85      	ldr	r3, [pc, #532]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4a84      	ldr	r2, [pc, #528]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f72:	6193      	str	r3, [r2, #24]
		  M1.Out=M1_pid.KP*M1_pid.error+M1_pid.KI*M1_pid.I_error+M1_pid.KD*M1_pid.D_error;
 8001f74:	4b83      	ldr	r3, [pc, #524]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f76:	ed93 7a00 	vldr	s14, [r3]
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	4b7e      	ldr	r3, [pc, #504]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa4:	4b77      	ldr	r3, [pc, #476]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001fa6:	edd3 6a02 	vldr	s13, [r3, #8]
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <_Z10Wheel_taskPKv+0x2b0>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc2:	ee17 3a90 	vmov	r3, s15
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b75      	ldr	r3, [pc, #468]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 8001fca:	805a      	strh	r2, [r3, #2]

		  M2_pid.error=M2.setpoint-M2.en_speed;
 8001fcc:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <_Z10Wheel_taskPKv+0x2d0>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <_Z10Wheel_taskPKv+0x2d0>)
 8001fd6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	4a6c      	ldr	r2, [pc, #432]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fde:	60d3      	str	r3, [r2, #12]
		  M2_pid.I_error+=M2_pid.error;
 8001fe0:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001fec:	6113      	str	r3, [r2, #16]
		  M2_pid.D_error=M2_pid.lastError-M2_pid.error;
 8001fee:	4b68      	ldr	r3, [pc, #416]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a65      	ldr	r2, [pc, #404]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ffa:	6153      	str	r3, [r2, #20]
		  M2_pid.lastError=M2_pid.error;
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a63      	ldr	r2, [pc, #396]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002002:	6193      	str	r3, [r2, #24]
		  M2.Out=M2_pid.KP*M2_pid.error+M2_pid.KI*M2_pid.I_error+M2_pid.KD*M2_pid.D_error;
 8002004:	4b62      	ldr	r3, [pc, #392]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	4b61      	ldr	r3, [pc, #388]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 800201c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002020:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002034:	4b56      	ldr	r3, [pc, #344]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 8002036:	edd3 6a02 	vldr	s13, [r3, #8]
 800203a:	4b55      	ldr	r3, [pc, #340]	; (8002190 <_Z10Wheel_taskPKv+0x2bc>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	b21a      	sxth	r2, r3
 8002058:	4b52      	ldr	r3, [pc, #328]	; (80021a4 <_Z10Wheel_taskPKv+0x2d0>)
 800205a:	805a      	strh	r2, [r3, #2]


		  M3_pid.error=M3.setpoint-M3.en_speed;
 800205c:	4b52      	ldr	r3, [pc, #328]	; (80021a8 <_Z10Wheel_taskPKv+0x2d4>)
 800205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002062:	461a      	mov	r2, r3
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <_Z10Wheel_taskPKv+0x2d4>)
 8002066:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800206e:	60d3      	str	r3, [r2, #12]
		  M3_pid.I_error+=M3_pid.error;
 8002070:	4b48      	ldr	r3, [pc, #288]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	4b47      	ldr	r3, [pc, #284]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4413      	add	r3, r2
 800207a:	4a46      	ldr	r2, [pc, #280]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800207c:	6113      	str	r3, [r2, #16]
		  M3_pid.D_error=M3_pid.lastError-M3_pid.error;
 800207e:	4b45      	ldr	r3, [pc, #276]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4a42      	ldr	r2, [pc, #264]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800208a:	6153      	str	r3, [r2, #20]
		  M3_pid.lastError=M3_pid.error;
 800208c:	4b41      	ldr	r3, [pc, #260]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a40      	ldr	r2, [pc, #256]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002092:	6193      	str	r3, [r2, #24]
		  M3.Out=M3_pid.KP*M3_pid.error+M3_pid.KI*M3_pid.I_error+M3_pid.KD*M3_pid.D_error;
 8002094:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 8002096:	ed93 7a00 	vldr	s14, [r3]
 800209a:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80020ca:	4b32      	ldr	r3, [pc, #200]	; (8002194 <_Z10Wheel_taskPKv+0x2c0>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e2:	ee17 3a90 	vmov	r3, s15
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <_Z10Wheel_taskPKv+0x2d4>)
 80020ea:	805a      	strh	r2, [r3, #2]


		  M4_pid.error=M4.setpoint-M4.en_speed;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <_Z10Wheel_taskPKv+0x2d8>)
 80020ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <_Z10Wheel_taskPKv+0x2d8>)
 80020f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 80020fe:	60d3      	str	r3, [r2, #12]
		  M4_pid.I_error+=M4_pid.error;
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4413      	add	r3, r2
 800210a:	4a23      	ldr	r2, [pc, #140]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800210c:	6113      	str	r3, [r2, #16]
		  M4_pid.D_error=M4_pid.lastError-M4_pid.error;
 800210e:	4b22      	ldr	r3, [pc, #136]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800211a:	6153      	str	r3, [r2, #20]
		  M4_pid.lastError=M4_pid.error;
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002122:	6193      	str	r3, [r2, #24]
		  M4.Out=M4_pid.KP*M4_pid.error+M4_pid.KI*M4_pid.I_error+M4_pid.KD*M4_pid.D_error;
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800213c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002150:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 8002156:	edd3 6a02 	vldr	s13, [r3, #8]
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <_Z10Wheel_taskPKv+0x2c4>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002172:	ee17 3a90 	vmov	r3, s15
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <_Z10Wheel_taskPKv+0x2d8>)
 800217a:	805a      	strh	r2, [r3, #2]

		  can_transmit(&hcan1, FIRST_GROUP_ID, M1.Out, M2.Out, M3.Out, M4.Out);
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_Z10Wheel_taskPKv+0x2cc>)
 800217e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002182:	e015      	b.n	80021b0 <_Z10Wheel_taskPKv+0x2dc>
 8002184:	20000748 	.word	0x20000748
 8002188:	3a03126f 	.word	0x3a03126f
 800218c:	3c23d70a 	.word	0x3c23d70a
 8002190:	20000764 	.word	0x20000764
 8002194:	20000780 	.word	0x20000780
 8002198:	2000079c 	.word	0x2000079c
 800219c:	20000704 	.word	0x20000704
 80021a0:	200007d4 	.word	0x200007d4
 80021a4:	200007dc 	.word	0x200007dc
 80021a8:	200007e4 	.word	0x200007e4
 80021ac:	200007ec 	.word	0x200007ec
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <_Z10Wheel_taskPKv+0x308>)
 80021b2:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <_Z10Wheel_taskPKv+0x30c>)
 80021b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <_Z10Wheel_taskPKv+0x310>)
 80021be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <_Z10Wheel_taskPKv+0x314>)
 80021d0:	f7ff fe16 	bl	8001e00 <_Z12can_transmitP17CAN_HandleTypeDeftssss>
 }

    osDelay(5);
 80021d4:	2005      	movs	r0, #5
 80021d6:	f009 f95c 	bl	800b492 <osDelay>
  if(vel_up==1){
 80021da:	e6a7      	b.n	8001f2c <_Z10Wheel_taskPKv+0x58>
 80021dc:	200007dc 	.word	0x200007dc
 80021e0:	200007e4 	.word	0x200007e4
 80021e4:	200007ec 	.word	0x200007ec
 80021e8:	20000310 	.word	0x20000310
 80021ec:	00000000 	.word	0x00000000

080021f0 <_Z14task2_joystickPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_joystick */
void task2_joystick(void const * argument)
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b0a0      	sub	sp, #128	; 0x80
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	6778      	str	r0, [r7, #116]	; 0x74
  /* USER CODE BEGIN task2_joystick */

  /* Infinite loop */
  for(;;)
  {
	  spi_enable;
 80021fa:	2200      	movs	r2, #0
 80021fc:	2102      	movs	r1, #2
 80021fe:	4888      	ldr	r0, [pc, #544]	; (8002420 <_Z14task2_joystickPKv+0x230>)
 8002200:	f005 f9ec 	bl	80075dc <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi2, HC_PS2_TX, HC_PS2_RX, 9, 10);
 8002204:	230a      	movs	r3, #10
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2309      	movs	r3, #9
 800220a:	4a86      	ldr	r2, [pc, #536]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 800220c:	4986      	ldr	r1, [pc, #536]	; (8002428 <_Z14task2_joystickPKv+0x238>)
 800220e:	4887      	ldr	r0, [pc, #540]	; (800242c <_Z14task2_joystickPKv+0x23c>)
 8002210:	f006 f8a1 	bl	8008356 <HAL_SPI_TransmitReceive>
	  spi_disable;
 8002214:	2201      	movs	r2, #1
 8002216:	2102      	movs	r1, #2
 8002218:	4881      	ldr	r0, [pc, #516]	; (8002420 <_Z14task2_joystickPKv+0x230>)
 800221a:	f005 f9df 	bl	80075dc <HAL_GPIO_WritePin>
	  PS2.LY=-(HC_PS2_RX[8]-127);
 800221e:	4b81      	ldr	r3, [pc, #516]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002220:	7a1b      	ldrb	r3, [r3, #8]
 8002222:	f1c3 027f 	rsb	r2, r3, #127	; 0x7f
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002228:	601a      	str	r2, [r3, #0]
	  PS2.LX=(HC_PS2_RX[7]-127);
 800222a:	4b7e      	ldr	r3, [pc, #504]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 800222c:	79db      	ldrb	r3, [r3, #7]
 800222e:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002234:	605a      	str	r2, [r3, #4]
	  PS2.RY=HC_PS2_RX[6]-128;
 8002236:	4b7b      	ldr	r3, [pc, #492]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002238:	799b      	ldrb	r3, [r3, #6]
 800223a:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 800223e:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002240:	609a      	str	r2, [r3, #8]
	  PS2.RX=HC_PS2_RX[5]-128;
 8002242:	4b78      	ldr	r3, [pc, #480]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002244:	795b      	ldrb	r3, [r3, #5]
 8002246:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 800224a:	4b79      	ldr	r3, [pc, #484]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 800224c:	60da      	str	r2, [r3, #12]
	  PS2.X=PS2.LX/(float)128;
 800224e:	4b78      	ldr	r3, [pc, #480]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002434 <_Z14task2_joystickPKv+0x244>
 800225e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002262:	ee16 0a90 	vmov	r0, s13
 8002266:	f7fe f93f 	bl	80004e8 <__aeabi_f2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4970      	ldr	r1, [pc, #448]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002270:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  PS2.Y=PS2.LY/(float)128;
 8002274:	4b6e      	ldr	r3, [pc, #440]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002280:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002434 <_Z14task2_joystickPKv+0x244>
 8002284:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002288:	ee16 0a90 	vmov	r0, s13
 800228c:	f7fe f92c 	bl	80004e8 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4966      	ldr	r1, [pc, #408]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 8002296:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 800229a:	4b65      	ldr	r3, [pc, #404]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 800229c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022a0:	4b63      	ldr	r3, [pc, #396]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022a6:	f7fe f977 	bl	8000598 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4614      	mov	r4, r2
 80022b0:	461d      	mov	r5, r3
 80022b2:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022b4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022be:	f7fe f96b 	bl	8000598 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fd ffaf 	bl	800022c <__adddf3>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ec43 2b17 	vmov	d7, r2, r3
 80022d6:	eeb0 0a47 	vmov.f32	s0, s14
 80022da:	eef0 0a67 	vmov.f32	s1, s15
 80022de:	f00a fb85 	bl	800c9ec <sqrt>
 80022e2:	eeb0 7a40 	vmov.f32	s14, s0
 80022e6:	eef0 7a60 	vmov.f32	s15, s1
 80022ea:	4b53      	ldr	r3, [pc, #332]	; (8002438 <_Z14task2_joystickPKv+0x248>)
 80022ec:	ed83 7b00 	vstr	d7, [r3]
	  degree_a=atan2(PS2.Y,PS2.X);
 80022f0:	4b4f      	ldr	r3, [pc, #316]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022f2:	ed93 7b06 	vldr	d7, [r3, #24]
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <_Z14task2_joystickPKv+0x240>)
 80022f8:	ed93 6b04 	vldr	d6, [r3, #16]
 80022fc:	eeb0 1a46 	vmov.f32	s2, s12
 8002300:	eef0 1a66 	vmov.f32	s3, s13
 8002304:	eeb0 0a47 	vmov.f32	s0, s14
 8002308:	eef0 0a67 	vmov.f32	s1, s15
 800230c:	f00a faa6 	bl	800c85c <atan2>
 8002310:	eeb0 7a40 	vmov.f32	s14, s0
 8002314:	eef0 7a60 	vmov.f32	s15, s1
 8002318:	4b48      	ldr	r3, [pc, #288]	; (800243c <_Z14task2_joystickPKv+0x24c>)
 800231a:	ed83 7b00 	vstr	d7, [r3]
	  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <_Z14task2_joystickPKv+0x24c>)
 8002320:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002324:	4b46      	ldr	r3, [pc, #280]	; (8002440 <_Z14task2_joystickPKv+0x250>)
 8002326:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <_Z14task2_joystickPKv+0x254>)
 8002330:	f7fe fa5c 	bl	80007ec <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4620      	mov	r0, r4
 800233a:	4629      	mov	r1, r5
 800233c:	f7fd ff74 	bl	8000228 <__aeabi_dsub>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	ec43 2b17 	vmov	d7, r2, r3
 8002348:	eeb0 0a47 	vmov.f32	s0, s14
 800234c:	eef0 0a67 	vmov.f32	s1, s15
 8002350:	f00a fd7a 	bl	800ce48 <sin>
 8002354:	ec51 0b10 	vmov	r0, r1, d0
 8002358:	4b37      	ldr	r3, [pc, #220]	; (8002438 <_Z14task2_joystickPKv+0x248>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f91b 	bl	8000598 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	4b36      	ldr	r3, [pc, #216]	; (8002448 <_Z14task2_joystickPKv+0x258>)
 8002370:	f7fe f912 	bl	8000598 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <_Z14task2_joystickPKv+0x25c>)
 800237e:	e9c3 0100 	strd	r0, r1, [r3]
	  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002382:	4b2e      	ldr	r3, [pc, #184]	; (800243c <_Z14task2_joystickPKv+0x24c>)
 8002384:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <_Z14task2_joystickPKv+0x250>)
 800238a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <_Z14task2_joystickPKv+0x254>)
 8002394:	f7fe fa2a 	bl	80007ec <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4620      	mov	r0, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	f7fd ff42 	bl	8000228 <__aeabi_dsub>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	ec43 2b17 	vmov	d7, r2, r3
 80023ac:	eeb0 0a47 	vmov.f32	s0, s14
 80023b0:	eef0 0a67 	vmov.f32	s1, s15
 80023b4:	f00a fce8 	bl	800cd88 <cos>
 80023b8:	ec51 0b10 	vmov	r0, r1, d0
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <_Z14task2_joystickPKv+0x248>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f8e9 	bl	8000598 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <_Z14task2_joystickPKv+0x258>)
 80023d4:	f7fe f8e0 	bl	8000598 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <_Z14task2_joystickPKv+0x260>)
 80023e2:	e9c3 0100 	strd	r0, r1, [r3]
	  if(HC_PS2_RX[4]==251){
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 80023e8:	791b      	ldrb	r3, [r3, #4]
 80023ea:	2bfb      	cmp	r3, #251	; 0xfb
 80023ec:	d103      	bne.n	80023f6 <_Z14task2_joystickPKv+0x206>
		  BLDC = 1;
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <_Z14task2_joystickPKv+0x264>)
 80023f0:	2301      	movs	r3, #1
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e03e      	b.n	8002474 <_Z14task2_joystickPKv+0x284>
	  }else if(HC_PS2_RX[4]==254){
 80023f6:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	2bfe      	cmp	r3, #254	; 0xfe
 80023fc:	d103      	bne.n	8002406 <_Z14task2_joystickPKv+0x216>
		  BLDC = 2;
 80023fe:	4a15      	ldr	r2, [pc, #84]	; (8002454 <_Z14task2_joystickPKv+0x264>)
 8002400:	2302      	movs	r3, #2
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e036      	b.n	8002474 <_Z14task2_joystickPKv+0x284>
	  }else if(HC_PS2_RX[4]==247){
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <_Z14task2_joystickPKv+0x234>)
 8002408:	791b      	ldrb	r3, [r3, #4]
 800240a:	2bf7      	cmp	r3, #247	; 0xf7
 800240c:	d128      	bne.n	8002460 <_Z14task2_joystickPKv+0x270>
		  yellow=1;
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <_Z14task2_joystickPKv+0x268>)
 8002410:	2301      	movs	r3, #1
 8002412:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 1800;
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <_Z14task2_joystickPKv+0x26c>)
 8002416:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e02a      	b.n	8002474 <_Z14task2_joystickPKv+0x284>
 800241e:	bf00      	nop
 8002420:	40020400 	.word	0x40020400
 8002424:	2000071c 	.word	0x2000071c
 8002428:	20000008 	.word	0x20000008
 800242c:	20000338 	.word	0x20000338
 8002430:	20000808 	.word	0x20000808
 8002434:	43000000 	.word	0x43000000
 8002438:	200006e8 	.word	0x200006e8
 800243c:	200006f0 	.word	0x200006f0
 8002440:	20000000 	.word	0x20000000
 8002444:	40100000 	.word	0x40100000
 8002448:	40d00000 	.word	0x40d00000
 800244c:	200006d8 	.word	0x200006d8
 8002450:	200006e0 	.word	0x200006e0
 8002454:	20000718 	.word	0x20000718
 8002458:	20000710 	.word	0x20000710
 800245c:	200007f4 	.word	0x200007f4
	  }else if(HC_PS2_RX[4]==253){
 8002460:	4b9b      	ldr	r3, [pc, #620]	; (80026d0 <_Z14task2_joystickPKv+0x4e0>)
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	2bfd      	cmp	r3, #253	; 0xfd
 8002466:	d105      	bne.n	8002474 <_Z14task2_joystickPKv+0x284>
		  yellow=2;
 8002468:	4a9a      	ldr	r2, [pc, #616]	; (80026d4 <_Z14task2_joystickPKv+0x4e4>)
 800246a:	2302      	movs	r3, #2
 800246c:	6013      	str	r3, [r2, #0]
		  Motor.target_pos = 0;
 800246e:	4a9a      	ldr	r2, [pc, #616]	; (80026d8 <_Z14task2_joystickPKv+0x4e8>)
 8002470:	2300      	movs	r3, #0
 8002472:	6013      	str	r3, [r2, #0]
	  }
	  if((abs(PS2.LY) > 5 || abs(PS2.LX)>5 )&& abs(PS2.RX)<=5){
 8002474:	4b99      	ldr	r3, [pc, #612]	; (80026dc <_Z14task2_joystickPKv+0x4ec>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	bfb8      	it	lt
 800247c:	425b      	neglt	r3, r3
 800247e:	2b05      	cmp	r3, #5
 8002480:	dc07      	bgt.n	8002492 <_Z14task2_joystickPKv+0x2a2>
 8002482:	4b96      	ldr	r3, [pc, #600]	; (80026dc <_Z14task2_joystickPKv+0x4ec>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	bfb8      	it	lt
 800248a:	425b      	neglt	r3, r3
 800248c:	2b05      	cmp	r3, #5
 800248e:	f340 81ee 	ble.w	800286e <_Z14task2_joystickPKv+0x67e>
 8002492:	4b92      	ldr	r3, [pc, #584]	; (80026dc <_Z14task2_joystickPKv+0x4ec>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	bfb8      	it	lt
 800249a:	425b      	neglt	r3, r3
 800249c:	2b05      	cmp	r3, #5
 800249e:	f300 81e6 	bgt.w	800286e <_Z14task2_joystickPKv+0x67e>
		  if(ML>12000 || MR>12000){
 80024a2:	4b8f      	ldr	r3, [pc, #572]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80024a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a8:	a385      	add	r3, pc, #532	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe fb03 	bl	8000ab8 <__aeabi_dcmpgt>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <_Z14task2_joystickPKv+0x2de>
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80024ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024be:	a380      	add	r3, pc, #512	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe faf8 	bl	8000ab8 <__aeabi_dcmpgt>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d048      	beq.n	8002560 <_Z14task2_joystickPKv+0x370>
			  if(ML > MR){
 80024ce:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	4b83      	ldr	r3, [pc, #524]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe faed 	bl	8000ab8 <__aeabi_dcmpgt>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01e      	beq.n	8002522 <_Z14task2_joystickPKv+0x332>
				  MR=MR/ML*12000;
 80024e4:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80024e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ea:	4b7d      	ldr	r3, [pc, #500]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f97c 	bl	80007ec <__aeabi_ddiv>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	a370      	add	r3, pc, #448	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fe f849 	bl	8000598 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002510:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002514:	4972      	ldr	r1, [pc, #456]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002516:	a36a      	add	r3, pc, #424	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002520:	e170      	b.n	8002804 <_Z14task2_joystickPKv+0x614>

			  }
			  else{
				  ML=(ML/MR)*12000;
 8002522:	4b6f      	ldr	r3, [pc, #444]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002524:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002528:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fe f95d 	bl	80007ec <__aeabi_ddiv>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	a361      	add	r3, pc, #388	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f82a 	bl	8000598 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 800254e:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002552:	4964      	ldr	r1, [pc, #400]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002554:	a35a      	add	r3, pc, #360	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 800255e:	e151      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002562:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002566:	a358      	add	r3, pc, #352	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 8002568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256c:	f7fe fa86 	bl	8000a7c <__aeabi_dcmplt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <_Z14task2_joystickPKv+0x39c>
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800257c:	a352      	add	r3, pc, #328	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fe fa7b 	bl	8000a7c <__aeabi_dcmplt>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d054      	beq.n	8002636 <_Z14task2_joystickPKv+0x446>
			  if(ML < MR){
 800258c:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 800258e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002592:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002598:	f7fe fa70 	bl	8000a7c <__aeabi_dcmplt>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d024      	beq.n	80025ec <_Z14task2_joystickPKv+0x3fc>
				  MR=-MR/ML*12000;
 80025a2:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	66ba      	str	r2, [r7, #104]	; 0x68
 80025aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025ba:	f7fe f917 	bl	80007ec <__aeabi_ddiv>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	a33e      	add	r3, pc, #248	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd ffe4 	bl	8000598 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80025da:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 80025de:	4940      	ldr	r1, [pc, #256]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80025e0:	a339      	add	r3, pc, #228	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 80025ea:	e10b      	b.n	8002804 <_Z14task2_joystickPKv+0x614>

			  }
			  else{
				  ML=-ML/MR*12000;
 80025ec:	4b3c      	ldr	r3, [pc, #240]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	663a      	str	r2, [r7, #96]	; 0x60
 80025f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025f8:	667b      	str	r3, [r7, #100]	; 0x64
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002604:	f7fe f8f2 	bl	80007ec <__aeabi_ddiv>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	a32b      	add	r3, pc, #172	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ffbf 	bl	8000598 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002624:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002628:	492e      	ldr	r1, [pc, #184]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 800262a:	a327      	add	r3, pc, #156	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002634:	e0e6      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	a320      	add	r3, pc, #128	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f7fe fa39 	bl	8000ab8 <__aeabi_dcmpgt>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <_Z14task2_joystickPKv+0x472>
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 800264e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002652:	a31d      	add	r3, pc, #116	; (adr r3, 80026c8 <_Z14task2_joystickPKv+0x4d8>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fe fa10 	bl	8000a7c <__aeabi_dcmplt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d067      	beq.n	8002732 <_Z14task2_joystickPKv+0x542>
			  if(ML > -MR){
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002668:	4690      	mov	r8, r2
 800266a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	4640      	mov	r0, r8
 8002676:	4649      	mov	r1, r9
 8002678:	f7fe fa00 	bl	8000a7c <__aeabi_dcmplt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d032      	beq.n	80026e8 <_Z14task2_joystickPKv+0x4f8>
				  MR=MR/ML*12000;
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 8002684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	f7fe f8ad 	bl	80007ec <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	a309      	add	r3, pc, #36	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ff7a 	bl	8000598 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <_Z14task2_joystickPKv+0x4f4>)
 80026ae:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <_Z14task2_joystickPKv+0x4f0>)
 80026b4:	a302      	add	r3, pc, #8	; (adr r3, 80026c0 <_Z14task2_joystickPKv+0x4d0>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 80026be:	e0a1      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
 80026c0:	00000000 	.word	0x00000000
 80026c4:	40c77000 	.word	0x40c77000
 80026c8:	00000000 	.word	0x00000000
 80026cc:	c0c77000 	.word	0xc0c77000
 80026d0:	2000071c 	.word	0x2000071c
 80026d4:	20000710 	.word	0x20000710
 80026d8:	200007f4 	.word	0x200007f4
 80026dc:	20000808 	.word	0x20000808
 80026e0:	200006d8 	.word	0x200006d8
 80026e4:	200006e0 	.word	0x200006e0

			  }
			  else{
				  ML=-ML/MR*12000;
 80026e8:	4b91      	ldr	r3, [pc, #580]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80026f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f6:	4b8f      	ldr	r3, [pc, #572]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002700:	f7fe f874 	bl	80007ec <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	a384      	add	r3, pc, #528	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff41 	bl	8000598 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	4b84      	ldr	r3, [pc, #528]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002720:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002724:	4983      	ldr	r1, [pc, #524]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002726:	a380      	add	r3, pc, #512	; (adr r3, 8002928 <_Z14task2_joystickPKv+0x738>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002730:	e068      	b.n	8002804 <_Z14task2_joystickPKv+0x614>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 8002732:	4b80      	ldr	r3, [pc, #512]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002738:	a379      	add	r3, pc, #484	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fe f9bb 	bl	8000ab8 <__aeabi_dcmpgt>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <_Z14task2_joystickPKv+0x56e>
 8002748:	4b79      	ldr	r3, [pc, #484]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 800274a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800274e:	a376      	add	r3, pc, #472	; (adr r3, 8002928 <_Z14task2_joystickPKv+0x738>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fe f992 	bl	8000a7c <__aeabi_dcmplt>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d052      	beq.n	8002804 <_Z14task2_joystickPKv+0x614>
			  if(MR > -ML){
 800275e:	4b74      	ldr	r3, [pc, #464]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4692      	mov	sl, r2
 8002766:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800276a:	4b72      	ldr	r3, [pc, #456]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	4650      	mov	r0, sl
 8002772:	4659      	mov	r1, fp
 8002774:	f7fe f982 	bl	8000a7c <__aeabi_dcmplt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01e      	beq.n	80027bc <_Z14task2_joystickPKv+0x5cc>
				  ML=ML/MR*12000;
 800277e:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002784:	4b6b      	ldr	r3, [pc, #428]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fe f82f 	bl	80007ec <__aeabi_ddiv>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	a362      	add	r3, pc, #392	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80027aa:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 80027ae:	4961      	ldr	r1, [pc, #388]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80027b0:	a35b      	add	r3, pc, #364	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	e9c1 2300 	strd	r2, r3, [r1]
 80027ba:	e023      	b.n	8002804 <_Z14task2_joystickPKv+0x614>

			  }
			  else{
				  MR=-MR/ML*12000;
 80027bc:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	653a      	str	r2, [r7, #80]	; 0x50
 80027c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80027c8:	657b      	str	r3, [r7, #84]	; 0x54
 80027ca:	4b59      	ldr	r3, [pc, #356]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80027d4:	f7fe f80a 	bl	80007ec <__aeabi_ddiv>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	a34f      	add	r3, pc, #316	; (adr r3, 8002920 <_Z14task2_joystickPKv+0x730>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd fed7 	bl	8000598 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	4b50      	ldr	r3, [pc, #320]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 80027f4:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 80027fa:	a34b      	add	r3, pc, #300	; (adr r3, 8002928 <_Z14task2_joystickPKv+0x738>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	64ba      	str	r2, [r7, #72]	; 0x48
 800280c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002810:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002812:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002816:	f7fe f96f 	bl	8000af8 <__aeabi_d2iz>
 800281a:	4603      	mov	r3, r0
 800281c:	b21b      	sxth	r3, r3
 800281e:	4a46      	ldr	r2, [pc, #280]	; (8002938 <_Z14task2_joystickPKv+0x748>)
 8002820:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	f7fe f964 	bl	8000af8 <__aeabi_d2iz>
 8002830:	4603      	mov	r3, r0
 8002832:	b21b      	sxth	r3, r3
 8002834:	4a41      	ldr	r2, [pc, #260]	; (800293c <_Z14task2_joystickPKv+0x74c>)
 8002836:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 8002838:	4b3d      	ldr	r3, [pc, #244]	; (8002930 <_Z14task2_joystickPKv+0x740>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	643a      	str	r2, [r7, #64]	; 0x40
 8002840:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
 8002846:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800284a:	f7fe f955 	bl	8000af8 <__aeabi_d2iz>
 800284e:	4603      	mov	r3, r0
 8002850:	b21b      	sxth	r3, r3
 8002852:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <_Z14task2_joystickPKv+0x750>)
 8002854:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 8002856:	4b37      	ldr	r3, [pc, #220]	; (8002934 <_Z14task2_joystickPKv+0x744>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f94a 	bl	8000af8 <__aeabi_d2iz>
 8002864:	4603      	mov	r3, r0
 8002866:	b21b      	sxth	r3, r3
 8002868:	4a36      	ldr	r2, [pc, #216]	; (8002944 <_Z14task2_joystickPKv+0x754>)
 800286a:	8013      	strh	r3, [r2, #0]
 800286c:	e3a5      	b.n	8002fba <_Z14task2_joystickPKv+0xdca>
	  }
	  else if(abs(PS2.LY)<=5 && abs(PS2.LX)<=5 && abs(PS2.RX)>5){
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfb8      	it	lt
 8002876:	425b      	neglt	r3, r3
 8002878:	2b05      	cmp	r3, #5
 800287a:	dc69      	bgt.n	8002950 <_Z14task2_joystickPKv+0x760>
 800287c:	4b32      	ldr	r3, [pc, #200]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	bfb8      	it	lt
 8002884:	425b      	neglt	r3, r3
 8002886:	2b05      	cmp	r3, #5
 8002888:	dc62      	bgt.n	8002950 <_Z14task2_joystickPKv+0x760>
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bfb8      	it	lt
 8002892:	425b      	neglt	r3, r3
 8002894:	2b05      	cmp	r3, #5
 8002896:	dd5b      	ble.n	8002950 <_Z14task2_joystickPKv+0x760>
		  M1.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4613      	mov	r3, r2
 800289e:	049b      	lsls	r3, r3, #18
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	039b      	lsls	r3, r3, #14
 80028a4:	4619      	mov	r1, r3
 80028a6:	4b29      	ldr	r3, [pc, #164]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 80028a8:	fb83 2301 	smull	r2, r3, r3, r1
 80028ac:	115a      	asrs	r2, r3, #5
 80028ae:	17cb      	asrs	r3, r1, #31
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <_Z14task2_joystickPKv+0x748>)
 80028b6:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	049b      	lsls	r3, r3, #18
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	039b      	lsls	r3, r3, #14
 80028c4:	4619      	mov	r1, r3
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 80028c8:	fb83 2301 	smull	r2, r3, r3, r1
 80028cc:	115a      	asrs	r2, r3, #5
 80028ce:	17cb      	asrs	r3, r1, #31
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b21b      	sxth	r3, r3
 80028d4:	4a19      	ldr	r2, [pc, #100]	; (800293c <_Z14task2_joystickPKv+0x74c>)
 80028d6:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	049b      	lsls	r3, r3, #18
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	039b      	lsls	r3, r3, #14
 80028e4:	4619      	mov	r1, r3
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 80028e8:	fb83 2301 	smull	r2, r3, r3, r1
 80028ec:	115a      	asrs	r2, r3, #5
 80028ee:	17cb      	asrs	r3, r1, #31
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <_Z14task2_joystickPKv+0x754>)
 80028f6:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-MOTOR_SPEED_MAX*PS2.RX/500;
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <_Z14task2_joystickPKv+0x758>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	4613      	mov	r3, r2
 80028fe:	049b      	lsls	r3, r3, #18
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	039b      	lsls	r3, r3, #14
 8002904:	4619      	mov	r1, r3
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <_Z14task2_joystickPKv+0x75c>)
 8002908:	fb83 2301 	smull	r2, r3, r3, r1
 800290c:	115a      	asrs	r2, r3, #5
 800290e:	17cb      	asrs	r3, r1, #31
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b21b      	sxth	r3, r3
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <_Z14task2_joystickPKv+0x750>)
 8002916:	8013      	strh	r3, [r2, #0]
 8002918:	e34f      	b.n	8002fba <_Z14task2_joystickPKv+0xdca>
 800291a:	bf00      	nop
 800291c:	f3af 8000 	nop.w
 8002920:	00000000 	.word	0x00000000
 8002924:	40c77000 	.word	0x40c77000
 8002928:	00000000 	.word	0x00000000
 800292c:	c0c77000 	.word	0xc0c77000
 8002930:	200006d8 	.word	0x200006d8
 8002934:	200006e0 	.word	0x200006e0
 8002938:	200007d4 	.word	0x200007d4
 800293c:	200007dc 	.word	0x200007dc
 8002940:	200007ec 	.word	0x200007ec
 8002944:	200007e4 	.word	0x200007e4
 8002948:	20000808 	.word	0x20000808
 800294c:	10624dd3 	.word	0x10624dd3
	  }
	  else if((abs(PS2.LY)>5 || abs(PS2.LX)>5) && abs(PS2.RX)>5){
 8002950:	4ba3      	ldr	r3, [pc, #652]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	bfb8      	it	lt
 8002958:	425b      	neglt	r3, r3
 800295a:	2b05      	cmp	r3, #5
 800295c:	dc07      	bgt.n	800296e <_Z14task2_joystickPKv+0x77e>
 800295e:	4ba0      	ldr	r3, [pc, #640]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	bfb8      	it	lt
 8002966:	425b      	neglt	r3, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	f340 831a 	ble.w	8002fa2 <_Z14task2_joystickPKv+0xdb2>
 800296e:	4b9c      	ldr	r3, [pc, #624]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	bfb8      	it	lt
 8002976:	425b      	neglt	r3, r3
 8002978:	2b05      	cmp	r3, #5
 800297a:	f340 8312 	ble.w	8002fa2 <_Z14task2_joystickPKv+0xdb2>
		  PS2.X=PS2.LX/(float)128;
 800297e:	4b98      	ldr	r3, [pc, #608]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002be4 <_Z14task2_joystickPKv+0x9f4>
 800298e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002992:	ee16 0a90 	vmov	r0, s13
 8002996:	f7fd fda7 	bl	80004e8 <__aeabi_f2d>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4990      	ldr	r1, [pc, #576]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  PS2.Y=PS2.LY/(float)128;
 80029a4:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002be4 <_Z14task2_joystickPKv+0x9f4>
 80029b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029b8:	ee16 0a90 	vmov	r0, s13
 80029bc:	f7fd fd94 	bl	80004e8 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4986      	ldr	r1, [pc, #536]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  speed=sqrt(PS2.X*PS2.X+PS2.Y*PS2.Y);
 80029ca:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029d0:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029d6:	f7fd fddf 	bl	8000598 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4614      	mov	r4, r2
 80029e0:	461d      	mov	r5, r3
 80029e2:	4b7f      	ldr	r3, [pc, #508]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029e4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029e8:	4b7d      	ldr	r3, [pc, #500]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 80029ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029ee:	f7fd fdd3 	bl	8000598 <__aeabi_dmul>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc17 	bl	800022c <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	ec43 2b17 	vmov	d7, r2, r3
 8002a06:	eeb0 0a47 	vmov.f32	s0, s14
 8002a0a:	eef0 0a67 	vmov.f32	s1, s15
 8002a0e:	f009 ffed 	bl	800c9ec <sqrt>
 8002a12:	eeb0 7a40 	vmov.f32	s14, s0
 8002a16:	eef0 7a60 	vmov.f32	s15, s1
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <_Z14task2_joystickPKv+0x9f8>)
 8002a1c:	ed83 7b00 	vstr	d7, [r3]
//				  speed=1;
//			  }
//			  if(speed<=-1){
//				  speed=-1;
//			  }
		  degree_a=atan2(PS2.Y,PS2.X);
 8002a20:	4b6f      	ldr	r3, [pc, #444]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002a22:	ed93 7b06 	vldr	d7, [r3, #24]
 8002a26:	4b6e      	ldr	r3, [pc, #440]	; (8002be0 <_Z14task2_joystickPKv+0x9f0>)
 8002a28:	ed93 6b04 	vldr	d6, [r3, #16]
 8002a2c:	eeb0 1a46 	vmov.f32	s2, s12
 8002a30:	eef0 1a66 	vmov.f32	s3, s13
 8002a34:	eeb0 0a47 	vmov.f32	s0, s14
 8002a38:	eef0 0a67 	vmov.f32	s1, s15
 8002a3c:	f009 ff0e 	bl	800c85c <atan2>
 8002a40:	eeb0 7a40 	vmov.f32	s14, s0
 8002a44:	eef0 7a60 	vmov.f32	s15, s1
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <_Z14task2_joystickPKv+0x9fc>)
 8002a4a:	ed83 7b00 	vstr	d7, [r3]
		  ML=sin(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <_Z14task2_joystickPKv+0x9fc>)
 8002a50:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a54:	4b66      	ldr	r3, [pc, #408]	; (8002bf0 <_Z14task2_joystickPKv+0xa00>)
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <_Z14task2_joystickPKv+0xa04>)
 8002a60:	f7fd fec4 	bl	80007ec <__aeabi_ddiv>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	f7fd fbdc 	bl	8000228 <__aeabi_dsub>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	ec43 2b17 	vmov	d7, r2, r3
 8002a78:	eeb0 0a47 	vmov.f32	s0, s14
 8002a7c:	eef0 0a67 	vmov.f32	s1, s15
 8002a80:	f00a f9e2 	bl	800ce48 <sin>
 8002a84:	ec51 0b10 	vmov	r0, r1, d0
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <_Z14task2_joystickPKv+0x9f8>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fd83 	bl	8000598 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <_Z14task2_joystickPKv+0xa08>)
 8002aa0:	f7fd fd7a 	bl	8000598 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002aae:	e9c3 0100 	strd	r0, r1, [r3]
		  MR=cos(degree_a-pi/4)*speed*MOTOR_SPEED_MAX;
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <_Z14task2_joystickPKv+0x9fc>)
 8002ab4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <_Z14task2_joystickPKv+0xa00>)
 8002aba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <_Z14task2_joystickPKv+0xa04>)
 8002ac4:	f7fd fe92 	bl	80007ec <__aeabi_ddiv>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4620      	mov	r0, r4
 8002ace:	4629      	mov	r1, r5
 8002ad0:	f7fd fbaa 	bl	8000228 <__aeabi_dsub>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	ec43 2b17 	vmov	d7, r2, r3
 8002adc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ae0:	eef0 0a67 	vmov.f32	s1, s15
 8002ae4:	f00a f950 	bl	800cd88 <cos>
 8002ae8:	ec51 0b10 	vmov	r0, r1, d0
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <_Z14task2_joystickPKv+0x9f8>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	f7fd fd51 	bl	8000598 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <_Z14task2_joystickPKv+0xa08>)
 8002b04:	f7fd fd48 	bl	8000598 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b12:	e9c3 0100 	strd	r0, r1, [r3]
		  if(ML>12000 || MR>12000){
 8002b16:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b1c:	a32e      	add	r3, pc, #184	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd ffc9 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <_Z14task2_joystickPKv+0x952>
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b32:	a329      	add	r3, pc, #164	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd ffbe 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d060      	beq.n	8002c04 <_Z14task2_joystickPKv+0xa14>
			  if(ML > MR){
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd ffb3 	bl	8000ab8 <__aeabi_dcmpgt>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01e      	beq.n	8002b96 <_Z14task2_joystickPKv+0x9a6>
				  MR=MR/ML*12000;
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5e:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	f7fd fe42 	bl	80007ec <__aeabi_ddiv>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	a319      	add	r3, pc, #100	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd fd0f 	bl	8000598 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	4b1f      	ldr	r3, [pc, #124]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b84:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002b88:	491c      	ldr	r1, [pc, #112]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b8a:	a313      	add	r3, pc, #76	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002b94:	e184      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>

			  }
			  else{
				  ML=ML/MR*12000;
 8002b96:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fe23 	bl	80007ec <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	a30a      	add	r3, pc, #40	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fcf0 	bl	8000598 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <_Z14task2_joystickPKv+0xa0c>)
 8002bc2:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002bc6:	490e      	ldr	r1, [pc, #56]	; (8002c00 <_Z14task2_joystickPKv+0xa10>)
 8002bc8:	a303      	add	r3, pc, #12	; (adr r3, 8002bd8 <_Z14task2_joystickPKv+0x9e8>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > MR){
 8002bd2:	e165      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
 8002bd4:	f3af 8000 	nop.w
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	40c77000 	.word	0x40c77000
 8002be0:	20000808 	.word	0x20000808
 8002be4:	43000000 	.word	0x43000000
 8002be8:	200006e8 	.word	0x200006e8
 8002bec:	200006f0 	.word	0x200006f0
 8002bf0:	20000000 	.word	0x20000000
 8002bf4:	40100000 	.word	0x40100000
 8002bf8:	40d00000 	.word	0x40d00000
 8002bfc:	200006d8 	.word	0x200006d8
 8002c00:	200006e0 	.word	0x200006e0
			  }
		  }
		  else if(ML<-12000 || MR<-12000){
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c0a:	a38d      	add	r3, pc, #564	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd ff34 	bl	8000a7c <__aeabi_dcmplt>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <_Z14task2_joystickPKv+0xa40>
 8002c1a:	4b8e      	ldr	r3, [pc, #568]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c20:	a387      	add	r3, pc, #540	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd ff29 	bl	8000a7c <__aeabi_dcmplt>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d054      	beq.n	8002cda <_Z14task2_joystickPKv+0xaea>
			  if(ML < MR){
 8002c30:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c36:	4b87      	ldr	r3, [pc, #540]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f7fd ff1e 	bl	8000a7c <__aeabi_dcmplt>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d024      	beq.n	8002c90 <_Z14task2_joystickPKv+0xaa0>
				  MR=-MR/ML*12000;
 8002c46:	4b83      	ldr	r3, [pc, #524]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	4b7e      	ldr	r3, [pc, #504]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c5e:	f7fd fdc5 	bl	80007ec <__aeabi_ddiv>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	a377      	add	r3, pc, #476	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f7fd fc92 	bl	8000598 <__aeabi_dmul>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002c7e:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002c82:	4973      	ldr	r1, [pc, #460]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c84:	a36e      	add	r3, pc, #440	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002c8e:	e107      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	633a      	str	r2, [r7, #48]	; 0x30
 8002c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ca8:	f7fd fda0 	bl	80007ec <__aeabi_ddiv>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	a364      	add	r3, pc, #400	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fc6d 	bl	8000598 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002cc8:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002ccc:	4961      	ldr	r1, [pc, #388]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002cce:	a35c      	add	r3, pc, #368	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML < MR){
 8002cd8:	e0e2      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
			  }
		  }
		  else if(ML>12000 || MR<-12000){
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce0:	a359      	add	r3, pc, #356	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fee7 	bl	8000ab8 <__aeabi_dcmpgt>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <_Z14task2_joystickPKv+0xb16>
 8002cf0:	4b58      	ldr	r3, [pc, #352]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cf6:	a352      	add	r3, pc, #328	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd febe 	bl	8000a7c <__aeabi_dcmplt>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d054      	beq.n	8002db0 <_Z14task2_joystickPKv+0xbc0>
			  if(ML > -MR){
 8002d06:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d1e:	f7fd fead 	bl	8000a7c <__aeabi_dcmplt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01e      	beq.n	8002d66 <_Z14task2_joystickPKv+0xb76>
				  MR=MR/ML*12000;
 8002d28:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d2e:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fd5a 	bl	80007ec <__aeabi_ddiv>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	a341      	add	r3, pc, #260	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fc27 	bl	8000598 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d54:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=12000;
 8002d58:	493d      	ldr	r1, [pc, #244]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d5a:	a33b      	add	r3, pc, #236	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002d64:	e09c      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>

			  }
			  else{
				  ML=-ML/MR*12000;
 8002d66:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	623a      	str	r2, [r7, #32]
 8002d6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d7e:	f7fd fd35 	bl	80007ec <__aeabi_ddiv>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	a32f      	add	r3, pc, #188	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_dmul>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4610      	mov	r0, r2
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002d9e:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=-12000;
 8002da2:	492c      	ldr	r1, [pc, #176]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002da4:	a326      	add	r3, pc, #152	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	e9c1 2300 	strd	r2, r3, [r1]
			  if(ML > -MR){
 8002dae:	e077      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
			  }
		  }
		  else if(MR>12000 || ML<-12000){
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db6:	a324      	add	r3, pc, #144	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fe7c 	bl	8000ab8 <__aeabi_dcmpgt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <_Z14task2_joystickPKv+0xbec>
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dcc:	a31c      	add	r3, pc, #112	; (adr r3, 8002e40 <_Z14task2_joystickPKv+0xc50>)
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f7fd fe53 	bl	8000a7c <__aeabi_dcmplt>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d061      	beq.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
			  if(MR > -ML){
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	61ba      	str	r2, [r7, #24]
 8002de4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df4:	f7fd fe42 	bl	8000a7c <__aeabi_dcmplt>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02c      	beq.n	8002e58 <_Z14task2_joystickPKv+0xc68>
				  ML=ML/MR*12000;
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fcef 	bl	80007ec <__aeabi_ddiv>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4610      	mov	r0, r2
 8002e14:	4619      	mov	r1, r3
 8002e16:	a30c      	add	r3, pc, #48	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fbbc 	bl	8000598 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <_Z14task2_joystickPKv+0xc60>)
 8002e2a:	e9c3 0100 	strd	r0, r1, [r3]
				  MR=12000;
 8002e2e:	4909      	ldr	r1, [pc, #36]	; (8002e54 <_Z14task2_joystickPKv+0xc64>)
 8002e30:	a305      	add	r3, pc, #20	; (adr r3, 8002e48 <_Z14task2_joystickPKv+0xc58>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	e9c1 2300 	strd	r2, r3, [r1]
 8002e3a:	e031      	b.n	8002ea0 <_Z14task2_joystickPKv+0xcb0>
 8002e3c:	f3af 8000 	nop.w
 8002e40:	00000000 	.word	0x00000000
 8002e44:	c0c77000 	.word	0xc0c77000
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	40c77000 	.word	0x40c77000
 8002e50:	200006d8 	.word	0x200006d8
 8002e54:	200006e0 	.word	0x200006e0

			  }
			  else{
				  MR=-MR/ML*12000;
 8002e58:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	613a      	str	r2, [r7, #16]
 8002e60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	4b5d      	ldr	r3, [pc, #372]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e70:	f7fd fcbc 	bl	80007ec <__aeabi_ddiv>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	a352      	add	r3, pc, #328	; (adr r3, 8002fc8 <_Z14task2_joystickPKv+0xdd8>)
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f7fd fb89 	bl	8000598 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002e90:	e9c3 0100 	strd	r0, r1, [r3]
				  ML=-12000;
 8002e94:	4951      	ldr	r1, [pc, #324]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002e96:	a34e      	add	r3, pc, #312	; (adr r3, 8002fd0 <_Z14task2_joystickPKv+0xde0>)
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]
			  }
		  }
		  M1.setpoint=-MR;
 8002ea0:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	60ba      	str	r2, [r7, #8]
 8002ea8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb2:	f7fd fe21 	bl	8000af8 <__aeabi_d2iz>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	4a49      	ldr	r2, [pc, #292]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002ebc:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=ML;
 8002ebe:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe16 	bl	8000af8 <__aeabi_d2iz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002ed2:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=-ML;
 8002ed4:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <_Z14task2_joystickPKv+0xdec>)
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	603a      	str	r2, [r7, #0]
 8002edc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ee6:	f7fd fe07 	bl	8000af8 <__aeabi_d2iz>
 8002eea:	4603      	mov	r3, r0
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4a3e      	ldr	r2, [pc, #248]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002ef0:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=MR;
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <_Z14task2_joystickPKv+0xde8>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7fd fdfc 	bl	8000af8 <__aeabi_d2iz>
 8002f00:	4603      	mov	r3, r0
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002f06:	8013      	strh	r3, [r2, #0]
		  M1.setpoint=M1.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f08:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0e:	b298      	uxth	r0, r3
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0399      	lsls	r1, r3, #14
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f18:	fb83 2301 	smull	r2, r3, r3, r1
 8002f1c:	121a      	asrs	r2, r3, #8
 8002f1e:	17cb      	asrs	r3, r1, #31
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4403      	add	r3, r0
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002f2c:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=M2.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	b298      	uxth	r0, r3
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	0399      	lsls	r1, r3, #14
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f3e:	fb83 2301 	smull	r2, r3, r3, r1
 8002f42:	121a      	asrs	r2, r3, #8
 8002f44:	17cb      	asrs	r3, r1, #31
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4403      	add	r3, r0
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002f52:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=M3.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5a:	b298      	uxth	r0, r3
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	0399      	lsls	r1, r3, #14
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f64:	fb83 2301 	smull	r2, r3, r3, r1
 8002f68:	121a      	asrs	r2, r3, #8
 8002f6a:	17cb      	asrs	r3, r1, #31
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4403      	add	r3, r0
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	b21b      	sxth	r3, r3
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002f78:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=M4.setpoint-(MOTOR_SPEED_MAX*PS2.RX/800);
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f80:	b298      	uxth	r0, r3
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <_Z14task2_joystickPKv+0xe00>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	0399      	lsls	r1, r3, #14
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <_Z14task2_joystickPKv+0xe04>)
 8002f8a:	fb83 2301 	smull	r2, r3, r3, r1
 8002f8e:	121a      	asrs	r2, r3, #8
 8002f90:	17cb      	asrs	r3, r1, #31
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4403      	add	r3, r0
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002f9e:	8013      	strh	r3, [r2, #0]
 8002fa0:	e00b      	b.n	8002fba <_Z14task2_joystickPKv+0xdca>
	  }
	  else{
		  M1.setpoint=0;
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <_Z14task2_joystickPKv+0xdf0>)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	8013      	strh	r3, [r2, #0]
		  M2.setpoint=0;
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <_Z14task2_joystickPKv+0xdf4>)
 8002faa:	2300      	movs	r3, #0
 8002fac:	8013      	strh	r3, [r2, #0]
		  M3.setpoint=0;
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <_Z14task2_joystickPKv+0xdfc>)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	8013      	strh	r3, [r2, #0]
		  M4.setpoint=0;
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <_Z14task2_joystickPKv+0xdf8>)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	8013      	strh	r3, [r2, #0]
	  }
      osDelay(10);
 8002fba:	200a      	movs	r0, #10
 8002fbc:	f008 fa69 	bl	800b492 <osDelay>
	  spi_enable;
 8002fc0:	f7ff b91b 	b.w	80021fa <_Z14task2_joystickPKv+0xa>
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	40c77000 	.word	0x40c77000
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	c0c77000 	.word	0xc0c77000
 8002fd8:	200006e0 	.word	0x200006e0
 8002fdc:	200006d8 	.word	0x200006d8
 8002fe0:	200007d4 	.word	0x200007d4
 8002fe4:	200007dc 	.word	0x200007dc
 8002fe8:	200007ec 	.word	0x200007ec
 8002fec:	200007e4 	.word	0x200007e4
 8002ff0:	20000808 	.word	0x20000808
 8002ff4:	51eb851f 	.word	0x51eb851f

08002ff8 <_Z8DC_motorPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DC_motor */
void DC_motor(void const * argument)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DC_motor */
	DC_pid.error = 0;
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <_Z8DC_motorPKv+0x124>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	2120      	movs	r1, #32
 800300a:	4845      	ldr	r0, [pc, #276]	; (8003120 <_Z8DC_motorPKv+0x128>)
 800300c:	f004 fae6 	bl	80075dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_SET);
 8003010:	2201      	movs	r2, #1
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	4842      	ldr	r0, [pc, #264]	; (8003120 <_Z8DC_motorPKv+0x128>)
 8003016:	f004 fae1 	bl	80075dc <HAL_GPIO_WritePin>
	TIM4->CCR1=920;
 800301a:	4b42      	ldr	r3, [pc, #264]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 800301c:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2=920;
 8003022:	4b40      	ldr	r3, [pc, #256]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 8003024:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
//	TIM8 -> CCR1 = 99;
  /* Infinite loop */
  for(;;)
  {
		if(BLDC==1 || flag==1){
 800302a:	4b3f      	ldr	r3, [pc, #252]	; (8003128 <_Z8DC_motorPKv+0x130>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d003      	beq.n	800303a <_Z8DC_motorPKv+0x42>
 8003032:	4b3e      	ldr	r3, [pc, #248]	; (800312c <_Z8DC_motorPKv+0x134>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d137      	bne.n	80030aa <_Z8DC_motorPKv+0xb2>
			TIM4->CCR1 = 930;
 800303a:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 800303c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 909;
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 8003044:	f240 328d 	movw	r2, #909	; 0x38d
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
			flag = 1;
 800304a:	4b38      	ldr	r3, [pc, #224]	; (800312c <_Z8DC_motorPKv+0x134>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
			//HAL_Delay(500);
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8003050:	bf00      	nop
 8003052:	2108      	movs	r1, #8
 8003054:	4836      	ldr	r0, [pc, #216]	; (8003130 <_Z8DC_motorPKv+0x138>)
 8003056:	f004 faa9 	bl	80075ac <HAL_GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01e      	beq.n	800309e <_Z8DC_motorPKv+0xa6>
 8003060:	e016      	b.n	8003090 <_Z8DC_motorPKv+0x98>
				TIM4->CCR1 = 920;
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 8003064:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 800306c:	f44f 7266 	mov.w	r2, #920	; 0x398
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
//				HAL_Delay(2000);
				flag = 0;
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <_Z8DC_motorPKv+0x134>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
				BLDC = 0;
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <_Z8DC_motorPKv+0x130>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
				blue = 1;
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <_Z8DC_motorPKv+0x13c>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 890;
 8003084:	4b2c      	ldr	r3, [pc, #176]	; (8003138 <_Z8DC_motorPKv+0x140>)
 8003086:	f240 327a 	movw	r2, #890	; 0x37a
 800308a:	601a      	str	r2, [r3, #0]
				break;
 800308c:	bf00      	nop
		if(BLDC==1 || flag==1){
 800308e:	e040      	b.n	8003112 <_Z8DC_motorPKv+0x11a>
			while((HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==0) || (HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==0)){
 8003090:	2110      	movs	r1, #16
 8003092:	4823      	ldr	r0, [pc, #140]	; (8003120 <_Z8DC_motorPKv+0x128>)
 8003094:	f004 fa8a 	bl	80075ac <HAL_GPIO_ReadPin>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <_Z8DC_motorPKv+0xaa>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <_Z8DC_motorPKv+0xac>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1dc      	bne.n	8003062 <_Z8DC_motorPKv+0x6a>
		if(BLDC==1 || flag==1){
 80030a8:	e033      	b.n	8003112 <_Z8DC_motorPKv+0x11a>
//					Motor.target_pos = 890;
//					break;
//				}
			}
		}
		else if(BLDC==2 && flag==0){
 80030aa:	4b1f      	ldr	r3, [pc, #124]	; (8003128 <_Z8DC_motorPKv+0x130>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d12f      	bne.n	8003112 <_Z8DC_motorPKv+0x11a>
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <_Z8DC_motorPKv+0x134>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d12b      	bne.n	8003112 <_Z8DC_motorPKv+0x11a>
			TIM4->CCR1 = 915;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030bc:	f240 3293 	movw	r2, #915	; 0x393
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR2 = 925;
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030c4:	f240 329d 	movw	r2, #925	; 0x39d
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
			//HAL_Delay(200);
			while((HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)) == 1){
 80030ca:	bf00      	nop
 80030cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d0:	481a      	ldr	r0, [pc, #104]	; (800313c <_Z8DC_motorPKv+0x144>)
 80030d2:	f004 fa6b 	bl	80075ac <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d015      	beq.n	8003112 <_Z8DC_motorPKv+0x11a>
				TIM4->CCR1 = 920;
 80030e6:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030e8:	f44f 7266 	mov.w	r2, #920	; 0x398
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
				TIM4->CCR2 = 920;
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <_Z8DC_motorPKv+0x12c>)
 80030f0:	f44f 7266 	mov.w	r2, #920	; 0x398
 80030f4:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(2000);
 80030f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030fa:	f002 fd2f 	bl	8005b5c <HAL_Delay>
				BLDC = 0;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <_Z8DC_motorPKv+0x130>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
				yellow=2;
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <_Z8DC_motorPKv+0x148>)
 8003106:	2202      	movs	r2, #2
 8003108:	601a      	str	r2, [r3, #0]
				Motor.target_pos = 0;
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <_Z8DC_motorPKv+0x140>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
				break;
 8003110:	bf00      	nop
			}
		}
    osDelay(50);
 8003112:	2032      	movs	r0, #50	; 0x32
 8003114:	f008 f9bd 	bl	800b492 <osDelay>
		if(BLDC==1 || flag==1){
 8003118:	e787      	b.n	800302a <_Z8DC_motorPKv+0x32>
 800311a:	bf00      	nop
 800311c:	200007b8 	.word	0x200007b8
 8003120:	40020000 	.word	0x40020000
 8003124:	40000800 	.word	0x40000800
 8003128:	20000718 	.word	0x20000718
 800312c:	20000714 	.word	0x20000714
 8003130:	40020800 	.word	0x40020800
 8003134:	2000070c 	.word	0x2000070c
 8003138:	200007f4 	.word	0x200007f4
 800313c:	40020400 	.word	0x40020400
 8003140:	20000710 	.word	0x20000710

08003144 <_Z10ColorcheckPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Colorcheck */
void Colorcheck(void const * argument)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Colorcheck */
	Motor.my_pos = TIM5->CNT=0;
 800314c:	4b58      	ldr	r3, [pc, #352]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
 8003152:	4b58      	ldr	r3, [pc, #352]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
	DC_pid.KP = 0.7;
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 800315a:	4a58      	ldr	r2, [pc, #352]	; (80032bc <_Z10ColorcheckPKv+0x178>)
 800315c:	601a      	str	r2, [r3, #0]
	DC_pid.KI = 0.0005;
 800315e:	4b56      	ldr	r3, [pc, #344]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003160:	4a57      	ldr	r2, [pc, #348]	; (80032c0 <_Z10ColorcheckPKv+0x17c>)
 8003162:	605a      	str	r2, [r3, #4]
	DC_pid.KD = 0.00003;
 8003164:	4b54      	ldr	r3, [pc, #336]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003166:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <_Z10ColorcheckPKv+0x180>)
 8003168:	609a      	str	r2, [r3, #8]
	Motor.target_pos=0;
 800316a:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 8003170:	4b55      	ldr	r3, [pc, #340]	; (80032c8 <_Z10ColorcheckPKv+0x184>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d121      	bne.n	80031bc <_Z10ColorcheckPKv+0x78>
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f240 327a 	movw	r2, #890	; 0x37a
 8003180:	4293      	cmp	r3, r2
 8003182:	d11b      	bne.n	80031bc <_Z10ColorcheckPKv+0x78>
		 calculatePID();
 8003184:	f7fe fc6c 	bl	8001a60 <_Z12calculatePIDv>
		 motorspeed();
 8003188:	f7fe fd08 	bl	8001b9c <_Z10motorspeedv>
		 Motor.target_pos = 890;
 800318c:	4b49      	ldr	r3, [pc, #292]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800318e:	f240 327a 	movw	r2, #890	; 0x37a
 8003192:	601a      	str	r2, [r3, #0]
		 while(DC_pid.error < 5 ){
 8003194:	bf00      	nop
 8003196:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b04      	cmp	r3, #4
 800319c:	f300 8082 	bgt.w	80032a4 <_Z10ColorcheckPKv+0x160>
			 MotorStop();
 80031a0:	f7fe fc46 	bl	8001a30 <_Z9MotorStopv>
			 TIM5->CNT=89000;
 80031a4:	4b42      	ldr	r3, [pc, #264]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 80031a6:	4a49      	ldr	r2, [pc, #292]	; (80032cc <_Z10ColorcheckPKv+0x188>)
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=890;
 80031aa:	4b42      	ldr	r3, [pc, #264]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 80031ac:	f240 327a 	movw	r2, #890	; 0x37a
 80031b0:	605a      	str	r2, [r3, #4]
//			 Motor.target_pos = 0;
//			 yellow=2;
			 blue = 0;
 80031b2:	4b45      	ldr	r3, [pc, #276]	; (80032c8 <_Z10ColorcheckPKv+0x184>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
			 break;
 80031b8:	bf00      	nop
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 80031ba:	e073      	b.n	80032a4 <_Z10ColorcheckPKv+0x160>
		}
	 }else if(yellow==2 && Motor.target_pos == 0){//target pos = 0
 80031bc:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d12f      	bne.n	8003224 <_Z10ColorcheckPKv+0xe0>
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d12b      	bne.n	8003224 <_Z10ColorcheckPKv+0xe0>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 80031cc:	e00b      	b.n	80031e6 <_Z10ColorcheckPKv+0xa2>
			 MotorStop();
 80031ce:	f7fe fc2f 	bl	8001a30 <_Z9MotorStopv>
//			 Motor.target_pos=0;
			 TIM5->CNT=0;
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
			 Motor.my_pos=0;
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
			 yellow=0;
 80031de:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
			 break;
 80031e4:	e016      	b.n	8003214 <_Z10ColorcheckPKv+0xd0>
		 while(((HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin))==0 || (HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin))==0) && DC_pid.error < 100){
 80031e6:	2104      	movs	r1, #4
 80031e8:	483a      	ldr	r0, [pc, #232]	; (80032d4 <_Z10ColorcheckPKv+0x190>)
 80031ea:	f004 f9df 	bl	80075ac <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <_Z10ColorcheckPKv+0xbe>
 80031f4:	2102      	movs	r1, #2
 80031f6:	4837      	ldr	r0, [pc, #220]	; (80032d4 <_Z10ColorcheckPKv+0x190>)
 80031f8:	f004 f9d8 	bl	80075ac <HAL_GPIO_ReadPin>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <_Z10ColorcheckPKv+0xca>
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b63      	cmp	r3, #99	; 0x63
 8003208:	dc01      	bgt.n	800320e <_Z10ColorcheckPKv+0xca>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <_Z10ColorcheckPKv+0xcc>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1dc      	bne.n	80031ce <_Z10ColorcheckPKv+0x8a>
		 }
		 	 Motor.target_pos= 0;
 8003214:	4b27      	ldr	r3, [pc, #156]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
			 calculatePID();
 800321a:	f7fe fc21 	bl	8001a60 <_Z12calculatePIDv>
			 motorspeed();
 800321e:	f7fe fcbd 	bl	8001b9c <_Z10motorspeedv>
 8003222:	e040      	b.n	80032a6 <_Z10ColorcheckPKv+0x162>
	}else if(yellow==1 && Motor.target_pos == 1800){//target pos = 1800
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d135      	bne.n	8003298 <_Z10ColorcheckPKv+0x154>
 800322c:	4b21      	ldr	r3, [pc, #132]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003234:	d130      	bne.n	8003298 <_Z10ColorcheckPKv+0x154>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 8003236:	e00f      	b.n	8003258 <_Z10ColorcheckPKv+0x114>
			 MotorStop();
 8003238:	f7fe fbfa 	bl	8001a30 <_Z9MotorStopv>
			 Motor.my_pos = 1800;
 800323c:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 800323e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003242:	605a      	str	r2, [r3, #4]
			 Motor.target_pos = 0;
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
			 TIM5->CNT = 180000;
 800324a:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <_Z10ColorcheckPKv+0x16c>)
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <_Z10ColorcheckPKv+0x194>)
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
			 yellow=0;
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
			 break;
 8003256:	e016      	b.n	8003286 <_Z10ColorcheckPKv+0x142>
		 while(((HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin))==0 || (HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin))==0) && DC_pid.error < 100){
 8003258:	2101      	movs	r1, #1
 800325a:	481e      	ldr	r0, [pc, #120]	; (80032d4 <_Z10ColorcheckPKv+0x190>)
 800325c:	f004 f9a6 	bl	80075ac <HAL_GPIO_ReadPin>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <_Z10ColorcheckPKv+0x130>
 8003266:	2101      	movs	r1, #1
 8003268:	481c      	ldr	r0, [pc, #112]	; (80032dc <_Z10ColorcheckPKv+0x198>)
 800326a:	f004 f99f 	bl	80075ac <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <_Z10ColorcheckPKv+0x13c>
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <_Z10ColorcheckPKv+0x174>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b63      	cmp	r3, #99	; 0x63
 800327a:	dc01      	bgt.n	8003280 <_Z10ColorcheckPKv+0x13c>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <_Z10ColorcheckPKv+0x13e>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1d8      	bne.n	8003238 <_Z10ColorcheckPKv+0xf4>
		 }
		 	 Motor.target_pos = 1800;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <_Z10ColorcheckPKv+0x170>)
 8003288:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800328c:	601a      	str	r2, [r3, #0]
			 calculatePID();
 800328e:	f7fe fbe7 	bl	8001a60 <_Z12calculatePIDv>
			 motorspeed();
 8003292:	f7fe fc83 	bl	8001b9c <_Z10motorspeedv>
 8003296:	e006      	b.n	80032a6 <_Z10ColorcheckPKv+0x162>
	}else{
		 MotorStop();
 8003298:	f7fe fbca 	bl	8001a30 <_Z9MotorStopv>
		 yellow = 0;
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <_Z10ColorcheckPKv+0x18c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	e000      	b.n	80032a6 <_Z10ColorcheckPKv+0x162>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 80032a4:	bf00      	nop
	 }
    osDelay(5);
 80032a6:	2005      	movs	r0, #5
 80032a8:	f008 f8f3 	bl	800b492 <osDelay>
	 if(blue == 1 && Motor.target_pos == 890){//taget pos = 890
 80032ac:	e760      	b.n	8003170 <_Z10ColorcheckPKv+0x2c>
 80032ae:	bf00      	nop
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	200007f4 	.word	0x200007f4
 80032b8:	200007b8 	.word	0x200007b8
 80032bc:	3f333333 	.word	0x3f333333
 80032c0:	3a03126f 	.word	0x3a03126f
 80032c4:	37fba882 	.word	0x37fba882
 80032c8:	2000070c 	.word	0x2000070c
 80032cc:	00015ba8 	.word	0x00015ba8
 80032d0:	20000710 	.word	0x20000710
 80032d4:	40020800 	.word	0x40020800
 80032d8:	0002bf20 	.word	0x0002bf20
 80032dc:	40020400 	.word	0x40020400

080032e0 <_Z11StartTask05PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
	setup();
 80032e8:	f001 fa1c 	bl	8004724 <setup>
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 80032ec:	2101      	movs	r1, #1
 80032ee:	4872      	ldr	r0, [pc, #456]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 80032f0:	f004 f95c 	bl	80075ac <HAL_GPIO_ReadPin>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <_Z11StartTask05PKv+0x36>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000001;
 8003304:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b21a      	sxth	r2, r3
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003312:	811a      	strh	r2, [r3, #8]
 8003314:	e007      	b.n	8003326 <_Z11StartTask05PKv+0x46>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111110;
 8003316:	4b69      	ldr	r3, [pc, #420]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003318:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800331c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003320:	b21a      	sxth	r2, r3
 8003322:	4b66      	ldr	r3, [pc, #408]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003324:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(UP2_GPIO_Port, UP2_Pin)==1){
 8003326:	2101      	movs	r1, #1
 8003328:	4865      	ldr	r0, [pc, #404]	; (80034c0 <_Z11StartTask05PKv+0x1e0>)
 800332a:	f004 f93f 	bl	80075ac <HAL_GPIO_ReadPin>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	bf0c      	ite	eq
 8003334:	2301      	moveq	r3, #1
 8003336:	2300      	movne	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <_Z11StartTask05PKv+0x70>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000010;
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003340:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	b21a      	sxth	r2, r3
 800334a:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800334c:	811a      	strh	r2, [r3, #8]
 800334e:	e007      	b.n	8003360 <_Z11StartTask05PKv+0x80>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111101;
 8003350:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003356:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800335a:	b21a      	sxth	r2, r3
 800335c:	4b57      	ldr	r3, [pc, #348]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800335e:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN1_GPIO_Port, DOWN1_Pin)==1){
 8003360:	2104      	movs	r1, #4
 8003362:	4855      	ldr	r0, [pc, #340]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 8003364:	f004 f922 	bl	80075ac <HAL_GPIO_ReadPin>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <_Z11StartTask05PKv+0xaa>
	  		  sensor_buff[4]=sensor_buff[4]|0b00000100;
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800337a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	b21a      	sxth	r2, r3
 8003384:	4b4d      	ldr	r3, [pc, #308]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003386:	811a      	strh	r2, [r3, #8]
 8003388:	e007      	b.n	800339a <_Z11StartTask05PKv+0xba>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11111011;
 800338a:	4b4c      	ldr	r3, [pc, #304]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800338c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003390:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8003394:	b21a      	sxth	r2, r3
 8003396:	4b49      	ldr	r3, [pc, #292]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003398:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(DOWN2_GPIO_Port, DOWN2_Pin)==1){
 800339a:	2102      	movs	r1, #2
 800339c:	4846      	ldr	r0, [pc, #280]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 800339e:	f004 f905 	bl	80075ac <HAL_GPIO_ReadPin>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <_Z11StartTask05PKv+0xe4>
	  		  sensor_buff[4]=sensor_buff[4]|0b00001000;
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	b21a      	sxth	r2, r3
 80033be:	4b3f      	ldr	r3, [pc, #252]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033c0:	811a      	strh	r2, [r3, #8]
 80033c2:	e007      	b.n	80033d4 <_Z11StartTask05PKv+0xf4>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11110111;
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 80033ce:	b21a      	sxth	r2, r3
 80033d0:	4b3a      	ldr	r3, [pc, #232]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033d2:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL1_GPIO_Port, BALL1_Pin)==1){
 80033d4:	2108      	movs	r1, #8
 80033d6:	4838      	ldr	r0, [pc, #224]	; (80034b8 <_Z11StartTask05PKv+0x1d8>)
 80033d8:	f004 f8e8 	bl	80075ac <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <_Z11StartTask05PKv+0x11e>
	  		  sensor_buff[4]=sensor_buff[4]|0b00010000;
 80033ec:	4b33      	ldr	r3, [pc, #204]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033f2:	f043 0310 	orr.w	r3, r3, #16
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	4b30      	ldr	r3, [pc, #192]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80033fa:	811a      	strh	r2, [r3, #8]
 80033fc:	e007      	b.n	800340e <_Z11StartTask05PKv+0x12e>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11101111;
 80033fe:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003404:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8003408:	b21a      	sxth	r2, r3
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800340c:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(BALL2_GPIO_Port, BALL2_Pin)==1){
 800340e:	2110      	movs	r1, #16
 8003410:	482c      	ldr	r0, [pc, #176]	; (80034c4 <_Z11StartTask05PKv+0x1e4>)
 8003412:	f004 f8cb 	bl	80075ac <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <_Z11StartTask05PKv+0x158>
	  		  sensor_buff[4]=sensor_buff[4]|0b00100000;
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003428:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800342c:	f043 0320 	orr.w	r3, r3, #32
 8003430:	b21a      	sxth	r2, r3
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003434:	811a      	strh	r2, [r3, #8]
 8003436:	e007      	b.n	8003448 <_Z11StartTask05PKv+0x168>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b11011111;
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800343a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800343e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003442:	b21a      	sxth	r2, r3
 8003444:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003446:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  if(HAL_GPIO_ReadPin(IR_GPIO_Port, IR_Pin)==1){
 8003448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800344c:	481c      	ldr	r0, [pc, #112]	; (80034c0 <_Z11StartTask05PKv+0x1e0>)
 800344e:	f004 f8ad 	bl	80075ac <HAL_GPIO_ReadPin>
 8003452:	4603      	mov	r3, r0
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <_Z11StartTask05PKv+0x194>
	  		  sensor_buff[4]=sensor_buff[4]|0b01000000;
 8003462:	4b16      	ldr	r3, [pc, #88]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003464:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346c:	b21a      	sxth	r2, r3
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003470:	811a      	strh	r2, [r3, #8]
 8003472:	e007      	b.n	8003484 <_Z11StartTask05PKv+0x1a4>
	  	  }
	  	  else{
	  		  sensor_buff[4]=sensor_buff[4]&0b10111111;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003476:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800347a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800347e:	b21a      	sxth	r2, r3
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003482:	811a      	strh	r2, [r3, #8]
	  	  }
	  	  sensor_buff[0]=M1.en_speed;
 8003484:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <_Z11StartTask05PKv+0x1e8>)
 8003486:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 800348c:	801a      	strh	r2, [r3, #0]
	  	  sensor_buff[1]=M2.en_speed;
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <_Z11StartTask05PKv+0x1ec>)
 8003490:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 8003496:	805a      	strh	r2, [r3, #2]
	  	  sensor_buff[2]=M3.en_speed;
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <_Z11StartTask05PKv+0x1f0>)
 800349a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80034a0:	809a      	strh	r2, [r3, #4]
	  	  sensor_buff[3]=M4.en_speed;
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <_Z11StartTask05PKv+0x1f4>)
 80034a4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <_Z11StartTask05PKv+0x1dc>)
 80034aa:	80da      	strh	r2, [r3, #6]
	  	  loop();
 80034ac:	f001 f94a 	bl	8004744 <loop>
    osDelay(10);
 80034b0:	200a      	movs	r0, #10
 80034b2:	f007 ffee 	bl	800b492 <osDelay>
	  if(HAL_GPIO_ReadPin(UP1_GPIO_Port, UP1_Pin)==1){
 80034b6:	e719      	b.n	80032ec <_Z11StartTask05PKv+0xc>
 80034b8:	40020800 	.word	0x40020800
 80034bc:	20000728 	.word	0x20000728
 80034c0:	40020400 	.word	0x40020400
 80034c4:	40020000 	.word	0x40020000
 80034c8:	200007d4 	.word	0x200007d4
 80034cc:	200007dc 	.word	0x200007dc
 80034d0:	200007e4 	.word	0x200007e4
 80034d4:	200007ec 	.word	0x200007ec

080034d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034ea:	f002 fb17 	bl	8005b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000

080034fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003500:	b672      	cpsid	i
}
 8003502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003504:	e7fe      	b.n	8003504 <Error_Handler+0x8>

08003506 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <_ZN3ros3MsgC1Ev+0x1c>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	0800e684 	.word	0x0800e684

08003548 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
      data()
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ffe8 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ffcf 	bl	8003506 <_ZN3ros4TimeC1Ev>
    {
    }
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	0800e66c 	.word	0x0800e66c

08003578 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6859      	ldr	r1, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0a19      	lsrs	r1, r3, #8
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	b2ca      	uxtb	r2, r1
 80035a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	0c19      	lsrs	r1, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3302      	adds	r3, #2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	b2ca      	uxtb	r2, r1
 80035b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0e19      	lsrs	r1, r3, #24
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3303      	adds	r3, #3
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	b2ca      	uxtb	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3304      	adds	r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6899      	ldr	r1, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	4413      	add	r3, r2
 80035da:	b2ca      	uxtb	r2, r1
 80035dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0a19      	lsrs	r1, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3301      	adds	r3, #1
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	b2ca      	uxtb	r2, r1
 80035ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	0c19      	lsrs	r1, r3, #16
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3302      	adds	r3, #2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	b2ca      	uxtb	r2, r1
 8003600:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0e19      	lsrs	r1, r3, #24
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3303      	adds	r3, #3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4413      	add	r3, r2
 8003610:	b2ca      	uxtb	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3304      	adds	r3, #4
 8003618:	60fb      	str	r3, [r7, #12]
      return offset;
 800361a:	68fb      	ldr	r3, [r7, #12]
    }
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3301      	adds	r3, #1
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	440b      	add	r3, r1
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3302      	adds	r3, #2
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	440b      	add	r3, r1
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	041b      	lsls	r3, r3, #16
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3303      	adds	r3, #3
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	440b      	add	r3, r1
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3304      	adds	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3301      	adds	r3, #1
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	440b      	add	r3, r1
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3302      	adds	r3, #2
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	440b      	add	r3, r1
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3303      	adds	r3, #3
 80036ce:	6839      	ldr	r1, [r7, #0]
 80036d0:	440b      	add	r3, r1
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3304      	adds	r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
     return offset;
 80036e2:	68fb      	ldr	r3, [r7, #12]
    }
 80036e4:	4618      	mov	r0, r3
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	0800e46c 	.word	0x0800e46c

0800370c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	0800e47c 	.word	0x0800e47c

08003728 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fef8 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003738:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003748:	609a      	str	r2, [r3, #8]
      message_type(""),
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a07      	ldr	r2, [pc, #28]	; (800376c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800374e:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a06      	ldr	r2, [pc, #24]	; (800376c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8003754:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	615a      	str	r2, [r3, #20]
    {
    }
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	0800e654 	.word	0x0800e654
 800376c:	0800e4a0 	.word	0x0800e4a0

08003770 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8899      	ldrh	r1, [r3, #4]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	4413      	add	r3, r2
 8003788:	b2ca      	uxtb	r2, r1
 800378a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	889b      	ldrh	r3, [r3, #4]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	b299      	uxth	r1, r3
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	4413      	add	r3, r2
 800379c:	b2ca      	uxtb	r2, r1
 800379e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3302      	adds	r3, #2
 80037a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fd30 	bl	8000210 <strlen>
 80037b0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	4413      	add	r3, r2
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 ffd8 	bl	8004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3304      	adds	r3, #4
 80037c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	18d0      	adds	r0, r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4619      	mov	r1, r3
 80037d4:	f00a fcb8 	bl	800e148 <memcpy>
      offset += length_topic_name;
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fc fd13 	bl	8000210 <strlen>
 80037ea:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4413      	add	r3, r2
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 ffbb 	bl	8004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3304      	adds	r3, #4
 80037fe:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	18d0      	adds	r0, r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4619      	mov	r1, r3
 800380e:	f00a fc9b 	bl	800e148 <memcpy>
      offset += length_message_type;
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4413      	add	r3, r2
 8003818:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc fcf6 	bl	8000210 <strlen>
 8003824:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	4413      	add	r3, r2
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ff9e 	bl	8004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3304      	adds	r3, #4
 8003838:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	18d0      	adds	r0, r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4619      	mov	r1, r3
 8003848:	f00a fc7e 	bl	800e148 <memcpy>
      offset += length_md5sum;
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	4413      	add	r3, r2
 8003862:	b2ca      	uxtb	r2, r1
 8003864:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0a19      	lsrs	r1, r3, #8
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3301      	adds	r3, #1
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4413      	add	r3, r2
 8003872:	b2ca      	uxtb	r2, r1
 8003874:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0c19      	lsrs	r1, r3, #16
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3302      	adds	r3, #2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	4413      	add	r3, r2
 8003882:	b2ca      	uxtb	r2, r1
 8003884:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	0e19      	lsrs	r1, r3, #24
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3303      	adds	r3, #3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4413      	add	r3, r2
 8003892:	b2ca      	uxtb	r2, r1
 8003894:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3304      	adds	r3, #4
 800389a:	61fb      	str	r3, [r7, #28]
      return offset;
 800389c:	69fb      	ldr	r3, [r7, #28]
    }
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	889b      	ldrh	r3, [r3, #4]
 80038c6:	b21a      	sxth	r2, r3
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	3301      	adds	r3, #1
 80038cc:	6839      	ldr	r1, [r7, #0]
 80038ce:	440b      	add	r3, r1
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	4313      	orrs	r3, r2
 80038d8:	b21b      	sxth	r3, r3
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	3302      	adds	r3, #2
 80038e4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	441a      	add	r2, r3
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 ff5b 	bl	80047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	3304      	adds	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e00b      	b.n	800391c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	441a      	add	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	3b01      	subs	r3, #1
 800390e:	6839      	ldr	r1, [r7, #0]
 8003910:	440b      	add	r3, r1
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	3301      	adds	r3, #1
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	429a      	cmp	r2, r3
 8003926:	d3ed      	bcc.n	8003904 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4413      	add	r3, r2
 800392e:	3b01      	subs	r3, #1
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4413      	add	r3, r2
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	3b01      	subs	r3, #1
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	441a      	add	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4413      	add	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	441a      	add	r2, r3
 8003952:	f107 0310 	add.w	r3, r7, #16
 8003956:	4611      	mov	r1, r2
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ff28 	bl	80047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3304      	adds	r3, #4
 8003962:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	e00b      	b.n	8003982 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	441a      	add	r2, r3
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	3b01      	subs	r3, #1
 8003974:	6839      	ldr	r1, [r7, #0]
 8003976:	440b      	add	r3, r1
 8003978:	7812      	ldrb	r2, [r2, #0]
 800397a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	3301      	adds	r3, #1
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3ed      	bcc.n	800396a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	3b01      	subs	r3, #1
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4413      	add	r3, r2
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	441a      	add	r2, r3
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fef5 	bl	80047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	3304      	adds	r3, #4
 80039c8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	e00b      	b.n	80039e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	441a      	add	r2, r3
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b01      	subs	r3, #1
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	440b      	add	r3, r1
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3ed      	bcc.n	80039d0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	3b01      	subs	r3, #1
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	4413      	add	r3, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	440a      	add	r2, r1
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	6839      	ldr	r1, [r7, #0]
 8003a32:	440b      	add	r3, r1
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	3302      	adds	r3, #2
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	440b      	add	r3, r1
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	3303      	adds	r3, #3
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	440b      	add	r3, r1
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	061b      	lsls	r3, r3, #24
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	61bb      	str	r3, [r7, #24]
     return offset;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
    }
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	0800e4a4 	.word	0x0800e4a4

08003a94 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	0800e4c0 	.word	0x0800e4c0

08003ab0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fd34 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003ac0:	4a06      	ldr	r2, [pc, #24]	; (8003adc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	601a      	str	r2, [r3, #0]
      level(0),
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	711a      	strb	r2, [r3, #4]
      msg("")
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a04      	ldr	r2, [pc, #16]	; (8003ae0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8003ad0:	609a      	str	r2, [r3, #8]
    {
    }
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	0800e63c 	.word	0x0800e63c
 8003ae0:	0800e4a0 	.word	0x0800e4a0

08003ae4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	7912      	ldrb	r2, [r2, #4]
 8003afc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fc fb81 	bl	8000210 <strlen>
 8003b0e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	68b9      	ldr	r1, [r7, #8]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fe29 	bl	8004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	18d0      	adds	r0, r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f00a fb09 	bl	800e148 <memcpy>
      offset += length_msg;
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
      return offset;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
    }
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fe1a 	bl	80047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e00b      	b.n	8003b9e <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6839      	ldr	r1, [r7, #0]
 8003b92:	440b      	add	r3, r1
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3ed      	bcc.n	8003b86 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
     return offset;
 8003bce:	693b      	ldr	r3, [r7, #16]
    }
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	0800e4e4 	.word	0x0800e4e4

08003bf4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	4b03      	ldr	r3, [pc, #12]	; (8003c0c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	0800e4f8 	.word	0x0800e4f8

08003c10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fc84 	bl	8003528 <_ZN3ros3MsgC1Ev>
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	615a      	str	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	61da      	str	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	621a      	str	r2, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	0800e624 	.word	0x0800e624

08003c6c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	b2ca      	uxtb	r2, r1
 8003c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0a19      	lsrs	r1, r3, #8
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	b2ca      	uxtb	r2, r1
 8003c98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0c19      	lsrs	r1, r3, #16
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	b2ca      	uxtb	r2, r1
 8003caa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0e19      	lsrs	r1, r3, #24
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	3303      	adds	r3, #3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4413      	add	r3, r2
 8003cba:	b2ca      	uxtb	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	e02a      	b.n	8003d20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	b2ca      	uxtb	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	0a19      	lsrs	r1, r3, #8
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	3301      	adds	r3, #1
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	b2ca      	uxtb	r2, r1
 8003cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	0c19      	lsrs	r1, r3, #16
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	b2ca      	uxtb	r2, r1
 8003d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	0e19      	lsrs	r1, r3, #24
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	4413      	add	r3, r2
 8003d10:	b2ca      	uxtb	r2, r1
 8003d12:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	3304      	adds	r3, #4
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d3cf      	bcc.n	8003cca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	b2ca      	uxtb	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	0a19      	lsrs	r1, r3, #8
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	3301      	adds	r3, #1
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	b2ca      	uxtb	r2, r1
 8003d48:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	0c19      	lsrs	r1, r3, #16
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	3302      	adds	r3, #2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	4413      	add	r3, r2
 8003d58:	b2ca      	uxtb	r2, r1
 8003d5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	0e19      	lsrs	r1, r3, #24
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	3303      	adds	r3, #3
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b2ca      	uxtb	r2, r1
 8003d6c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	3304      	adds	r3, #4
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	e02a      	b.n	8003dd0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	b2ca      	uxtb	r2, r1
 8003d92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0a19      	lsrs	r1, r3, #8
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b2ca      	uxtb	r2, r1
 8003da2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0c19      	lsrs	r1, r3, #16
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	3302      	adds	r3, #2
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	b2ca      	uxtb	r2, r1
 8003db2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	0e19      	lsrs	r1, r3, #24
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3303      	adds	r3, #3
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b2ca      	uxtb	r2, r1
 8003dc2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d3cf      	bcc.n	8003d7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69d9      	ldr	r1, [r3, #28]
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	b2ca      	uxtb	r2, r1
 8003de6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	0a19      	lsrs	r1, r3, #8
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	4413      	add	r3, r2
 8003df6:	b2ca      	uxtb	r2, r1
 8003df8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	0c19      	lsrs	r1, r3, #16
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	3302      	adds	r3, #2
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	4413      	add	r3, r2
 8003e08:	b2ca      	uxtb	r2, r1
 8003e0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	0e19      	lsrs	r1, r3, #24
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	3303      	adds	r3, #3
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b2ca      	uxtb	r2, r1
 8003e1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	3304      	adds	r3, #4
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003e24:	2300      	movs	r3, #0
 8003e26:	61bb      	str	r3, [r7, #24]
 8003e28:	e027      	b.n	8003e7a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fc f9ea 	bl	8000210 <strlen>
 8003e3c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4413      	add	r3, r2
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fc92 	bl	8004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	3304      	adds	r3, #4
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	18d0      	adds	r0, r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4619      	mov	r1, r3
 8003e68:	f00a f96e 	bl	800e148 <memcpy>
      offset += length_stringsi;
 8003e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3d2      	bcc.n	8003e2a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e86:	4618      	mov	r0, r3
 8003e88:	3728      	adds	r7, #40	; 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b08e      	sub	sp, #56	; 0x38
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4413      	add	r3, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	3302      	adds	r3, #2
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	3303      	adds	r3, #3
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8003edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ede:	3304      	adds	r3, #4
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d90a      	bls.n	8003f02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f00a f8ba 	bl	800e070 <realloc>
 8003efc:	4602      	mov	r2, r0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8003f08:	2300      	movs	r3, #0
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f0c:	e035      	b.n	8003f7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	440a      	add	r2, r1
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	3301      	adds	r3, #1
 8003f26:	6839      	ldr	r1, [r7, #0]
 8003f28:	440b      	add	r3, r1
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	3302      	adds	r3, #2
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	440b      	add	r3, r1
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	3303      	adds	r3, #3
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	440b      	add	r3, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5e:	3304      	adds	r3, #4
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	3208      	adds	r2, #8
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f76:	3301      	adds	r3, #1
 8003f78:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3c4      	bcc.n	8003f0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	3301      	adds	r3, #1
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	4413      	add	r3, r2
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	3303      	adds	r3, #3
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d90a      	bls.n	8003fea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f00a f846 	bl	800e070 <realloc>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff4:	e035      	b.n	8004062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffe:	6839      	ldr	r1, [r7, #0]
 8004000:	440a      	add	r2, r1
 8004002:	7812      	ldrb	r2, [r2, #0]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	3301      	adds	r3, #1
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	440b      	add	r3, r1
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	3302      	adds	r3, #2
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	440b      	add	r3, r1
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	3303      	adds	r3, #3
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	440b      	add	r3, r1
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	061b      	lsls	r3, r3, #24
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8004044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004046:	3304      	adds	r3, #4
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	3214      	adds	r2, #20
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	3301      	adds	r3, #1
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004068:	429a      	cmp	r2, r3
 800406a:	d3c4      	bcc.n	8003ff6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800406c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4413      	add	r3, r2
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	3301      	adds	r3, #1
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4413      	add	r3, r2
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8004088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408a:	3302      	adds	r3, #2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	4413      	add	r3, r2
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	041b      	lsls	r3, r3, #16
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800409a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409c:	3303      	adds	r3, #3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80040ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ae:	3304      	adds	r3, #4
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d90a      	bls.n	80040d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f009 ffd2 	bl	800e070 <realloc>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80040d8:	2300      	movs	r3, #0
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28
 80040dc:	e03e      	b.n	800415c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	441a      	add	r2, r3
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fb5f 	bl	80047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80040f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f2:	3304      	adds	r3, #4
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
 80040fa:	e00b      	b.n	8004114 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	441a      	add	r2, r3
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	3b01      	subs	r3, #1
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	440b      	add	r3, r1
 800410a:	7812      	ldrb	r2, [r2, #0]
 800410c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	429a      	cmp	r2, r3
 800411e:	d3ed      	bcc.n	80040fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8004120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	3b01      	subs	r3, #1
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	3b01      	subs	r3, #1
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800413c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	3220      	adds	r2, #32
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	3301      	adds	r3, #1
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004162:	429a      	cmp	r2, r3
 8004164:	d3bb      	bcc.n	80040de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004168:	4618      	mov	r0, r3
 800416a:	3738      	adds	r7, #56	; 0x38
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	0800e5c0 	.word	0x0800e5c0

0800418c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	0800e51c 	.word	0x0800e51c

080041a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	611a      	str	r2, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68d8      	ldr	r0, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6891      	ldr	r1, [r2, #8]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	4798      	blx	r3
 80041f4:	4603      	mov	r3, r0
  };
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
  }
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>:
	uint16_t tx_head = 0;
	uint16_t tx_tail = 0;
	UART_HandleTypeDef &huart;

public:
	SerialClass(UART_HandleTypeDef &huart) : huart(huart)
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	2201      	movs	r2, #1
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004230:	2200      	movs	r2, #0
 8004232:	805a      	strh	r2, [r3, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	2200      	movs	r2, #0
 800423c:	809a      	strh	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004244:	2200      	movs	r2, #0
 8004246:	80da      	strh	r2, [r3, #6]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	461a      	mov	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6093      	str	r3, [r2, #8]
	{
		//this->huart = huart;
	}
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <_ZN11SerialClass10get_handleEv>:

	inline UART_HandleTypeDef * const get_handle(void)
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
	{
		return &huart;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004270:	689b      	ldr	r3, [r3, #8]
	}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <_ZN11SerialClass9start_dmaEv>:

	inline void start_dma(void)
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		rx_tail = 0;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	2200      	movs	r2, #0
 8004298:	805a      	strh	r2, [r3, #2]
		HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a0:	6898      	ldr	r0, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	4619      	mov	r1, r3
 80042ae:	f005 ff75 	bl	800a19c <HAL_UART_Receive_DMA>
	}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_ZN11SerialClass4readEv>:



	inline int read(void)
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
	{
		uint16_t rx_head = (BUF_SIZE - huart.hdmarx->Instance->NDTR)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80042d6:	b29b      	uxth	r3, r3
				& buf_mask;
 80042d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042dc:	81fb      	strh	r3, [r7, #14]
		if (rx_tail == rx_head)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	885b      	ldrh	r3, [r3, #2]
 80042e6:	89fa      	ldrh	r2, [r7, #14]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d102      	bne.n	80042f2 <_ZN11SerialClass4readEv+0x38>
		{
			return -1;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042f0:	e01b      	b.n	800432a <_ZN11SerialClass4readEv+0x70>
		}

		int c = (int) rx_buf[rx_tail++];
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f8:	885b      	ldrh	r3, [r3, #2]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	b291      	uxth	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004304:	8051      	strh	r1, [r2, #2]
 8004306:	461a      	mov	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 8004310:	60bb      	str	r3, [r7, #8]
		rx_tail &= buf_mask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	885b      	ldrh	r3, [r3, #2]
 800431a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800431e:	b29a      	uxth	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004326:	805a      	strh	r2, [r3, #2]
		return c;
 8004328:	68bb      	ldr	r3, [r7, #8]
	}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_ZN11SerialClass5writeEPKhi>:

	inline void write(const uint8_t * const c, const int length)
 8004336:	b580      	push	{r7, lr}
 8004338:	b086      	sub	sp, #24
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
	{
		if (length > BUF_SIZE || length < 1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004348:	dc35      	bgt.n	80043b6 <_ZN11SerialClass5writeEPKhi+0x80>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dd32      	ble.n	80043b6 <_ZN11SerialClass5writeEPKhi+0x80>
		{
			return;
		}

		while(!tx_cplt)
 8004350:	bf00      	nop
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f6      	bne.n	8004352 <_ZN11SerialClass5writeEPKhi+0x1c>
		{

		}

		for (int i = 0; i < length; i++)
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e00b      	b.n	8004382 <_ZN11SerialClass5writeEPKhi+0x4c>
		{
			tx_buf[i] = c[i];
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	4413      	add	r3, r2
 8004370:	7819      	ldrb	r1, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	460a      	mov	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < length; i++)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3301      	adds	r3, #1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	dbef      	blt.n	800436a <_ZN11SerialClass5writeEPKhi+0x34>
		}

		if(tx_cplt)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <_ZN11SerialClass5writeEPKhi+0x82>
		{
			tx_cplt = false;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart, tx_buf, length);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	b292      	uxth	r2, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f005 fe84 	bl	800a0bc <HAL_UART_Transmit_DMA>
 80043b4:	e000      	b.n	80043b8 <_ZN11SerialClass5writeEPKhi+0x82>
			return;
 80043b6:	bf00      	nop
		}
	}
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <_ZN11SerialClass16tx_cplt_callbackEv>:

	inline void tx_cplt_callback(void)
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
	{
		tx_cplt = true;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
	}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN11SerialClass10reset_rbufEv>:

    inline void reset_rbuf(void){
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(&huart, (uint8_t *) rx_buf, BUF_SIZE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ea:	6898      	ldr	r0, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f6:	4619      	mov	r1, r3
 80043f8:	f005 fed0 	bl	800a19c <HAL_UART_Receive_DMA>
    }
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_TxCpltCallback>:
SerialClass serial(huart2);
//SerialClass serial(huart2);
//SerialClass serial(huart3);

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	// comparing pointer
	if (huart->Instance == serial.get_handle()->Instance)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681c      	ldr	r4, [r3, #0]
 8004410:	4809      	ldr	r0, [pc, #36]	; (8004438 <HAL_UART_TxCpltCallback+0x34>)
 8004412:	f7ff ff26 	bl	8004262 <_ZN11SerialClass10get_handleEv>
 8004416:	4603      	mov	r3, r0
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429c      	cmp	r4, r3
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_UART_TxCpltCallback+0x2a>
	{
		serial.tx_cplt_callback();
 8004428:	4803      	ldr	r0, [pc, #12]	; (8004438 <HAL_UART_TxCpltCallback+0x34>)
 800442a:	f7ff ffc8 	bl	80043be <_ZN11SerialClass16tx_cplt_callbackEv>
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	}
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bd90      	pop	{r4, r7, pc}
 8004436:	bf00      	nop
 8004438:	2000086c 	.word	0x2000086c

0800443c <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
	serial.reset_rbuf();
 8004444:	4803      	ldr	r0, [pc, #12]	; (8004454 <HAL_UART_RxCpltCallback+0x18>)
 8004446:	f7ff ffc9 	bl	80043dc <_ZN11SerialClass10reset_rbufEv>
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	2000086c 	.word	0x2000086c

08004458 <_ZN13STM32HardwareC1Ev>:
#include "SerialClass.h"

class STM32Hardware
{
public:
	STM32Hardware() :
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
			com(&serial)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a04      	ldr	r2, [pc, #16]	; (8004474 <_ZN13STM32HardwareC1Ev+0x1c>)
 8004464:	601a      	str	r2, [r3, #0]
	{

	}
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	2000086c 	.word	0x2000086c

08004478 <_ZN13STM32Hardware4initEv>:

	void init()
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	{
		com->start_dma();
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fefa 	bl	800427e <_ZN11SerialClass9start_dmaEv>
	}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <_ZN13STM32Hardware4readEv>:

	int read()
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
	{
		return com->read();
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff0b 	bl	80042ba <_ZN11SerialClass4readEv>
 80044a4:	4603      	mov	r3, r0
	}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <_ZN13STM32Hardware5writeEPhi>:

	void write(uint8_t* data, int length)
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
	{
		com->write(data, length);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff ff37 	bl	8004336 <_ZN11SerialClass5writeEPKhi>
	}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <_ZN13STM32Hardware4timeEv>:

	unsigned long time()
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 80044d8:	f001 fb34 	bl	8005b44 <HAL_GetTick>
 80044dc:	4603      	mov	r3, r0
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
      data("")
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff f818 	bl	8003528 <_ZN3ros3MsgC1Ev>
 80044f8:	4a05      	ldr	r2, [pc, #20]	; (8004510 <_ZN8std_msgs6StringC1Ev+0x28>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8004502:	605a      	str	r2, [r3, #4]
    {
    }
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	0800e5f8 	.word	0x0800e5f8
 8004514:	0800e4a0 	.word	0x0800e4a0

08004518 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fb fe70 	bl	8000210 <strlen>
 8004530:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	4413      	add	r3, r2
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f918 	bl	8004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3304      	adds	r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	18d0      	adds	r0, r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4619      	mov	r1, r3
 8004554:	f009 fdf8 	bl	800e148 <memcpy>
      offset += length_data;
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4413      	add	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
      return offset;
 8004560:	68fb      	ldr	r3, [r7, #12]
    }
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800456a:	b580      	push	{r7, lr}
 800456c:	b086      	sub	sp, #24
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	441a      	add	r2, r3
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f912 	bl	80047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3304      	adds	r3, #4
 800458e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e00b      	b.n	80045ae <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	441a      	add	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3b01      	subs	r3, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	440b      	add	r3, r1
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3ed      	bcc.n	8004596 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	3b01      	subs	r3, #1
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	605a      	str	r2, [r3, #4]
      offset += length_data;
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
     return offset;
 80045de:	693b      	ldr	r3, [r7, #16]
    }
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <_ZN8std_msgs6String7getTypeEv+0x18>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	0800e540 	.word	0x0800e540

08004604 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	0800e550 	.word	0x0800e550

08004620 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	0800e610 	.word	0x0800e610

08004640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffe8 	bl	8004620 <_ZN3ros15NodeHandleBase_C1Ev>
 8004650:	4a33      	ldr	r2, [pc, #204]	; (8004720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xe0>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fefc 	bl	8004458 <_ZN13STM32HardwareC1Ev>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	615a      	str	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3318      	adds	r3, #24
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f009 fd2b 	bl	800e0de <memset>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800468e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f009 fd22 	bl	800e0de <memset>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80046a0:	2264      	movs	r2, #100	; 0x64
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f009 fd1a 	bl	800e0de <memset>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f203 437c 	addw	r3, r3, #1148	; 0x47c
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f009 fd12 	bl	800e0de <memset>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fa7d 	bl	8003c10 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	0800e5e4 	.word	0x0800e5e4

08004724 <setup>:

char hello[] = "Hello world from STM32!";
//extern int16_t sensor_buff[5];
ros::Publisher chatter("chatter", &str_msg);

void setup(void){
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	nh.initNode();
 8004728:	4804      	ldr	r0, [pc, #16]	; (800473c <setup+0x18>)
 800472a:	f000 f866 	bl	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 800472e:	4904      	ldr	r1, [pc, #16]	; (8004740 <setup+0x1c>)
 8004730:	4802      	ldr	r0, [pc, #8]	; (800473c <setup+0x18>)
 8004732:	f000 f87f 	bl	8004834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20001878 	.word	0x20001878
 8004740:	20001db0 	.word	0x20001db0

08004744 <loop>:

void loop(void){
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0

	str_msg.data = hello;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <loop+0x1c>)
 800474a:	4a06      	ldr	r2, [pc, #24]	; (8004764 <loop+0x20>)
 800474c:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800474e:	4904      	ldr	r1, [pc, #16]	; (8004760 <loop+0x1c>)
 8004750:	4805      	ldr	r0, [pc, #20]	; (8004768 <loop+0x24>)
 8004752:	f7ff fd40 	bl	80041d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8004756:	4805      	ldr	r0, [pc, #20]	; (800476c <loop+0x28>)
 8004758:	f000 f89a 	bl	8004890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//	HAL_Delay(1);
//	    Sensor_data.data_length =5;
//	    	Sensor_data.data= sensor_buff;
//	    	sensor.publish(&Sensor_data);
//	    	nh.spinOnce();
}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20001da8 	.word	0x20001da8
 8004764:	20000014 	.word	0x20000014
 8004768:	20001db0 	.word	0x20001db0
 800476c:	20001878 	.word	0x20001878

08004770 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e00c      	b.n	800479a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	fa22 f103 	lsr.w	r1, r2, r3
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	b2ca      	uxtb	r2, r1
 8004792:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d9ef      	bls.n	8004780 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e010      	b.n	80047e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6839      	ldr	r1, [r7, #0]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	7812      	ldrb	r2, [r2, #0]
 80047d0:	4611      	mov	r1, r2
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	00d2      	lsls	r2, r2, #3
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d9eb      	bls.n	80047c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80047ec:	bf00      	nop
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fe36 	bl	8004478 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e01b      	b.n	800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x48>
    {
      if (publishers[i] == 0) // empty slot
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800484c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x42>
      {
        publishers[i] = &p;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	60da      	str	r2, [r3, #12]
        return true;
 8004872:	2301      	movs	r3, #1
 8004874:	e006      	b.n	8004884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b18      	cmp	r3, #24
 8004880:	dde0      	ble.n	8004844 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8004882:	2300      	movs	r3, #0
  }
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fe17 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 80048a2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d903      	bls.n	80048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d903      	bls.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d013      	beq.n	800490c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fdf1 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 80048ee:	4602      	mov	r2, r0
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bf8c      	ite	hi
 80048fc:	2301      	movhi	r3, #1
 80048fe:	2300      	movls	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8004906:	f06f 0301 	mvn.w	r3, #1
 800490a:	e190      	b.n	8004c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fdbe 	bl	8004492 <_ZN13STM32Hardware4readEv>
 8004916:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f2c0 8170 	blt.w	8004c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	441a      	add	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004936:	2b07      	cmp	r3, #7
 8004938:	d11d      	bne.n	8004976 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004940:	1c59      	adds	r1, r3, #1
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	b2d1      	uxtb	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	460a      	mov	r2, r1
 8004952:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800495a:	1e5a      	subs	r2, r3, #1
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1b7      	bne.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2208      	movs	r2, #8
 8004970:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004974:	e7b2      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d128      	bne.n	80049d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2bff      	cmp	r3, #255	; 0xff
 8004984:	d10d      	bne.n	80049a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f103 0214 	add.w	r2, r3, #20
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80049a0:	e79c      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fd92 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	bf8c      	ite	hi
 80049ba:	2301      	movhi	r3, #1
 80049bc:	2300      	movls	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d08b      	beq.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 80049cc:	f06f 0301 	mvn.w	r3, #1
 80049d0:	e12d      	b.n	8004c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d118      	bne.n	8004a0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2bfe      	cmp	r3, #254	; 0xfe
 80049e0:	d107      	bne.n	80049f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 80049f0:	e774      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f47f af6b 	bne.w	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f915 	bl	8004c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004a0c:	e766      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d113      	bne.n	8004a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004a3e:	e74d      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d110      	bne.n	8004a6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	441a      	add	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004a6a:	e737      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d116      	bne.n	8004aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004a7c:	425a      	negs	r2, r3
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	bf58      	it	pl
 8004a84:	4253      	negpl	r3, r2
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d107      	bne.n	8004a9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004a98:	e720      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004aa2:	e71b      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d10f      	bne.n	8004ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8004acc:	e706      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004ad4:	2b06      	cmp	r3, #6
 8004ad6:	d117      	bne.n	8004b08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	441a      	add	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2207      	movs	r2, #7
 8004aee:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f aeef 	bne.w	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2208      	movs	r2, #8
 8004b02:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8004b06:	e6e9      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	f47f aee4 	bne.w	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004b22:	425a      	negs	r2, r3
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	bf58      	it	pl
 8004b2a:	4253      	negpl	r3, r2
 8004b2c:	2bff      	cmp	r3, #255	; 0xff
 8004b2e:	f47f aed5 	bne.w	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d110      	bne.n	8004b5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f87a 	bl	8004c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f894 	bl	8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b5c:	e067      	b.n	8004c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004b64:	2b0a      	cmp	r3, #10
 8004b66:	d106      	bne.n	8004b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3318      	adds	r3, #24
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f95e 	bl	8004e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004b74:	e6b2      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004b7c:	2b06      	cmp	r3, #6
 8004b7e:	d10d      	bne.n	8004b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3318      	adds	r3, #24
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7ff f97e 	bl	8003e8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8004b9a:	e69f      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004ba2:	2b0b      	cmp	r3, #11
 8004ba4:	d104      	bne.n	8004bb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8004bae:	e695      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004bb6:	3b64      	subs	r3, #100	; 0x64
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f43f ae89 	beq.w	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004bd0:	3b64      	subs	r3, #100	; 0x64
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	6858      	ldr	r0, [r3, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8004be4:	3b64      	subs	r3, #100	; 0x64
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	3218      	adds	r2, #24
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4798      	blx	r3
    while (true)
 8004bfe:	e66d      	b.n	80048dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004c00:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00f      	beq.n	8004c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d906      	bls.n	8004c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f809 	bl	8004c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8004c2c:	2300      	movs	r3, #0
  }
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004c3e:	f107 030c 	add.w	r3, r7, #12
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fc80 	bl	8003548 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f107 020c 	add.w	r2, r7, #12
 8004c52:	210a      	movs	r1, #10
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
    rt_time = hardware_.time();
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fc37 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]
  }
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b08b      	sub	sp, #44	; 0x2c
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004c78:	f107 030c 	add.w	r3, r7, #12
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe fd53 	bl	8003728 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	e05a      	b.n	8004d3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xce>
    {
      if (publishers[i] != 0) // non-empty slot
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d04f      	beq.n	8004d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xc8>
      {
        ti.topic_id = publishers[i]->id_;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cae:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4798      	blx	r3
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf0:	6859      	ldr	r1, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4608      	mov	r0, r1
 8004d08:	4798      	blx	r3
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d12:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681c      	ldr	r4, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8004d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fa69 	bl	80041fe <_ZN3ros9Publisher15getEndpointTypeEv>
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	461a      	mov	r2, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	2b18      	cmp	r3, #24
 8004d42:	dda1      	ble.n	8004c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	e067      	b.n	8004e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1aa>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d05b      	beq.n	8004e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a4>
      {
        ti.topic_id = subscribers[i]->id_;
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4608      	mov	r0, r1
 8004da6:	4798      	blx	r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4798      	blx	r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dda:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681c      	ldr	r4, [r3, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3304      	adds	r3, #4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4798      	blx	r3
 8004e08:	4601      	mov	r1, r0
 8004e0a:	f107 030c 	add.w	r3, r7, #12
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	3301      	adds	r3, #1
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b18      	cmp	r3, #24
 8004e1e:	dd94      	ble.n	8004d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xda>
      }
    }
    configured_ = true;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8004e28:	bf00      	nop
 8004e2a:	372c      	adds	r7, #44	; 0x2c
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd90      	pop	{r4, r7, pc}

08004e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fb82 	bl	8003548 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fb41 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004e58:	f107 0308 	add.w	r3, r7, #8
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fbe2 	bl	8003628 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4914      	ldr	r1, [pc, #80]	; (8004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004e6a:	fba1 1303 	umull	r1, r3, r1, r3
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	4413      	add	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004e74:	6939      	ldr	r1, [r7, #16]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8004e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e84:	fb00 f303 	mul.w	r3, r0, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	440b      	add	r3, r1
 8004e92:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004e94:	f107 0308 	add.w	r3, r7, #8
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f8a5 	bl	8004fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fb12 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	000f4240 	.word	0x000f4240

08004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b63      	cmp	r3, #99	; 0x63
 8004ed4:	dd09      	ble.n	8004eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004edc:	f083 0301 	eor.w	r3, r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e079      	b.n	8004fde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8004ef6:	3207      	adds	r2, #7
 8004ef8:	4611      	mov	r1, r2
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
 8004efe:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	22ff      	movs	r2, #255	; 0xff
 8004f04:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	22fe      	movs	r2, #254	; 0xfe
 8004f0c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8004f36:	4413      	add	r3, r2
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	b21b      	sxth	r3, r3
 8004f52:	121b      	asrs	r3, r3, #8
 8004f54:	b21b      	sxth	r3, r3
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004f62:	2305      	movs	r3, #5
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e00c      	b.n	8004f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	3306      	adds	r3, #6
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	dded      	ble.n	8004f68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3307      	adds	r3, #7
 8004f90:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	425a      	negs	r2, r3
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	bf58      	it	pl
 8004f9c:	4253      	negpl	r3, r2
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	6179      	str	r1, [r7, #20]
 8004fa6:	43d2      	mvns	r2, r2
 8004fa8:	b2d1      	uxtb	r1, r2
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4413      	add	r3, r2
 8004fae:	460a      	mov	r2, r1
 8004fb0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fba:	dc0a      	bgt.n	8004fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1d18      	adds	r0, r3, #4
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f7ff fa70 	bl	80044ae <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	e005      	b.n	8004fde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004fd2:	4905      	ldr	r1, [pc, #20]	; (8004fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f847 	bl	8005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	0800e574 	.word	0x0800e574

08004fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff fa68 	bl	80044d0 <_ZN13STM32Hardware4timeEv>
 8005000:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4914      	ldr	r1, [pc, #80]	; (800505c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 800500a:	fba1 1303 	umull	r1, r3, r1, r3
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4b0f      	ldr	r3, [pc, #60]	; (800505c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x70>)
 8005020:	fba3 0302 	umull	r0, r3, r3, r2
 8005024:	099b      	lsrs	r3, r3, #6
 8005026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800502a:	fb00 f303 	mul.w	r3, r0, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	4a0b      	ldr	r2, [pc, #44]	; (8005060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	1aca      	subs	r2, r1, r3
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 800503a:	4413      	add	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f103 020c 	add.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3310      	adds	r3, #16
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fced 	bl	8005a2c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	10624dd3 	.word	0x10624dd3
 8005060:	000f4240 	.word	0x000f4240
 8005064:	3b9aca00 	.word	0x3b9aca00

08005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	2103      	movs	r1, #3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f804 	bl	8005084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	460b      	mov	r3, r1
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005092:	f107 0314 	add.w	r3, r7, #20
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fd0a 	bl	8003ab0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800509c:	7afb      	ldrb	r3, [r7, #11]
 800509e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f107 0214 	add.w	r2, r7, #20
 80050ae:	2107      	movs	r1, #7
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	4798      	blx	r3
  }
 80050b4:	bf00      	nop
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_Z41__static_initialization_and_destruction_0ii>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d114      	bne.n	80050f6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10f      	bne.n	80050f6 <_Z41__static_initialization_and_destruction_0ii+0x3a>
SerialClass serial(huart2);
 80050d6:	490a      	ldr	r1, [pc, #40]	; (8005100 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80050d8:	480a      	ldr	r0, [pc, #40]	; (8005104 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80050da:	f7ff f89c 	bl	8004216 <_ZN11SerialClassC1ER20__UART_HandleTypeDef>
ros::NodeHandle nh;
 80050de:	480a      	ldr	r0, [pc, #40]	; (8005108 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80050e0:	f7ff faae 	bl	8004640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80050e4:	4809      	ldr	r0, [pc, #36]	; (800510c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80050e6:	f7ff f9ff 	bl	80044e8 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80050ea:	2300      	movs	r3, #0
 80050ec:	4a07      	ldr	r2, [pc, #28]	; (800510c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80050ee:	4908      	ldr	r1, [pc, #32]	; (8005110 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80050f0:	4808      	ldr	r0, [pc, #32]	; (8005114 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80050f2:	f7ff f859 	bl	80041a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200004f8 	.word	0x200004f8
 8005104:	2000086c 	.word	0x2000086c
 8005108:	20001878 	.word	0x20001878
 800510c:	20001da8 	.word	0x20001da8
 8005110:	0800e5b0 	.word	0x0800e5b0
 8005114:	20001db0 	.word	0x20001db0

08005118 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    return configured_;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <_GLOBAL__sub_I_serial>:
 8005132:	b580      	push	{r7, lr}
 8005134:	af00      	add	r7, sp, #0
 8005136:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800513a:	2001      	movs	r0, #1
 800513c:	f7ff ffbe 	bl	80050bc <_Z41__static_initialization_and_destruction_0ii>
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_MspInit+0x54>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	4a11      	ldr	r2, [pc, #68]	; (8005198 <HAL_MspInit+0x54>)
 8005154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005158:	6453      	str	r3, [r2, #68]	; 0x44
 800515a:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <HAL_MspInit+0x54>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005162:	607b      	str	r3, [r7, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_MspInit+0x54>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <HAL_MspInit+0x54>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005174:	6413      	str	r3, [r2, #64]	; 0x40
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_MspInit+0x54>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005182:	2200      	movs	r2, #0
 8005184:	210f      	movs	r1, #15
 8005186:	f06f 0001 	mvn.w	r0, #1
 800518a:	f001 fc4f 	bl	8006a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800

0800519c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1d      	ldr	r2, [pc, #116]	; (8005230 <HAL_CAN_MspInit+0x94>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d134      	bne.n	8005228 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <HAL_CAN_MspInit+0x98>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <HAL_CAN_MspInit+0x98>)
 80051c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051cc:	6413      	str	r3, [r2, #64]	; 0x40
 80051ce:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_CAN_MspInit+0x98>)
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <HAL_CAN_MspInit+0x98>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	4a14      	ldr	r2, [pc, #80]	; (8005234 <HAL_CAN_MspInit+0x98>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_CAN_MspInit+0x98>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80051f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80051fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fc:	2302      	movs	r3, #2
 80051fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005204:	2303      	movs	r3, #3
 8005206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005208:	2309      	movs	r3, #9
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520c:	f107 0314 	add.w	r3, r7, #20
 8005210:	4619      	mov	r1, r3
 8005212:	4809      	ldr	r0, [pc, #36]	; (8005238 <HAL_CAN_MspInit+0x9c>)
 8005214:	f002 f836 	bl	8007284 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8005218:	2200      	movs	r2, #0
 800521a:	2105      	movs	r1, #5
 800521c:	2014      	movs	r0, #20
 800521e:	f001 fc05 	bl	8006a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005222:	2014      	movs	r0, #20
 8005224:	f001 fc1e 	bl	8006a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005228:	bf00      	nop
 800522a:	3728      	adds	r7, #40	; 0x28
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40006400 	.word	0x40006400
 8005234:	40023800 	.word	0x40023800
 8005238:	40020000 	.word	0x40020000

0800523c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <HAL_SPI_MspInit+0xa8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d13d      	bne.n	80052da <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <HAL_SPI_MspInit+0xac>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <HAL_SPI_MspInit+0xac>)
 8005268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800526c:	6413      	str	r3, [r2, #64]	; 0x40
 800526e:	4b1e      	ldr	r3, [pc, #120]	; (80052e8 <HAL_SPI_MspInit+0xac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <HAL_SPI_MspInit+0xac>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005282:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_SPI_MspInit+0xac>)
 8005284:	f043 0302 	orr.w	r3, r3, #2
 8005288:	6313      	str	r3, [r2, #48]	; 0x30
 800528a:	4b17      	ldr	r3, [pc, #92]	; (80052e8 <HAL_SPI_MspInit+0xac>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005296:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800529a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529c:	2302      	movs	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a4:	2303      	movs	r3, #3
 80052a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052a8:	2305      	movs	r3, #5
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	4619      	mov	r1, r3
 80052b2:	480e      	ldr	r0, [pc, #56]	; (80052ec <HAL_SPI_MspInit+0xb0>)
 80052b4:	f001 ffe6 	bl	8007284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80052b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052c2:	2301      	movs	r3, #1
 80052c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c6:	2303      	movs	r3, #3
 80052c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052ca:	2305      	movs	r3, #5
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4619      	mov	r1, r3
 80052d4:	4805      	ldr	r0, [pc, #20]	; (80052ec <HAL_SPI_MspInit+0xb0>)
 80052d6:	f001 ffd5 	bl	8007284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80052da:	bf00      	nop
 80052dc:	3728      	adds	r7, #40	; 0x28
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40003800 	.word	0x40003800
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40020400 	.word	0x40020400

080052f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f8:	f107 031c 	add.w	r3, r7, #28
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2d      	ldr	r2, [pc, #180]	; (80053c4 <HAL_TIM_Base_MspInit+0xd4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d12c      	bne.n	800536c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 800531c:	f043 0302 	orr.w	r3, r3, #2
 8005320:	6413      	str	r3, [r2, #64]	; 0x40
 8005322:	4b29      	ldr	r3, [pc, #164]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	4b25      	ldr	r3, [pc, #148]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	4a24      	ldr	r2, [pc, #144]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6313      	str	r3, [r2, #48]	; 0x30
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534e:	2302      	movs	r3, #2
 8005350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005356:	2300      	movs	r3, #0
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800535a:	2302      	movs	r3, #2
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	4619      	mov	r1, r3
 8005364:	4819      	ldr	r0, [pc, #100]	; (80053cc <HAL_TIM_Base_MspInit+0xdc>)
 8005366:	f001 ff8d 	bl	8007284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800536a:	e026      	b.n	80053ba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <HAL_TIM_Base_MspInit+0xe0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d10e      	bne.n	8005394 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005380:	f043 0304 	orr.w	r3, r3, #4
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]
}
 8005392:	e012      	b.n	80053ba <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <HAL_TIM_Base_MspInit+0xe4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10d      	bne.n	80053ba <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	4a08      	ldr	r2, [pc, #32]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 80053a8:	f043 0302 	orr.w	r3, r3, #2
 80053ac:	6453      	str	r3, [r2, #68]	; 0x44
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_TIM_Base_MspInit+0xd8>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	bf00      	nop
 80053bc:	3730      	adds	r7, #48	; 0x30
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40020000 	.word	0x40020000
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40010400 	.word	0x40010400

080053d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	60da      	str	r2, [r3, #12]
 80053ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a19      	ldr	r2, [pc, #100]	; (800545c <HAL_TIM_Encoder_MspInit+0x84>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d12b      	bne.n	8005452 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <HAL_TIM_Encoder_MspInit+0x88>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a17      	ldr	r2, [pc, #92]	; (8005460 <HAL_TIM_Encoder_MspInit+0x88>)
 8005404:	f043 0308 	orr.w	r3, r3, #8
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <HAL_TIM_Encoder_MspInit+0x88>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_TIM_Encoder_MspInit+0x88>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <HAL_TIM_Encoder_MspInit+0x88>)
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_TIM_Encoder_MspInit+0x88>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005432:	2303      	movs	r3, #3
 8005434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005436:	2302      	movs	r3, #2
 8005438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543a:	2300      	movs	r3, #0
 800543c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543e:	2300      	movs	r3, #0
 8005440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005442:	2302      	movs	r3, #2
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4619      	mov	r1, r3
 800544c:	4805      	ldr	r0, [pc, #20]	; (8005464 <HAL_TIM_Encoder_MspInit+0x8c>)
 800544e:	f001 ff19 	bl	8007284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005452:	bf00      	nop
 8005454:	3728      	adds	r7, #40	; 0x28
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40000c00 	.word	0x40000c00
 8005460:	40023800 	.word	0x40023800
 8005464:	40020000 	.word	0x40020000

08005468 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
 800547e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a24      	ldr	r2, [pc, #144]	; (8005518 <HAL_TIM_MspPostInit+0xb0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d11e      	bne.n	80054c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	4b23      	ldr	r3, [pc, #140]	; (800551c <HAL_TIM_MspPostInit+0xb4>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	4a22      	ldr	r2, [pc, #136]	; (800551c <HAL_TIM_MspPostInit+0xb4>)
 8005494:	f043 0302 	orr.w	r3, r3, #2
 8005498:	6313      	str	r3, [r2, #48]	; 0x30
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <HAL_TIM_MspPostInit+0xb4>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054a6:	23c0      	movs	r3, #192	; 0xc0
 80054a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054aa:	2302      	movs	r3, #2
 80054ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054b2:	2300      	movs	r3, #0
 80054b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054b6:	2302      	movs	r3, #2
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	4619      	mov	r1, r3
 80054c0:	4817      	ldr	r0, [pc, #92]	; (8005520 <HAL_TIM_MspPostInit+0xb8>)
 80054c2:	f001 fedf 	bl	8007284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80054c6:	e022      	b.n	800550e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a15      	ldr	r2, [pc, #84]	; (8005524 <HAL_TIM_MspPostInit+0xbc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d11d      	bne.n	800550e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b11      	ldr	r3, [pc, #68]	; (800551c <HAL_TIM_MspPostInit+0xb4>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <HAL_TIM_MspPostInit+0xb4>)
 80054dc:	f043 0304 	orr.w	r3, r3, #4
 80054e0:	6313      	str	r3, [r2, #48]	; 0x30
 80054e2:	4b0e      	ldr	r3, [pc, #56]	; (800551c <HAL_TIM_MspPostInit+0xb4>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054ee:	23c0      	movs	r3, #192	; 0xc0
 80054f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f2:	2302      	movs	r3, #2
 80054f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054fa:	2300      	movs	r3, #0
 80054fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80054fe:	2303      	movs	r3, #3
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005502:	f107 0314 	add.w	r3, r7, #20
 8005506:	4619      	mov	r1, r3
 8005508:	4807      	ldr	r0, [pc, #28]	; (8005528 <HAL_TIM_MspPostInit+0xc0>)
 800550a:	f001 febb 	bl	8007284 <HAL_GPIO_Init>
}
 800550e:	bf00      	nop
 8005510:	3728      	adds	r7, #40	; 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	40000800 	.word	0x40000800
 800551c:	40023800 	.word	0x40023800
 8005520:	40020400 	.word	0x40020400
 8005524:	40010400 	.word	0x40010400
 8005528:	40020800 	.word	0x40020800

0800552c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	; 0x30
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005534:	f107 031c 	add.w	r3, r7, #28
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	605a      	str	r2, [r3, #4]
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	60da      	str	r2, [r3, #12]
 8005542:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a9a      	ldr	r2, [pc, #616]	; (80057b4 <HAL_UART_MspInit+0x288>)
 800554a:	4293      	cmp	r3, r2
 800554c:	f040 8095 	bne.w	800567a <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
 8005554:	4b98      	ldr	r3, [pc, #608]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	4a97      	ldr	r2, [pc, #604]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 800555a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800555e:	6413      	str	r3, [r2, #64]	; 0x40
 8005560:	4b95      	ldr	r3, [pc, #596]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005568:	61bb      	str	r3, [r7, #24]
 800556a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	4b91      	ldr	r3, [pc, #580]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	4a90      	ldr	r2, [pc, #576]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 8005576:	f043 0304 	orr.w	r3, r3, #4
 800557a:	6313      	str	r3, [r2, #48]	; 0x30
 800557c:	4b8e      	ldr	r3, [pc, #568]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005588:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800558c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558e:	2302      	movs	r3, #2
 8005590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005596:	2303      	movs	r3, #3
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800559a:	2308      	movs	r3, #8
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800559e:	f107 031c 	add.w	r3, r7, #28
 80055a2:	4619      	mov	r1, r3
 80055a4:	4885      	ldr	r0, [pc, #532]	; (80057bc <HAL_UART_MspInit+0x290>)
 80055a6:	f001 fe6d 	bl	8007284 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80055aa:	4b85      	ldr	r3, [pc, #532]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055ac:	4a85      	ldr	r2, [pc, #532]	; (80057c4 <HAL_UART_MspInit+0x298>)
 80055ae:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80055b0:	4b83      	ldr	r3, [pc, #524]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055b8:	4b81      	ldr	r3, [pc, #516]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055be:	4b80      	ldr	r3, [pc, #512]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055c4:	4b7e      	ldr	r3, [pc, #504]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ca:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055cc:	4b7c      	ldr	r3, [pc, #496]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055d2:	4b7b      	ldr	r3, [pc, #492]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80055d8:	4b79      	ldr	r3, [pc, #484]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055de:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055e0:	4b77      	ldr	r3, [pc, #476]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055e6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055e8:	4b75      	ldr	r3, [pc, #468]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80055ee:	4874      	ldr	r0, [pc, #464]	; (80057c0 <HAL_UART_MspInit+0x294>)
 80055f0:	f001 fa46 	bl	8006a80 <HAL_DMA_Init>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80055fa:	f7fd ff7f 	bl	80034fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a6f      	ldr	r2, [pc, #444]	; (80057c0 <HAL_UART_MspInit+0x294>)
 8005602:	63da      	str	r2, [r3, #60]	; 0x3c
 8005604:	4a6e      	ldr	r2, [pc, #440]	; (80057c0 <HAL_UART_MspInit+0x294>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800560a:	4b6f      	ldr	r3, [pc, #444]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 800560c:	4a6f      	ldr	r2, [pc, #444]	; (80057cc <HAL_UART_MspInit+0x2a0>)
 800560e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005610:	4b6d      	ldr	r3, [pc, #436]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005616:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005618:	4b6b      	ldr	r3, [pc, #428]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 800561a:	2240      	movs	r2, #64	; 0x40
 800561c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800561e:	4b6a      	ldr	r3, [pc, #424]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005620:	2200      	movs	r2, #0
 8005622:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005624:	4b68      	ldr	r3, [pc, #416]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800562a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800562c:	4b66      	ldr	r3, [pc, #408]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005632:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005638:	4b63      	ldr	r3, [pc, #396]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800563e:	4b62      	ldr	r3, [pc, #392]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005640:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005644:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005646:	4b60      	ldr	r3, [pc, #384]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005648:	2200      	movs	r2, #0
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800564c:	485e      	ldr	r0, [pc, #376]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 800564e:	f001 fa17 	bl	8006a80 <HAL_DMA_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8005658:	f7fd ff50 	bl	80034fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a5a      	ldr	r2, [pc, #360]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
 8005662:	4a59      	ldr	r2, [pc, #356]	; (80057c8 <HAL_UART_MspInit+0x29c>)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005668:	2200      	movs	r2, #0
 800566a:	2105      	movs	r1, #5
 800566c:	2034      	movs	r0, #52	; 0x34
 800566e:	f001 f9dd 	bl	8006a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005672:	2034      	movs	r0, #52	; 0x34
 8005674:	f001 f9f6 	bl	8006a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005678:	e098      	b.n	80057ac <HAL_UART_MspInit+0x280>
  else if(huart->Instance==USART2)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a54      	ldr	r2, [pc, #336]	; (80057d0 <HAL_UART_MspInit+0x2a4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	f040 8093 	bne.w	80057ac <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	4b4b      	ldr	r3, [pc, #300]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	4a4a      	ldr	r2, [pc, #296]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 8005690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005694:	6413      	str	r3, [r2, #64]	; 0x40
 8005696:	4b48      	ldr	r3, [pc, #288]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	4a43      	ldr	r2, [pc, #268]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	6313      	str	r3, [r2, #48]	; 0x30
 80056b2:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <HAL_UART_MspInit+0x28c>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80056be:	230c      	movs	r3, #12
 80056c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c2:	2302      	movs	r3, #2
 80056c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ca:	2303      	movs	r3, #3
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056ce:	2307      	movs	r3, #7
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d2:	f107 031c 	add.w	r3, r7, #28
 80056d6:	4619      	mov	r1, r3
 80056d8:	483e      	ldr	r0, [pc, #248]	; (80057d4 <HAL_UART_MspInit+0x2a8>)
 80056da:	f001 fdd3 	bl	8007284 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80056de:	4b3e      	ldr	r3, [pc, #248]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 80056e0:	4a3e      	ldr	r2, [pc, #248]	; (80057dc <HAL_UART_MspInit+0x2b0>)
 80056e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80056e4:	4b3c      	ldr	r3, [pc, #240]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 80056e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ec:	4b3a      	ldr	r3, [pc, #232]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f2:	4b39      	ldr	r3, [pc, #228]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056f8:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 80056fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005700:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 8005702:	2200      	movs	r2, #0
 8005704:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005706:	4b34      	ldr	r3, [pc, #208]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800570c:	4b32      	ldr	r3, [pc, #200]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 800570e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005712:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005714:	4b30      	ldr	r3, [pc, #192]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 8005716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800571a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800571c:	4b2e      	ldr	r3, [pc, #184]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 800571e:	2200      	movs	r2, #0
 8005720:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005722:	482d      	ldr	r0, [pc, #180]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 8005724:	f001 f9ac 	bl	8006a80 <HAL_DMA_Init>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_UART_MspInit+0x206>
      Error_Handler();
 800572e:	f7fd fee5 	bl	80034fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a28      	ldr	r2, [pc, #160]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 8005736:	63da      	str	r2, [r3, #60]	; 0x3c
 8005738:	4a27      	ldr	r2, [pc, #156]	; (80057d8 <HAL_UART_MspInit+0x2ac>)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800573e:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005740:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <HAL_UART_MspInit+0x2b8>)
 8005742:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005744:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800574a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800574c:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 800574e:	2240      	movs	r2, #64	; 0x40
 8005750:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005752:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005754:	2200      	movs	r2, #0
 8005756:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005758:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 800575a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800575e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005762:	2200      	movs	r2, #0
 8005764:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005778:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 800577c:	2200      	movs	r2, #0
 800577e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005780:	4817      	ldr	r0, [pc, #92]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005782:	f001 f97d 	bl	8006a80 <HAL_DMA_Init>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_UART_MspInit+0x264>
      Error_Handler();
 800578c:	f7fd feb6 	bl	80034fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a13      	ldr	r2, [pc, #76]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
 8005796:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <HAL_UART_MspInit+0x2b4>)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800579c:	2200      	movs	r2, #0
 800579e:	2105      	movs	r1, #5
 80057a0:	2026      	movs	r0, #38	; 0x26
 80057a2:	f001 f943 	bl	8006a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057a6:	2026      	movs	r0, #38	; 0x26
 80057a8:	f001 f95c 	bl	8006a64 <HAL_NVIC_EnableIRQ>
}
 80057ac:	bf00      	nop
 80057ae:	3730      	adds	r7, #48	; 0x30
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40004c00 	.word	0x40004c00
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40020800 	.word	0x40020800
 80057c0:	20000540 	.word	0x20000540
 80057c4:	40026040 	.word	0x40026040
 80057c8:	200005a0 	.word	0x200005a0
 80057cc:	40026070 	.word	0x40026070
 80057d0:	40004400 	.word	0x40004400
 80057d4:	40020000 	.word	0x40020000
 80057d8:	20000600 	.word	0x20000600
 80057dc:	40026088 	.word	0x40026088
 80057e0:	20000660 	.word	0x20000660
 80057e4:	400260a0 	.word	0x400260a0

080057e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	; 0x30
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80057f8:	2300      	movs	r3, #0
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <HAL_InitTick+0xd4>)
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	4a2e      	ldr	r2, [pc, #184]	; (80058bc <HAL_InitTick+0xd4>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6453      	str	r3, [r2, #68]	; 0x44
 8005808:	4b2c      	ldr	r3, [pc, #176]	; (80058bc <HAL_InitTick+0xd4>)
 800580a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	60bb      	str	r3, [r7, #8]
 8005812:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005814:	f107 020c 	add.w	r2, r7, #12
 8005818:	f107 0310 	add.w	r3, r7, #16
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f002 f810 	bl	8007844 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005824:	f001 fffa 	bl	800781c <HAL_RCC_GetPCLK2Freq>
 8005828:	4603      	mov	r3, r0
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	4a23      	ldr	r2, [pc, #140]	; (80058c0 <HAL_InitTick+0xd8>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	0c9b      	lsrs	r3, r3, #18
 8005838:	3b01      	subs	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800583c:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <HAL_InitTick+0xdc>)
 800583e:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_InitTick+0xe0>)
 8005840:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_InitTick+0xdc>)
 8005844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005848:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800584a:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <HAL_InitTick+0xdc>)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005850:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_InitTick+0xdc>)
 8005852:	2200      	movs	r2, #0
 8005854:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005856:	4b1b      	ldr	r3, [pc, #108]	; (80058c4 <HAL_InitTick+0xdc>)
 8005858:	2200      	movs	r2, #0
 800585a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_InitTick+0xdc>)
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005862:	4818      	ldr	r0, [pc, #96]	; (80058c4 <HAL_InitTick+0xdc>)
 8005864:	f003 f804 	bl	8008870 <HAL_TIM_Base_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800586e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005872:	2b00      	cmp	r3, #0
 8005874:	d11b      	bne.n	80058ae <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005876:	4813      	ldr	r0, [pc, #76]	; (80058c4 <HAL_InitTick+0xdc>)
 8005878:	f003 f84a 	bl	8008910 <HAL_TIM_Base_Start_IT>
 800587c:	4603      	mov	r3, r0
 800587e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005886:	2b00      	cmp	r3, #0
 8005888:	d111      	bne.n	80058ae <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800588a:	2019      	movs	r0, #25
 800588c:	f001 f8ea 	bl	8006a64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b0f      	cmp	r3, #15
 8005894:	d808      	bhi.n	80058a8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005896:	2200      	movs	r2, #0
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	2019      	movs	r0, #25
 800589c:	f001 f8c6 	bl	8006a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <HAL_InitTick+0xe4>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e002      	b.n	80058ae <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80058ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3730      	adds	r7, #48	; 0x30
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	431bde83 	.word	0x431bde83
 80058c4:	20001dc4 	.word	0x20001dc4
 80058c8:	40010000 	.word	0x40010000
 80058cc:	20000030 	.word	0x20000030

080058d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80058d4:	e7fe      	b.n	80058d4 <NMI_Handler+0x4>

080058d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058d6:	b480      	push	{r7}
 80058d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058da:	e7fe      	b.n	80058da <HardFault_Handler+0x4>

080058dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058e0:	e7fe      	b.n	80058e0 <MemManage_Handler+0x4>

080058e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058e2:	b480      	push	{r7}
 80058e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058e6:	e7fe      	b.n	80058e6 <BusFault_Handler+0x4>

080058e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058ec:	e7fe      	b.n	80058ec <UsageFault_Handler+0x4>

080058ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005900:	4802      	ldr	r0, [pc, #8]	; (800590c <DMA1_Stream2_IRQHandler+0x10>)
 8005902:	f001 fa55 	bl	8006db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005906:	bf00      	nop
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000540 	.word	0x20000540

08005910 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005914:	4802      	ldr	r0, [pc, #8]	; (8005920 <DMA1_Stream4_IRQHandler+0x10>)
 8005916:	f001 fa4b 	bl	8006db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800591a:	bf00      	nop
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	200005a0 	.word	0x200005a0

08005924 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005928:	4802      	ldr	r0, [pc, #8]	; (8005934 <DMA1_Stream5_IRQHandler+0x10>)
 800592a:	f001 fa41 	bl	8006db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800592e:	bf00      	nop
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000600 	.word	0x20000600

08005938 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800593c:	4802      	ldr	r0, [pc, #8]	; (8005948 <DMA1_Stream6_IRQHandler+0x10>)
 800593e:	f001 fa37 	bl	8006db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005942:	bf00      	nop
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000660 	.word	0x20000660

0800594c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005950:	4802      	ldr	r0, [pc, #8]	; (800595c <CAN1_RX0_IRQHandler+0x10>)
 8005952:	f000 fd83 	bl	800645c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005956:	bf00      	nop
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000310 	.word	0x20000310

08005960 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005964:	4802      	ldr	r0, [pc, #8]	; (8005970 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005966:	f003 faf2 	bl	8008f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20001dc4 	.word	0x20001dc4

08005974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005978:	4802      	ldr	r0, [pc, #8]	; (8005984 <USART2_IRQHandler+0x10>)
 800597a:	f004 fc35 	bl	800a1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800597e:	bf00      	nop
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	200004f8 	.word	0x200004f8

08005988 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800598c:	4802      	ldr	r0, [pc, #8]	; (8005998 <UART4_IRQHandler+0x10>)
 800598e:	f004 fc2b 	bl	800a1e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200004b0 	.word	0x200004b0

0800599c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059a4:	4a14      	ldr	r2, [pc, #80]	; (80059f8 <_sbrk+0x5c>)
 80059a6:	4b15      	ldr	r3, [pc, #84]	; (80059fc <_sbrk+0x60>)
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059b0:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <_sbrk+0x64>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <_sbrk+0x64>)
 80059ba:	4a12      	ldr	r2, [pc, #72]	; (8005a04 <_sbrk+0x68>)
 80059bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <_sbrk+0x64>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4413      	add	r3, r2
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059cc:	f008 fb90 	bl	800e0f0 <__errno>
 80059d0:	4603      	mov	r3, r0
 80059d2:	220c      	movs	r2, #12
 80059d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059da:	e009      	b.n	80059f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <_sbrk+0x64>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <_sbrk+0x64>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4413      	add	r3, r2
 80059ea:	4a05      	ldr	r2, [pc, #20]	; (8005a00 <_sbrk+0x64>)
 80059ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059ee:	68fb      	ldr	r3, [r7, #12]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20020000 	.word	0x20020000
 80059fc:	00000400 	.word	0x00000400
 8005a00:	20001e0c 	.word	0x20001e0c
 8005a04:	20005cb0 	.word	0x20005cb0

08005a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a0c:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <SystemInit+0x20>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	4a05      	ldr	r2, [pc, #20]	; (8005a28 <SystemInit+0x20>)
 8005a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	0a5a      	lsrs	r2, r3, #9
 8005a3c:	490f      	ldr	r1, [pc, #60]	; (8005a7c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005a3e:	fba1 1202 	umull	r1, r2, r1, r2
 8005a42:	09d2      	lsrs	r2, r2, #7
 8005a44:	490e      	ldr	r1, [pc, #56]	; (8005a80 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8005a46:	fb01 f202 	mul.w	r2, r1, r2
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	0a5b      	lsrs	r3, r3, #9
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	00044b83 	.word	0x00044b83
 8005a80:	3b9aca00 	.word	0x3b9aca00

08005a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005abc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005a88:	f7ff ffbe 	bl	8005a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a8c:	480c      	ldr	r0, [pc, #48]	; (8005ac0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a8e:	490d      	ldr	r1, [pc, #52]	; (8005ac4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a94:	e002      	b.n	8005a9c <LoopCopyDataInit>

08005a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a9a:	3304      	adds	r3, #4

08005a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005aa0:	d3f9      	bcc.n	8005a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005aa2:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005aa4:	4c0a      	ldr	r4, [pc, #40]	; (8005ad0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005aa8:	e001      	b.n	8005aae <LoopFillZerobss>

08005aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005aac:	3204      	adds	r2, #4

08005aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ab0:	d3fb      	bcc.n	8005aaa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005ab2:	f008 fb23 	bl	800e0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ab6:	f7fb f9ef 	bl	8000e98 <main>
  bx  lr    
 8005aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ac4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8005ac8:	0800e914 	.word	0x0800e914
  ldr r2, =_sbss
 8005acc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8005ad0:	20005cb0 	.word	0x20005cb0

08005ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ad4:	e7fe      	b.n	8005ad4 <ADC_IRQHandler>
	...

08005ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <HAL_Init+0x40>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <HAL_Init+0x40>)
 8005ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_Init+0x40>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a0a      	ldr	r2, [pc, #40]	; (8005b18 <HAL_Init+0x40>)
 8005aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005af4:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <HAL_Init+0x40>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a07      	ldr	r2, [pc, #28]	; (8005b18 <HAL_Init+0x40>)
 8005afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b00:	2003      	movs	r0, #3
 8005b02:	f000 ff88 	bl	8006a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b06:	200f      	movs	r0, #15
 8005b08:	f7ff fe6e 	bl	80057e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b0c:	f7ff fb1a 	bl	8005144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40023c00 	.word	0x40023c00

08005b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b20:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_IncTick+0x20>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_IncTick+0x24>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <HAL_IncTick+0x24>)
 8005b2e:	6013      	str	r3, [r2, #0]
}
 8005b30:	bf00      	nop
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000034 	.word	0x20000034
 8005b40:	20001e10 	.word	0x20001e10

08005b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  return uwTick;
 8005b48:	4b03      	ldr	r3, [pc, #12]	; (8005b58 <HAL_GetTick+0x14>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	20001e10 	.word	0x20001e10

08005b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b64:	f7ff ffee 	bl	8005b44 <HAL_GetTick>
 8005b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b74:	d005      	beq.n	8005b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <HAL_Delay+0x44>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b82:	bf00      	nop
 8005b84:	f7ff ffde 	bl	8005b44 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d8f7      	bhi.n	8005b84 <HAL_Delay+0x28>
  {
  }
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000034 	.word	0x20000034

08005ba4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0ed      	b.n	8005d92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff faea 	bl	800519c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bd8:	f7ff ffb4 	bl	8005b44 <HAL_GetTick>
 8005bdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005bde:	e012      	b.n	8005c06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005be0:	f7ff ffb0 	bl	8005b44 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b0a      	cmp	r3, #10
 8005bec:	d90b      	bls.n	8005c06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e0c5      	b.n	8005d92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0e5      	beq.n	8005be0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0202 	bic.w	r2, r2, #2
 8005c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c24:	f7ff ff8e 	bl	8005b44 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005c2a:	e012      	b.n	8005c52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005c2c:	f7ff ff8a 	bl	8005b44 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b0a      	cmp	r3, #10
 8005c38:	d90b      	bls.n	8005c52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2205      	movs	r2, #5
 8005c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e09f      	b.n	8005d92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7e1b      	ldrb	r3, [r3, #24]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d108      	bne.n	8005c7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	e007      	b.n	8005c8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7e5b      	ldrb	r3, [r3, #25]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d108      	bne.n	8005ca4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e007      	b.n	8005cb4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	7e9b      	ldrb	r3, [r3, #26]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d108      	bne.n	8005cce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0220 	orr.w	r2, r2, #32
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e007      	b.n	8005cde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0220 	bic.w	r2, r2, #32
 8005cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	7edb      	ldrb	r3, [r3, #27]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d108      	bne.n	8005cf8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0210 	bic.w	r2, r2, #16
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e007      	b.n	8005d08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0210 	orr.w	r2, r2, #16
 8005d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	7f1b      	ldrb	r3, [r3, #28]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d108      	bne.n	8005d22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0208 	orr.w	r2, r2, #8
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e007      	b.n	8005d32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0208 	bic.w	r2, r2, #8
 8005d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7f5b      	ldrb	r3, [r3, #29]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d108      	bne.n	8005d4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0204 	orr.w	r2, r2, #4
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e007      	b.n	8005d5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	ea42 0103 	orr.w	r1, r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	1e5a      	subs	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005db2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005db4:	7cfb      	ldrb	r3, [r7, #19]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d003      	beq.n	8005dc2 <HAL_CAN_ConfigFilter+0x26>
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f040 80be 	bne.w	8005f3e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005dc2:	4b65      	ldr	r3, [pc, #404]	; (8005f58 <HAL_CAN_ConfigFilter+0x1bc>)
 8005dc4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005dcc:	f043 0201 	orr.w	r2, r3, #1
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ddc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	431a      	orrs	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 031f 	and.w	r3, r3, #31
 8005e02:	2201      	movs	r2, #1
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	401a      	ands	r2, r3
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d123      	bne.n	8005e6c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	401a      	ands	r2, r3
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005e46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	3248      	adds	r2, #72	; 0x48
 8005e4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005e62:	6979      	ldr	r1, [r7, #20]
 8005e64:	3348      	adds	r3, #72	; 0x48
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d122      	bne.n	8005eba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005e94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	3248      	adds	r2, #72	; 0x48
 8005e9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005eae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005eb0:	6979      	ldr	r1, [r7, #20]
 8005eb2:	3348      	adds	r3, #72	; 0x48
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	401a      	ands	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005ed4:	e007      	b.n	8005ee6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	401a      	ands	r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005f00:	e007      	b.n	8005f12 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d107      	bne.n	8005f2a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f30:	f023 0201 	bic.w	r2, r3, #1
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e006      	b.n	8005f4c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
  }
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40006400 	.word	0x40006400

08005f5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d12e      	bne.n	8005fce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0201 	bic.w	r2, r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f88:	f7ff fddc 	bl	8005b44 <HAL_GetTick>
 8005f8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005f8e:	e012      	b.n	8005fb6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f90:	f7ff fdd8 	bl	8005b44 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b0a      	cmp	r3, #10
 8005f9c:	d90b      	bls.n	8005fb6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2205      	movs	r2, #5
 8005fae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e012      	b.n	8005fdc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e006      	b.n	8005fdc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
  }
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b089      	sub	sp, #36	; 0x24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006002:	7ffb      	ldrb	r3, [r7, #31]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d003      	beq.n	8006010 <HAL_CAN_AddTxMessage+0x2c>
 8006008:	7ffb      	ldrb	r3, [r7, #31]
 800600a:	2b02      	cmp	r3, #2
 800600c:	f040 80ad 	bne.w	800616a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8095 	beq.w	800615a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	0e1b      	lsrs	r3, r3, #24
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800603a:	2201      	movs	r2, #1
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	409a      	lsls	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10d      	bne.n	8006068 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	6809      	ldr	r1, [r1, #0]
 800605a:	431a      	orrs	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	3318      	adds	r3, #24
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	440b      	add	r3, r1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e00f      	b.n	8006088 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006072:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800607c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	3318      	adds	r3, #24
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	440b      	add	r3, r1
 8006086:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691a      	ldr	r2, [r3, #16]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3318      	adds	r3, #24
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	440b      	add	r3, r1
 8006098:	3304      	adds	r3, #4
 800609a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	7d1b      	ldrb	r3, [r3, #20]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d111      	bne.n	80060c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3318      	adds	r3, #24
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	4413      	add	r3, r2
 80060b0:	3304      	adds	r3, #4
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	6811      	ldr	r1, [r2, #0]
 80060b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	3318      	adds	r3, #24
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	440b      	add	r3, r1
 80060c4:	3304      	adds	r3, #4
 80060c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3307      	adds	r3, #7
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	061a      	lsls	r2, r3, #24
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	3306      	adds	r3, #6
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3305      	adds	r3, #5
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	4313      	orrs	r3, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	3204      	adds	r2, #4
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	4610      	mov	r0, r2
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	6811      	ldr	r1, [r2, #0]
 80060f0:	ea43 0200 	orr.w	r2, r3, r0
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80060fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3303      	adds	r3, #3
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	061a      	lsls	r2, r3, #24
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3302      	adds	r3, #2
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3301      	adds	r3, #1
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	4313      	orrs	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	7812      	ldrb	r2, [r2, #0]
 8006120:	4610      	mov	r0, r2
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	6811      	ldr	r1, [r2, #0]
 8006126:	ea43 0200 	orr.w	r2, r3, r0
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	440b      	add	r3, r1
 8006130:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006134:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	3318      	adds	r3, #24
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	4413      	add	r3, r2
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	6811      	ldr	r1, [r2, #0]
 8006148:	f043 0201 	orr.w	r2, r3, #1
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	3318      	adds	r3, #24
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	440b      	add	r3, r1
 8006154:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e00e      	b.n	8006178 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e006      	b.n	8006178 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
  }
}
 8006178:	4618      	mov	r0, r3
 800617a:	3724      	adds	r7, #36	; 0x24
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006198:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d002      	beq.n	80061a6 <HAL_CAN_IsTxMessagePending+0x22>
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d10b      	bne.n	80061be <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	069b      	lsls	r3, r3, #26
 80061b0:	401a      	ands	r2, r3
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	069b      	lsls	r3, r3, #26
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d001      	beq.n	80061be <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80061ba:	2301      	movs	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80061be:	68fb      	ldr	r3, [r7, #12]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d003      	beq.n	80061f0 <HAL_CAN_GetRxMessage+0x24>
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	f040 8103 	bne.w	80063f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10e      	bne.n	8006214 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d116      	bne.n	8006232 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0f7      	b.n	8006404 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d107      	bne.n	8006232 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0e8      	b.n	8006404 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	331b      	adds	r3, #27
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0204 	and.w	r2, r3, #4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10c      	bne.n	800626a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	331b      	adds	r3, #27
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	4413      	add	r3, r2
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	0d5b      	lsrs	r3, r3, #21
 8006260:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e00b      	b.n	8006282 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	331b      	adds	r3, #27
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	4413      	add	r3, r2
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	08db      	lsrs	r3, r3, #3
 800627a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	331b      	adds	r3, #27
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	4413      	add	r3, r2
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0202 	and.w	r2, r3, #2
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	331b      	adds	r3, #27
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	4413      	add	r3, r2
 80062a4:	3304      	adds	r3, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0308 	and.w	r3, r3, #8
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2208      	movs	r2, #8
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	e00b      	b.n	80062d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	331b      	adds	r3, #27
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	4413      	add	r3, r2
 80062c4:	3304      	adds	r3, #4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	331b      	adds	r3, #27
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	0a1b      	lsrs	r3, r3, #8
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	331b      	adds	r3, #27
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	4413      	add	r3, r2
 80062f4:	3304      	adds	r3, #4
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	4413      	add	r3, r2
 800630a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	4413      	add	r3, r2
 8006320:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	0a1a      	lsrs	r2, r3, #8
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4413      	add	r3, r2
 800633a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	0c1a      	lsrs	r2, r3, #16
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	3302      	adds	r3, #2
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	4413      	add	r3, r2
 8006354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	0e1a      	lsrs	r2, r3, #24
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	3303      	adds	r3, #3
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	4413      	add	r3, r2
 800636e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	3304      	adds	r3, #4
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	4413      	add	r3, r2
 8006386:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	0a1a      	lsrs	r2, r3, #8
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	3305      	adds	r3, #5
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	4413      	add	r3, r2
 80063a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	0c1a      	lsrs	r2, r3, #16
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	3306      	adds	r3, #6
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	011b      	lsls	r3, r3, #4
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	0e1a      	lsrs	r2, r3, #24
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	3307      	adds	r3, #7
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0220 	orr.w	r2, r2, #32
 80063de:	60da      	str	r2, [r3, #12]
 80063e0:	e007      	b.n	80063f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0220 	orr.w	r2, r2, #32
 80063f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	e006      	b.n	8006404 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006420:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d002      	beq.n	800642e <HAL_CAN_ActivateNotification+0x1e>
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d109      	bne.n	8006442 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6959      	ldr	r1, [r3, #20]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e006      	b.n	8006450 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
  }
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	; 0x28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006464:	2300      	movs	r3, #0
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d07c      	beq.n	800659c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d023      	beq.n	80064f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2201      	movs	r2, #1
 80064b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f983 	bl	80067ca <HAL_CAN_TxMailbox0CompleteCallback>
 80064c4:	e016      	b.n	80064f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	e00c      	b.n	80064f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
 80064ec:	e002      	b.n	80064f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f989 	bl	8006806 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d024      	beq.n	8006548 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006506:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f963 	bl	80067de <HAL_CAN_TxMailbox1CompleteCallback>
 8006518:	e016      	b.n	8006548 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
 800652c:	e00c      	b.n	8006548 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
 8006540:	e002      	b.n	8006548 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f969 	bl	800681a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d024      	beq.n	800659c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800655a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f943 	bl	80067f2 <HAL_CAN_TxMailbox2CompleteCallback>
 800656c:	e016      	b.n	800659c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d004      	beq.n	8006582 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	e00c      	b.n	800659c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
 8006594:	e002      	b.n	800659c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f949 	bl	800682e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2210      	movs	r2, #16
 80065be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d006      	beq.n	80065e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2208      	movs	r2, #8
 80065da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f930 	bl	8006842 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d009      	beq.n	8006600 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fb fb2a 	bl	8001c54 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00c      	beq.n	8006624 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	d007      	beq.n	8006624 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800661a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2210      	movs	r2, #16
 8006622:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d006      	beq.n	8006646 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2208      	movs	r2, #8
 800663e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f912 	bl	800686a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f8f9 	bl	8006856 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d006      	beq.n	8006686 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2210      	movs	r2, #16
 800667e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8fc 	bl	800687e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d006      	beq.n	80066a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2208      	movs	r2, #8
 80066a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8f5 	bl	8006892 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d07b      	beq.n	80067aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d072      	beq.n	80067a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	f043 0301 	orr.w	r3, r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	f043 0302 	orr.w	r3, r3, #2
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d008      	beq.n	8006710 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	f043 0304 	orr.w	r3, r3, #4
 800670e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006716:	2b00      	cmp	r3, #0
 8006718:	d043      	beq.n	80067a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006720:	2b00      	cmp	r3, #0
 8006722:	d03e      	beq.n	80067a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800672a:	2b60      	cmp	r3, #96	; 0x60
 800672c:	d02b      	beq.n	8006786 <HAL_CAN_IRQHandler+0x32a>
 800672e:	2b60      	cmp	r3, #96	; 0x60
 8006730:	d82e      	bhi.n	8006790 <HAL_CAN_IRQHandler+0x334>
 8006732:	2b50      	cmp	r3, #80	; 0x50
 8006734:	d022      	beq.n	800677c <HAL_CAN_IRQHandler+0x320>
 8006736:	2b50      	cmp	r3, #80	; 0x50
 8006738:	d82a      	bhi.n	8006790 <HAL_CAN_IRQHandler+0x334>
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d019      	beq.n	8006772 <HAL_CAN_IRQHandler+0x316>
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d826      	bhi.n	8006790 <HAL_CAN_IRQHandler+0x334>
 8006742:	2b30      	cmp	r3, #48	; 0x30
 8006744:	d010      	beq.n	8006768 <HAL_CAN_IRQHandler+0x30c>
 8006746:	2b30      	cmp	r3, #48	; 0x30
 8006748:	d822      	bhi.n	8006790 <HAL_CAN_IRQHandler+0x334>
 800674a:	2b10      	cmp	r3, #16
 800674c:	d002      	beq.n	8006754 <HAL_CAN_IRQHandler+0x2f8>
 800674e:	2b20      	cmp	r3, #32
 8006750:	d005      	beq.n	800675e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006752:	e01d      	b.n	8006790 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	f043 0308 	orr.w	r3, r3, #8
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800675c:	e019      	b.n	8006792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	f043 0310 	orr.w	r3, r3, #16
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006766:	e014      	b.n	8006792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	f043 0320 	orr.w	r3, r3, #32
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006770:	e00f      	b.n	8006792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800677a:	e00a      	b.n	8006792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006784:	e005      	b.n	8006792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800678e:	e000      	b.n	8006792 <HAL_CAN_IRQHandler+0x336>
            break;
 8006790:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2204      	movs	r2, #4
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f872 	bl	80068a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80067c2:	bf00      	nop
 80067c4:	3728      	adds	r7, #40	; 0x28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f003 0307 	and.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068cc:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <__NVIC_SetPriorityGrouping+0x44>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068d8:	4013      	ands	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068ee:	4a04      	ldr	r2, [pc, #16]	; (8006900 <__NVIC_SetPriorityGrouping+0x44>)
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	60d3      	str	r3, [r2, #12]
}
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006908:	4b04      	ldr	r3, [pc, #16]	; (800691c <__NVIC_GetPriorityGrouping+0x18>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	0a1b      	lsrs	r3, r3, #8
 800690e:	f003 0307 	and.w	r3, r3, #7
}
 8006912:	4618      	mov	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	e000ed00 	.word	0xe000ed00

08006920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800692a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800692e:	2b00      	cmp	r3, #0
 8006930:	db0b      	blt.n	800694a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	f003 021f 	and.w	r2, r3, #31
 8006938:	4907      	ldr	r1, [pc, #28]	; (8006958 <__NVIC_EnableIRQ+0x38>)
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	2001      	movs	r0, #1
 8006942:	fa00 f202 	lsl.w	r2, r0, r2
 8006946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	e000e100 	.word	0xe000e100

0800695c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	4603      	mov	r3, r0
 8006964:	6039      	str	r1, [r7, #0]
 8006966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696c:	2b00      	cmp	r3, #0
 800696e:	db0a      	blt.n	8006986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	490c      	ldr	r1, [pc, #48]	; (80069a8 <__NVIC_SetPriority+0x4c>)
 8006976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697a:	0112      	lsls	r2, r2, #4
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	440b      	add	r3, r1
 8006980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006984:	e00a      	b.n	800699c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4908      	ldr	r1, [pc, #32]	; (80069ac <__NVIC_SetPriority+0x50>)
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	3b04      	subs	r3, #4
 8006994:	0112      	lsls	r2, r2, #4
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	440b      	add	r3, r1
 800699a:	761a      	strb	r2, [r3, #24]
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	e000e100 	.word	0xe000e100
 80069ac:	e000ed00 	.word	0xe000ed00

080069b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b089      	sub	sp, #36	; 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f1c3 0307 	rsb	r3, r3, #7
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	bf28      	it	cs
 80069ce:	2304      	movcs	r3, #4
 80069d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	3304      	adds	r3, #4
 80069d6:	2b06      	cmp	r3, #6
 80069d8:	d902      	bls.n	80069e0 <NVIC_EncodePriority+0x30>
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3b03      	subs	r3, #3
 80069de:	e000      	b.n	80069e2 <NVIC_EncodePriority+0x32>
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	43da      	mvns	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	401a      	ands	r2, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006a02:	43d9      	mvns	r1, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a08:	4313      	orrs	r3, r2
         );
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3724      	adds	r7, #36	; 0x24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff ff4c 	bl	80068bc <__NVIC_SetPriorityGrouping>
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a3e:	f7ff ff61 	bl	8006904 <__NVIC_GetPriorityGrouping>
 8006a42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f7ff ffb1 	bl	80069b0 <NVIC_EncodePriority>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff ff80 	bl	800695c <__NVIC_SetPriority>
}
 8006a5c:	bf00      	nop
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff ff54 	bl	8006920 <__NVIC_EnableIRQ>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a8c:	f7ff f85a 	bl	8005b44 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e099      	b.n	8006bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006abc:	e00f      	b.n	8006ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006abe:	f7ff f841 	bl	8005b44 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b05      	cmp	r3, #5
 8006aca:	d908      	bls.n	8006ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e078      	b.n	8006bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e8      	bne.n	8006abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4b38      	ldr	r3, [pc, #224]	; (8006bd8 <HAL_DMA_Init+0x158>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d107      	bne.n	8006b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	4313      	orrs	r3, r2
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0307 	bic.w	r3, r3, #7
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d117      	bne.n	8006ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00e      	beq.n	8006ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fb01 	bl	800718c <DMA_CheckFifoParam>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d008      	beq.n	8006ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2240      	movs	r2, #64	; 0x40
 8006b94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e016      	b.n	8006bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fab8 	bl	8007120 <DMA_CalcBaseAndBitshift>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	223f      	movs	r2, #63	; 0x3f
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	f010803f 	.word	0xf010803f

08006bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_DMA_Start_IT+0x26>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e040      	b.n	8006c84 <HAL_DMA_Start_IT+0xa8>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d12f      	bne.n	8006c76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa4a 	bl	80070c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c34:	223f      	movs	r2, #63	; 0x3f
 8006c36:	409a      	lsls	r2, r3
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0216 	orr.w	r2, r2, #22
 8006c4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0208 	orr.w	r2, r2, #8
 8006c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0201 	orr.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e005      	b.n	8006c82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3718      	adds	r7, #24
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c9a:	f7fe ff53 	bl	8005b44 <HAL_GetTick>
 8006c9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d008      	beq.n	8006cbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2280      	movs	r2, #128	; 0x80
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e052      	b.n	8006d64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0216 	bic.w	r2, r2, #22
 8006ccc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <HAL_DMA_Abort+0x62>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0208 	bic.w	r2, r2, #8
 8006cfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d0e:	e013      	b.n	8006d38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d10:	f7fe ff18 	bl	8005b44 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d90c      	bls.n	8006d38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2203      	movs	r2, #3
 8006d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e015      	b.n	8006d64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e4      	bne.n	8006d10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	223f      	movs	r2, #63	; 0x3f
 8006d4c:	409a      	lsls	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d004      	beq.n	8006d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e00c      	b.n	8006da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2205      	movs	r2, #5
 8006d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f022 0201 	bic.w	r2, r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006dbc:	4b8e      	ldr	r3, [pc, #568]	; (8006ff8 <HAL_DMA_IRQHandler+0x248>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a8e      	ldr	r2, [pc, #568]	; (8006ffc <HAL_DMA_IRQHandler+0x24c>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	0a9b      	lsrs	r3, r3, #10
 8006dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	2208      	movs	r2, #8
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01a      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d013      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0204 	bic.w	r2, r2, #4
 8006e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e08:	2208      	movs	r2, #8
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	f043 0201 	orr.w	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	2201      	movs	r2, #1
 8006e22:	409a      	lsls	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d012      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3e:	2201      	movs	r2, #1
 8006e40:	409a      	lsls	r2, r3
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	f043 0202 	orr.w	r2, r3, #2
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e56:	2204      	movs	r2, #4
 8006e58:	409a      	lsls	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d012      	beq.n	8006e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e74:	2204      	movs	r2, #4
 8006e76:	409a      	lsls	r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e80:	f043 0204 	orr.w	r2, r3, #4
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8c:	2210      	movs	r2, #16
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4013      	ands	r3, r2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d043      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d03c      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eaa:	2210      	movs	r2, #16
 8006eac:	409a      	lsls	r2, r3
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d024      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
 8006ede:	e01f      	b.n	8006f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01b      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	4798      	blx	r3
 8006ef0:	e016      	b.n	8006f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d107      	bne.n	8006f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0208 	bic.w	r2, r2, #8
 8006f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f24:	2220      	movs	r2, #32
 8006f26:	409a      	lsls	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 808f 	beq.w	8007050 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 8087 	beq.w	8007050 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f46:	2220      	movs	r2, #32
 8006f48:	409a      	lsls	r2, r3
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d136      	bne.n	8006fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0216 	bic.w	r2, r2, #22
 8006f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695a      	ldr	r2, [r3, #20]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <HAL_DMA_IRQHandler+0x1da>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0208 	bic.w	r2, r2, #8
 8006f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9e:	223f      	movs	r2, #63	; 0x3f
 8006fa0:	409a      	lsls	r2, r3
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d07e      	beq.n	80070bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4798      	blx	r3
        }
        return;
 8006fc6:	e079      	b.n	80070bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01d      	beq.n	8007012 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d031      	beq.n	8007050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
 8006ff4:	e02c      	b.n	8007050 <HAL_DMA_IRQHandler+0x2a0>
 8006ff6:	bf00      	nop
 8006ff8:	2000002c 	.word	0x2000002c
 8006ffc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d023      	beq.n	8007050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
 8007010:	e01e      	b.n	8007050 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10f      	bne.n	8007040 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0210 	bic.w	r2, r2, #16
 800702e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	2b00      	cmp	r3, #0
 8007056:	d032      	beq.n	80070be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d022      	beq.n	80070aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2205      	movs	r2, #5
 8007068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	3301      	adds	r3, #1
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	429a      	cmp	r2, r3
 8007086:	d307      	bcc.n	8007098 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1f2      	bne.n	800707c <HAL_DMA_IRQHandler+0x2cc>
 8007096:	e000      	b.n	800709a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007098:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
 80070ba:	e000      	b.n	80070be <HAL_DMA_IRQHandler+0x30e>
        return;
 80070bc:	bf00      	nop
    }
  }
}
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d108      	bne.n	8007104 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007102:	e007      	b.n	8007114 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	3b10      	subs	r3, #16
 8007130:	4a14      	ldr	r2, [pc, #80]	; (8007184 <DMA_CalcBaseAndBitshift+0x64>)
 8007132:	fba2 2303 	umull	r2, r3, r2, r3
 8007136:	091b      	lsrs	r3, r3, #4
 8007138:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800713a:	4a13      	ldr	r2, [pc, #76]	; (8007188 <DMA_CalcBaseAndBitshift+0x68>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b03      	cmp	r3, #3
 800714c:	d909      	bls.n	8007162 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	659a      	str	r2, [r3, #88]	; 0x58
 8007160:	e007      	b.n	8007172 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800716a:	f023 0303 	bic.w	r3, r3, #3
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	aaaaaaab 	.word	0xaaaaaaab
 8007188:	0800e6ac 	.word	0x0800e6ac

0800718c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d11f      	bne.n	80071e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d856      	bhi.n	800725a <DMA_CheckFifoParam+0xce>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <DMA_CheckFifoParam+0x28>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071c5 	.word	0x080071c5
 80071b8:	080071d7 	.word	0x080071d7
 80071bc:	080071c5 	.word	0x080071c5
 80071c0:	0800725b 	.word	0x0800725b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d046      	beq.n	800725e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071d4:	e043      	b.n	800725e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071de:	d140      	bne.n	8007262 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071e4:	e03d      	b.n	8007262 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ee:	d121      	bne.n	8007234 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d837      	bhi.n	8007266 <DMA_CheckFifoParam+0xda>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <DMA_CheckFifoParam+0x70>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	08007213 	.word	0x08007213
 8007204:	0800720d 	.word	0x0800720d
 8007208:	08007225 	.word	0x08007225
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      break;
 8007210:	e030      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d025      	beq.n	800726a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007222:	e022      	b.n	800726a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800722c:	d11f      	bne.n	800726e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007232:	e01c      	b.n	800726e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d903      	bls.n	8007242 <DMA_CheckFifoParam+0xb6>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b03      	cmp	r3, #3
 800723e:	d003      	beq.n	8007248 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007240:	e018      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	73fb      	strb	r3, [r7, #15]
      break;
 8007246:	e015      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00e      	beq.n	8007272 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	73fb      	strb	r3, [r7, #15]
      break;
 8007258:	e00b      	b.n	8007272 <DMA_CheckFifoParam+0xe6>
      break;
 800725a:	bf00      	nop
 800725c:	e00a      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      break;
 800725e:	bf00      	nop
 8007260:	e008      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      break;
 8007262:	bf00      	nop
 8007264:	e006      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      break;
 8007266:	bf00      	nop
 8007268:	e004      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      break;
 800726a:	bf00      	nop
 800726c:	e002      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      break;   
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <DMA_CheckFifoParam+0xe8>
      break;
 8007272:	bf00      	nop
    }
  } 
  
  return status; 
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop

08007284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007284:	b480      	push	{r7}
 8007286:	b089      	sub	sp, #36	; 0x24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800728e:	2300      	movs	r3, #0
 8007290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	e165      	b.n	800756c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072a0:	2201      	movs	r2, #1
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4013      	ands	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	f040 8154 	bne.w	8007566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d005      	beq.n	80072d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d130      	bne.n	8007338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	2203      	movs	r2, #3
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	43db      	mvns	r3, r3
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	4013      	ands	r3, r2
 80072ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	fa02 f303 	lsl.w	r3, r2, r3
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800730c:	2201      	movs	r2, #1
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	091b      	lsrs	r3, r3, #4
 8007322:	f003 0201 	and.w	r2, r3, #1
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4313      	orrs	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	2b03      	cmp	r3, #3
 8007342:	d017      	beq.n	8007374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	2203      	movs	r2, #3
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	4013      	ands	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d123      	bne.n	80073c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	08da      	lsrs	r2, r3, #3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3208      	adds	r2, #8
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	220f      	movs	r2, #15
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	4013      	ands	r3, r2
 80073a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	08da      	lsrs	r2, r3, #3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3208      	adds	r2, #8
 80073c2:	69b9      	ldr	r1, [r7, #24]
 80073c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	2203      	movs	r2, #3
 80073d4:	fa02 f303 	lsl.w	r3, r2, r3
 80073d8:	43db      	mvns	r3, r3
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	4013      	ands	r3, r2
 80073de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f003 0203 	and.w	r2, r3, #3
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80ae 	beq.w	8007566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	4b5d      	ldr	r3, [pc, #372]	; (8007584 <HAL_GPIO_Init+0x300>)
 8007410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007412:	4a5c      	ldr	r2, [pc, #368]	; (8007584 <HAL_GPIO_Init+0x300>)
 8007414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007418:	6453      	str	r3, [r2, #68]	; 0x44
 800741a:	4b5a      	ldr	r3, [pc, #360]	; (8007584 <HAL_GPIO_Init+0x300>)
 800741c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007426:	4a58      	ldr	r2, [pc, #352]	; (8007588 <HAL_GPIO_Init+0x304>)
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	089b      	lsrs	r3, r3, #2
 800742c:	3302      	adds	r3, #2
 800742e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	220f      	movs	r2, #15
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43db      	mvns	r3, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4013      	ands	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a4f      	ldr	r2, [pc, #316]	; (800758c <HAL_GPIO_Init+0x308>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d025      	beq.n	800749e <HAL_GPIO_Init+0x21a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a4e      	ldr	r2, [pc, #312]	; (8007590 <HAL_GPIO_Init+0x30c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d01f      	beq.n	800749a <HAL_GPIO_Init+0x216>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a4d      	ldr	r2, [pc, #308]	; (8007594 <HAL_GPIO_Init+0x310>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d019      	beq.n	8007496 <HAL_GPIO_Init+0x212>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a4c      	ldr	r2, [pc, #304]	; (8007598 <HAL_GPIO_Init+0x314>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <HAL_GPIO_Init+0x20e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a4b      	ldr	r2, [pc, #300]	; (800759c <HAL_GPIO_Init+0x318>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00d      	beq.n	800748e <HAL_GPIO_Init+0x20a>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <HAL_GPIO_Init+0x31c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d007      	beq.n	800748a <HAL_GPIO_Init+0x206>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a49      	ldr	r2, [pc, #292]	; (80075a4 <HAL_GPIO_Init+0x320>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_GPIO_Init+0x202>
 8007482:	2306      	movs	r3, #6
 8007484:	e00c      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 8007486:	2307      	movs	r3, #7
 8007488:	e00a      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 800748a:	2305      	movs	r3, #5
 800748c:	e008      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 800748e:	2304      	movs	r3, #4
 8007490:	e006      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 8007492:	2303      	movs	r3, #3
 8007494:	e004      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 8007496:	2302      	movs	r3, #2
 8007498:	e002      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <HAL_GPIO_Init+0x21c>
 800749e:	2300      	movs	r3, #0
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	f002 0203 	and.w	r2, r2, #3
 80074a6:	0092      	lsls	r2, r2, #2
 80074a8:	4093      	lsls	r3, r2
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074b0:	4935      	ldr	r1, [pc, #212]	; (8007588 <HAL_GPIO_Init+0x304>)
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	089b      	lsrs	r3, r3, #2
 80074b6:	3302      	adds	r3, #2
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074be:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <HAL_GPIO_Init+0x324>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	43db      	mvns	r3, r3
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	4013      	ands	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074e2:	4a31      	ldr	r2, [pc, #196]	; (80075a8 <HAL_GPIO_Init+0x324>)
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074e8:	4b2f      	ldr	r3, [pc, #188]	; (80075a8 <HAL_GPIO_Init+0x324>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	43db      	mvns	r3, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4013      	ands	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800750c:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <HAL_GPIO_Init+0x324>)
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007512:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_GPIO_Init+0x324>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	43db      	mvns	r3, r3
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	4013      	ands	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <HAL_GPIO_Init+0x324>)
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800753c:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <HAL_GPIO_Init+0x324>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	43db      	mvns	r3, r3
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	4013      	ands	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007560:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <HAL_GPIO_Init+0x324>)
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	3301      	adds	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	2b0f      	cmp	r3, #15
 8007570:	f67f ae96 	bls.w	80072a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	3724      	adds	r7, #36	; 0x24
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	40023800 	.word	0x40023800
 8007588:	40013800 	.word	0x40013800
 800758c:	40020000 	.word	0x40020000
 8007590:	40020400 	.word	0x40020400
 8007594:	40020800 	.word	0x40020800
 8007598:	40020c00 	.word	0x40020c00
 800759c:	40021000 	.word	0x40021000
 80075a0:	40021400 	.word	0x40021400
 80075a4:	40021800 	.word	0x40021800
 80075a8:	40013c00 	.word	0x40013c00

080075ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	4013      	ands	r3, r2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	e001      	b.n	80075ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075ca:	2300      	movs	r3, #0
 80075cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	807b      	strh	r3, [r7, #2]
 80075e8:	4613      	mov	r3, r2
 80075ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075ec:	787b      	ldrb	r3, [r7, #1]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075f2:	887a      	ldrh	r2, [r7, #2]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075f8:	e003      	b.n	8007602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075fa:	887b      	ldrh	r3, [r7, #2]
 80075fc:	041a      	lsls	r2, r3, #16
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	619a      	str	r2, [r3, #24]
}
 8007602:	bf00      	nop
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0cc      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b68      	ldr	r3, [pc, #416]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d90c      	bls.n	800764c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b65      	ldr	r3, [pc, #404]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800763a:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e0b8      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007664:	4b59      	ldr	r3, [pc, #356]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4a58      	ldr	r2, [pc, #352]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800766e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0308 	and.w	r3, r3, #8
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800767c:	4b53      	ldr	r3, [pc, #332]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4a52      	ldr	r2, [pc, #328]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007686:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007688:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	494d      	ldr	r1, [pc, #308]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007696:	4313      	orrs	r3, r2
 8007698:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d044      	beq.n	8007730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d107      	bne.n	80076be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ae:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d119      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e07f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d003      	beq.n	80076ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d107      	bne.n	80076de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ce:	4b3f      	ldr	r3, [pc, #252]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e06f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076de:	4b3b      	ldr	r3, [pc, #236]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e067      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ee:	4b37      	ldr	r3, [pc, #220]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f023 0203 	bic.w	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4934      	ldr	r1, [pc, #208]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007700:	f7fe fa20 	bl	8005b44 <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007706:	e00a      	b.n	800771e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007708:	f7fe fa1c 	bl	8005b44 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	f241 3288 	movw	r2, #5000	; 0x1388
 8007716:	4293      	cmp	r3, r2
 8007718:	d901      	bls.n	800771e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e04f      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771e:	4b2b      	ldr	r3, [pc, #172]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 020c 	and.w	r2, r3, #12
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	429a      	cmp	r2, r3
 800772e:	d1eb      	bne.n	8007708 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007730:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d20c      	bcs.n	8007758 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773e:	4b22      	ldr	r3, [pc, #136]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007746:	4b20      	ldr	r3, [pc, #128]	; (80077c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	683a      	ldr	r2, [r7, #0]
 8007750:	429a      	cmp	r2, r3
 8007752:	d001      	beq.n	8007758 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e032      	b.n	80077be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d008      	beq.n	8007776 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007764:	4b19      	ldr	r3, [pc, #100]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4916      	ldr	r1, [pc, #88]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	4313      	orrs	r3, r2
 8007774:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0308 	and.w	r3, r3, #8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	490e      	ldr	r1, [pc, #56]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	4313      	orrs	r3, r2
 8007794:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007796:	f000 f887 	bl	80078a8 <HAL_RCC_GetSysClockFreq>
 800779a:	4602      	mov	r2, r0
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	f003 030f 	and.w	r3, r3, #15
 80077a6:	490a      	ldr	r1, [pc, #40]	; (80077d0 <HAL_RCC_ClockConfig+0x1c0>)
 80077a8:	5ccb      	ldrb	r3, [r1, r3]
 80077aa:	fa22 f303 	lsr.w	r3, r2, r3
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <HAL_RCC_ClockConfig+0x1c4>)
 80077b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_ClockConfig+0x1c8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f816 	bl	80057e8 <HAL_InitTick>

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40023c00 	.word	0x40023c00
 80077cc:	40023800 	.word	0x40023800
 80077d0:	0800e694 	.word	0x0800e694
 80077d4:	2000002c 	.word	0x2000002c
 80077d8:	20000030 	.word	0x20000030

080077dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077e0:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80077e2:	681b      	ldr	r3, [r3, #0]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000002c 	.word	0x2000002c

080077f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077f8:	f7ff fff0 	bl	80077dc <HAL_RCC_GetHCLKFreq>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4b05      	ldr	r3, [pc, #20]	; (8007814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	0a9b      	lsrs	r3, r3, #10
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	4903      	ldr	r1, [pc, #12]	; (8007818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800780a:	5ccb      	ldrb	r3, [r1, r3]
 800780c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007810:	4618      	mov	r0, r3
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40023800 	.word	0x40023800
 8007818:	0800e6a4 	.word	0x0800e6a4

0800781c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007820:	f7ff ffdc 	bl	80077dc <HAL_RCC_GetHCLKFreq>
 8007824:	4602      	mov	r2, r0
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	0b5b      	lsrs	r3, r3, #13
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	4903      	ldr	r1, [pc, #12]	; (8007840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007832:	5ccb      	ldrb	r3, [r1, r3]
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40023800 	.word	0x40023800
 8007840:	0800e6a4 	.word	0x0800e6a4

08007844 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	220f      	movs	r2, #15
 8007852:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007854:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <HAL_RCC_GetClockConfig+0x5c>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 0203 	and.w	r2, r3, #3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <HAL_RCC_GetClockConfig+0x5c>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800786c:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <HAL_RCC_GetClockConfig+0x5c>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007878:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <HAL_RCC_GetClockConfig+0x5c>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	08db      	lsrs	r3, r3, #3
 800787e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <HAL_RCC_GetClockConfig+0x60>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 020f 	and.w	r2, r3, #15
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	601a      	str	r2, [r3, #0]
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40023800 	.word	0x40023800
 80078a4:	40023c00 	.word	0x40023c00

080078a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078ac:	b0ae      	sub	sp, #184	; 0xb8
 80078ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078ce:	4bcb      	ldr	r3, [pc, #812]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 030c 	and.w	r3, r3, #12
 80078d6:	2b0c      	cmp	r3, #12
 80078d8:	f200 8206 	bhi.w	8007ce8 <HAL_RCC_GetSysClockFreq+0x440>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007919 	.word	0x08007919
 80078e8:	08007ce9 	.word	0x08007ce9
 80078ec:	08007ce9 	.word	0x08007ce9
 80078f0:	08007ce9 	.word	0x08007ce9
 80078f4:	08007921 	.word	0x08007921
 80078f8:	08007ce9 	.word	0x08007ce9
 80078fc:	08007ce9 	.word	0x08007ce9
 8007900:	08007ce9 	.word	0x08007ce9
 8007904:	08007929 	.word	0x08007929
 8007908:	08007ce9 	.word	0x08007ce9
 800790c:	08007ce9 	.word	0x08007ce9
 8007910:	08007ce9 	.word	0x08007ce9
 8007914:	08007b19 	.word	0x08007b19
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007918:	4bb9      	ldr	r3, [pc, #740]	; (8007c00 <HAL_RCC_GetSysClockFreq+0x358>)
 800791a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800791e:	e1e7      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007920:	4bb8      	ldr	r3, [pc, #736]	; (8007c04 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007926:	e1e3      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007928:	4bb4      	ldr	r3, [pc, #720]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007934:	4bb1      	ldr	r3, [pc, #708]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d071      	beq.n	8007a24 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007940:	4bae      	ldr	r3, [pc, #696]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	099b      	lsrs	r3, r3, #6
 8007946:	2200      	movs	r2, #0
 8007948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800794c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007958:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800795c:	2300      	movs	r3, #0
 800795e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007966:	4622      	mov	r2, r4
 8007968:	462b      	mov	r3, r5
 800796a:	f04f 0000 	mov.w	r0, #0
 800796e:	f04f 0100 	mov.w	r1, #0
 8007972:	0159      	lsls	r1, r3, #5
 8007974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007978:	0150      	lsls	r0, r2, #5
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4621      	mov	r1, r4
 8007980:	1a51      	subs	r1, r2, r1
 8007982:	6439      	str	r1, [r7, #64]	; 0x40
 8007984:	4629      	mov	r1, r5
 8007986:	eb63 0301 	sbc.w	r3, r3, r1
 800798a:	647b      	str	r3, [r7, #68]	; 0x44
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007998:	4649      	mov	r1, r9
 800799a:	018b      	lsls	r3, r1, #6
 800799c:	4641      	mov	r1, r8
 800799e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079a2:	4641      	mov	r1, r8
 80079a4:	018a      	lsls	r2, r1, #6
 80079a6:	4641      	mov	r1, r8
 80079a8:	1a51      	subs	r1, r2, r1
 80079aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80079ac:	4649      	mov	r1, r9
 80079ae:	eb63 0301 	sbc.w	r3, r3, r1
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80079c0:	4649      	mov	r1, r9
 80079c2:	00cb      	lsls	r3, r1, #3
 80079c4:	4641      	mov	r1, r8
 80079c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ca:	4641      	mov	r1, r8
 80079cc:	00ca      	lsls	r2, r1, #3
 80079ce:	4610      	mov	r0, r2
 80079d0:	4619      	mov	r1, r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	4622      	mov	r2, r4
 80079d6:	189b      	adds	r3, r3, r2
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30
 80079da:	462b      	mov	r3, r5
 80079dc:	460a      	mov	r2, r1
 80079de:	eb42 0303 	adc.w	r3, r2, r3
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079f0:	4629      	mov	r1, r5
 80079f2:	024b      	lsls	r3, r1, #9
 80079f4:	4621      	mov	r1, r4
 80079f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80079fa:	4621      	mov	r1, r4
 80079fc:	024a      	lsls	r2, r1, #9
 80079fe:	4610      	mov	r0, r2
 8007a00:	4619      	mov	r1, r3
 8007a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a10:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007a14:	f7f9 f898 	bl	8000b48 <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a22:	e067      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a24:	4b75      	ldr	r3, [pc, #468]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	099b      	lsrs	r3, r3, #6
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a30:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a3e:	2300      	movs	r3, #0
 8007a40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a42:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007a46:	4622      	mov	r2, r4
 8007a48:	462b      	mov	r3, r5
 8007a4a:	f04f 0000 	mov.w	r0, #0
 8007a4e:	f04f 0100 	mov.w	r1, #0
 8007a52:	0159      	lsls	r1, r3, #5
 8007a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a58:	0150      	lsls	r0, r2, #5
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4621      	mov	r1, r4
 8007a60:	1a51      	subs	r1, r2, r1
 8007a62:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a64:	4629      	mov	r1, r5
 8007a66:	eb63 0301 	sbc.w	r3, r3, r1
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007a78:	4649      	mov	r1, r9
 8007a7a:	018b      	lsls	r3, r1, #6
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a82:	4641      	mov	r1, r8
 8007a84:	018a      	lsls	r2, r1, #6
 8007a86:	4641      	mov	r1, r8
 8007a88:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a9e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007aa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aa6:	4692      	mov	sl, r2
 8007aa8:	469b      	mov	fp, r3
 8007aaa:	4623      	mov	r3, r4
 8007aac:	eb1a 0303 	adds.w	r3, sl, r3
 8007ab0:	623b      	str	r3, [r7, #32]
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	028b      	lsls	r3, r1, #10
 8007aca:	4621      	mov	r1, r4
 8007acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	028a      	lsls	r2, r1, #10
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007adc:	2200      	movs	r2, #0
 8007ade:	673b      	str	r3, [r7, #112]	; 0x70
 8007ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8007ae2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007ae6:	f7f9 f82f 	bl	8000b48 <__aeabi_uldivmod>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4613      	mov	r3, r2
 8007af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007af4:	4b41      	ldr	r3, [pc, #260]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	3301      	adds	r3, #1
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b16:	e0eb      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b18:	4b38      	ldr	r3, [pc, #224]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b24:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d06b      	beq.n	8007c08 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b30:	4b32      	ldr	r3, [pc, #200]	; (8007bfc <HAL_RCC_GetSysClockFreq+0x354>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	099b      	lsrs	r3, r3, #6
 8007b36:	2200      	movs	r2, #0
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	663b      	str	r3, [r7, #96]	; 0x60
 8007b44:	2300      	movs	r3, #0
 8007b46:	667b      	str	r3, [r7, #100]	; 0x64
 8007b48:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f04f 0000 	mov.w	r0, #0
 8007b54:	f04f 0100 	mov.w	r1, #0
 8007b58:	0159      	lsls	r1, r3, #5
 8007b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b5e:	0150      	lsls	r0, r2, #5
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4621      	mov	r1, r4
 8007b66:	1a51      	subs	r1, r2, r1
 8007b68:	61b9      	str	r1, [r7, #24]
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	eb63 0301 	sbc.w	r3, r3, r1
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	f04f 0200 	mov.w	r2, #0
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007b7e:	4659      	mov	r1, fp
 8007b80:	018b      	lsls	r3, r1, #6
 8007b82:	4651      	mov	r1, sl
 8007b84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b88:	4651      	mov	r1, sl
 8007b8a:	018a      	lsls	r2, r1, #6
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	ebb2 0801 	subs.w	r8, r2, r1
 8007b92:	4659      	mov	r1, fp
 8007b94:	eb63 0901 	sbc.w	r9, r3, r1
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ba4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ba8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bac:	4690      	mov	r8, r2
 8007bae:	4699      	mov	r9, r3
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	eb18 0303 	adds.w	r3, r8, r3
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	462b      	mov	r3, r5
 8007bba:	eb49 0303 	adc.w	r3, r9, r3
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007bcc:	4629      	mov	r1, r5
 8007bce:	024b      	lsls	r3, r1, #9
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	024a      	lsls	r2, r1, #9
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007be2:	2200      	movs	r2, #0
 8007be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007be6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007be8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bec:	f7f8 ffac 	bl	8000b48 <__aeabi_uldivmod>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bfa:	e065      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x420>
 8007bfc:	40023800 	.word	0x40023800
 8007c00:	00f42400 	.word	0x00f42400
 8007c04:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c08:	4b3d      	ldr	r3, [pc, #244]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	099b      	lsrs	r3, r3, #6
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4618      	mov	r0, r3
 8007c12:	4611      	mov	r1, r2
 8007c14:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c18:	653b      	str	r3, [r7, #80]	; 0x50
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	657b      	str	r3, [r7, #84]	; 0x54
 8007c1e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007c22:	4642      	mov	r2, r8
 8007c24:	464b      	mov	r3, r9
 8007c26:	f04f 0000 	mov.w	r0, #0
 8007c2a:	f04f 0100 	mov.w	r1, #0
 8007c2e:	0159      	lsls	r1, r3, #5
 8007c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c34:	0150      	lsls	r0, r2, #5
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4641      	mov	r1, r8
 8007c3c:	1a51      	subs	r1, r2, r1
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	4649      	mov	r1, r9
 8007c42:	eb63 0301 	sbc.w	r3, r3, r1
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007c54:	4659      	mov	r1, fp
 8007c56:	018b      	lsls	r3, r1, #6
 8007c58:	4651      	mov	r1, sl
 8007c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c5e:	4651      	mov	r1, sl
 8007c60:	018a      	lsls	r2, r1, #6
 8007c62:	4651      	mov	r1, sl
 8007c64:	1a54      	subs	r4, r2, r1
 8007c66:	4659      	mov	r1, fp
 8007c68:	eb63 0501 	sbc.w	r5, r3, r1
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	00eb      	lsls	r3, r5, #3
 8007c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c7a:	00e2      	lsls	r2, r4, #3
 8007c7c:	4614      	mov	r4, r2
 8007c7e:	461d      	mov	r5, r3
 8007c80:	4643      	mov	r3, r8
 8007c82:	18e3      	adds	r3, r4, r3
 8007c84:	603b      	str	r3, [r7, #0]
 8007c86:	464b      	mov	r3, r9
 8007c88:	eb45 0303 	adc.w	r3, r5, r3
 8007c8c:	607b      	str	r3, [r7, #4]
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	028b      	lsls	r3, r1, #10
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	028a      	lsls	r2, r1, #10
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4619      	mov	r1, r3
 8007cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007cba:	f7f8 ff45 	bl	8000b48 <__aeabi_uldivmod>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x458>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	0f1b      	lsrs	r3, r3, #28
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007ce6:	e003      	b.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ce8:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	37b8      	adds	r7, #184	; 0xb8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cfe:	bf00      	nop
 8007d00:	40023800 	.word	0x40023800
 8007d04:	00f42400 	.word	0x00f42400

08007d08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e28d      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8083 	beq.w	8007e2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007d28:	4b94      	ldr	r3, [pc, #592]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	d019      	beq.n	8007d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007d34:	4b91      	ldr	r3, [pc, #580]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007d40:	4b8e      	ldr	r3, [pc, #568]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d4c:	d00c      	beq.n	8007d68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d4e:	4b8b      	ldr	r3, [pc, #556]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007d56:	2b0c      	cmp	r3, #12
 8007d58:	d112      	bne.n	8007d80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d5a:	4b88      	ldr	r3, [pc, #544]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d66:	d10b      	bne.n	8007d80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d68:	4b84      	ldr	r3, [pc, #528]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d05b      	beq.n	8007e2c <HAL_RCC_OscConfig+0x124>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d157      	bne.n	8007e2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e25a      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d88:	d106      	bne.n	8007d98 <HAL_RCC_OscConfig+0x90>
 8007d8a:	4b7c      	ldr	r3, [pc, #496]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a7b      	ldr	r2, [pc, #492]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e01d      	b.n	8007dd4 <HAL_RCC_OscConfig+0xcc>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007da0:	d10c      	bne.n	8007dbc <HAL_RCC_OscConfig+0xb4>
 8007da2:	4b76      	ldr	r3, [pc, #472]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a75      	ldr	r2, [pc, #468]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	4b73      	ldr	r3, [pc, #460]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a72      	ldr	r2, [pc, #456]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	e00b      	b.n	8007dd4 <HAL_RCC_OscConfig+0xcc>
 8007dbc:	4b6f      	ldr	r3, [pc, #444]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a6e      	ldr	r2, [pc, #440]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	4b6c      	ldr	r3, [pc, #432]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a6b      	ldr	r2, [pc, #428]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d013      	beq.n	8007e04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ddc:	f7fd feb2 	bl	8005b44 <HAL_GetTick>
 8007de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007de4:	f7fd feae 	bl	8005b44 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b64      	cmp	r3, #100	; 0x64
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e21f      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df6:	4b61      	ldr	r3, [pc, #388]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0f0      	beq.n	8007de4 <HAL_RCC_OscConfig+0xdc>
 8007e02:	e014      	b.n	8007e2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fd fe9e 	bl	8005b44 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e0c:	f7fd fe9a 	bl	8005b44 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e20b      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1e:	4b57      	ldr	r3, [pc, #348]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f0      	bne.n	8007e0c <HAL_RCC_OscConfig+0x104>
 8007e2a:	e000      	b.n	8007e2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d06f      	beq.n	8007f1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007e3a:	4b50      	ldr	r3, [pc, #320]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 030c 	and.w	r3, r3, #12
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d017      	beq.n	8007e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e46:	4b4d      	ldr	r3, [pc, #308]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d105      	bne.n	8007e5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e52:	4b4a      	ldr	r3, [pc, #296]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e5e:	4b47      	ldr	r3, [pc, #284]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e66:	2b0c      	cmp	r3, #12
 8007e68:	d11c      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e6a:	4b44      	ldr	r3, [pc, #272]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d116      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e76:	4b41      	ldr	r3, [pc, #260]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_RCC_OscConfig+0x186>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d001      	beq.n	8007e8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e1d3      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8e:	4b3b      	ldr	r3, [pc, #236]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	4937      	ldr	r1, [pc, #220]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ea2:	e03a      	b.n	8007f1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d020      	beq.n	8007eee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007eac:	4b34      	ldr	r3, [pc, #208]	; (8007f80 <HAL_RCC_OscConfig+0x278>)
 8007eae:	2201      	movs	r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb2:	f7fd fe47 	bl	8005b44 <HAL_GetTick>
 8007eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eb8:	e008      	b.n	8007ecc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eba:	f7fd fe43 	bl	8005b44 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d901      	bls.n	8007ecc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e1b4      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ecc:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0f0      	beq.n	8007eba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed8:	4b28      	ldr	r3, [pc, #160]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	4925      	ldr	r1, [pc, #148]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	600b      	str	r3, [r1, #0]
 8007eec:	e015      	b.n	8007f1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007eee:	4b24      	ldr	r3, [pc, #144]	; (8007f80 <HAL_RCC_OscConfig+0x278>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef4:	f7fd fe26 	bl	8005b44 <HAL_GetTick>
 8007ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007efc:	f7fd fe22 	bl	8005b44 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e193      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f0e:	4b1b      	ldr	r3, [pc, #108]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1f0      	bne.n	8007efc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d036      	beq.n	8007f94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d016      	beq.n	8007f5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <HAL_RCC_OscConfig+0x27c>)
 8007f30:	2201      	movs	r2, #1
 8007f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f34:	f7fd fe06 	bl	8005b44 <HAL_GetTick>
 8007f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f3c:	f7fd fe02 	bl	8005b44 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e173      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <HAL_RCC_OscConfig+0x274>)
 8007f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0x234>
 8007f5a:	e01b      	b.n	8007f94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <HAL_RCC_OscConfig+0x27c>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f62:	f7fd fdef 	bl	8005b44 <HAL_GetTick>
 8007f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f68:	e00e      	b.n	8007f88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f6a:	f7fd fdeb 	bl	8005b44 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d907      	bls.n	8007f88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e15c      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	42470000 	.word	0x42470000
 8007f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f88:	4b8a      	ldr	r3, [pc, #552]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8007f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1ea      	bne.n	8007f6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8097 	beq.w	80080d0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fa6:	4b83      	ldr	r3, [pc, #524]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d10f      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	4b7f      	ldr	r3, [pc, #508]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	4a7e      	ldr	r2, [pc, #504]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8007fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8007fc2:	4b7c      	ldr	r3, [pc, #496]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fca:	60bb      	str	r3, [r7, #8]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fd2:	4b79      	ldr	r3, [pc, #484]	; (80081b8 <HAL_RCC_OscConfig+0x4b0>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d118      	bne.n	8008010 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fde:	4b76      	ldr	r3, [pc, #472]	; (80081b8 <HAL_RCC_OscConfig+0x4b0>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a75      	ldr	r2, [pc, #468]	; (80081b8 <HAL_RCC_OscConfig+0x4b0>)
 8007fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fea:	f7fd fdab 	bl	8005b44 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff2:	f7fd fda7 	bl	8005b44 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e118      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008004:	4b6c      	ldr	r3, [pc, #432]	; (80081b8 <HAL_RCC_OscConfig+0x4b0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0f0      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d106      	bne.n	8008026 <HAL_RCC_OscConfig+0x31e>
 8008018:	4b66      	ldr	r3, [pc, #408]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801c:	4a65      	ldr	r2, [pc, #404]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	6713      	str	r3, [r2, #112]	; 0x70
 8008024:	e01c      	b.n	8008060 <HAL_RCC_OscConfig+0x358>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	2b05      	cmp	r3, #5
 800802c:	d10c      	bne.n	8008048 <HAL_RCC_OscConfig+0x340>
 800802e:	4b61      	ldr	r3, [pc, #388]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	4a60      	ldr	r2, [pc, #384]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008034:	f043 0304 	orr.w	r3, r3, #4
 8008038:	6713      	str	r3, [r2, #112]	; 0x70
 800803a:	4b5e      	ldr	r3, [pc, #376]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	4a5d      	ldr	r2, [pc, #372]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	6713      	str	r3, [r2, #112]	; 0x70
 8008046:	e00b      	b.n	8008060 <HAL_RCC_OscConfig+0x358>
 8008048:	4b5a      	ldr	r3, [pc, #360]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800804a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804c:	4a59      	ldr	r2, [pc, #356]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800804e:	f023 0301 	bic.w	r3, r3, #1
 8008052:	6713      	str	r3, [r2, #112]	; 0x70
 8008054:	4b57      	ldr	r3, [pc, #348]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	4a56      	ldr	r2, [pc, #344]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800805a:	f023 0304 	bic.w	r3, r3, #4
 800805e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d015      	beq.n	8008094 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008068:	f7fd fd6c 	bl	8005b44 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800806e:	e00a      	b.n	8008086 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008070:	f7fd fd68 	bl	8005b44 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	f241 3288 	movw	r2, #5000	; 0x1388
 800807e:	4293      	cmp	r3, r2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e0d7      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008086:	4b4b      	ldr	r3, [pc, #300]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0ee      	beq.n	8008070 <HAL_RCC_OscConfig+0x368>
 8008092:	e014      	b.n	80080be <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008094:	f7fd fd56 	bl	8005b44 <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800809a:	e00a      	b.n	80080b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800809c:	f7fd fd52 	bl	8005b44 <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e0c1      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080b2:	4b40      	ldr	r3, [pc, #256]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1ee      	bne.n	800809c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d105      	bne.n	80080d0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080c4:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 80080c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c8:	4a3a      	ldr	r2, [pc, #232]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 80080ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80ad 	beq.w	8008234 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080da:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 030c 	and.w	r3, r3, #12
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d060      	beq.n	80081a8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d145      	bne.n	800817a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ee:	4b33      	ldr	r3, [pc, #204]	; (80081bc <HAL_RCC_OscConfig+0x4b4>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f4:	f7fd fd26 	bl	8005b44 <HAL_GetTick>
 80080f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080fc:	f7fd fd22 	bl	8005b44 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e093      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800810e:	4b29      	ldr	r3, [pc, #164]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f0      	bne.n	80080fc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69da      	ldr	r2, [r3, #28]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	019b      	lsls	r3, r3, #6
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008130:	085b      	lsrs	r3, r3, #1
 8008132:	3b01      	subs	r3, #1
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	061b      	lsls	r3, r3, #24
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	071b      	lsls	r3, r3, #28
 8008146:	491b      	ldr	r1, [pc, #108]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 8008148:	4313      	orrs	r3, r2
 800814a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <HAL_RCC_OscConfig+0x4b4>)
 800814e:	2201      	movs	r2, #1
 8008150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008152:	f7fd fcf7 	bl	8005b44 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800815a:	f7fd fcf3 	bl	8005b44 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e064      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800816c:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f0      	beq.n	800815a <HAL_RCC_OscConfig+0x452>
 8008178:	e05c      	b.n	8008234 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <HAL_RCC_OscConfig+0x4b4>)
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008180:	f7fd fce0 	bl	8005b44 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008188:	f7fd fcdc 	bl	8005b44 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e04d      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <HAL_RCC_OscConfig+0x4ac>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_OscConfig+0x480>
 80081a6:	e045      	b.n	8008234 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d107      	bne.n	80081c0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e040      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
 80081b4:	40023800 	.word	0x40023800
 80081b8:	40007000 	.word	0x40007000
 80081bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081c0:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <HAL_RCC_OscConfig+0x538>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d030      	beq.n	8008230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081d8:	429a      	cmp	r2, r3
 80081da:	d129      	bne.n	8008230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d122      	bne.n	8008230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081f0:	4013      	ands	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d119      	bne.n	8008230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	3b01      	subs	r3, #1
 800820a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800820c:	429a      	cmp	r2, r3
 800820e:	d10f      	bne.n	8008230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800821c:	429a      	cmp	r2, r3
 800821e:	d107      	bne.n	8008230 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800822c:	429a      	cmp	r2, r3
 800822e:	d001      	beq.n	8008234 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800

08008244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e07b      	b.n	800834e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d108      	bne.n	8008270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008266:	d009      	beq.n	800827c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	61da      	str	r2, [r3, #28]
 800826e:	e005      	b.n	800827c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d106      	bne.n	800829c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fc ffd0 	bl	800523c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80082c4:	431a      	orrs	r2, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ec:	431a      	orrs	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008300:	ea42 0103 	orr.w	r1, r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	0c1b      	lsrs	r3, r3, #16
 800831a:	f003 0104 	and.w	r1, r3, #4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	f003 0210 	and.w	r2, r3, #16
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800833c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b08c      	sub	sp, #48	; 0x30
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
 8008362:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008364:	2301      	movs	r3, #1
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_SPI_TransmitReceive+0x26>
 8008378:	2302      	movs	r3, #2
 800837a:	e198      	b.n	80086ae <HAL_SPI_TransmitReceive+0x358>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008384:	f7fd fbde 	bl	8005b44 <HAL_GetTick>
 8008388:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800839a:	887b      	ldrh	r3, [r7, #2]
 800839c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800839e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d00f      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x70>
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ac:	d107      	bne.n	80083be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <HAL_SPI_TransmitReceive+0x68>
 80083b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d003      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083be:	2302      	movs	r3, #2
 80083c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083c4:	e16d      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <HAL_SPI_TransmitReceive+0x82>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_SPI_TransmitReceive+0x82>
 80083d2:	887b      	ldrh	r3, [r7, #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083de:	e160      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d003      	beq.n	80083f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2205      	movs	r2, #5
 80083f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	887a      	ldrh	r2, [r7, #2]
 8008404:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	887a      	ldrh	r2, [r7, #2]
 800840a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	887a      	ldrh	r2, [r7, #2]
 8008416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	887a      	ldrh	r2, [r7, #2]
 800841c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d007      	beq.n	8008448 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008450:	d17c      	bne.n	800854c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <HAL_SPI_TransmitReceive+0x10a>
 800845a:	8b7b      	ldrh	r3, [r7, #26]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d16a      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008484:	e057      	b.n	8008536 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d11b      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x176>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d016      	beq.n	80084cc <HAL_SPI_TransmitReceive+0x176>
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d113      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	1c9a      	adds	r2, r3, #2
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d119      	bne.n	800850e <HAL_SPI_TransmitReceive+0x1b8>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d014      	beq.n	800850e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	b292      	uxth	r2, r2
 80084f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	1c9a      	adds	r2, r3, #2
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	b29a      	uxth	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800850a:	2301      	movs	r3, #1
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800850e:	f7fd fb19 	bl	8005b44 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851a:	429a      	cmp	r2, r3
 800851c:	d80b      	bhi.n	8008536 <HAL_SPI_TransmitReceive+0x1e0>
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008524:	d007      	beq.n	8008536 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008534:	e0b5      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853a:	b29b      	uxth	r3, r3
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1a2      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x130>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d19d      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x130>
 800854a:	e080      	b.n	800864e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_SPI_TransmitReceive+0x204>
 8008554:	8b7b      	ldrh	r3, [r7, #26]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d16f      	bne.n	800863a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008580:	e05b      	b.n	800863a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b02      	cmp	r3, #2
 800858e:	d11c      	bne.n	80085ca <HAL_SPI_TransmitReceive+0x274>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d017      	beq.n	80085ca <HAL_SPI_TransmitReceive+0x274>
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d114      	bne.n	80085ca <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	330c      	adds	r3, #12
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085bc:	b29b      	uxth	r3, r3
 80085be:	3b01      	subs	r3, #1
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d119      	bne.n	800860c <HAL_SPI_TransmitReceive+0x2b6>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d014      	beq.n	800860c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008608:	2301      	movs	r3, #1
 800860a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800860c:	f7fd fa9a 	bl	8005b44 <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008618:	429a      	cmp	r2, r3
 800861a:	d803      	bhi.n	8008624 <HAL_SPI_TransmitReceive+0x2ce>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008622:	d102      	bne.n	800862a <HAL_SPI_TransmitReceive+0x2d4>
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8008638:	e033      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d19e      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x22c>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d199      	bne.n	8008582 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800864e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 f8b8 	bl	80087c8 <SPI_EndRxTxTransaction>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d006      	beq.n	800866c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2220      	movs	r2, #32
 8008668:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800866a:	e01a      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008674:	2300      	movs	r3, #0
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008698:	e003      	b.n	80086a2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3730      	adds	r7, #48	; 0x30
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086c8:	f7fd fa3c 	bl	8005b44 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086d8:	f7fd fa34 	bl	8005b44 <HAL_GetTick>
 80086dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086de:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	015b      	lsls	r3, r3, #5
 80086e4:	0d1b      	lsrs	r3, r3, #20
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	fb02 f303 	mul.w	r3, r2, r3
 80086ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ee:	e054      	b.n	800879a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f6:	d050      	beq.n	800879a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086f8:	f7fd fa24 	bl	8005b44 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	429a      	cmp	r2, r3
 8008706:	d902      	bls.n	800870e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d13d      	bne.n	800878a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800871c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008726:	d111      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008730:	d004      	beq.n	800873c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873a:	d107      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008754:	d10f      	bne.n	8008776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e017      	b.n	80087ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	3b01      	subs	r3, #1
 8008798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d19b      	bne.n	80086f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	2000002c 	.word	0x2000002c

080087c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2201      	movs	r2, #1
 80087dc:	2102      	movs	r1, #2
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff ff6a 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	f043 0220 	orr.w	r2, r3, #32
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e032      	b.n	8008860 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087fa:	4b1b      	ldr	r3, [pc, #108]	; (8008868 <SPI_EndRxTxTransaction+0xa0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1b      	ldr	r2, [pc, #108]	; (800886c <SPI_EndRxTxTransaction+0xa4>)
 8008800:	fba2 2303 	umull	r2, r3, r2, r3
 8008804:	0d5b      	lsrs	r3, r3, #21
 8008806:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008818:	d112      	bne.n	8008840 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff ff47 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d016      	beq.n	800885e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	f043 0220 	orr.w	r2, r3, #32
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e00f      	b.n	8008860 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	3b01      	subs	r3, #1
 800884a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008856:	2b80      	cmp	r3, #128	; 0x80
 8008858:	d0f2      	beq.n	8008840 <SPI_EndRxTxTransaction+0x78>
 800885a:	e000      	b.n	800885e <SPI_EndRxTxTransaction+0x96>
        break;
 800885c:	bf00      	nop
  }

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	2000002c 	.word	0x2000002c
 800886c:	165e9f81 	.word	0x165e9f81

08008870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e041      	b.n	8008906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d106      	bne.n	800889c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fc fd2a 	bl	80052f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2202      	movs	r2, #2
 80088a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3304      	adds	r3, #4
 80088ac:	4619      	mov	r1, r3
 80088ae:	4610      	mov	r0, r2
 80088b0:	f000 fe8c 	bl	80095cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b01      	cmp	r3, #1
 8008922:	d001      	beq.n	8008928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e04e      	b.n	80089c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2202      	movs	r2, #2
 800892c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68da      	ldr	r2, [r3, #12]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0201 	orr.w	r2, r2, #1
 800893e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a23      	ldr	r2, [pc, #140]	; (80089d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d022      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008952:	d01d      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1f      	ldr	r2, [pc, #124]	; (80089d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d018      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1e      	ldr	r2, [pc, #120]	; (80089dc <HAL_TIM_Base_Start_IT+0xcc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d013      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1c      	ldr	r2, [pc, #112]	; (80089e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d00e      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d009      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a19      	ldr	r2, [pc, #100]	; (80089e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d004      	beq.n	8008990 <HAL_TIM_Base_Start_IT+0x80>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a18      	ldr	r2, [pc, #96]	; (80089ec <HAL_TIM_Base_Start_IT+0xdc>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d111      	bne.n	80089b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2b06      	cmp	r3, #6
 80089a0:	d010      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0201 	orr.w	r2, r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b2:	e007      	b.n	80089c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40000c00 	.word	0x40000c00
 80089e4:	40010400 	.word	0x40010400
 80089e8:	40014000 	.word	0x40014000
 80089ec:	40001800 	.word	0x40001800

080089f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e041      	b.n	8008a86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f839 	bl	8008a8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f000 fdcc 	bl	80095cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <HAL_TIM_PWM_Start+0x24>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	bf14      	ite	ne
 8008ac0:	2301      	movne	r3, #1
 8008ac2:	2300      	moveq	r3, #0
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	e022      	b.n	8008b0e <HAL_TIM_PWM_Start+0x6a>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d109      	bne.n	8008ae2 <HAL_TIM_PWM_Start+0x3e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	bf14      	ite	ne
 8008ada:	2301      	movne	r3, #1
 8008adc:	2300      	moveq	r3, #0
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	e015      	b.n	8008b0e <HAL_TIM_PWM_Start+0x6a>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d109      	bne.n	8008afc <HAL_TIM_PWM_Start+0x58>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	bf14      	ite	ne
 8008af4:	2301      	movne	r3, #1
 8008af6:	2300      	moveq	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	e008      	b.n	8008b0e <HAL_TIM_PWM_Start+0x6a>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	bf14      	ite	ne
 8008b08:	2301      	movne	r3, #1
 8008b0a:	2300      	moveq	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e07c      	b.n	8008c10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d104      	bne.n	8008b26 <HAL_TIM_PWM_Start+0x82>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b24:	e013      	b.n	8008b4e <HAL_TIM_PWM_Start+0xaa>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d104      	bne.n	8008b36 <HAL_TIM_PWM_Start+0x92>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b34:	e00b      	b.n	8008b4e <HAL_TIM_PWM_Start+0xaa>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d104      	bne.n	8008b46 <HAL_TIM_PWM_Start+0xa2>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b44:	e003      	b.n	8008b4e <HAL_TIM_PWM_Start+0xaa>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2201      	movs	r2, #1
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 f958 	bl	8009e0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a2d      	ldr	r2, [pc, #180]	; (8008c18 <HAL_TIM_PWM_Start+0x174>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_TIM_PWM_Start+0xcc>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a2c      	ldr	r2, [pc, #176]	; (8008c1c <HAL_TIM_PWM_Start+0x178>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d101      	bne.n	8008b74 <HAL_TIM_PWM_Start+0xd0>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <HAL_TIM_PWM_Start+0xd2>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a22      	ldr	r2, [pc, #136]	; (8008c18 <HAL_TIM_PWM_Start+0x174>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d022      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b9c:	d01d      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <HAL_TIM_PWM_Start+0x17c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d018      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a1d      	ldr	r2, [pc, #116]	; (8008c24 <HAL_TIM_PWM_Start+0x180>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d013      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a1c      	ldr	r2, [pc, #112]	; (8008c28 <HAL_TIM_PWM_Start+0x184>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d00e      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <HAL_TIM_PWM_Start+0x178>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d009      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a18      	ldr	r2, [pc, #96]	; (8008c2c <HAL_TIM_PWM_Start+0x188>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d004      	beq.n	8008bda <HAL_TIM_PWM_Start+0x136>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a16      	ldr	r2, [pc, #88]	; (8008c30 <HAL_TIM_PWM_Start+0x18c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d111      	bne.n	8008bfe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b06      	cmp	r3, #6
 8008bea:	d010      	beq.n	8008c0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f042 0201 	orr.w	r2, r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bfc:	e007      	b.n	8008c0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0201 	orr.w	r2, r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40010000 	.word	0x40010000
 8008c1c:	40010400 	.word	0x40010400
 8008c20:	40000400 	.word	0x40000400
 8008c24:	40000800 	.word	0x40000800
 8008c28:	40000c00 	.word	0x40000c00
 8008c2c:	40014000 	.word	0x40014000
 8008c30:	40001800 	.word	0x40001800

08008c34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e041      	b.n	8008cca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f839 	bl	8008cd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4619      	mov	r1, r3
 8008c72:	4610      	mov	r0, r2
 8008c74:	f000 fcaa 	bl	80095cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e097      	b.n	8008e2a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fc fb62 	bl	80053d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d2a:	f023 0307 	bic.w	r3, r3, #7
 8008d2e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f000 fc46 	bl	80095cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008d86:	f023 030c 	bic.w	r3, r3, #12
 8008d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	021b      	lsls	r3, r3, #8
 8008da2:	4313      	orrs	r3, r2
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	011a      	lsls	r2, r3, #4
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	031b      	lsls	r3, r3, #12
 8008db6:	4313      	orrs	r3, r2
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008dc4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008dcc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e42:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008e4a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e52:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e5a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d110      	bne.n	8008e84 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d102      	bne.n	8008e6e <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e68:	7b7b      	ldrb	r3, [r7, #13]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d001      	beq.n	8008e72 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e069      	b.n	8008f46 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e82:	e031      	b.n	8008ee8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d110      	bne.n	8008eac <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d102      	bne.n	8008e96 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e90:	7b3b      	ldrb	r3, [r7, #12]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d001      	beq.n	8008e9a <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e055      	b.n	8008f46 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eaa:	e01d      	b.n	8008ee8 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d108      	bne.n	8008ec4 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d105      	bne.n	8008ec4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eb8:	7b7b      	ldrb	r3, [r7, #13]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d102      	bne.n	8008ec4 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ebe:	7b3b      	ldrb	r3, [r7, #12]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d001      	beq.n	8008ec8 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e03e      	b.n	8008f46 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_TIM_Encoder_Start+0xc4>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d008      	beq.n	8008f06 <HAL_TIM_Encoder_Start+0xd4>
 8008ef4:	e00f      	b.n	8008f16 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2201      	movs	r2, #1
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 ff84 	bl	8009e0c <TIM_CCxChannelCmd>
      break;
 8008f04:	e016      	b.n	8008f34 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	2104      	movs	r1, #4
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 ff7c 	bl	8009e0c <TIM_CCxChannelCmd>
      break;
 8008f14:	e00e      	b.n	8008f34 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 ff74 	bl	8009e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 ff6d 	bl	8009e0c <TIM_CCxChannelCmd>
      break;
 8008f32:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b084      	sub	sp, #16
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d020      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01b      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f06f 0202 	mvn.w	r2, #2
 8008f82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 faf8 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 8008f9e:	e005      	b.n	8008fac <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 faea 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fafb 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d020      	beq.n	8008ffe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01b      	beq.n	8008ffe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f06f 0204 	mvn.w	r2, #4
 8008fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fad2 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 8008fea:	e005      	b.n	8008ff8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fac4 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fad5 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d020      	beq.n	800904a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f003 0308 	and.w	r3, r3, #8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01b      	beq.n	800904a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0208 	mvn.w	r2, #8
 800901a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2204      	movs	r2, #4
 8009020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 faac 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 8009036:	e005      	b.n	8009044 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fa9e 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 faaf 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f003 0310 	and.w	r3, r3, #16
 8009050:	2b00      	cmp	r3, #0
 8009052:	d020      	beq.n	8009096 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 0310 	and.w	r3, r3, #16
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01b      	beq.n	8009096 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f06f 0210 	mvn.w	r2, #16
 8009066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2208      	movs	r2, #8
 800906c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fa86 	bl	800958e <HAL_TIM_IC_CaptureCallback>
 8009082:	e005      	b.n	8009090 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fa78 	bl	800957a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa89 	bl	80095a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00c      	beq.n	80090ba <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f06f 0201 	mvn.w	r2, #1
 80090b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7fa fa0f 	bl	80034d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00c      	beq.n	80090de <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 ff95 	bl	800a008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00c      	beq.n	8009102 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d007      	beq.n	8009102 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fa5a 	bl	80095b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00c      	beq.n	8009126 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f06f 0220 	mvn.w	r2, #32
 800911e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 ff67 	bl	8009ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009126:	bf00      	nop
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b086      	sub	sp, #24
 8009132:	af00      	add	r7, sp, #0
 8009134:	60f8      	str	r0, [r7, #12]
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_TIM_IC_ConfigChannel+0x1e>
 8009148:	2302      	movs	r3, #2
 800914a:	e088      	b.n	800925e <HAL_TIM_IC_ConfigChannel+0x130>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d11b      	bne.n	8009192 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800916a:	f000 fc8b 	bl	8009a84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	699a      	ldr	r2, [r3, #24]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 020c 	bic.w	r2, r2, #12
 800917c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6999      	ldr	r1, [r3, #24]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	619a      	str	r2, [r3, #24]
 8009190:	e060      	b.n	8009254 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b04      	cmp	r3, #4
 8009196:	d11c      	bne.n	80091d2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80091a8:	f000 fd0f 	bl	8009bca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80091ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6999      	ldr	r1, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	021a      	lsls	r2, r3, #8
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	619a      	str	r2, [r3, #24]
 80091d0:	e040      	b.n	8009254 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d11b      	bne.n	8009210 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80091e8:	f000 fd5c 	bl	8009ca4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69da      	ldr	r2, [r3, #28]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f022 020c 	bic.w	r2, r2, #12
 80091fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69d9      	ldr	r1, [r3, #28]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	61da      	str	r2, [r3, #28]
 800920e:	e021      	b.n	8009254 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b0c      	cmp	r3, #12
 8009214:	d11c      	bne.n	8009250 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009226:	f000 fd79 	bl	8009d1c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009238:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	69d9      	ldr	r1, [r3, #28]
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	021a      	lsls	r2, r3, #8
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	61da      	str	r2, [r3, #28]
 800924e:	e001      	b.n	8009254 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009282:	2302      	movs	r3, #2
 8009284:	e0ae      	b.n	80093e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b0c      	cmp	r3, #12
 8009292:	f200 809f 	bhi.w	80093d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009296:	a201      	add	r2, pc, #4	; (adr r2, 800929c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929c:	080092d1 	.word	0x080092d1
 80092a0:	080093d5 	.word	0x080093d5
 80092a4:	080093d5 	.word	0x080093d5
 80092a8:	080093d5 	.word	0x080093d5
 80092ac:	08009311 	.word	0x08009311
 80092b0:	080093d5 	.word	0x080093d5
 80092b4:	080093d5 	.word	0x080093d5
 80092b8:	080093d5 	.word	0x080093d5
 80092bc:	08009353 	.word	0x08009353
 80092c0:	080093d5 	.word	0x080093d5
 80092c4:	080093d5 	.word	0x080093d5
 80092c8:	080093d5 	.word	0x080093d5
 80092cc:	08009393 	.word	0x08009393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68b9      	ldr	r1, [r7, #8]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fa24 	bl	8009724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699a      	ldr	r2, [r3, #24]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f042 0208 	orr.w	r2, r2, #8
 80092ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699a      	ldr	r2, [r3, #24]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f022 0204 	bic.w	r2, r2, #4
 80092fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6999      	ldr	r1, [r3, #24]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	430a      	orrs	r2, r1
 800930c:	619a      	str	r2, [r3, #24]
      break;
 800930e:	e064      	b.n	80093da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 fa74 	bl	8009804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	699a      	ldr	r2, [r3, #24]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800932a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699a      	ldr	r2, [r3, #24]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800933a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6999      	ldr	r1, [r3, #24]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	021a      	lsls	r2, r3, #8
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	430a      	orrs	r2, r1
 800934e:	619a      	str	r2, [r3, #24]
      break;
 8009350:	e043      	b.n	80093da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fac9 	bl	80098f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69da      	ldr	r2, [r3, #28]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0208 	orr.w	r2, r2, #8
 800936c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69da      	ldr	r2, [r3, #28]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0204 	bic.w	r2, r2, #4
 800937c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	69d9      	ldr	r1, [r3, #28]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	430a      	orrs	r2, r1
 800938e:	61da      	str	r2, [r3, #28]
      break;
 8009390:	e023      	b.n	80093da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fb1d 	bl	80099d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69da      	ldr	r2, [r3, #28]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	69d9      	ldr	r1, [r3, #28]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	021a      	lsls	r2, r3, #8
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	61da      	str	r2, [r3, #28]
      break;
 80093d2:	e002      	b.n	80093da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	75fb      	strb	r3, [r7, #23]
      break;
 80093d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_TIM_ConfigClockSource+0x1c>
 8009404:	2302      	movs	r3, #2
 8009406:	e0b4      	b.n	8009572 <HAL_TIM_ConfigClockSource+0x186>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800942e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009440:	d03e      	beq.n	80094c0 <HAL_TIM_ConfigClockSource+0xd4>
 8009442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009446:	f200 8087 	bhi.w	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 800944a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800944e:	f000 8086 	beq.w	800955e <HAL_TIM_ConfigClockSource+0x172>
 8009452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009456:	d87f      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009458:	2b70      	cmp	r3, #112	; 0x70
 800945a:	d01a      	beq.n	8009492 <HAL_TIM_ConfigClockSource+0xa6>
 800945c:	2b70      	cmp	r3, #112	; 0x70
 800945e:	d87b      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009460:	2b60      	cmp	r3, #96	; 0x60
 8009462:	d050      	beq.n	8009506 <HAL_TIM_ConfigClockSource+0x11a>
 8009464:	2b60      	cmp	r3, #96	; 0x60
 8009466:	d877      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009468:	2b50      	cmp	r3, #80	; 0x50
 800946a:	d03c      	beq.n	80094e6 <HAL_TIM_ConfigClockSource+0xfa>
 800946c:	2b50      	cmp	r3, #80	; 0x50
 800946e:	d873      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009470:	2b40      	cmp	r3, #64	; 0x40
 8009472:	d058      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0x13a>
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d86f      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009478:	2b30      	cmp	r3, #48	; 0x30
 800947a:	d064      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x15a>
 800947c:	2b30      	cmp	r3, #48	; 0x30
 800947e:	d86b      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009480:	2b20      	cmp	r3, #32
 8009482:	d060      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x15a>
 8009484:	2b20      	cmp	r3, #32
 8009486:	d867      	bhi.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d05c      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x15a>
 800948c:	2b10      	cmp	r3, #16
 800948e:	d05a      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x15a>
 8009490:	e062      	b.n	8009558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094a2:	f000 fc93 	bl	8009dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	609a      	str	r2, [r3, #8]
      break;
 80094be:	e04f      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094d0:	f000 fc7c 	bl	8009dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094e2:	609a      	str	r2, [r3, #8]
      break;
 80094e4:	e03c      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094f2:	461a      	mov	r2, r3
 80094f4:	f000 fb3a 	bl	8009b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2150      	movs	r1, #80	; 0x50
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fc49 	bl	8009d96 <TIM_ITRx_SetConfig>
      break;
 8009504:	e02c      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009512:	461a      	mov	r2, r3
 8009514:	f000 fb96 	bl	8009c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2160      	movs	r1, #96	; 0x60
 800951e:	4618      	mov	r0, r3
 8009520:	f000 fc39 	bl	8009d96 <TIM_ITRx_SetConfig>
      break;
 8009524:	e01c      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009532:	461a      	mov	r2, r3
 8009534:	f000 fb1a 	bl	8009b6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2140      	movs	r1, #64	; 0x40
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fc29 	bl	8009d96 <TIM_ITRx_SetConfig>
      break;
 8009544:	e00c      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f000 fc20 	bl	8009d96 <TIM_ITRx_SetConfig>
      break;
 8009556:	e003      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	73fb      	strb	r3, [r7, #15]
      break;
 800955c:	e000      	b.n	8009560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800955e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009570:	7bfb      	ldrb	r3, [r7, #15]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800958e:	b480      	push	{r7}
 8009590:	b083      	sub	sp, #12
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr

080095a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a46      	ldr	r2, [pc, #280]	; (80096f8 <TIM_Base_SetConfig+0x12c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d013      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ea:	d00f      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a43      	ldr	r2, [pc, #268]	; (80096fc <TIM_Base_SetConfig+0x130>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00b      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a42      	ldr	r2, [pc, #264]	; (8009700 <TIM_Base_SetConfig+0x134>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d007      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a41      	ldr	r2, [pc, #260]	; (8009704 <TIM_Base_SetConfig+0x138>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a40      	ldr	r2, [pc, #256]	; (8009708 <TIM_Base_SetConfig+0x13c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d108      	bne.n	800961e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a35      	ldr	r2, [pc, #212]	; (80096f8 <TIM_Base_SetConfig+0x12c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d02b      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800962c:	d027      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a32      	ldr	r2, [pc, #200]	; (80096fc <TIM_Base_SetConfig+0x130>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d023      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a31      	ldr	r2, [pc, #196]	; (8009700 <TIM_Base_SetConfig+0x134>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d01f      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a30      	ldr	r2, [pc, #192]	; (8009704 <TIM_Base_SetConfig+0x138>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d01b      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a2f      	ldr	r2, [pc, #188]	; (8009708 <TIM_Base_SetConfig+0x13c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d017      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2e      	ldr	r2, [pc, #184]	; (800970c <TIM_Base_SetConfig+0x140>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d013      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a2d      	ldr	r2, [pc, #180]	; (8009710 <TIM_Base_SetConfig+0x144>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00f      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a2c      	ldr	r2, [pc, #176]	; (8009714 <TIM_Base_SetConfig+0x148>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00b      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a2b      	ldr	r2, [pc, #172]	; (8009718 <TIM_Base_SetConfig+0x14c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d007      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a2a      	ldr	r2, [pc, #168]	; (800971c <TIM_Base_SetConfig+0x150>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d003      	beq.n	800967e <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a29      	ldr	r2, [pc, #164]	; (8009720 <TIM_Base_SetConfig+0x154>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d108      	bne.n	8009690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a10      	ldr	r2, [pc, #64]	; (80096f8 <TIM_Base_SetConfig+0x12c>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_Base_SetConfig+0xf8>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a12      	ldr	r2, [pc, #72]	; (8009708 <TIM_Base_SetConfig+0x13c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d103      	bne.n	80096cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	691a      	ldr	r2, [r3, #16]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d105      	bne.n	80096ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f023 0201 	bic.w	r2, r3, #1
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	611a      	str	r2, [r3, #16]
  }
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	40010000 	.word	0x40010000
 80096fc:	40000400 	.word	0x40000400
 8009700:	40000800 	.word	0x40000800
 8009704:	40000c00 	.word	0x40000c00
 8009708:	40010400 	.word	0x40010400
 800970c:	40014000 	.word	0x40014000
 8009710:	40014400 	.word	0x40014400
 8009714:	40014800 	.word	0x40014800
 8009718:	40001800 	.word	0x40001800
 800971c:	40001c00 	.word	0x40001c00
 8009720:	40002000 	.word	0x40002000

08009724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	f023 0201 	bic.w	r2, r3, #1
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	4313      	orrs	r3, r2
 8009764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	f023 0302 	bic.w	r3, r3, #2
 800976c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	4313      	orrs	r3, r2
 8009776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a20      	ldr	r2, [pc, #128]	; (80097fc <TIM_OC1_SetConfig+0xd8>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_OC1_SetConfig+0x64>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a1f      	ldr	r2, [pc, #124]	; (8009800 <TIM_OC1_SetConfig+0xdc>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d10c      	bne.n	80097a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f023 0308 	bic.w	r3, r3, #8
 800978e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f023 0304 	bic.w	r3, r3, #4
 80097a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a15      	ldr	r2, [pc, #84]	; (80097fc <TIM_OC1_SetConfig+0xd8>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d003      	beq.n	80097b2 <TIM_OC1_SetConfig+0x8e>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a14      	ldr	r2, [pc, #80]	; (8009800 <TIM_OC1_SetConfig+0xdc>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d111      	bne.n	80097d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	695b      	ldr	r3, [r3, #20]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	621a      	str	r2, [r3, #32]
}
 80097f0:	bf00      	nop
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	40010000 	.word	0x40010000
 8009800:	40010400 	.word	0x40010400

08009804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	f023 0210 	bic.w	r2, r3, #16
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800983a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4313      	orrs	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f023 0320 	bic.w	r3, r3, #32
 800984e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	697a      	ldr	r2, [r7, #20]
 8009858:	4313      	orrs	r3, r2
 800985a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a22      	ldr	r2, [pc, #136]	; (80098e8 <TIM_OC2_SetConfig+0xe4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d003      	beq.n	800986c <TIM_OC2_SetConfig+0x68>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a21      	ldr	r2, [pc, #132]	; (80098ec <TIM_OC2_SetConfig+0xe8>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d10d      	bne.n	8009888 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4313      	orrs	r3, r2
 800987e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009886:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <TIM_OC2_SetConfig+0xe4>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d003      	beq.n	8009898 <TIM_OC2_SetConfig+0x94>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a16      	ldr	r2, [pc, #88]	; (80098ec <TIM_OC2_SetConfig+0xe8>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d113      	bne.n	80098c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800989e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40010400 	.word	0x40010400

080098f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a21      	ldr	r2, [pc, #132]	; (80099d0 <TIM_OC3_SetConfig+0xe0>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d003      	beq.n	8009956 <TIM_OC3_SetConfig+0x66>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a20      	ldr	r2, [pc, #128]	; (80099d4 <TIM_OC3_SetConfig+0xe4>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d10d      	bne.n	8009972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800995c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <TIM_OC3_SetConfig+0xe0>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_OC3_SetConfig+0x92>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a15      	ldr	r2, [pc, #84]	; (80099d4 <TIM_OC3_SetConfig+0xe4>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d113      	bne.n	80099aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	621a      	str	r2, [r3, #32]
}
 80099c4:	bf00      	nop
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	40010000 	.word	0x40010000
 80099d4:	40010400 	.word	0x40010400

080099d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	031b      	lsls	r3, r3, #12
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a12      	ldr	r2, [pc, #72]	; (8009a7c <TIM_OC4_SetConfig+0xa4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_OC4_SetConfig+0x68>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a11      	ldr	r2, [pc, #68]	; (8009a80 <TIM_OC4_SetConfig+0xa8>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d109      	bne.n	8009a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	019b      	lsls	r3, r3, #6
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	40010400 	.word	0x40010400

08009a84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	f023 0201 	bic.w	r2, r3, #1
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4a28      	ldr	r2, [pc, #160]	; (8009b50 <TIM_TI1_SetConfig+0xcc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d01b      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ab8:	d017      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a25      	ldr	r2, [pc, #148]	; (8009b54 <TIM_TI1_SetConfig+0xd0>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d013      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a24      	ldr	r2, [pc, #144]	; (8009b58 <TIM_TI1_SetConfig+0xd4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00f      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4a23      	ldr	r2, [pc, #140]	; (8009b5c <TIM_TI1_SetConfig+0xd8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a22      	ldr	r2, [pc, #136]	; (8009b60 <TIM_TI1_SetConfig+0xdc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d007      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4a21      	ldr	r2, [pc, #132]	; (8009b64 <TIM_TI1_SetConfig+0xe0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_TI1_SetConfig+0x66>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4a20      	ldr	r2, [pc, #128]	; (8009b68 <TIM_TI1_SetConfig+0xe4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d101      	bne.n	8009aee <TIM_TI1_SetConfig+0x6a>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <TIM_TI1_SetConfig+0x6c>
 8009aee:	2300      	movs	r3, #0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d008      	beq.n	8009b06 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f023 0303 	bic.w	r3, r3, #3
 8009afa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]
 8009b04:	e003      	b.n	8009b0e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f043 0301 	orr.w	r3, r3, #1
 8009b0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f023 030a 	bic.w	r3, r3, #10
 8009b28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f003 030a 	and.w	r3, r3, #10
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	621a      	str	r2, [r3, #32]
}
 8009b42:	bf00      	nop
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40010000 	.word	0x40010000
 8009b54:	40000400 	.word	0x40000400
 8009b58:	40000800 	.word	0x40000800
 8009b5c:	40000c00 	.word	0x40000c00
 8009b60:	40010400 	.word	0x40010400
 8009b64:	40014000 	.word	0x40014000
 8009b68:	40001800 	.word	0x40001800

08009b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b087      	sub	sp, #28
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	f023 0201 	bic.w	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	011b      	lsls	r3, r3, #4
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f023 030a 	bic.w	r3, r3, #10
 8009ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	621a      	str	r2, [r3, #32]
}
 8009bbe:	bf00      	nop
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr

08009bca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bca:	b480      	push	{r7}
 8009bcc:	b087      	sub	sp, #28
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f023 0210 	bic.w	r2, r3, #16
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	031b      	lsls	r3, r3, #12
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	621a      	str	r2, [r3, #32]
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b087      	sub	sp, #28
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	f023 0210 	bic.w	r2, r3, #16
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	031b      	lsls	r3, r3, #12
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	621a      	str	r2, [r3, #32]
}
 8009c98:	bf00      	nop
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	69db      	ldr	r3, [r3, #28]
 8009cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f023 0303 	bic.w	r3, r3, #3
 8009cd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ce0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	621a      	str	r2, [r3, #32]
}
 8009d10:	bf00      	nop
 8009d12:	371c      	adds	r7, #28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
 8009d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	031b      	lsls	r3, r3, #12
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	031b      	lsls	r3, r3, #12
 8009d74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	621a      	str	r2, [r3, #32]
}
 8009d8a:	bf00      	nop
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f043 0307 	orr.w	r3, r3, #7
 8009db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	609a      	str	r2, [r3, #8]
}
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	021a      	lsls	r2, r3, #8
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	609a      	str	r2, [r3, #8]
}
 8009e00:	bf00      	nop
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f003 031f 	and.w	r3, r3, #31
 8009e1e:	2201      	movs	r2, #1
 8009e20:	fa02 f303 	lsl.w	r3, r2, r3
 8009e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6a1a      	ldr	r2, [r3, #32]
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	43db      	mvns	r3, r3
 8009e2e:	401a      	ands	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a1a      	ldr	r2, [r3, #32]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f003 031f 	and.w	r3, r3, #31
 8009e3e:	6879      	ldr	r1, [r7, #4]
 8009e40:	fa01 f303 	lsl.w	r3, r1, r3
 8009e44:	431a      	orrs	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	621a      	str	r2, [r3, #32]
}
 8009e4a:	bf00      	nop
 8009e4c:	371c      	adds	r7, #28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr
	...

08009e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e05a      	b.n	8009f26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a21      	ldr	r2, [pc, #132]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d022      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ebc:	d01d      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d018      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d013      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a1a      	ldr	r2, [pc, #104]	; (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00e      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a18      	ldr	r2, [pc, #96]	; (8009f44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d009      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d004      	beq.n	8009efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a15      	ldr	r2, [pc, #84]	; (8009f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d10c      	bne.n	8009f14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	40010000 	.word	0x40010000
 8009f38:	40000400 	.word	0x40000400
 8009f3c:	40000800 	.word	0x40000800
 8009f40:	40000c00 	.word	0x40000c00
 8009f44:	40010400 	.word	0x40010400
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40001800 	.word	0x40001800

08009f50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d101      	bne.n	8009f6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e03d      	b.n	8009fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e042      	b.n	800a0b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7fb fa72 	bl	800552c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2224      	movs	r2, #36	; 0x24
 800a04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68da      	ldr	r2, [r3, #12]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a05e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 ff37 	bl	800aed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	691a      	ldr	r2, [r3, #16]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	695a      	ldr	r2, [r3, #20]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08c      	sub	sp, #48	; 0x30
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	d156      	bne.n	800a184 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <HAL_UART_Transmit_DMA+0x26>
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e04f      	b.n	800a186 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	88fa      	ldrh	r2, [r7, #6]
 800a0f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	88fa      	ldrh	r2, [r7, #6]
 800a0f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2221      	movs	r2, #33	; 0x21
 800a102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	4a21      	ldr	r2, [pc, #132]	; (800a190 <HAL_UART_Transmit_DMA+0xd4>)
 800a10c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	4a20      	ldr	r2, [pc, #128]	; (800a194 <HAL_UART_Transmit_DMA+0xd8>)
 800a114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11a:	4a1f      	ldr	r2, [pc, #124]	; (800a198 <HAL_UART_Transmit_DMA+0xdc>)
 800a11c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	2200      	movs	r2, #0
 800a124:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	6819      	ldr	r1, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	461a      	mov	r2, r3
 800a13c:	88fb      	ldrh	r3, [r7, #6]
 800a13e:	f7fc fd4d 	bl	8006bdc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a14a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3314      	adds	r3, #20
 800a152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	617b      	str	r3, [r7, #20]
   return(result);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a162:	62bb      	str	r3, [r7, #40]	; 0x28
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3314      	adds	r3, #20
 800a16a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a16c:	627a      	str	r2, [r7, #36]	; 0x24
 800a16e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6a39      	ldr	r1, [r7, #32]
 800a172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	61fb      	str	r3, [r7, #28]
   return(result);
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e5      	bne.n	800a14c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	e000      	b.n	800a186 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
  }
}
 800a186:	4618      	mov	r0, r3
 800a188:	3730      	adds	r7, #48	; 0x30
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	0800a761 	.word	0x0800a761
 800a194:	0800a7fb 	.word	0x0800a7fb
 800a198:	0800a97f 	.word	0x0800a97f

0800a19c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d112      	bne.n	800a1dc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <HAL_UART_Receive_DMA+0x26>
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e00b      	b.n	800a1de <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a1cc:	88fb      	ldrh	r3, [r7, #6]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fc1e 	bl	800aa14 <UART_Start_Receive_DMA>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	e000      	b.n	800a1de <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a1dc:	2302      	movs	r3, #2
  }
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b0ba      	sub	sp, #232	; 0xe8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a20e:	2300      	movs	r3, #0
 800a210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a214:	2300      	movs	r3, #0
 800a216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10f      	bne.n	800a24e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d009      	beq.n	800a24e <HAL_UART_IRQHandler+0x66>
 800a23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fd85 	bl	800ad56 <UART_Receive_IT>
      return;
 800a24c:	e25b      	b.n	800a706 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a24e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 80de 	beq.w	800a414 <HAL_UART_IRQHandler+0x22c>
 800a258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a268:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 80d1 	beq.w	800a414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <HAL_UART_IRQHandler+0xae>
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28e:	f043 0201 	orr.w	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29a:	f003 0304 	and.w	r3, r3, #4
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_UART_IRQHandler+0xd2>
 800a2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	f043 0202 	orr.w	r2, r3, #2
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00b      	beq.n	800a2de <HAL_UART_IRQHandler+0xf6>
 800a2c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	f043 0204 	orr.w	r2, r3, #4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d011      	beq.n	800a30e <HAL_UART_IRQHandler+0x126>
 800a2ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ee:	f003 0320 	and.w	r3, r3, #32
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d105      	bne.n	800a302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a2f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d005      	beq.n	800a30e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a306:	f043 0208 	orr.w	r2, r3, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 81f2 	beq.w	800a6fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <HAL_UART_IRQHandler+0x14e>
 800a324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a328:	f003 0320 	and.w	r3, r3, #32
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fd10 	bl	800ad56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695b      	ldr	r3, [r3, #20]
 800a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a340:	2b40      	cmp	r3, #64	; 0x40
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a352:	f003 0308 	and.w	r3, r3, #8
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <HAL_UART_IRQHandler+0x17a>
 800a35a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d04f      	beq.n	800a402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fc18 	bl	800ab98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d141      	bne.n	800a3fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3314      	adds	r3, #20
 800a37c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a38c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3314      	adds	r3, #20
 800a39e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3b2:	e841 2300 	strex	r3, r2, [r1]
 800a3b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1d9      	bne.n	800a376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d013      	beq.n	800a3f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ce:	4a7e      	ldr	r2, [pc, #504]	; (800a5c8 <HAL_UART_IRQHandler+0x3e0>)
 800a3d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fc fcc8 	bl	8006d6c <HAL_DMA_Abort_IT>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d016      	beq.n	800a410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f0:	e00e      	b.n	800a410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f99e 	bl	800a734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3f8:	e00a      	b.n	800a410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f99a 	bl	800a734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a400:	e006      	b.n	800a410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f996 	bl	800a734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800a40e:	e175      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a410:	bf00      	nop
    return;
 800a412:	e173      	b.n	800a6fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a418:	2b01      	cmp	r3, #1
 800a41a:	f040 814f 	bne.w	800a6bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a422:	f003 0310 	and.w	r3, r3, #16
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 8148 	beq.w	800a6bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a430:	f003 0310 	and.w	r3, r3, #16
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 8141 	beq.w	800a6bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a43a:	2300      	movs	r3, #0
 800a43c:	60bb      	str	r3, [r7, #8]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	60bb      	str	r3, [r7, #8]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	60bb      	str	r3, [r7, #8]
 800a44e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a45a:	2b40      	cmp	r3, #64	; 0x40
 800a45c:	f040 80b6 	bne.w	800a5cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a46c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 8145 	beq.w	800a700 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a47a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a47e:	429a      	cmp	r2, r3
 800a480:	f080 813e 	bcs.w	800a700 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a48a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a496:	f000 8088 	beq.w	800a5aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	330c      	adds	r3, #12
 800a4c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1d9      	bne.n	800a49a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3314      	adds	r3, #20
 800a4ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f0:	e853 3f00 	ldrex	r3, [r3]
 800a4f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4f8:	f023 0301 	bic.w	r3, r3, #1
 800a4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3314      	adds	r3, #20
 800a506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a50a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a50e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a510:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a512:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e1      	bne.n	800a4e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3314      	adds	r3, #20
 800a528:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3314      	adds	r3, #20
 800a542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a546:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a548:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a54c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e3      	bne.n	800a522 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2220      	movs	r2, #32
 800a55e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a57a:	f023 0310 	bic.w	r3, r3, #16
 800a57e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	330c      	adds	r3, #12
 800a588:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a58c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a58e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a594:	e841 2300 	strex	r3, r2, [r1]
 800a598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1e3      	bne.n	800a568 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fc fb71 	bl	8006c8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f8c1 	bl	800a748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5c6:	e09b      	b.n	800a700 <HAL_UART_IRQHandler+0x518>
 800a5c8:	0800ac5f 	.word	0x0800ac5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 808e 	beq.w	800a704 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a5e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 8089 	beq.w	800a704 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	330c      	adds	r3, #12
 800a5f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a608:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	330c      	adds	r3, #12
 800a612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a616:	647a      	str	r2, [r7, #68]	; 0x44
 800a618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a61c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a61e:	e841 2300 	strex	r3, r2, [r1]
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1e3      	bne.n	800a5f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3314      	adds	r3, #20
 800a630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	e853 3f00 	ldrex	r3, [r3]
 800a638:	623b      	str	r3, [r7, #32]
   return(result);
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	f023 0301 	bic.w	r3, r3, #1
 800a640:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3314      	adds	r3, #20
 800a64a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a64e:	633a      	str	r2, [r7, #48]	; 0x30
 800a650:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e3      	bne.n	800a62a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2220      	movs	r2, #32
 800a666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	330c      	adds	r3, #12
 800a676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	e853 3f00 	ldrex	r3, [r3]
 800a67e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0310 	bic.w	r3, r3, #16
 800a686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	330c      	adds	r3, #12
 800a690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a694:	61fa      	str	r2, [r7, #28]
 800a696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a698:	69b9      	ldr	r1, [r7, #24]
 800a69a:	69fa      	ldr	r2, [r7, #28]
 800a69c:	e841 2300 	strex	r3, r2, [r1]
 800a6a0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e3      	bne.n	800a670 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f847 	bl	800a748 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6ba:	e023      	b.n	800a704 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d009      	beq.n	800a6dc <HAL_UART_IRQHandler+0x4f4>
 800a6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d003      	beq.n	800a6dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fad6 	bl	800ac86 <UART_Transmit_IT>
    return;
 800a6da:	e014      	b.n	800a706 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00e      	beq.n	800a706 <HAL_UART_IRQHandler+0x51e>
 800a6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d008      	beq.n	800a706 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fb16 	bl	800ad26 <UART_EndTransmit_IT>
    return;
 800a6fa:	e004      	b.n	800a706 <HAL_UART_IRQHandler+0x51e>
    return;
 800a6fc:	bf00      	nop
 800a6fe:	e002      	b.n	800a706 <HAL_UART_IRQHandler+0x51e>
      return;
 800a700:	bf00      	nop
 800a702:	e000      	b.n	800a706 <HAL_UART_IRQHandler+0x51e>
      return;
 800a704:	bf00      	nop
  }
}
 800a706:	37e8      	adds	r7, #232	; 0xe8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b090      	sub	sp, #64	; 0x40
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d137      	bne.n	800a7ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a77e:	2200      	movs	r2, #0
 800a780:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3314      	adds	r3, #20
 800a788:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	e853 3f00 	ldrex	r3, [r3]
 800a790:	623b      	str	r3, [r7, #32]
   return(result);
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a798:	63bb      	str	r3, [r7, #56]	; 0x38
 800a79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3314      	adds	r3, #20
 800a7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7a2:	633a      	str	r2, [r7, #48]	; 0x30
 800a7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7aa:	e841 2300 	strex	r3, r2, [r1]
 800a7ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1e5      	bne.n	800a782 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	e853 3f00 	ldrex	r3, [r3]
 800a7c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	330c      	adds	r3, #12
 800a7d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7d6:	61fa      	str	r2, [r7, #28]
 800a7d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7da:	69b9      	ldr	r1, [r7, #24]
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	e841 2300 	strex	r3, r2, [r1]
 800a7e2:	617b      	str	r3, [r7, #20]
   return(result);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e5      	bne.n	800a7b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7ea:	e002      	b.n	800a7f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a7ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a7ee:	f7f9 fe09 	bl	8004404 <HAL_UART_TxCpltCallback>
}
 800a7f2:	bf00      	nop
 800a7f4:	3740      	adds	r7, #64	; 0x40
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f7ff ff7f 	bl	800a70c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a80e:	bf00      	nop
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b09c      	sub	sp, #112	; 0x70
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a822:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d172      	bne.n	800a918 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a834:	2200      	movs	r2, #0
 800a836:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a84e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a858:	65ba      	str	r2, [r7, #88]	; 0x58
 800a85a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a85e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a860:	e841 2300 	strex	r3, r2, [r1]
 800a864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e5      	bne.n	800a838 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a86c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3314      	adds	r3, #20
 800a872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	e853 3f00 	ldrex	r3, [r3]
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	f023 0301 	bic.w	r3, r3, #1
 800a882:	667b      	str	r3, [r7, #100]	; 0x64
 800a884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	3314      	adds	r3, #20
 800a88a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a88c:	647a      	str	r2, [r7, #68]	; 0x44
 800a88e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a890:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a894:	e841 2300 	strex	r3, r2, [r1]
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1e5      	bne.n	800a86c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3314      	adds	r3, #20
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	e853 3f00 	ldrex	r3, [r3]
 800a8ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a8b0:	6a3b      	ldr	r3, [r7, #32]
 800a8b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b6:	663b      	str	r3, [r7, #96]	; 0x60
 800a8b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3314      	adds	r3, #20
 800a8be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8c0:	633a      	str	r2, [r7, #48]	; 0x30
 800a8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c8:	e841 2300 	strex	r3, r2, [r1]
 800a8cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1e5      	bne.n	800a8a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d119      	bne.n	800a918 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	330c      	adds	r3, #12
 800a8ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f023 0310 	bic.w	r3, r3, #16
 800a8fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	330c      	adds	r3, #12
 800a902:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a904:	61fa      	str	r2, [r7, #28]
 800a906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	69b9      	ldr	r1, [r7, #24]
 800a90a:	69fa      	ldr	r2, [r7, #28]
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	617b      	str	r3, [r7, #20]
   return(result);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e5      	bne.n	800a8e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a91a:	2200      	movs	r2, #0
 800a91c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	2b01      	cmp	r3, #1
 800a924:	d106      	bne.n	800a934 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a92a:	4619      	mov	r1, r3
 800a92c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a92e:	f7ff ff0b 	bl	800a748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a932:	e002      	b.n	800a93a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a934:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a936:	f7f9 fd81 	bl	800443c <HAL_UART_RxCpltCallback>
}
 800a93a:	bf00      	nop
 800a93c:	3770      	adds	r7, #112	; 0x70
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d108      	bne.n	800a970 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a962:	085b      	lsrs	r3, r3, #1
 800a964:	b29b      	uxth	r3, r3
 800a966:	4619      	mov	r1, r3
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff feed 	bl	800a748 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a96e:	e002      	b.n	800a976 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff fed5 	bl	800a720 <HAL_UART_RxHalfCpltCallback>
}
 800a976:	bf00      	nop
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	695b      	ldr	r3, [r3, #20]
 800a996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a99a:	2b80      	cmp	r3, #128	; 0x80
 800a99c:	bf0c      	ite	eq
 800a99e:	2301      	moveq	r3, #1
 800a9a0:	2300      	movne	r3, #0
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b21      	cmp	r3, #33	; 0x21
 800a9b0:	d108      	bne.n	800a9c4 <UART_DMAError+0x46>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a9be:	68b8      	ldr	r0, [r7, #8]
 800a9c0:	f000 f8c2 	bl	800ab48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ce:	2b40      	cmp	r3, #64	; 0x40
 800a9d0:	bf0c      	ite	eq
 800a9d2:	2301      	moveq	r3, #1
 800a9d4:	2300      	movne	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b22      	cmp	r3, #34	; 0x22
 800a9e4:	d108      	bne.n	800a9f8 <UART_DMAError+0x7a>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a9f2:	68b8      	ldr	r0, [r7, #8]
 800a9f4:	f000 f8d0 	bl	800ab98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9fc:	f043 0210 	orr.w	r2, r3, #16
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa04:	68b8      	ldr	r0, [r7, #8]
 800aa06:	f7ff fe95 	bl	800a734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
	...

0800aa14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b098      	sub	sp, #96	; 0x60
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	88fa      	ldrh	r2, [r7, #6]
 800aa2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2222      	movs	r2, #34	; 0x22
 800aa38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa40:	4a3e      	ldr	r2, [pc, #248]	; (800ab3c <UART_Start_Receive_DMA+0x128>)
 800aa42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa48:	4a3d      	ldr	r2, [pc, #244]	; (800ab40 <UART_Start_Receive_DMA+0x12c>)
 800aa4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa50:	4a3c      	ldr	r2, [pc, #240]	; (800ab44 <UART_Start_Receive_DMA+0x130>)
 800aa52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa58:	2200      	movs	r2, #0
 800aa5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aa5c:	f107 0308 	add.w	r3, r7, #8
 800aa60:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	88fb      	ldrh	r3, [r7, #6]
 800aa74:	f7fc f8b2 	bl	8006bdc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aa78:	2300      	movs	r3, #0
 800aa7a:	613b      	str	r3, [r7, #16]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d019      	beq.n	800aaca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaac:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	330c      	adds	r3, #12
 800aab4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aab6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800aabc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800aac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e5      	bne.n	800aa96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3314      	adds	r3, #20
 800aad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	f043 0301 	orr.w	r3, r3, #1
 800aae0:	657b      	str	r3, [r7, #84]	; 0x54
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3314      	adds	r3, #20
 800aae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaea:	63ba      	str	r2, [r7, #56]	; 0x38
 800aaec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aaf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e5      	bne.n	800aaca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3314      	adds	r3, #20
 800ab04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab14:	653b      	str	r3, [r7, #80]	; 0x50
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3314      	adds	r3, #20
 800ab1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab1e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6a39      	ldr	r1, [r7, #32]
 800ab24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3760      	adds	r7, #96	; 0x60
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	0800a817 	.word	0x0800a817
 800ab40:	0800a943 	.word	0x0800a943
 800ab44:	0800a97f 	.word	0x0800a97f

0800ab48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b089      	sub	sp, #36	; 0x24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	330c      	adds	r3, #12
 800ab56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	e853 3f00 	ldrex	r3, [r3]
 800ab5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ab66:	61fb      	str	r3, [r7, #28]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	61ba      	str	r2, [r7, #24]
 800ab72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab74:	6979      	ldr	r1, [r7, #20]
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	e841 2300 	strex	r3, r2, [r1]
 800ab7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1e5      	bne.n	800ab50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2220      	movs	r2, #32
 800ab88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800ab8c:	bf00      	nop
 800ab8e:	3724      	adds	r7, #36	; 0x24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b095      	sub	sp, #84	; 0x54
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	330c      	adds	r3, #12
 800aba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	e853 3f00 	ldrex	r3, [r3]
 800abae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	330c      	adds	r3, #12
 800abbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abc0:	643a      	str	r2, [r7, #64]	; 0x40
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abc8:	e841 2300 	strex	r3, r2, [r1]
 800abcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e5      	bne.n	800aba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3314      	adds	r3, #20
 800abda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	61fb      	str	r3, [r7, #28]
   return(result);
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f023 0301 	bic.w	r3, r3, #1
 800abea:	64bb      	str	r3, [r7, #72]	; 0x48
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3314      	adds	r3, #20
 800abf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abfc:	e841 2300 	strex	r3, r2, [r1]
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e5      	bne.n	800abd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d119      	bne.n	800ac44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	e853 3f00 	ldrex	r3, [r3]
 800ac1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	f023 0310 	bic.w	r3, r3, #16
 800ac26:	647b      	str	r3, [r7, #68]	; 0x44
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac30:	61ba      	str	r2, [r7, #24]
 800ac32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	6979      	ldr	r1, [r7, #20]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e5      	bne.n	800ac10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2220      	movs	r2, #32
 800ac48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ac52:	bf00      	nop
 800ac54:	3754      	adds	r7, #84	; 0x54
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2200      	movs	r2, #0
 800ac76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7ff fd5b 	bl	800a734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7e:	bf00      	nop
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b085      	sub	sp, #20
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b21      	cmp	r3, #33	; 0x21
 800ac98:	d13e      	bne.n	800ad18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	d114      	bne.n	800acce <UART_Transmit_IT+0x48>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d110      	bne.n	800acce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a1b      	ldr	r3, [r3, #32]
 800acb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800acc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	1c9a      	adds	r2, r3, #2
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	621a      	str	r2, [r3, #32]
 800accc:	e008      	b.n	800ace0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	1c59      	adds	r1, r3, #1
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	6211      	str	r1, [r2, #32]
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	3b01      	subs	r3, #1
 800ace8:	b29b      	uxth	r3, r3
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	4619      	mov	r1, r3
 800acee:	84d1      	strh	r1, [r2, #38]	; 0x26
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10f      	bne.n	800ad14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	e000      	b.n	800ad1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad18:	2302      	movs	r3, #2
  }
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b082      	sub	sp, #8
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f9 fb5c 	bl	8004404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b08c      	sub	sp, #48	; 0x30
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	2b22      	cmp	r3, #34	; 0x22
 800ad68:	f040 80ae 	bne.w	800aec8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad74:	d117      	bne.n	800ada6 <UART_Receive_IT+0x50>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d113      	bne.n	800ada6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9e:	1c9a      	adds	r2, r3, #2
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	629a      	str	r2, [r3, #40]	; 0x28
 800ada4:	e026      	b.n	800adf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800adac:	2300      	movs	r3, #0
 800adae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb8:	d007      	beq.n	800adca <UART_Receive_IT+0x74>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10a      	bne.n	800add8 <UART_Receive_IT+0x82>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d106      	bne.n	800add8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	b2da      	uxtb	r2, r3
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	e008      	b.n	800adea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	3b01      	subs	r3, #1
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	4619      	mov	r1, r3
 800ae02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d15d      	bne.n	800aec4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f022 0220 	bic.w	r2, r2, #32
 800ae16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68da      	ldr	r2, [r3, #12]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	695a      	ldr	r2, [r3, #20]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f022 0201 	bic.w	r2, r2, #1
 800ae36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d135      	bne.n	800aeba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	330c      	adds	r3, #12
 800ae5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	613b      	str	r3, [r7, #16]
   return(result);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	f023 0310 	bic.w	r3, r3, #16
 800ae6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	330c      	adds	r3, #12
 800ae72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae74:	623a      	str	r2, [r7, #32]
 800ae76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae78:	69f9      	ldr	r1, [r7, #28]
 800ae7a:	6a3a      	ldr	r2, [r7, #32]
 800ae7c:	e841 2300 	strex	r3, r2, [r1]
 800ae80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e5      	bne.n	800ae54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0310 	and.w	r3, r3, #16
 800ae92:	2b10      	cmp	r3, #16
 800ae94:	d10a      	bne.n	800aeac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff fc48 	bl	800a748 <HAL_UARTEx_RxEventCallback>
 800aeb8:	e002      	b.n	800aec0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7f9 fabe 	bl	800443c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	e002      	b.n	800aeca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	e000      	b.n	800aeca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800aec8:	2302      	movs	r3, #2
  }
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3730      	adds	r7, #48	; 0x30
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
	...

0800aed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aed8:	b0c0      	sub	sp, #256	; 0x100
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aeec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef0:	68d9      	ldr	r1, [r3, #12]
 800aef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	ea40 0301 	orr.w	r3, r0, r1
 800aefc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	431a      	orrs	r2, r3
 800af0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	431a      	orrs	r2, r3
 800af14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af2c:	f021 010c 	bic.w	r1, r1, #12
 800af30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af3a:	430b      	orrs	r3, r1
 800af3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af4e:	6999      	ldr	r1, [r3, #24]
 800af50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	ea40 0301 	orr.w	r3, r0, r1
 800af5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	4b8f      	ldr	r3, [pc, #572]	; (800b1a0 <UART_SetConfig+0x2cc>)
 800af64:	429a      	cmp	r2, r3
 800af66:	d005      	beq.n	800af74 <UART_SetConfig+0xa0>
 800af68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4b8d      	ldr	r3, [pc, #564]	; (800b1a4 <UART_SetConfig+0x2d0>)
 800af70:	429a      	cmp	r2, r3
 800af72:	d104      	bne.n	800af7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af74:	f7fc fc52 	bl	800781c <HAL_RCC_GetPCLK2Freq>
 800af78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af7c:	e003      	b.n	800af86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af7e:	f7fc fc39 	bl	80077f4 <HAL_RCC_GetPCLK1Freq>
 800af82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af90:	f040 810c 	bne.w	800b1ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af98:	2200      	movs	r2, #0
 800af9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800afa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800afa6:	4622      	mov	r2, r4
 800afa8:	462b      	mov	r3, r5
 800afaa:	1891      	adds	r1, r2, r2
 800afac:	65b9      	str	r1, [r7, #88]	; 0x58
 800afae:	415b      	adcs	r3, r3
 800afb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800afb6:	4621      	mov	r1, r4
 800afb8:	eb12 0801 	adds.w	r8, r2, r1
 800afbc:	4629      	mov	r1, r5
 800afbe:	eb43 0901 	adc.w	r9, r3, r1
 800afc2:	f04f 0200 	mov.w	r2, #0
 800afc6:	f04f 0300 	mov.w	r3, #0
 800afca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800afce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800afd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800afd6:	4690      	mov	r8, r2
 800afd8:	4699      	mov	r9, r3
 800afda:	4623      	mov	r3, r4
 800afdc:	eb18 0303 	adds.w	r3, r8, r3
 800afe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afe4:	462b      	mov	r3, r5
 800afe6:	eb49 0303 	adc.w	r3, r9, r3
 800afea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800affa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800affe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b002:	460b      	mov	r3, r1
 800b004:	18db      	adds	r3, r3, r3
 800b006:	653b      	str	r3, [r7, #80]	; 0x50
 800b008:	4613      	mov	r3, r2
 800b00a:	eb42 0303 	adc.w	r3, r2, r3
 800b00e:	657b      	str	r3, [r7, #84]	; 0x54
 800b010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b018:	f7f5 fd96 	bl	8000b48 <__aeabi_uldivmod>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4b61      	ldr	r3, [pc, #388]	; (800b1a8 <UART_SetConfig+0x2d4>)
 800b022:	fba3 2302 	umull	r2, r3, r3, r2
 800b026:	095b      	lsrs	r3, r3, #5
 800b028:	011c      	lsls	r4, r3, #4
 800b02a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b034:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b03c:	4642      	mov	r2, r8
 800b03e:	464b      	mov	r3, r9
 800b040:	1891      	adds	r1, r2, r2
 800b042:	64b9      	str	r1, [r7, #72]	; 0x48
 800b044:	415b      	adcs	r3, r3
 800b046:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b04c:	4641      	mov	r1, r8
 800b04e:	eb12 0a01 	adds.w	sl, r2, r1
 800b052:	4649      	mov	r1, r9
 800b054:	eb43 0b01 	adc.w	fp, r3, r1
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b06c:	4692      	mov	sl, r2
 800b06e:	469b      	mov	fp, r3
 800b070:	4643      	mov	r3, r8
 800b072:	eb1a 0303 	adds.w	r3, sl, r3
 800b076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b07a:	464b      	mov	r3, r9
 800b07c:	eb4b 0303 	adc.w	r3, fp, r3
 800b080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b090:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b098:	460b      	mov	r3, r1
 800b09a:	18db      	adds	r3, r3, r3
 800b09c:	643b      	str	r3, [r7, #64]	; 0x40
 800b09e:	4613      	mov	r3, r2
 800b0a0:	eb42 0303 	adc.w	r3, r2, r3
 800b0a4:	647b      	str	r3, [r7, #68]	; 0x44
 800b0a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b0ae:	f7f5 fd4b 	bl	8000b48 <__aeabi_uldivmod>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	4b3b      	ldr	r3, [pc, #236]	; (800b1a8 <UART_SetConfig+0x2d4>)
 800b0ba:	fba3 2301 	umull	r2, r3, r3, r1
 800b0be:	095b      	lsrs	r3, r3, #5
 800b0c0:	2264      	movs	r2, #100	; 0x64
 800b0c2:	fb02 f303 	mul.w	r3, r2, r3
 800b0c6:	1acb      	subs	r3, r1, r3
 800b0c8:	00db      	lsls	r3, r3, #3
 800b0ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b0ce:	4b36      	ldr	r3, [pc, #216]	; (800b1a8 <UART_SetConfig+0x2d4>)
 800b0d0:	fba3 2302 	umull	r2, r3, r3, r2
 800b0d4:	095b      	lsrs	r3, r3, #5
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b0dc:	441c      	add	r4, r3
 800b0de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b0ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b0f0:	4642      	mov	r2, r8
 800b0f2:	464b      	mov	r3, r9
 800b0f4:	1891      	adds	r1, r2, r2
 800b0f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b0f8:	415b      	adcs	r3, r3
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b100:	4641      	mov	r1, r8
 800b102:	1851      	adds	r1, r2, r1
 800b104:	6339      	str	r1, [r7, #48]	; 0x30
 800b106:	4649      	mov	r1, r9
 800b108:	414b      	adcs	r3, r1
 800b10a:	637b      	str	r3, [r7, #52]	; 0x34
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	f04f 0300 	mov.w	r3, #0
 800b114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b118:	4659      	mov	r1, fp
 800b11a:	00cb      	lsls	r3, r1, #3
 800b11c:	4651      	mov	r1, sl
 800b11e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b122:	4651      	mov	r1, sl
 800b124:	00ca      	lsls	r2, r1, #3
 800b126:	4610      	mov	r0, r2
 800b128:	4619      	mov	r1, r3
 800b12a:	4603      	mov	r3, r0
 800b12c:	4642      	mov	r2, r8
 800b12e:	189b      	adds	r3, r3, r2
 800b130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b134:	464b      	mov	r3, r9
 800b136:	460a      	mov	r2, r1
 800b138:	eb42 0303 	adc.w	r3, r2, r3
 800b13c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b14c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b154:	460b      	mov	r3, r1
 800b156:	18db      	adds	r3, r3, r3
 800b158:	62bb      	str	r3, [r7, #40]	; 0x28
 800b15a:	4613      	mov	r3, r2
 800b15c:	eb42 0303 	adc.w	r3, r2, r3
 800b160:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b16a:	f7f5 fced 	bl	8000b48 <__aeabi_uldivmod>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <UART_SetConfig+0x2d4>)
 800b174:	fba3 1302 	umull	r1, r3, r3, r2
 800b178:	095b      	lsrs	r3, r3, #5
 800b17a:	2164      	movs	r1, #100	; 0x64
 800b17c:	fb01 f303 	mul.w	r3, r1, r3
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	3332      	adds	r3, #50	; 0x32
 800b186:	4a08      	ldr	r2, [pc, #32]	; (800b1a8 <UART_SetConfig+0x2d4>)
 800b188:	fba2 2303 	umull	r2, r3, r2, r3
 800b18c:	095b      	lsrs	r3, r3, #5
 800b18e:	f003 0207 	and.w	r2, r3, #7
 800b192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4422      	add	r2, r4
 800b19a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b19c:	e106      	b.n	800b3ac <UART_SetConfig+0x4d8>
 800b19e:	bf00      	nop
 800b1a0:	40011000 	.word	0x40011000
 800b1a4:	40011400 	.word	0x40011400
 800b1a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b1be:	4642      	mov	r2, r8
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	1891      	adds	r1, r2, r2
 800b1c4:	6239      	str	r1, [r7, #32]
 800b1c6:	415b      	adcs	r3, r3
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1ce:	4641      	mov	r1, r8
 800b1d0:	1854      	adds	r4, r2, r1
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	eb43 0501 	adc.w	r5, r3, r1
 800b1d8:	f04f 0200 	mov.w	r2, #0
 800b1dc:	f04f 0300 	mov.w	r3, #0
 800b1e0:	00eb      	lsls	r3, r5, #3
 800b1e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1e6:	00e2      	lsls	r2, r4, #3
 800b1e8:	4614      	mov	r4, r2
 800b1ea:	461d      	mov	r5, r3
 800b1ec:	4643      	mov	r3, r8
 800b1ee:	18e3      	adds	r3, r4, r3
 800b1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	eb45 0303 	adc.w	r3, r5, r3
 800b1fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b20a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b20e:	f04f 0200 	mov.w	r2, #0
 800b212:	f04f 0300 	mov.w	r3, #0
 800b216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b21a:	4629      	mov	r1, r5
 800b21c:	008b      	lsls	r3, r1, #2
 800b21e:	4621      	mov	r1, r4
 800b220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b224:	4621      	mov	r1, r4
 800b226:	008a      	lsls	r2, r1, #2
 800b228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b22c:	f7f5 fc8c 	bl	8000b48 <__aeabi_uldivmod>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4b60      	ldr	r3, [pc, #384]	; (800b3b8 <UART_SetConfig+0x4e4>)
 800b236:	fba3 2302 	umull	r2, r3, r3, r2
 800b23a:	095b      	lsrs	r3, r3, #5
 800b23c:	011c      	lsls	r4, r3, #4
 800b23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b242:	2200      	movs	r2, #0
 800b244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b24c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b250:	4642      	mov	r2, r8
 800b252:	464b      	mov	r3, r9
 800b254:	1891      	adds	r1, r2, r2
 800b256:	61b9      	str	r1, [r7, #24]
 800b258:	415b      	adcs	r3, r3
 800b25a:	61fb      	str	r3, [r7, #28]
 800b25c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b260:	4641      	mov	r1, r8
 800b262:	1851      	adds	r1, r2, r1
 800b264:	6139      	str	r1, [r7, #16]
 800b266:	4649      	mov	r1, r9
 800b268:	414b      	adcs	r3, r1
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b278:	4659      	mov	r1, fp
 800b27a:	00cb      	lsls	r3, r1, #3
 800b27c:	4651      	mov	r1, sl
 800b27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b282:	4651      	mov	r1, sl
 800b284:	00ca      	lsls	r2, r1, #3
 800b286:	4610      	mov	r0, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	4603      	mov	r3, r0
 800b28c:	4642      	mov	r2, r8
 800b28e:	189b      	adds	r3, r3, r2
 800b290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b294:	464b      	mov	r3, r9
 800b296:	460a      	mov	r2, r1
 800b298:	eb42 0303 	adc.w	r3, r2, r3
 800b29c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	f04f 0300 	mov.w	r3, #0
 800b2b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	008b      	lsls	r3, r1, #2
 800b2bc:	4641      	mov	r1, r8
 800b2be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	008a      	lsls	r2, r1, #2
 800b2c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b2ca:	f7f5 fc3d 	bl	8000b48 <__aeabi_uldivmod>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	4b38      	ldr	r3, [pc, #224]	; (800b3b8 <UART_SetConfig+0x4e4>)
 800b2d6:	fba3 2301 	umull	r2, r3, r3, r1
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	2264      	movs	r2, #100	; 0x64
 800b2de:	fb02 f303 	mul.w	r3, r2, r3
 800b2e2:	1acb      	subs	r3, r1, r3
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	3332      	adds	r3, #50	; 0x32
 800b2e8:	4a33      	ldr	r2, [pc, #204]	; (800b3b8 <UART_SetConfig+0x4e4>)
 800b2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ee:	095b      	lsrs	r3, r3, #5
 800b2f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2f4:	441c      	add	r4, r3
 800b2f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	673b      	str	r3, [r7, #112]	; 0x70
 800b2fe:	677a      	str	r2, [r7, #116]	; 0x74
 800b300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b304:	4642      	mov	r2, r8
 800b306:	464b      	mov	r3, r9
 800b308:	1891      	adds	r1, r2, r2
 800b30a:	60b9      	str	r1, [r7, #8]
 800b30c:	415b      	adcs	r3, r3
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b314:	4641      	mov	r1, r8
 800b316:	1851      	adds	r1, r2, r1
 800b318:	6039      	str	r1, [r7, #0]
 800b31a:	4649      	mov	r1, r9
 800b31c:	414b      	adcs	r3, r1
 800b31e:	607b      	str	r3, [r7, #4]
 800b320:	f04f 0200 	mov.w	r2, #0
 800b324:	f04f 0300 	mov.w	r3, #0
 800b328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b32c:	4659      	mov	r1, fp
 800b32e:	00cb      	lsls	r3, r1, #3
 800b330:	4651      	mov	r1, sl
 800b332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b336:	4651      	mov	r1, sl
 800b338:	00ca      	lsls	r2, r1, #3
 800b33a:	4610      	mov	r0, r2
 800b33c:	4619      	mov	r1, r3
 800b33e:	4603      	mov	r3, r0
 800b340:	4642      	mov	r2, r8
 800b342:	189b      	adds	r3, r3, r2
 800b344:	66bb      	str	r3, [r7, #104]	; 0x68
 800b346:	464b      	mov	r3, r9
 800b348:	460a      	mov	r2, r1
 800b34a:	eb42 0303 	adc.w	r3, r2, r3
 800b34e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	663b      	str	r3, [r7, #96]	; 0x60
 800b35a:	667a      	str	r2, [r7, #100]	; 0x64
 800b35c:	f04f 0200 	mov.w	r2, #0
 800b360:	f04f 0300 	mov.w	r3, #0
 800b364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b368:	4649      	mov	r1, r9
 800b36a:	008b      	lsls	r3, r1, #2
 800b36c:	4641      	mov	r1, r8
 800b36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b372:	4641      	mov	r1, r8
 800b374:	008a      	lsls	r2, r1, #2
 800b376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b37a:	f7f5 fbe5 	bl	8000b48 <__aeabi_uldivmod>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <UART_SetConfig+0x4e4>)
 800b384:	fba3 1302 	umull	r1, r3, r3, r2
 800b388:	095b      	lsrs	r3, r3, #5
 800b38a:	2164      	movs	r1, #100	; 0x64
 800b38c:	fb01 f303 	mul.w	r3, r1, r3
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	3332      	adds	r3, #50	; 0x32
 800b396:	4a08      	ldr	r2, [pc, #32]	; (800b3b8 <UART_SetConfig+0x4e4>)
 800b398:	fba2 2303 	umull	r2, r3, r2, r3
 800b39c:	095b      	lsrs	r3, r3, #5
 800b39e:	f003 020f 	and.w	r2, r3, #15
 800b3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4422      	add	r2, r4
 800b3aa:	609a      	str	r2, [r3, #8]
}
 800b3ac:	bf00      	nop
 800b3ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3b8:	51eb851f 	.word	0x51eb851f

0800b3bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3ce:	2b84      	cmp	r3, #132	; 0x84
 800b3d0:	d005      	beq.n	800b3de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b3d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	3303      	adds	r3, #3
 800b3dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b3de:	68fb      	ldr	r3, [r7, #12]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b3f0:	f000 fade 	bl	800b9b0 <vTaskStartScheduler>
  
  return osOK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3fc:	b089      	sub	sp, #36	; 0x24
 800b3fe:	af04      	add	r7, sp, #16
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d020      	beq.n	800b44e <osThreadCreate+0x54>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01c      	beq.n	800b44e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685c      	ldr	r4, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	691e      	ldr	r6, [r3, #16]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b426:	4618      	mov	r0, r3
 800b428:	f7ff ffc8 	bl	800b3bc <makeFreeRtosPriority>
 800b42c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b436:	9202      	str	r2, [sp, #8]
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	9100      	str	r1, [sp, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	4632      	mov	r2, r6
 800b440:	4629      	mov	r1, r5
 800b442:	4620      	mov	r0, r4
 800b444:	f000 f8ed 	bl	800b622 <xTaskCreateStatic>
 800b448:	4603      	mov	r3, r0
 800b44a:	60fb      	str	r3, [r7, #12]
 800b44c:	e01c      	b.n	800b488 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685c      	ldr	r4, [r3, #4]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b45a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff ffaa 	bl	800b3bc <makeFreeRtosPriority>
 800b468:	4602      	mov	r2, r0
 800b46a:	f107 030c 	add.w	r3, r7, #12
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	9200      	str	r2, [sp, #0]
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	4632      	mov	r2, r6
 800b476:	4629      	mov	r1, r5
 800b478:	4620      	mov	r0, r4
 800b47a:	f000 f92f 	bl	800b6dc <xTaskCreate>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b01      	cmp	r3, #1
 800b482:	d001      	beq.n	800b488 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	e000      	b.n	800b48a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b488:	68fb      	ldr	r3, [r7, #12]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b492 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b084      	sub	sp, #16
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <osDelay+0x16>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	e000      	b.n	800b4aa <osDelay+0x18>
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f000 fa4c 	bl	800b948 <vTaskDelay>
  
  return osOK;
 800b4b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b083      	sub	sp, #12
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f103 0208 	add.w	r2, r3, #8
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f103 0208 	add.w	r2, r3, #8
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f103 0208 	add.w	r2, r3, #8
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4ee:	bf00      	nop
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	683a      	ldr	r2, [r7, #0]
 800b538:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	1c5a      	adds	r2, r3, #1
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	601a      	str	r2, [r3, #0]
}
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b572:	d103      	bne.n	800b57c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	e00c      	b.n	800b596 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3308      	adds	r3, #8
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e002      	b.n	800b58a <vListInsert+0x2e>
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	429a      	cmp	r2, r3
 800b594:	d2f6      	bcs.n	800b584 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	601a      	str	r2, [r3, #0]
}
 800b5c2:	bf00      	nop
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr

0800b5ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b085      	sub	sp, #20
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6892      	ldr	r2, [r2, #8]
 800b5e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6852      	ldr	r2, [r2, #4]
 800b5ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d103      	bne.n	800b602 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689a      	ldr	r2, [r3, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	1e5a      	subs	r2, r3, #1
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b622:	b580      	push	{r7, lr}
 800b624:	b08e      	sub	sp, #56	; 0x38
 800b626:	af04      	add	r7, sp, #16
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10a      	bne.n	800b64c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b648:	bf00      	nop
 800b64a:	e7fe      	b.n	800b64a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d10a      	bne.n	800b668 <xTaskCreateStatic+0x46>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	61fb      	str	r3, [r7, #28]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b668:	2354      	movs	r3, #84	; 0x54
 800b66a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	2b54      	cmp	r3, #84	; 0x54
 800b670:	d00a      	beq.n	800b688 <xTaskCreateStatic+0x66>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	61bb      	str	r3, [r7, #24]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b688:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d01e      	beq.n	800b6ce <xTaskCreateStatic+0xac>
 800b690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01b      	beq.n	800b6ce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b698:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9303      	str	r3, [sp, #12]
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	f107 0314 	add.w	r3, r7, #20
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f850 	bl	800b766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6c8:	f000 f8d4 	bl	800b874 <prvAddNewTaskToReadyList>
 800b6cc:	e001      	b.n	800b6d2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6d2:	697b      	ldr	r3, [r7, #20]
	}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3728      	adds	r7, #40	; 0x28
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	; 0x30
 800b6e0:	af04      	add	r7, sp, #16
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	603b      	str	r3, [r7, #0]
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6ec:	88fb      	ldrh	r3, [r7, #6]
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fec9 	bl	800c488 <pvPortMalloc>
 800b6f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00e      	beq.n	800b71c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b6fe:	2054      	movs	r0, #84	; 0x54
 800b700:	f000 fec2 	bl	800c488 <pvPortMalloc>
 800b704:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	631a      	str	r2, [r3, #48]	; 0x30
 800b712:	e005      	b.n	800b720 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b714:	6978      	ldr	r0, [r7, #20]
 800b716:	f000 ff83 	bl	800c620 <vPortFree>
 800b71a:	e001      	b.n	800b720 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d017      	beq.n	800b756 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b72e:	88fa      	ldrh	r2, [r7, #6]
 800b730:	2300      	movs	r3, #0
 800b732:	9303      	str	r3, [sp, #12]
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	9302      	str	r3, [sp, #8]
 800b738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	68b9      	ldr	r1, [r7, #8]
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f000 f80e 	bl	800b766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b74a:	69f8      	ldr	r0, [r7, #28]
 800b74c:	f000 f892 	bl	800b874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b750:	2301      	movs	r3, #1
 800b752:	61bb      	str	r3, [r7, #24]
 800b754:	e002      	b.n	800b75c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b75a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b75c:	69bb      	ldr	r3, [r7, #24]
	}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b088      	sub	sp, #32
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	607a      	str	r2, [r7, #4]
 800b772:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b77e:	3b01      	subs	r3, #1
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	f023 0307 	bic.w	r3, r3, #7
 800b78c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	f003 0307 	and.w	r3, r3, #7
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <prvInitialiseNewTask+0x48>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	617b      	str	r3, [r7, #20]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d01f      	beq.n	800b7f4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	e012      	b.n	800b7e0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	4413      	add	r3, r2
 800b7c0:	7819      	ldrb	r1, [r3, #0]
 800b7c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	3334      	adds	r3, #52	; 0x34
 800b7ca:	460a      	mov	r2, r1
 800b7cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d006      	beq.n	800b7e8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	61fb      	str	r3, [r7, #28]
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b0f      	cmp	r3, #15
 800b7e4:	d9e9      	bls.n	800b7ba <prvInitialiseNewTask+0x54>
 800b7e6:	e000      	b.n	800b7ea <prvInitialiseNewTask+0x84>
			{
				break;
 800b7e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7f2:	e003      	b.n	800b7fc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	2b06      	cmp	r3, #6
 800b800:	d901      	bls.n	800b806 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b802:	2306      	movs	r3, #6
 800b804:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b80a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b810:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	2200      	movs	r2, #0
 800b816:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	3304      	adds	r3, #4
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7ff fe6c 	bl	800b4fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b824:	3318      	adds	r3, #24
 800b826:	4618      	mov	r0, r3
 800b828:	f7ff fe67 	bl	800b4fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b830:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b834:	f1c3 0207 	rsb	r2, r3, #7
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b840:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	2200      	movs	r2, #0
 800b846:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84a:	2200      	movs	r2, #0
 800b84c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b850:	683a      	ldr	r2, [r7, #0]
 800b852:	68f9      	ldr	r1, [r7, #12]
 800b854:	69b8      	ldr	r0, [r7, #24]
 800b856:	f000 fc05 	bl	800c064 <pxPortInitialiseStack>
 800b85a:	4602      	mov	r2, r0
 800b85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b86a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b86c:	bf00      	nop
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b87c:	f000 fd22 	bl	800c2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b880:	4b2a      	ldr	r3, [pc, #168]	; (800b92c <prvAddNewTaskToReadyList+0xb8>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	4a29      	ldr	r2, [pc, #164]	; (800b92c <prvAddNewTaskToReadyList+0xb8>)
 800b888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b88a:	4b29      	ldr	r3, [pc, #164]	; (800b930 <prvAddNewTaskToReadyList+0xbc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d109      	bne.n	800b8a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b892:	4a27      	ldr	r2, [pc, #156]	; (800b930 <prvAddNewTaskToReadyList+0xbc>)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b898:	4b24      	ldr	r3, [pc, #144]	; (800b92c <prvAddNewTaskToReadyList+0xb8>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d110      	bne.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8a0:	f000 fabc 	bl	800be1c <prvInitialiseTaskLists>
 800b8a4:	e00d      	b.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8a6:	4b23      	ldr	r3, [pc, #140]	; (800b934 <prvAddNewTaskToReadyList+0xc0>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d109      	bne.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8ae:	4b20      	ldr	r3, [pc, #128]	; (800b930 <prvAddNewTaskToReadyList+0xbc>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d802      	bhi.n	800b8c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8bc:	4a1c      	ldr	r2, [pc, #112]	; (800b930 <prvAddNewTaskToReadyList+0xbc>)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8c2:	4b1d      	ldr	r3, [pc, #116]	; (800b938 <prvAddNewTaskToReadyList+0xc4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	4a1b      	ldr	r2, [pc, #108]	; (800b938 <prvAddNewTaskToReadyList+0xc4>)
 800b8ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	409a      	lsls	r2, r3
 800b8d4:	4b19      	ldr	r3, [pc, #100]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	4a18      	ldr	r2, [pc, #96]	; (800b93c <prvAddNewTaskToReadyList+0xc8>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4a15      	ldr	r2, [pc, #84]	; (800b940 <prvAddNewTaskToReadyList+0xcc>)
 800b8ec:	441a      	add	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	f7ff fe0d 	bl	800b514 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8fa:	f000 fd13 	bl	800c324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <prvAddNewTaskToReadyList+0xc0>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00e      	beq.n	800b924 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b906:	4b0a      	ldr	r3, [pc, #40]	; (800b930 <prvAddNewTaskToReadyList+0xbc>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	429a      	cmp	r2, r3
 800b912:	d207      	bcs.n	800b924 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b914:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <prvAddNewTaskToReadyList+0xd0>)
 800b916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20001f14 	.word	0x20001f14
 800b930:	20001e14 	.word	0x20001e14
 800b934:	20001f20 	.word	0x20001f20
 800b938:	20001f30 	.word	0x20001f30
 800b93c:	20001f1c 	.word	0x20001f1c
 800b940:	20001e18 	.word	0x20001e18
 800b944:	e000ed04 	.word	0xe000ed04

0800b948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b950:	2300      	movs	r3, #0
 800b952:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d017      	beq.n	800b98a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b95a:	4b13      	ldr	r3, [pc, #76]	; (800b9a8 <vTaskDelay+0x60>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00a      	beq.n	800b978 <vTaskDelay+0x30>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	60bb      	str	r3, [r7, #8]
}
 800b974:	bf00      	nop
 800b976:	e7fe      	b.n	800b976 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b978:	f000 f87a 	bl	800ba70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b97c:	2100      	movs	r1, #0
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fb0a 	bl	800bf98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b984:	f000 f882 	bl	800ba8c <xTaskResumeAll>
 800b988:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d107      	bne.n	800b9a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <vTaskDelay+0x64>)
 800b992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9a0:	bf00      	nop
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20001f3c 	.word	0x20001f3c
 800b9ac:	e000ed04 	.word	0xe000ed04

0800b9b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	; 0x28
 800b9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b9be:	463a      	mov	r2, r7
 800b9c0:	1d39      	adds	r1, r7, #4
 800b9c2:	f107 0308 	add.w	r3, r7, #8
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f5 fa3c 	bl	8000e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	9202      	str	r2, [sp, #8]
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	2300      	movs	r3, #0
 800b9dc:	460a      	mov	r2, r1
 800b9de:	491e      	ldr	r1, [pc, #120]	; (800ba58 <vTaskStartScheduler+0xa8>)
 800b9e0:	481e      	ldr	r0, [pc, #120]	; (800ba5c <vTaskStartScheduler+0xac>)
 800b9e2:	f7ff fe1e 	bl	800b622 <xTaskCreateStatic>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4a1d      	ldr	r2, [pc, #116]	; (800ba60 <vTaskStartScheduler+0xb0>)
 800b9ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b9ec:	4b1c      	ldr	r3, [pc, #112]	; (800ba60 <vTaskStartScheduler+0xb0>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e001      	b.n	800b9fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d116      	bne.n	800ba32 <vTaskStartScheduler+0x82>
	__asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	613b      	str	r3, [r7, #16]
}
 800ba16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba18:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <vTaskStartScheduler+0xb4>)
 800ba1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba20:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <vTaskStartScheduler+0xb8>)
 800ba22:	2201      	movs	r2, #1
 800ba24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba26:	4b11      	ldr	r3, [pc, #68]	; (800ba6c <vTaskStartScheduler+0xbc>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba2c:	f000 fba8 	bl	800c180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba30:	e00e      	b.n	800ba50 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba38:	d10a      	bne.n	800ba50 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	60fb      	str	r3, [r7, #12]
}
 800ba4c:	bf00      	nop
 800ba4e:	e7fe      	b.n	800ba4e <vTaskStartScheduler+0x9e>
}
 800ba50:	bf00      	nop
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	0800e5b8 	.word	0x0800e5b8
 800ba5c:	0800bded 	.word	0x0800bded
 800ba60:	20001f38 	.word	0x20001f38
 800ba64:	20001f34 	.word	0x20001f34
 800ba68:	20001f20 	.word	0x20001f20
 800ba6c:	20001f18 	.word	0x20001f18

0800ba70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba70:	b480      	push	{r7}
 800ba72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba74:	4b04      	ldr	r3, [pc, #16]	; (800ba88 <vTaskSuspendAll+0x18>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	4a03      	ldr	r2, [pc, #12]	; (800ba88 <vTaskSuspendAll+0x18>)
 800ba7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba7e:	bf00      	nop
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr
 800ba88:	20001f3c 	.word	0x20001f3c

0800ba8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba9a:	4b41      	ldr	r3, [pc, #260]	; (800bba0 <xTaskResumeAll+0x114>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d10a      	bne.n	800bab8 <xTaskResumeAll+0x2c>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	603b      	str	r3, [r7, #0]
}
 800bab4:	bf00      	nop
 800bab6:	e7fe      	b.n	800bab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bab8:	f000 fc04 	bl	800c2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800babc:	4b38      	ldr	r3, [pc, #224]	; (800bba0 <xTaskResumeAll+0x114>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	4a37      	ldr	r2, [pc, #220]	; (800bba0 <xTaskResumeAll+0x114>)
 800bac4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bac6:	4b36      	ldr	r3, [pc, #216]	; (800bba0 <xTaskResumeAll+0x114>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d161      	bne.n	800bb92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bace:	4b35      	ldr	r3, [pc, #212]	; (800bba4 <xTaskResumeAll+0x118>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d05d      	beq.n	800bb92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bad6:	e02e      	b.n	800bb36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bad8:	4b33      	ldr	r3, [pc, #204]	; (800bba8 <xTaskResumeAll+0x11c>)
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3318      	adds	r3, #24
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7ff fd72 	bl	800b5ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	3304      	adds	r3, #4
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fd6d 	bl	800b5ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	2201      	movs	r2, #1
 800bafa:	409a      	lsls	r2, r3
 800bafc:	4b2b      	ldr	r3, [pc, #172]	; (800bbac <xTaskResumeAll+0x120>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	4a2a      	ldr	r2, [pc, #168]	; (800bbac <xTaskResumeAll+0x120>)
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4a27      	ldr	r2, [pc, #156]	; (800bbb0 <xTaskResumeAll+0x124>)
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3304      	adds	r3, #4
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	f7ff fcf9 	bl	800b514 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	4b23      	ldr	r3, [pc, #140]	; (800bbb4 <xTaskResumeAll+0x128>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d302      	bcc.n	800bb36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bb30:	4b21      	ldr	r3, [pc, #132]	; (800bbb8 <xTaskResumeAll+0x12c>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb36:	4b1c      	ldr	r3, [pc, #112]	; (800bba8 <xTaskResumeAll+0x11c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1cc      	bne.n	800bad8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb44:	f000 fa08 	bl	800bf58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb48:	4b1c      	ldr	r3, [pc, #112]	; (800bbbc <xTaskResumeAll+0x130>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d010      	beq.n	800bb76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb54:	f000 f836 	bl	800bbc4 <xTaskIncrementTick>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bb5e:	4b16      	ldr	r3, [pc, #88]	; (800bbb8 <xTaskResumeAll+0x12c>)
 800bb60:	2201      	movs	r2, #1
 800bb62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1f1      	bne.n	800bb54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bb70:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <xTaskResumeAll+0x130>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb76:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <xTaskResumeAll+0x12c>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d009      	beq.n	800bb92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb82:	4b0f      	ldr	r3, [pc, #60]	; (800bbc0 <xTaskResumeAll+0x134>)
 800bb84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb92:	f000 fbc7 	bl	800c324 <vPortExitCritical>

	return xAlreadyYielded;
 800bb96:	68bb      	ldr	r3, [r7, #8]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20001f3c 	.word	0x20001f3c
 800bba4:	20001f14 	.word	0x20001f14
 800bba8:	20001ed4 	.word	0x20001ed4
 800bbac:	20001f1c 	.word	0x20001f1c
 800bbb0:	20001e18 	.word	0x20001e18
 800bbb4:	20001e14 	.word	0x20001e14
 800bbb8:	20001f28 	.word	0x20001f28
 800bbbc:	20001f24 	.word	0x20001f24
 800bbc0:	e000ed04 	.word	0xe000ed04

0800bbc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbce:	4b4e      	ldr	r3, [pc, #312]	; (800bd08 <xTaskIncrementTick+0x144>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f040 808e 	bne.w	800bcf4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbd8:	4b4c      	ldr	r3, [pc, #304]	; (800bd0c <xTaskIncrementTick+0x148>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbe0:	4a4a      	ldr	r2, [pc, #296]	; (800bd0c <xTaskIncrementTick+0x148>)
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d120      	bne.n	800bc2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbec:	4b48      	ldr	r3, [pc, #288]	; (800bd10 <xTaskIncrementTick+0x14c>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00a      	beq.n	800bc0c <xTaskIncrementTick+0x48>
	__asm volatile
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	603b      	str	r3, [r7, #0]
}
 800bc08:	bf00      	nop
 800bc0a:	e7fe      	b.n	800bc0a <xTaskIncrementTick+0x46>
 800bc0c:	4b40      	ldr	r3, [pc, #256]	; (800bd10 <xTaskIncrementTick+0x14c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	4b40      	ldr	r3, [pc, #256]	; (800bd14 <xTaskIncrementTick+0x150>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a3e      	ldr	r2, [pc, #248]	; (800bd10 <xTaskIncrementTick+0x14c>)
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	4a3e      	ldr	r2, [pc, #248]	; (800bd14 <xTaskIncrementTick+0x150>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6013      	str	r3, [r2, #0]
 800bc20:	4b3d      	ldr	r3, [pc, #244]	; (800bd18 <xTaskIncrementTick+0x154>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3301      	adds	r3, #1
 800bc26:	4a3c      	ldr	r2, [pc, #240]	; (800bd18 <xTaskIncrementTick+0x154>)
 800bc28:	6013      	str	r3, [r2, #0]
 800bc2a:	f000 f995 	bl	800bf58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc2e:	4b3b      	ldr	r3, [pc, #236]	; (800bd1c <xTaskIncrementTick+0x158>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d348      	bcc.n	800bcca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc38:	4b35      	ldr	r3, [pc, #212]	; (800bd10 <xTaskIncrementTick+0x14c>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d104      	bne.n	800bc4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc42:	4b36      	ldr	r3, [pc, #216]	; (800bd1c <xTaskIncrementTick+0x158>)
 800bc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc48:	601a      	str	r2, [r3, #0]
					break;
 800bc4a:	e03e      	b.n	800bcca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4c:	4b30      	ldr	r3, [pc, #192]	; (800bd10 <xTaskIncrementTick+0x14c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d203      	bcs.n	800bc6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc64:	4a2d      	ldr	r2, [pc, #180]	; (800bd1c <xTaskIncrementTick+0x158>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc6a:	e02e      	b.n	800bcca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	3304      	adds	r3, #4
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fcac 	bl	800b5ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d004      	beq.n	800bc88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	3318      	adds	r3, #24
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff fca3 	bl	800b5ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	409a      	lsls	r2, r3
 800bc90:	4b23      	ldr	r3, [pc, #140]	; (800bd20 <xTaskIncrementTick+0x15c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	4a22      	ldr	r2, [pc, #136]	; (800bd20 <xTaskIncrementTick+0x15c>)
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4a1f      	ldr	r2, [pc, #124]	; (800bd24 <xTaskIncrementTick+0x160>)
 800bca8:	441a      	add	r2, r3
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f7ff fc2f 	bl	800b514 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcba:	4b1b      	ldr	r3, [pc, #108]	; (800bd28 <xTaskIncrementTick+0x164>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d3b9      	bcc.n	800bc38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcc8:	e7b6      	b.n	800bc38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcca:	4b17      	ldr	r3, [pc, #92]	; (800bd28 <xTaskIncrementTick+0x164>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd0:	4914      	ldr	r1, [pc, #80]	; (800bd24 <xTaskIncrementTick+0x160>)
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d901      	bls.n	800bce6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bce2:	2301      	movs	r3, #1
 800bce4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bce6:	4b11      	ldr	r3, [pc, #68]	; (800bd2c <xTaskIncrementTick+0x168>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d007      	beq.n	800bcfe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	617b      	str	r3, [r7, #20]
 800bcf2:	e004      	b.n	800bcfe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bcf4:	4b0e      	ldr	r3, [pc, #56]	; (800bd30 <xTaskIncrementTick+0x16c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	4a0d      	ldr	r2, [pc, #52]	; (800bd30 <xTaskIncrementTick+0x16c>)
 800bcfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bcfe:	697b      	ldr	r3, [r7, #20]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20001f3c 	.word	0x20001f3c
 800bd0c:	20001f18 	.word	0x20001f18
 800bd10:	20001ecc 	.word	0x20001ecc
 800bd14:	20001ed0 	.word	0x20001ed0
 800bd18:	20001f2c 	.word	0x20001f2c
 800bd1c:	20001f34 	.word	0x20001f34
 800bd20:	20001f1c 	.word	0x20001f1c
 800bd24:	20001e18 	.word	0x20001e18
 800bd28:	20001e14 	.word	0x20001e14
 800bd2c:	20001f28 	.word	0x20001f28
 800bd30:	20001f24 	.word	0x20001f24

0800bd34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd3a:	4b27      	ldr	r3, [pc, #156]	; (800bdd8 <vTaskSwitchContext+0xa4>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d003      	beq.n	800bd4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd42:	4b26      	ldr	r3, [pc, #152]	; (800bddc <vTaskSwitchContext+0xa8>)
 800bd44:	2201      	movs	r2, #1
 800bd46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd48:	e03f      	b.n	800bdca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bd4a:	4b24      	ldr	r3, [pc, #144]	; (800bddc <vTaskSwitchContext+0xa8>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd50:	4b23      	ldr	r3, [pc, #140]	; (800bde0 <vTaskSwitchContext+0xac>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	fab3 f383 	clz	r3, r3
 800bd5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	f1c3 031f 	rsb	r3, r3, #31
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	491f      	ldr	r1, [pc, #124]	; (800bde4 <vTaskSwitchContext+0xb0>)
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	607b      	str	r3, [r7, #4]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <vTaskSwitchContext+0x5a>
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4a12      	ldr	r2, [pc, #72]	; (800bde4 <vTaskSwitchContext+0xb0>)
 800bd9c:	4413      	add	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	605a      	str	r2, [r3, #4]
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	685a      	ldr	r2, [r3, #4]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d104      	bne.n	800bdc0 <vTaskSwitchContext+0x8c>
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	605a      	str	r2, [r3, #4]
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	4a08      	ldr	r2, [pc, #32]	; (800bde8 <vTaskSwitchContext+0xb4>)
 800bdc8:	6013      	str	r3, [r2, #0]
}
 800bdca:	bf00      	nop
 800bdcc:	371c      	adds	r7, #28
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	20001f3c 	.word	0x20001f3c
 800bddc:	20001f28 	.word	0x20001f28
 800bde0:	20001f1c 	.word	0x20001f1c
 800bde4:	20001e18 	.word	0x20001e18
 800bde8:	20001e14 	.word	0x20001e14

0800bdec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bdf4:	f000 f852 	bl	800be9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bdf8:	4b06      	ldr	r3, [pc, #24]	; (800be14 <prvIdleTask+0x28>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d9f9      	bls.n	800bdf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be00:	4b05      	ldr	r3, [pc, #20]	; (800be18 <prvIdleTask+0x2c>)
 800be02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	f3bf 8f4f 	dsb	sy
 800be0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be10:	e7f0      	b.n	800bdf4 <prvIdleTask+0x8>
 800be12:	bf00      	nop
 800be14:	20001e18 	.word	0x20001e18
 800be18:	e000ed04 	.word	0xe000ed04

0800be1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be22:	2300      	movs	r3, #0
 800be24:	607b      	str	r3, [r7, #4]
 800be26:	e00c      	b.n	800be42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	4613      	mov	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	4a12      	ldr	r2, [pc, #72]	; (800be7c <prvInitialiseTaskLists+0x60>)
 800be34:	4413      	add	r3, r2
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fb3f 	bl	800b4ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3301      	adds	r3, #1
 800be40:	607b      	str	r3, [r7, #4]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b06      	cmp	r3, #6
 800be46:	d9ef      	bls.n	800be28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be48:	480d      	ldr	r0, [pc, #52]	; (800be80 <prvInitialiseTaskLists+0x64>)
 800be4a:	f7ff fb36 	bl	800b4ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be4e:	480d      	ldr	r0, [pc, #52]	; (800be84 <prvInitialiseTaskLists+0x68>)
 800be50:	f7ff fb33 	bl	800b4ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be54:	480c      	ldr	r0, [pc, #48]	; (800be88 <prvInitialiseTaskLists+0x6c>)
 800be56:	f7ff fb30 	bl	800b4ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be5a:	480c      	ldr	r0, [pc, #48]	; (800be8c <prvInitialiseTaskLists+0x70>)
 800be5c:	f7ff fb2d 	bl	800b4ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be60:	480b      	ldr	r0, [pc, #44]	; (800be90 <prvInitialiseTaskLists+0x74>)
 800be62:	f7ff fb2a 	bl	800b4ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <prvInitialiseTaskLists+0x78>)
 800be68:	4a05      	ldr	r2, [pc, #20]	; (800be80 <prvInitialiseTaskLists+0x64>)
 800be6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <prvInitialiseTaskLists+0x7c>)
 800be6e:	4a05      	ldr	r2, [pc, #20]	; (800be84 <prvInitialiseTaskLists+0x68>)
 800be70:	601a      	str	r2, [r3, #0]
}
 800be72:	bf00      	nop
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	20001e18 	.word	0x20001e18
 800be80:	20001ea4 	.word	0x20001ea4
 800be84:	20001eb8 	.word	0x20001eb8
 800be88:	20001ed4 	.word	0x20001ed4
 800be8c:	20001ee8 	.word	0x20001ee8
 800be90:	20001f00 	.word	0x20001f00
 800be94:	20001ecc 	.word	0x20001ecc
 800be98:	20001ed0 	.word	0x20001ed0

0800be9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bea2:	e019      	b.n	800bed8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bea4:	f000 fa0e 	bl	800c2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bea8:	4b10      	ldr	r3, [pc, #64]	; (800beec <prvCheckTasksWaitingTermination+0x50>)
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	3304      	adds	r3, #4
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7ff fb8a 	bl	800b5ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800beba:	4b0d      	ldr	r3, [pc, #52]	; (800bef0 <prvCheckTasksWaitingTermination+0x54>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	4a0b      	ldr	r2, [pc, #44]	; (800bef0 <prvCheckTasksWaitingTermination+0x54>)
 800bec2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bec4:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <prvCheckTasksWaitingTermination+0x58>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3b01      	subs	r3, #1
 800beca:	4a0a      	ldr	r2, [pc, #40]	; (800bef4 <prvCheckTasksWaitingTermination+0x58>)
 800becc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bece:	f000 fa29 	bl	800c324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f810 	bl	800bef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bed8:	4b06      	ldr	r3, [pc, #24]	; (800bef4 <prvCheckTasksWaitingTermination+0x58>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e1      	bne.n	800bea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20001ee8 	.word	0x20001ee8
 800bef0:	20001f14 	.word	0x20001f14
 800bef4:	20001efc 	.word	0x20001efc

0800bef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d108      	bne.n	800bf1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fb86 	bl	800c620 <vPortFree>
				vPortFree( pxTCB );
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fb83 	bl	800c620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf1a:	e018      	b.n	800bf4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d103      	bne.n	800bf2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fb7a 	bl	800c620 <vPortFree>
	}
 800bf2c:	e00f      	b.n	800bf4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d00a      	beq.n	800bf4e <prvDeleteTCB+0x56>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	60fb      	str	r3, [r7, #12]
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <prvDeleteTCB+0x54>
	}
 800bf4e:	bf00      	nop
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
	...

0800bf58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf5e:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <prvResetNextTaskUnblockTime+0x38>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d104      	bne.n	800bf72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf68:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <prvResetNextTaskUnblockTime+0x3c>)
 800bf6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf70:	e008      	b.n	800bf84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf72:	4b07      	ldr	r3, [pc, #28]	; (800bf90 <prvResetNextTaskUnblockTime+0x38>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	4a04      	ldr	r2, [pc, #16]	; (800bf94 <prvResetNextTaskUnblockTime+0x3c>)
 800bf82:	6013      	str	r3, [r2, #0]
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	20001ecc 	.word	0x20001ecc
 800bf94:	20001f34 	.word	0x20001f34

0800bf98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfa2:	4b29      	ldr	r3, [pc, #164]	; (800c048 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfa8:	4b28      	ldr	r3, [pc, #160]	; (800c04c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fb0d 	bl	800b5ce <uxListRemove>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10b      	bne.n	800bfd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bfba:	4b24      	ldr	r3, [pc, #144]	; (800c04c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc6:	43da      	mvns	r2, r3
 800bfc8:	4b21      	ldr	r3, [pc, #132]	; (800c050 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	4a20      	ldr	r2, [pc, #128]	; (800c050 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bfd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfd8:	d10a      	bne.n	800bff0 <prvAddCurrentTaskToDelayedList+0x58>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d007      	beq.n	800bff0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfe0:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	481a      	ldr	r0, [pc, #104]	; (800c054 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bfea:	f7ff fa93 	bl	800b514 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfee:	e026      	b.n	800c03e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4413      	add	r3, r2
 800bff6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bff8:	4b14      	ldr	r3, [pc, #80]	; (800c04c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	429a      	cmp	r2, r3
 800c006:	d209      	bcs.n	800c01c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c008:	4b13      	ldr	r3, [pc, #76]	; (800c058 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	3304      	adds	r3, #4
 800c012:	4619      	mov	r1, r3
 800c014:	4610      	mov	r0, r2
 800c016:	f7ff faa1 	bl	800b55c <vListInsert>
}
 800c01a:	e010      	b.n	800c03e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c01c:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	4b0a      	ldr	r3, [pc, #40]	; (800c04c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7ff fa97 	bl	800b55c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c02e:	4b0c      	ldr	r3, [pc, #48]	; (800c060 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	429a      	cmp	r2, r3
 800c036:	d202      	bcs.n	800c03e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c038:	4a09      	ldr	r2, [pc, #36]	; (800c060 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6013      	str	r3, [r2, #0]
}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20001f18 	.word	0x20001f18
 800c04c:	20001e14 	.word	0x20001e14
 800c050:	20001f1c 	.word	0x20001f1c
 800c054:	20001f00 	.word	0x20001f00
 800c058:	20001ed0 	.word	0x20001ed0
 800c05c:	20001ecc 	.word	0x20001ecc
 800c060:	20001f34 	.word	0x20001f34

0800c064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3b04      	subs	r3, #4
 800c074:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3b04      	subs	r3, #4
 800c082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f023 0201 	bic.w	r2, r3, #1
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	3b04      	subs	r3, #4
 800c092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c094:	4a0c      	ldr	r2, [pc, #48]	; (800c0c8 <pxPortInitialiseStack+0x64>)
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	3b14      	subs	r3, #20
 800c09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3b04      	subs	r3, #4
 800c0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f06f 0202 	mvn.w	r2, #2
 800c0b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3b20      	subs	r3, #32
 800c0b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	0800c0cd 	.word	0x0800c0cd

0800c0cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <prvTaskExitError+0x54>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0de:	d00a      	beq.n	800c0f6 <prvTaskExitError+0x2a>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <prvTaskExitError+0x28>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	60bb      	str	r3, [r7, #8]
}
 800c108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c10a:	bf00      	nop
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0fc      	beq.n	800c10c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	20000038 	.word	0x20000038
	...

0800c130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c130:	4b07      	ldr	r3, [pc, #28]	; (800c150 <pxCurrentTCBConst2>)
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	6808      	ldr	r0, [r1, #0]
 800c136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13a:	f380 8809 	msr	PSP, r0
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f04f 0000 	mov.w	r0, #0
 800c146:	f380 8811 	msr	BASEPRI, r0
 800c14a:	4770      	bx	lr
 800c14c:	f3af 8000 	nop.w

0800c150 <pxCurrentTCBConst2>:
 800c150:	20001e14 	.word	0x20001e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop

0800c158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c158:	4808      	ldr	r0, [pc, #32]	; (800c17c <prvPortStartFirstTask+0x24>)
 800c15a:	6800      	ldr	r0, [r0, #0]
 800c15c:	6800      	ldr	r0, [r0, #0]
 800c15e:	f380 8808 	msr	MSP, r0
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	f380 8814 	msr	CONTROL, r0
 800c16a:	b662      	cpsie	i
 800c16c:	b661      	cpsie	f
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	df00      	svc	0
 800c178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c17a:	bf00      	nop
 800c17c:	e000ed08 	.word	0xe000ed08

0800c180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b086      	sub	sp, #24
 800c184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c186:	4b46      	ldr	r3, [pc, #280]	; (800c2a0 <xPortStartScheduler+0x120>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a46      	ldr	r2, [pc, #280]	; (800c2a4 <xPortStartScheduler+0x124>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d10a      	bne.n	800c1a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	613b      	str	r3, [r7, #16]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1a6:	4b3e      	ldr	r3, [pc, #248]	; (800c2a0 <xPortStartScheduler+0x120>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a3f      	ldr	r2, [pc, #252]	; (800c2a8 <xPortStartScheduler+0x128>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d10a      	bne.n	800c1c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	60fb      	str	r3, [r7, #12]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1c6:	4b39      	ldr	r3, [pc, #228]	; (800c2ac <xPortStartScheduler+0x12c>)
 800c1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	22ff      	movs	r2, #255	; 0xff
 800c1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	4b31      	ldr	r3, [pc, #196]	; (800c2b0 <xPortStartScheduler+0x130>)
 800c1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1ee:	4b31      	ldr	r3, [pc, #196]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c1f0:	2207      	movs	r2, #7
 800c1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1f4:	e009      	b.n	800c20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c1f6:	4b2f      	ldr	r3, [pc, #188]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	4a2d      	ldr	r2, [pc, #180]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	b2db      	uxtb	r3, r3
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	b2db      	uxtb	r3, r3
 800c208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c20a:	78fb      	ldrb	r3, [r7, #3]
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c212:	2b80      	cmp	r3, #128	; 0x80
 800c214:	d0ef      	beq.n	800c1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c216:	4b27      	ldr	r3, [pc, #156]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f1c3 0307 	rsb	r3, r3, #7
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d00a      	beq.n	800c238 <xPortStartScheduler+0xb8>
	__asm volatile
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	60bb      	str	r3, [r7, #8]
}
 800c234:	bf00      	nop
 800c236:	e7fe      	b.n	800c236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c238:	4b1e      	ldr	r3, [pc, #120]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	021b      	lsls	r3, r3, #8
 800c23e:	4a1d      	ldr	r2, [pc, #116]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c242:	4b1c      	ldr	r3, [pc, #112]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c24a:	4a1a      	ldr	r2, [pc, #104]	; (800c2b4 <xPortStartScheduler+0x134>)
 800c24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	b2da      	uxtb	r2, r3
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c256:	4b18      	ldr	r3, [pc, #96]	; (800c2b8 <xPortStartScheduler+0x138>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a17      	ldr	r2, [pc, #92]	; (800c2b8 <xPortStartScheduler+0x138>)
 800c25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c262:	4b15      	ldr	r3, [pc, #84]	; (800c2b8 <xPortStartScheduler+0x138>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a14      	ldr	r2, [pc, #80]	; (800c2b8 <xPortStartScheduler+0x138>)
 800c268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c26e:	f000 f8dd 	bl	800c42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c272:	4b12      	ldr	r3, [pc, #72]	; (800c2bc <xPortStartScheduler+0x13c>)
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c278:	f000 f8fc 	bl	800c474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c27c:	4b10      	ldr	r3, [pc, #64]	; (800c2c0 <xPortStartScheduler+0x140>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a0f      	ldr	r2, [pc, #60]	; (800c2c0 <xPortStartScheduler+0x140>)
 800c282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c288:	f7ff ff66 	bl	800c158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c28c:	f7ff fd52 	bl	800bd34 <vTaskSwitchContext>
	prvTaskExitError();
 800c290:	f7ff ff1c 	bl	800c0cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	e000ed00 	.word	0xe000ed00
 800c2a4:	410fc271 	.word	0x410fc271
 800c2a8:	410fc270 	.word	0x410fc270
 800c2ac:	e000e400 	.word	0xe000e400
 800c2b0:	20001f40 	.word	0x20001f40
 800c2b4:	20001f44 	.word	0x20001f44
 800c2b8:	e000ed20 	.word	0xe000ed20
 800c2bc:	20000038 	.word	0x20000038
 800c2c0:	e000ef34 	.word	0xe000ef34

0800c2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b083      	sub	sp, #12
 800c2c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	607b      	str	r3, [r7, #4]
}
 800c2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2de:	4b0f      	ldr	r3, [pc, #60]	; (800c31c <vPortEnterCritical+0x58>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	4a0d      	ldr	r2, [pc, #52]	; (800c31c <vPortEnterCritical+0x58>)
 800c2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2e8:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <vPortEnterCritical+0x58>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d10f      	bne.n	800c310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2f0:	4b0b      	ldr	r3, [pc, #44]	; (800c320 <vPortEnterCritical+0x5c>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00a      	beq.n	800c310 <vPortEnterCritical+0x4c>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	603b      	str	r3, [r7, #0]
}
 800c30c:	bf00      	nop
 800c30e:	e7fe      	b.n	800c30e <vPortEnterCritical+0x4a>
	}
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr
 800c31c:	20000038 	.word	0x20000038
 800c320:	e000ed04 	.word	0xe000ed04

0800c324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c32a:	4b12      	ldr	r3, [pc, #72]	; (800c374 <vPortExitCritical+0x50>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10a      	bne.n	800c348 <vPortExitCritical+0x24>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	607b      	str	r3, [r7, #4]
}
 800c344:	bf00      	nop
 800c346:	e7fe      	b.n	800c346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c348:	4b0a      	ldr	r3, [pc, #40]	; (800c374 <vPortExitCritical+0x50>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	4a09      	ldr	r2, [pc, #36]	; (800c374 <vPortExitCritical+0x50>)
 800c350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c352:	4b08      	ldr	r3, [pc, #32]	; (800c374 <vPortExitCritical+0x50>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d105      	bne.n	800c366 <vPortExitCritical+0x42>
 800c35a:	2300      	movs	r3, #0
 800c35c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20000038 	.word	0x20000038
	...

0800c380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c380:	f3ef 8009 	mrs	r0, PSP
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	4b15      	ldr	r3, [pc, #84]	; (800c3e0 <pxCurrentTCBConst>)
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	f01e 0f10 	tst.w	lr, #16
 800c390:	bf08      	it	eq
 800c392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39a:	6010      	str	r0, [r2, #0]
 800c39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3a4:	f380 8811 	msr	BASEPRI, r0
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f7ff fcc0 	bl	800bd34 <vTaskSwitchContext>
 800c3b4:	f04f 0000 	mov.w	r0, #0
 800c3b8:	f380 8811 	msr	BASEPRI, r0
 800c3bc:	bc09      	pop	{r0, r3}
 800c3be:	6819      	ldr	r1, [r3, #0]
 800c3c0:	6808      	ldr	r0, [r1, #0]
 800c3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c6:	f01e 0f10 	tst.w	lr, #16
 800c3ca:	bf08      	it	eq
 800c3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3d0:	f380 8809 	msr	PSP, r0
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	f3af 8000 	nop.w

0800c3e0 <pxCurrentTCBConst>:
 800c3e0:	20001e14 	.word	0x20001e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop

0800c3e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	607b      	str	r3, [r7, #4]
}
 800c400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c402:	f7ff fbdf 	bl	800bbc4 <xTaskIncrementTick>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c40c:	4b06      	ldr	r3, [pc, #24]	; (800c428 <SysTick_Handler+0x40>)
 800c40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c412:	601a      	str	r2, [r3, #0]
 800c414:	2300      	movs	r3, #0
 800c416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	f383 8811 	msr	BASEPRI, r3
}
 800c41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	e000ed04 	.word	0xe000ed04

0800c42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c42c:	b480      	push	{r7}
 800c42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <vPortSetupTimerInterrupt+0x34>)
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c436:	4b0b      	ldr	r3, [pc, #44]	; (800c464 <vPortSetupTimerInterrupt+0x38>)
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c43c:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <vPortSetupTimerInterrupt+0x3c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a0a      	ldr	r2, [pc, #40]	; (800c46c <vPortSetupTimerInterrupt+0x40>)
 800c442:	fba2 2303 	umull	r2, r3, r2, r3
 800c446:	099b      	lsrs	r3, r3, #6
 800c448:	4a09      	ldr	r2, [pc, #36]	; (800c470 <vPortSetupTimerInterrupt+0x44>)
 800c44a:	3b01      	subs	r3, #1
 800c44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c44e:	4b04      	ldr	r3, [pc, #16]	; (800c460 <vPortSetupTimerInterrupt+0x34>)
 800c450:	2207      	movs	r2, #7
 800c452:	601a      	str	r2, [r3, #0]
}
 800c454:	bf00      	nop
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	e000e010 	.word	0xe000e010
 800c464:	e000e018 	.word	0xe000e018
 800c468:	2000002c 	.word	0x2000002c
 800c46c:	10624dd3 	.word	0x10624dd3
 800c470:	e000e014 	.word	0xe000e014

0800c474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c484 <vPortEnableVFP+0x10>
 800c478:	6801      	ldr	r1, [r0, #0]
 800c47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c47e:	6001      	str	r1, [r0, #0]
 800c480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c482:	bf00      	nop
 800c484:	e000ed88 	.word	0xe000ed88

0800c488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08a      	sub	sp, #40	; 0x28
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c490:	2300      	movs	r3, #0
 800c492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c494:	f7ff faec 	bl	800ba70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c498:	4b5b      	ldr	r3, [pc, #364]	; (800c608 <pvPortMalloc+0x180>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d101      	bne.n	800c4a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4a0:	f000 f920 	bl	800c6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4a4:	4b59      	ldr	r3, [pc, #356]	; (800c60c <pvPortMalloc+0x184>)
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f040 8093 	bne.w	800c5d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d01d      	beq.n	800c4f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4b8:	2208      	movs	r2, #8
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4413      	add	r3, r2
 800c4be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f003 0307 	and.w	r3, r3, #7
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d014      	beq.n	800c4f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f023 0307 	bic.w	r3, r3, #7
 800c4d0:	3308      	adds	r3, #8
 800c4d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f003 0307 	and.w	r3, r3, #7
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00a      	beq.n	800c4f4 <pvPortMalloc+0x6c>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	617b      	str	r3, [r7, #20]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d06e      	beq.n	800c5d8 <pvPortMalloc+0x150>
 800c4fa:	4b45      	ldr	r3, [pc, #276]	; (800c610 <pvPortMalloc+0x188>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	429a      	cmp	r2, r3
 800c502:	d869      	bhi.n	800c5d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c504:	4b43      	ldr	r3, [pc, #268]	; (800c614 <pvPortMalloc+0x18c>)
 800c506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c508:	4b42      	ldr	r3, [pc, #264]	; (800c614 <pvPortMalloc+0x18c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c50e:	e004      	b.n	800c51a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	429a      	cmp	r2, r3
 800c522:	d903      	bls.n	800c52c <pvPortMalloc+0xa4>
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1f1      	bne.n	800c510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c52c:	4b36      	ldr	r3, [pc, #216]	; (800c608 <pvPortMalloc+0x180>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c532:	429a      	cmp	r2, r3
 800c534:	d050      	beq.n	800c5d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c536:	6a3b      	ldr	r3, [r7, #32]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2208      	movs	r2, #8
 800c53c:	4413      	add	r3, r2
 800c53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	1ad2      	subs	r2, r2, r3
 800c550:	2308      	movs	r3, #8
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	429a      	cmp	r2, r3
 800c556:	d91f      	bls.n	800c598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4413      	add	r3, r2
 800c55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	f003 0307 	and.w	r3, r3, #7
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <pvPortMalloc+0xf8>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	613b      	str	r3, [r7, #16]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	1ad2      	subs	r2, r2, r3
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c592:	69b8      	ldr	r0, [r7, #24]
 800c594:	f000 f908 	bl	800c7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c598:	4b1d      	ldr	r3, [pc, #116]	; (800c610 <pvPortMalloc+0x188>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	4a1b      	ldr	r2, [pc, #108]	; (800c610 <pvPortMalloc+0x188>)
 800c5a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5a6:	4b1a      	ldr	r3, [pc, #104]	; (800c610 <pvPortMalloc+0x188>)
 800c5a8:	681a      	ldr	r2, [r3, #0]
 800c5aa:	4b1b      	ldr	r3, [pc, #108]	; (800c618 <pvPortMalloc+0x190>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d203      	bcs.n	800c5ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5b2:	4b17      	ldr	r3, [pc, #92]	; (800c610 <pvPortMalloc+0x188>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a18      	ldr	r2, [pc, #96]	; (800c618 <pvPortMalloc+0x190>)
 800c5b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	685a      	ldr	r2, [r3, #4]
 800c5be:	4b13      	ldr	r3, [pc, #76]	; (800c60c <pvPortMalloc+0x184>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	431a      	orrs	r2, r3
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5ce:	4b13      	ldr	r3, [pc, #76]	; (800c61c <pvPortMalloc+0x194>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	4a11      	ldr	r2, [pc, #68]	; (800c61c <pvPortMalloc+0x194>)
 800c5d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5d8:	f7ff fa58 	bl	800ba8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00a      	beq.n	800c5fc <pvPortMalloc+0x174>
	__asm volatile
 800c5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	60fb      	str	r3, [r7, #12]
}
 800c5f8:	bf00      	nop
 800c5fa:	e7fe      	b.n	800c5fa <pvPortMalloc+0x172>
	return pvReturn;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3728      	adds	r7, #40	; 0x28
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	20005b50 	.word	0x20005b50
 800c60c:	20005b64 	.word	0x20005b64
 800c610:	20005b54 	.word	0x20005b54
 800c614:	20005b48 	.word	0x20005b48
 800c618:	20005b58 	.word	0x20005b58
 800c61c:	20005b5c 	.word	0x20005b5c

0800c620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d04d      	beq.n	800c6ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c632:	2308      	movs	r3, #8
 800c634:	425b      	negs	r3, r3
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	4413      	add	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	685a      	ldr	r2, [r3, #4]
 800c644:	4b24      	ldr	r3, [pc, #144]	; (800c6d8 <vPortFree+0xb8>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4013      	ands	r3, r2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10a      	bne.n	800c664 <vPortFree+0x44>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	60fb      	str	r3, [r7, #12]
}
 800c660:	bf00      	nop
 800c662:	e7fe      	b.n	800c662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00a      	beq.n	800c682 <vPortFree+0x62>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	60bb      	str	r3, [r7, #8]
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	4b14      	ldr	r3, [pc, #80]	; (800c6d8 <vPortFree+0xb8>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d01e      	beq.n	800c6ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11a      	bne.n	800c6ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	4b0e      	ldr	r3, [pc, #56]	; (800c6d8 <vPortFree+0xb8>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	43db      	mvns	r3, r3
 800c6a2:	401a      	ands	r2, r3
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6a8:	f7ff f9e2 	bl	800ba70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	4b0a      	ldr	r3, [pc, #40]	; (800c6dc <vPortFree+0xbc>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	4a09      	ldr	r2, [pc, #36]	; (800c6dc <vPortFree+0xbc>)
 800c6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6ba:	6938      	ldr	r0, [r7, #16]
 800c6bc:	f000 f874 	bl	800c7a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6c0:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <vPortFree+0xc0>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	4a06      	ldr	r2, [pc, #24]	; (800c6e0 <vPortFree+0xc0>)
 800c6c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6ca:	f7ff f9df 	bl	800ba8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6ce:	bf00      	nop
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20005b64 	.word	0x20005b64
 800c6dc:	20005b54 	.word	0x20005b54
 800c6e0:	20005b60 	.word	0x20005b60

0800c6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6f0:	4b27      	ldr	r3, [pc, #156]	; (800c790 <prvHeapInit+0xac>)
 800c6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f003 0307 	and.w	r3, r3, #7
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00c      	beq.n	800c718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3307      	adds	r3, #7
 800c702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f023 0307 	bic.w	r3, r3, #7
 800c70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	1ad3      	subs	r3, r2, r3
 800c712:	4a1f      	ldr	r2, [pc, #124]	; (800c790 <prvHeapInit+0xac>)
 800c714:	4413      	add	r3, r2
 800c716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c71c:	4a1d      	ldr	r2, [pc, #116]	; (800c794 <prvHeapInit+0xb0>)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c722:	4b1c      	ldr	r3, [pc, #112]	; (800c794 <prvHeapInit+0xb0>)
 800c724:	2200      	movs	r2, #0
 800c726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	4413      	add	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c730:	2208      	movs	r2, #8
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	1a9b      	subs	r3, r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 0307 	bic.w	r3, r3, #7
 800c73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	4a15      	ldr	r2, [pc, #84]	; (800c798 <prvHeapInit+0xb4>)
 800c744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c746:	4b14      	ldr	r3, [pc, #80]	; (800c798 <prvHeapInit+0xb4>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2200      	movs	r2, #0
 800c74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c74e:	4b12      	ldr	r3, [pc, #72]	; (800c798 <prvHeapInit+0xb4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c764:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <prvHeapInit+0xb4>)
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	4a0a      	ldr	r2, [pc, #40]	; (800c79c <prvHeapInit+0xb8>)
 800c772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	4a09      	ldr	r2, [pc, #36]	; (800c7a0 <prvHeapInit+0xbc>)
 800c77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c77c:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <prvHeapInit+0xc0>)
 800c77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	20001f48 	.word	0x20001f48
 800c794:	20005b48 	.word	0x20005b48
 800c798:	20005b50 	.word	0x20005b50
 800c79c:	20005b58 	.word	0x20005b58
 800c7a0:	20005b54 	.word	0x20005b54
 800c7a4:	20005b64 	.word	0x20005b64

0800c7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <prvInsertBlockIntoFreeList+0xac>)
 800c7b2:	60fb      	str	r3, [r7, #12]
 800c7b4:	e002      	b.n	800c7bc <prvInsertBlockIntoFreeList+0x14>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d8f7      	bhi.n	800c7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d108      	bne.n	800c7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	685a      	ldr	r2, [r3, #4]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	441a      	add	r2, r3
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d118      	bne.n	800c830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	4b15      	ldr	r3, [pc, #84]	; (800c858 <prvInsertBlockIntoFreeList+0xb0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	d00d      	beq.n	800c826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	685a      	ldr	r2, [r3, #4]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	441a      	add	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	e008      	b.n	800c838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c826:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <prvInsertBlockIntoFreeList+0xb0>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	601a      	str	r2, [r3, #0]
 800c82e:	e003      	b.n	800c838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d002      	beq.n	800c846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c846:	bf00      	nop
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	20005b48 	.word	0x20005b48
 800c858:	20005b50 	.word	0x20005b50

0800c85c <atan2>:
 800c85c:	f000 b800 	b.w	800c860 <__ieee754_atan2>

0800c860 <__ieee754_atan2>:
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c864:	ec57 6b11 	vmov	r6, r7, d1
 800c868:	4273      	negs	r3, r6
 800c86a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800c9e8 <__ieee754_atan2+0x188>
 800c86e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c872:	4333      	orrs	r3, r6
 800c874:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c878:	4543      	cmp	r3, r8
 800c87a:	ec51 0b10 	vmov	r0, r1, d0
 800c87e:	ee11 5a10 	vmov	r5, s2
 800c882:	d80a      	bhi.n	800c89a <__ieee754_atan2+0x3a>
 800c884:	4244      	negs	r4, r0
 800c886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c88a:	4304      	orrs	r4, r0
 800c88c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c890:	4544      	cmp	r4, r8
 800c892:	ee10 9a10 	vmov	r9, s0
 800c896:	468e      	mov	lr, r1
 800c898:	d907      	bls.n	800c8aa <__ieee754_atan2+0x4a>
 800c89a:	4632      	mov	r2, r6
 800c89c:	463b      	mov	r3, r7
 800c89e:	f7f3 fcc5 	bl	800022c <__adddf3>
 800c8a2:	ec41 0b10 	vmov	d0, r0, r1
 800c8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c8ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c8b2:	4334      	orrs	r4, r6
 800c8b4:	d103      	bne.n	800c8be <__ieee754_atan2+0x5e>
 800c8b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ba:	f000 b8c5 	b.w	800ca48 <atan>
 800c8be:	17bc      	asrs	r4, r7, #30
 800c8c0:	f004 0402 	and.w	r4, r4, #2
 800c8c4:	ea53 0909 	orrs.w	r9, r3, r9
 800c8c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c8cc:	d107      	bne.n	800c8de <__ieee754_atan2+0x7e>
 800c8ce:	2c02      	cmp	r4, #2
 800c8d0:	d05f      	beq.n	800c992 <__ieee754_atan2+0x132>
 800c8d2:	2c03      	cmp	r4, #3
 800c8d4:	d1e5      	bne.n	800c8a2 <__ieee754_atan2+0x42>
 800c8d6:	a140      	add	r1, pc, #256	; (adr r1, 800c9d8 <__ieee754_atan2+0x178>)
 800c8d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8dc:	e7e1      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c8de:	4315      	orrs	r5, r2
 800c8e0:	d106      	bne.n	800c8f0 <__ieee754_atan2+0x90>
 800c8e2:	f1be 0f00 	cmp.w	lr, #0
 800c8e6:	da5f      	bge.n	800c9a8 <__ieee754_atan2+0x148>
 800c8e8:	a13d      	add	r1, pc, #244	; (adr r1, 800c9e0 <__ieee754_atan2+0x180>)
 800c8ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ee:	e7d8      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c8f0:	4542      	cmp	r2, r8
 800c8f2:	d10f      	bne.n	800c914 <__ieee754_atan2+0xb4>
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c8fa:	d107      	bne.n	800c90c <__ieee754_atan2+0xac>
 800c8fc:	2c02      	cmp	r4, #2
 800c8fe:	d84c      	bhi.n	800c99a <__ieee754_atan2+0x13a>
 800c900:	4b33      	ldr	r3, [pc, #204]	; (800c9d0 <__ieee754_atan2+0x170>)
 800c902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c90a:	e7ca      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c90c:	2c02      	cmp	r4, #2
 800c90e:	d848      	bhi.n	800c9a2 <__ieee754_atan2+0x142>
 800c910:	4b30      	ldr	r3, [pc, #192]	; (800c9d4 <__ieee754_atan2+0x174>)
 800c912:	e7f6      	b.n	800c902 <__ieee754_atan2+0xa2>
 800c914:	4543      	cmp	r3, r8
 800c916:	d0e4      	beq.n	800c8e2 <__ieee754_atan2+0x82>
 800c918:	1a9b      	subs	r3, r3, r2
 800c91a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c91e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c922:	da1e      	bge.n	800c962 <__ieee754_atan2+0x102>
 800c924:	2f00      	cmp	r7, #0
 800c926:	da01      	bge.n	800c92c <__ieee754_atan2+0xcc>
 800c928:	323c      	adds	r2, #60	; 0x3c
 800c92a:	db1e      	blt.n	800c96a <__ieee754_atan2+0x10a>
 800c92c:	4632      	mov	r2, r6
 800c92e:	463b      	mov	r3, r7
 800c930:	f7f3 ff5c 	bl	80007ec <__aeabi_ddiv>
 800c934:	ec41 0b10 	vmov	d0, r0, r1
 800c938:	f000 fa7a 	bl	800ce30 <fabs>
 800c93c:	f000 f884 	bl	800ca48 <atan>
 800c940:	ec51 0b10 	vmov	r0, r1, d0
 800c944:	2c01      	cmp	r4, #1
 800c946:	d013      	beq.n	800c970 <__ieee754_atan2+0x110>
 800c948:	2c02      	cmp	r4, #2
 800c94a:	d015      	beq.n	800c978 <__ieee754_atan2+0x118>
 800c94c:	2c00      	cmp	r4, #0
 800c94e:	d0a8      	beq.n	800c8a2 <__ieee754_atan2+0x42>
 800c950:	a317      	add	r3, pc, #92	; (adr r3, 800c9b0 <__ieee754_atan2+0x150>)
 800c952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c956:	f7f3 fc67 	bl	8000228 <__aeabi_dsub>
 800c95a:	a317      	add	r3, pc, #92	; (adr r3, 800c9b8 <__ieee754_atan2+0x158>)
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	e014      	b.n	800c98c <__ieee754_atan2+0x12c>
 800c962:	a117      	add	r1, pc, #92	; (adr r1, 800c9c0 <__ieee754_atan2+0x160>)
 800c964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c968:	e7ec      	b.n	800c944 <__ieee754_atan2+0xe4>
 800c96a:	2000      	movs	r0, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	e7e9      	b.n	800c944 <__ieee754_atan2+0xe4>
 800c970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c974:	4619      	mov	r1, r3
 800c976:	e794      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c978:	a30d      	add	r3, pc, #52	; (adr r3, 800c9b0 <__ieee754_atan2+0x150>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc53 	bl	8000228 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	a10c      	add	r1, pc, #48	; (adr r1, 800c9b8 <__ieee754_atan2+0x158>)
 800c988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c98c:	f7f3 fc4c 	bl	8000228 <__aeabi_dsub>
 800c990:	e787      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c992:	a109      	add	r1, pc, #36	; (adr r1, 800c9b8 <__ieee754_atan2+0x158>)
 800c994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c998:	e783      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c99a:	a10b      	add	r1, pc, #44	; (adr r1, 800c9c8 <__ieee754_atan2+0x168>)
 800c99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a0:	e77f      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	e77c      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c9a8:	a105      	add	r1, pc, #20	; (adr r1, 800c9c0 <__ieee754_atan2+0x160>)
 800c9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ae:	e778      	b.n	800c8a2 <__ieee754_atan2+0x42>
 800c9b0:	33145c07 	.word	0x33145c07
 800c9b4:	3ca1a626 	.word	0x3ca1a626
 800c9b8:	54442d18 	.word	0x54442d18
 800c9bc:	400921fb 	.word	0x400921fb
 800c9c0:	54442d18 	.word	0x54442d18
 800c9c4:	3ff921fb 	.word	0x3ff921fb
 800c9c8:	54442d18 	.word	0x54442d18
 800c9cc:	3fe921fb 	.word	0x3fe921fb
 800c9d0:	0800e6b8 	.word	0x0800e6b8
 800c9d4:	0800e6d0 	.word	0x0800e6d0
 800c9d8:	54442d18 	.word	0x54442d18
 800c9dc:	c00921fb 	.word	0xc00921fb
 800c9e0:	54442d18 	.word	0x54442d18
 800c9e4:	bff921fb 	.word	0xbff921fb
 800c9e8:	7ff00000 	.word	0x7ff00000

0800c9ec <sqrt>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	ed2d 8b02 	vpush	{d8}
 800c9f2:	ec55 4b10 	vmov	r4, r5, d0
 800c9f6:	f000 fa7f 	bl	800cef8 <__ieee754_sqrt>
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	4620      	mov	r0, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	eeb0 8a40 	vmov.f32	s16, s0
 800ca06:	eef0 8a60 	vmov.f32	s17, s1
 800ca0a:	f7f4 f85f 	bl	8000acc <__aeabi_dcmpun>
 800ca0e:	b990      	cbnz	r0, 800ca36 <sqrt+0x4a>
 800ca10:	2200      	movs	r2, #0
 800ca12:	2300      	movs	r3, #0
 800ca14:	4620      	mov	r0, r4
 800ca16:	4629      	mov	r1, r5
 800ca18:	f7f4 f830 	bl	8000a7c <__aeabi_dcmplt>
 800ca1c:	b158      	cbz	r0, 800ca36 <sqrt+0x4a>
 800ca1e:	f001 fb67 	bl	800e0f0 <__errno>
 800ca22:	2321      	movs	r3, #33	; 0x21
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	2200      	movs	r2, #0
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	f7f3 fedd 	bl	80007ec <__aeabi_ddiv>
 800ca32:	ec41 0b18 	vmov	d8, r0, r1
 800ca36:	eeb0 0a48 	vmov.f32	s0, s16
 800ca3a:	eef0 0a68 	vmov.f32	s1, s17
 800ca3e:	ecbd 8b02 	vpop	{d8}
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	0000      	movs	r0, r0
	...

0800ca48 <atan>:
 800ca48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	ec55 4b10 	vmov	r4, r5, d0
 800ca50:	4bc3      	ldr	r3, [pc, #780]	; (800cd60 <atan+0x318>)
 800ca52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ca56:	429e      	cmp	r6, r3
 800ca58:	46ab      	mov	fp, r5
 800ca5a:	dd18      	ble.n	800ca8e <atan+0x46>
 800ca5c:	4bc1      	ldr	r3, [pc, #772]	; (800cd64 <atan+0x31c>)
 800ca5e:	429e      	cmp	r6, r3
 800ca60:	dc01      	bgt.n	800ca66 <atan+0x1e>
 800ca62:	d109      	bne.n	800ca78 <atan+0x30>
 800ca64:	b144      	cbz	r4, 800ca78 <atan+0x30>
 800ca66:	4622      	mov	r2, r4
 800ca68:	462b      	mov	r3, r5
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	f7f3 fbdd 	bl	800022c <__adddf3>
 800ca72:	4604      	mov	r4, r0
 800ca74:	460d      	mov	r5, r1
 800ca76:	e006      	b.n	800ca86 <atan+0x3e>
 800ca78:	f1bb 0f00 	cmp.w	fp, #0
 800ca7c:	f300 8131 	bgt.w	800cce2 <atan+0x29a>
 800ca80:	a59b      	add	r5, pc, #620	; (adr r5, 800ccf0 <atan+0x2a8>)
 800ca82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca86:	ec45 4b10 	vmov	d0, r4, r5
 800ca8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8e:	4bb6      	ldr	r3, [pc, #728]	; (800cd68 <atan+0x320>)
 800ca90:	429e      	cmp	r6, r3
 800ca92:	dc14      	bgt.n	800cabe <atan+0x76>
 800ca94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ca98:	429e      	cmp	r6, r3
 800ca9a:	dc0d      	bgt.n	800cab8 <atan+0x70>
 800ca9c:	a396      	add	r3, pc, #600	; (adr r3, 800ccf8 <atan+0x2b0>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	ee10 0a10 	vmov	r0, s0
 800caa6:	4629      	mov	r1, r5
 800caa8:	f7f3 fbc0 	bl	800022c <__adddf3>
 800caac:	4baf      	ldr	r3, [pc, #700]	; (800cd6c <atan+0x324>)
 800caae:	2200      	movs	r2, #0
 800cab0:	f7f4 f802 	bl	8000ab8 <__aeabi_dcmpgt>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	d1e6      	bne.n	800ca86 <atan+0x3e>
 800cab8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cabc:	e02b      	b.n	800cb16 <atan+0xce>
 800cabe:	f000 f9b7 	bl	800ce30 <fabs>
 800cac2:	4bab      	ldr	r3, [pc, #684]	; (800cd70 <atan+0x328>)
 800cac4:	429e      	cmp	r6, r3
 800cac6:	ec55 4b10 	vmov	r4, r5, d0
 800caca:	f300 80bf 	bgt.w	800cc4c <atan+0x204>
 800cace:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cad2:	429e      	cmp	r6, r3
 800cad4:	f300 80a0 	bgt.w	800cc18 <atan+0x1d0>
 800cad8:	ee10 2a10 	vmov	r2, s0
 800cadc:	ee10 0a10 	vmov	r0, s0
 800cae0:	462b      	mov	r3, r5
 800cae2:	4629      	mov	r1, r5
 800cae4:	f7f3 fba2 	bl	800022c <__adddf3>
 800cae8:	4ba0      	ldr	r3, [pc, #640]	; (800cd6c <atan+0x324>)
 800caea:	2200      	movs	r2, #0
 800caec:	f7f3 fb9c 	bl	8000228 <__aeabi_dsub>
 800caf0:	2200      	movs	r2, #0
 800caf2:	4606      	mov	r6, r0
 800caf4:	460f      	mov	r7, r1
 800caf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cafa:	4620      	mov	r0, r4
 800cafc:	4629      	mov	r1, r5
 800cafe:	f7f3 fb95 	bl	800022c <__adddf3>
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	4630      	mov	r0, r6
 800cb08:	4639      	mov	r1, r7
 800cb0a:	f7f3 fe6f 	bl	80007ec <__aeabi_ddiv>
 800cb0e:	f04f 0a00 	mov.w	sl, #0
 800cb12:	4604      	mov	r4, r0
 800cb14:	460d      	mov	r5, r1
 800cb16:	4622      	mov	r2, r4
 800cb18:	462b      	mov	r3, r5
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	f7f3 fd3b 	bl	8000598 <__aeabi_dmul>
 800cb22:	4602      	mov	r2, r0
 800cb24:	460b      	mov	r3, r1
 800cb26:	4680      	mov	r8, r0
 800cb28:	4689      	mov	r9, r1
 800cb2a:	f7f3 fd35 	bl	8000598 <__aeabi_dmul>
 800cb2e:	a374      	add	r3, pc, #464	; (adr r3, 800cd00 <atan+0x2b8>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	f7f3 fd2e 	bl	8000598 <__aeabi_dmul>
 800cb3c:	a372      	add	r3, pc, #456	; (adr r3, 800cd08 <atan+0x2c0>)
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	f7f3 fb73 	bl	800022c <__adddf3>
 800cb46:	4632      	mov	r2, r6
 800cb48:	463b      	mov	r3, r7
 800cb4a:	f7f3 fd25 	bl	8000598 <__aeabi_dmul>
 800cb4e:	a370      	add	r3, pc, #448	; (adr r3, 800cd10 <atan+0x2c8>)
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	f7f3 fb6a 	bl	800022c <__adddf3>
 800cb58:	4632      	mov	r2, r6
 800cb5a:	463b      	mov	r3, r7
 800cb5c:	f7f3 fd1c 	bl	8000598 <__aeabi_dmul>
 800cb60:	a36d      	add	r3, pc, #436	; (adr r3, 800cd18 <atan+0x2d0>)
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	f7f3 fb61 	bl	800022c <__adddf3>
 800cb6a:	4632      	mov	r2, r6
 800cb6c:	463b      	mov	r3, r7
 800cb6e:	f7f3 fd13 	bl	8000598 <__aeabi_dmul>
 800cb72:	a36b      	add	r3, pc, #428	; (adr r3, 800cd20 <atan+0x2d8>)
 800cb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb78:	f7f3 fb58 	bl	800022c <__adddf3>
 800cb7c:	4632      	mov	r2, r6
 800cb7e:	463b      	mov	r3, r7
 800cb80:	f7f3 fd0a 	bl	8000598 <__aeabi_dmul>
 800cb84:	a368      	add	r3, pc, #416	; (adr r3, 800cd28 <atan+0x2e0>)
 800cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8a:	f7f3 fb4f 	bl	800022c <__adddf3>
 800cb8e:	4642      	mov	r2, r8
 800cb90:	464b      	mov	r3, r9
 800cb92:	f7f3 fd01 	bl	8000598 <__aeabi_dmul>
 800cb96:	a366      	add	r3, pc, #408	; (adr r3, 800cd30 <atan+0x2e8>)
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	4680      	mov	r8, r0
 800cb9e:	4689      	mov	r9, r1
 800cba0:	4630      	mov	r0, r6
 800cba2:	4639      	mov	r1, r7
 800cba4:	f7f3 fcf8 	bl	8000598 <__aeabi_dmul>
 800cba8:	a363      	add	r3, pc, #396	; (adr r3, 800cd38 <atan+0x2f0>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fb3b 	bl	8000228 <__aeabi_dsub>
 800cbb2:	4632      	mov	r2, r6
 800cbb4:	463b      	mov	r3, r7
 800cbb6:	f7f3 fcef 	bl	8000598 <__aeabi_dmul>
 800cbba:	a361      	add	r3, pc, #388	; (adr r3, 800cd40 <atan+0x2f8>)
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	f7f3 fb32 	bl	8000228 <__aeabi_dsub>
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	463b      	mov	r3, r7
 800cbc8:	f7f3 fce6 	bl	8000598 <__aeabi_dmul>
 800cbcc:	a35e      	add	r3, pc, #376	; (adr r3, 800cd48 <atan+0x300>)
 800cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd2:	f7f3 fb29 	bl	8000228 <__aeabi_dsub>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	463b      	mov	r3, r7
 800cbda:	f7f3 fcdd 	bl	8000598 <__aeabi_dmul>
 800cbde:	a35c      	add	r3, pc, #368	; (adr r3, 800cd50 <atan+0x308>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f7f3 fb20 	bl	8000228 <__aeabi_dsub>
 800cbe8:	4632      	mov	r2, r6
 800cbea:	463b      	mov	r3, r7
 800cbec:	f7f3 fcd4 	bl	8000598 <__aeabi_dmul>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	f7f3 fb18 	bl	800022c <__adddf3>
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	462b      	mov	r3, r5
 800cc00:	f7f3 fcca 	bl	8000598 <__aeabi_dmul>
 800cc04:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	d14b      	bne.n	800cca6 <atan+0x25e>
 800cc0e:	4620      	mov	r0, r4
 800cc10:	4629      	mov	r1, r5
 800cc12:	f7f3 fb09 	bl	8000228 <__aeabi_dsub>
 800cc16:	e72c      	b.n	800ca72 <atan+0x2a>
 800cc18:	ee10 0a10 	vmov	r0, s0
 800cc1c:	4b53      	ldr	r3, [pc, #332]	; (800cd6c <atan+0x324>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 fb01 	bl	8000228 <__aeabi_dsub>
 800cc26:	4b51      	ldr	r3, [pc, #324]	; (800cd6c <atan+0x324>)
 800cc28:	4606      	mov	r6, r0
 800cc2a:	460f      	mov	r7, r1
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fafb 	bl	800022c <__adddf3>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fdd5 	bl	80007ec <__aeabi_ddiv>
 800cc42:	f04f 0a01 	mov.w	sl, #1
 800cc46:	4604      	mov	r4, r0
 800cc48:	460d      	mov	r5, r1
 800cc4a:	e764      	b.n	800cb16 <atan+0xce>
 800cc4c:	4b49      	ldr	r3, [pc, #292]	; (800cd74 <atan+0x32c>)
 800cc4e:	429e      	cmp	r6, r3
 800cc50:	da1d      	bge.n	800cc8e <atan+0x246>
 800cc52:	ee10 0a10 	vmov	r0, s0
 800cc56:	4b48      	ldr	r3, [pc, #288]	; (800cd78 <atan+0x330>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 fae4 	bl	8000228 <__aeabi_dsub>
 800cc60:	4b45      	ldr	r3, [pc, #276]	; (800cd78 <atan+0x330>)
 800cc62:	4606      	mov	r6, r0
 800cc64:	460f      	mov	r7, r1
 800cc66:	2200      	movs	r2, #0
 800cc68:	4620      	mov	r0, r4
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	f7f3 fc94 	bl	8000598 <__aeabi_dmul>
 800cc70:	4b3e      	ldr	r3, [pc, #248]	; (800cd6c <atan+0x324>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f7f3 fada 	bl	800022c <__adddf3>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	4639      	mov	r1, r7
 800cc80:	f7f3 fdb4 	bl	80007ec <__aeabi_ddiv>
 800cc84:	f04f 0a02 	mov.w	sl, #2
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460d      	mov	r5, r1
 800cc8c:	e743      	b.n	800cb16 <atan+0xce>
 800cc8e:	462b      	mov	r3, r5
 800cc90:	ee10 2a10 	vmov	r2, s0
 800cc94:	4939      	ldr	r1, [pc, #228]	; (800cd7c <atan+0x334>)
 800cc96:	2000      	movs	r0, #0
 800cc98:	f7f3 fda8 	bl	80007ec <__aeabi_ddiv>
 800cc9c:	f04f 0a03 	mov.w	sl, #3
 800cca0:	4604      	mov	r4, r0
 800cca2:	460d      	mov	r5, r1
 800cca4:	e737      	b.n	800cb16 <atan+0xce>
 800cca6:	4b36      	ldr	r3, [pc, #216]	; (800cd80 <atan+0x338>)
 800cca8:	4e36      	ldr	r6, [pc, #216]	; (800cd84 <atan+0x33c>)
 800ccaa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	f7f3 fab9 	bl	8000228 <__aeabi_dsub>
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	462b      	mov	r3, r5
 800ccba:	f7f3 fab5 	bl	8000228 <__aeabi_dsub>
 800ccbe:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ccca:	f7f3 faad 	bl	8000228 <__aeabi_dsub>
 800ccce:	f1bb 0f00 	cmp.w	fp, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	460d      	mov	r5, r1
 800ccd6:	f6bf aed6 	bge.w	800ca86 <atan+0x3e>
 800ccda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccde:	461d      	mov	r5, r3
 800cce0:	e6d1      	b.n	800ca86 <atan+0x3e>
 800cce2:	a51d      	add	r5, pc, #116	; (adr r5, 800cd58 <atan+0x310>)
 800cce4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cce8:	e6cd      	b.n	800ca86 <atan+0x3e>
 800ccea:	bf00      	nop
 800ccec:	f3af 8000 	nop.w
 800ccf0:	54442d18 	.word	0x54442d18
 800ccf4:	bff921fb 	.word	0xbff921fb
 800ccf8:	8800759c 	.word	0x8800759c
 800ccfc:	7e37e43c 	.word	0x7e37e43c
 800cd00:	e322da11 	.word	0xe322da11
 800cd04:	3f90ad3a 	.word	0x3f90ad3a
 800cd08:	24760deb 	.word	0x24760deb
 800cd0c:	3fa97b4b 	.word	0x3fa97b4b
 800cd10:	a0d03d51 	.word	0xa0d03d51
 800cd14:	3fb10d66 	.word	0x3fb10d66
 800cd18:	c54c206e 	.word	0xc54c206e
 800cd1c:	3fb745cd 	.word	0x3fb745cd
 800cd20:	920083ff 	.word	0x920083ff
 800cd24:	3fc24924 	.word	0x3fc24924
 800cd28:	5555550d 	.word	0x5555550d
 800cd2c:	3fd55555 	.word	0x3fd55555
 800cd30:	2c6a6c2f 	.word	0x2c6a6c2f
 800cd34:	bfa2b444 	.word	0xbfa2b444
 800cd38:	52defd9a 	.word	0x52defd9a
 800cd3c:	3fadde2d 	.word	0x3fadde2d
 800cd40:	af749a6d 	.word	0xaf749a6d
 800cd44:	3fb3b0f2 	.word	0x3fb3b0f2
 800cd48:	fe231671 	.word	0xfe231671
 800cd4c:	3fbc71c6 	.word	0x3fbc71c6
 800cd50:	9998ebc4 	.word	0x9998ebc4
 800cd54:	3fc99999 	.word	0x3fc99999
 800cd58:	54442d18 	.word	0x54442d18
 800cd5c:	3ff921fb 	.word	0x3ff921fb
 800cd60:	440fffff 	.word	0x440fffff
 800cd64:	7ff00000 	.word	0x7ff00000
 800cd68:	3fdbffff 	.word	0x3fdbffff
 800cd6c:	3ff00000 	.word	0x3ff00000
 800cd70:	3ff2ffff 	.word	0x3ff2ffff
 800cd74:	40038000 	.word	0x40038000
 800cd78:	3ff80000 	.word	0x3ff80000
 800cd7c:	bff00000 	.word	0xbff00000
 800cd80:	0800e708 	.word	0x0800e708
 800cd84:	0800e6e8 	.word	0x0800e6e8

0800cd88 <cos>:
 800cd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd8a:	ec53 2b10 	vmov	r2, r3, d0
 800cd8e:	4826      	ldr	r0, [pc, #152]	; (800ce28 <cos+0xa0>)
 800cd90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cd94:	4281      	cmp	r1, r0
 800cd96:	dc06      	bgt.n	800cda6 <cos+0x1e>
 800cd98:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ce20 <cos+0x98>
 800cd9c:	b005      	add	sp, #20
 800cd9e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda2:	f000 bedd 	b.w	800db60 <__kernel_cos>
 800cda6:	4821      	ldr	r0, [pc, #132]	; (800ce2c <cos+0xa4>)
 800cda8:	4281      	cmp	r1, r0
 800cdaa:	dd09      	ble.n	800cdc0 <cos+0x38>
 800cdac:	ee10 0a10 	vmov	r0, s0
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	f7f3 fa39 	bl	8000228 <__aeabi_dsub>
 800cdb6:	ec41 0b10 	vmov	d0, r0, r1
 800cdba:	b005      	add	sp, #20
 800cdbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdc0:	4668      	mov	r0, sp
 800cdc2:	f000 f975 	bl	800d0b0 <__ieee754_rem_pio2>
 800cdc6:	f000 0003 	and.w	r0, r0, #3
 800cdca:	2801      	cmp	r0, #1
 800cdcc:	d00b      	beq.n	800cde6 <cos+0x5e>
 800cdce:	2802      	cmp	r0, #2
 800cdd0:	d016      	beq.n	800ce00 <cos+0x78>
 800cdd2:	b9e0      	cbnz	r0, 800ce0e <cos+0x86>
 800cdd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdd8:	ed9d 0b00 	vldr	d0, [sp]
 800cddc:	f000 fec0 	bl	800db60 <__kernel_cos>
 800cde0:	ec51 0b10 	vmov	r0, r1, d0
 800cde4:	e7e7      	b.n	800cdb6 <cos+0x2e>
 800cde6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cdea:	ed9d 0b00 	vldr	d0, [sp]
 800cdee:	f000 ff7f 	bl	800dcf0 <__kernel_sin>
 800cdf2:	ec53 2b10 	vmov	r2, r3, d0
 800cdf6:	ee10 0a10 	vmov	r0, s0
 800cdfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdfe:	e7da      	b.n	800cdb6 <cos+0x2e>
 800ce00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce04:	ed9d 0b00 	vldr	d0, [sp]
 800ce08:	f000 feaa 	bl	800db60 <__kernel_cos>
 800ce0c:	e7f1      	b.n	800cdf2 <cos+0x6a>
 800ce0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce12:	ed9d 0b00 	vldr	d0, [sp]
 800ce16:	2001      	movs	r0, #1
 800ce18:	f000 ff6a 	bl	800dcf0 <__kernel_sin>
 800ce1c:	e7e0      	b.n	800cde0 <cos+0x58>
 800ce1e:	bf00      	nop
	...
 800ce28:	3fe921fb 	.word	0x3fe921fb
 800ce2c:	7fefffff 	.word	0x7fefffff

0800ce30 <fabs>:
 800ce30:	ec51 0b10 	vmov	r0, r1, d0
 800ce34:	ee10 2a10 	vmov	r2, s0
 800ce38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce3c:	ec43 2b10 	vmov	d0, r2, r3
 800ce40:	4770      	bx	lr
 800ce42:	0000      	movs	r0, r0
 800ce44:	0000      	movs	r0, r0
	...

0800ce48 <sin>:
 800ce48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce4a:	ec53 2b10 	vmov	r2, r3, d0
 800ce4e:	4828      	ldr	r0, [pc, #160]	; (800cef0 <sin+0xa8>)
 800ce50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ce54:	4281      	cmp	r1, r0
 800ce56:	dc07      	bgt.n	800ce68 <sin+0x20>
 800ce58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800cee8 <sin+0xa0>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	b005      	add	sp, #20
 800ce60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce64:	f000 bf44 	b.w	800dcf0 <__kernel_sin>
 800ce68:	4822      	ldr	r0, [pc, #136]	; (800cef4 <sin+0xac>)
 800ce6a:	4281      	cmp	r1, r0
 800ce6c:	dd09      	ble.n	800ce82 <sin+0x3a>
 800ce6e:	ee10 0a10 	vmov	r0, s0
 800ce72:	4619      	mov	r1, r3
 800ce74:	f7f3 f9d8 	bl	8000228 <__aeabi_dsub>
 800ce78:	ec41 0b10 	vmov	d0, r0, r1
 800ce7c:	b005      	add	sp, #20
 800ce7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce82:	4668      	mov	r0, sp
 800ce84:	f000 f914 	bl	800d0b0 <__ieee754_rem_pio2>
 800ce88:	f000 0003 	and.w	r0, r0, #3
 800ce8c:	2801      	cmp	r0, #1
 800ce8e:	d00c      	beq.n	800ceaa <sin+0x62>
 800ce90:	2802      	cmp	r0, #2
 800ce92:	d011      	beq.n	800ceb8 <sin+0x70>
 800ce94:	b9f0      	cbnz	r0, 800ced4 <sin+0x8c>
 800ce96:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ce9a:	ed9d 0b00 	vldr	d0, [sp]
 800ce9e:	2001      	movs	r0, #1
 800cea0:	f000 ff26 	bl	800dcf0 <__kernel_sin>
 800cea4:	ec51 0b10 	vmov	r0, r1, d0
 800cea8:	e7e6      	b.n	800ce78 <sin+0x30>
 800ceaa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ceae:	ed9d 0b00 	vldr	d0, [sp]
 800ceb2:	f000 fe55 	bl	800db60 <__kernel_cos>
 800ceb6:	e7f5      	b.n	800cea4 <sin+0x5c>
 800ceb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cebc:	ed9d 0b00 	vldr	d0, [sp]
 800cec0:	2001      	movs	r0, #1
 800cec2:	f000 ff15 	bl	800dcf0 <__kernel_sin>
 800cec6:	ec53 2b10 	vmov	r2, r3, d0
 800ceca:	ee10 0a10 	vmov	r0, s0
 800cece:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ced2:	e7d1      	b.n	800ce78 <sin+0x30>
 800ced4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ced8:	ed9d 0b00 	vldr	d0, [sp]
 800cedc:	f000 fe40 	bl	800db60 <__kernel_cos>
 800cee0:	e7f1      	b.n	800cec6 <sin+0x7e>
 800cee2:	bf00      	nop
 800cee4:	f3af 8000 	nop.w
	...
 800cef0:	3fe921fb 	.word	0x3fe921fb
 800cef4:	7fefffff 	.word	0x7fefffff

0800cef8 <__ieee754_sqrt>:
 800cef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	ec55 4b10 	vmov	r4, r5, d0
 800cf00:	4e67      	ldr	r6, [pc, #412]	; (800d0a0 <__ieee754_sqrt+0x1a8>)
 800cf02:	43ae      	bics	r6, r5
 800cf04:	ee10 0a10 	vmov	r0, s0
 800cf08:	ee10 2a10 	vmov	r2, s0
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	462b      	mov	r3, r5
 800cf10:	d10d      	bne.n	800cf2e <__ieee754_sqrt+0x36>
 800cf12:	f7f3 fb41 	bl	8000598 <__aeabi_dmul>
 800cf16:	4602      	mov	r2, r0
 800cf18:	460b      	mov	r3, r1
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	4629      	mov	r1, r5
 800cf1e:	f7f3 f985 	bl	800022c <__adddf3>
 800cf22:	4604      	mov	r4, r0
 800cf24:	460d      	mov	r5, r1
 800cf26:	ec45 4b10 	vmov	d0, r4, r5
 800cf2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	2d00      	cmp	r5, #0
 800cf30:	dc0b      	bgt.n	800cf4a <__ieee754_sqrt+0x52>
 800cf32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cf36:	4326      	orrs	r6, r4
 800cf38:	d0f5      	beq.n	800cf26 <__ieee754_sqrt+0x2e>
 800cf3a:	b135      	cbz	r5, 800cf4a <__ieee754_sqrt+0x52>
 800cf3c:	f7f3 f974 	bl	8000228 <__aeabi_dsub>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	f7f3 fc52 	bl	80007ec <__aeabi_ddiv>
 800cf48:	e7eb      	b.n	800cf22 <__ieee754_sqrt+0x2a>
 800cf4a:	1509      	asrs	r1, r1, #20
 800cf4c:	f000 808d 	beq.w	800d06a <__ieee754_sqrt+0x172>
 800cf50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf54:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cf58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf5c:	07c9      	lsls	r1, r1, #31
 800cf5e:	bf5c      	itt	pl
 800cf60:	005b      	lslpl	r3, r3, #1
 800cf62:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cf66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf6a:	bf58      	it	pl
 800cf6c:	0052      	lslpl	r2, r2, #1
 800cf6e:	2500      	movs	r5, #0
 800cf70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf74:	1076      	asrs	r6, r6, #1
 800cf76:	0052      	lsls	r2, r2, #1
 800cf78:	f04f 0e16 	mov.w	lr, #22
 800cf7c:	46ac      	mov	ip, r5
 800cf7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cf82:	eb0c 0001 	add.w	r0, ip, r1
 800cf86:	4298      	cmp	r0, r3
 800cf88:	bfde      	ittt	le
 800cf8a:	1a1b      	suble	r3, r3, r0
 800cf8c:	eb00 0c01 	addle.w	ip, r0, r1
 800cf90:	186d      	addle	r5, r5, r1
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	f1be 0e01 	subs.w	lr, lr, #1
 800cf98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cf9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfa0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cfa4:	d1ed      	bne.n	800cf82 <__ieee754_sqrt+0x8a>
 800cfa6:	4674      	mov	r4, lr
 800cfa8:	2720      	movs	r7, #32
 800cfaa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cfae:	4563      	cmp	r3, ip
 800cfb0:	eb01 000e 	add.w	r0, r1, lr
 800cfb4:	dc02      	bgt.n	800cfbc <__ieee754_sqrt+0xc4>
 800cfb6:	d113      	bne.n	800cfe0 <__ieee754_sqrt+0xe8>
 800cfb8:	4290      	cmp	r0, r2
 800cfba:	d811      	bhi.n	800cfe0 <__ieee754_sqrt+0xe8>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	eb00 0e01 	add.w	lr, r0, r1
 800cfc2:	da57      	bge.n	800d074 <__ieee754_sqrt+0x17c>
 800cfc4:	f1be 0f00 	cmp.w	lr, #0
 800cfc8:	db54      	blt.n	800d074 <__ieee754_sqrt+0x17c>
 800cfca:	f10c 0801 	add.w	r8, ip, #1
 800cfce:	eba3 030c 	sub.w	r3, r3, ip
 800cfd2:	4290      	cmp	r0, r2
 800cfd4:	bf88      	it	hi
 800cfd6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800cfda:	1a12      	subs	r2, r2, r0
 800cfdc:	440c      	add	r4, r1
 800cfde:	46c4      	mov	ip, r8
 800cfe0:	005b      	lsls	r3, r3, #1
 800cfe2:	3f01      	subs	r7, #1
 800cfe4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cfe8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cfec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cff0:	d1dd      	bne.n	800cfae <__ieee754_sqrt+0xb6>
 800cff2:	4313      	orrs	r3, r2
 800cff4:	d01b      	beq.n	800d02e <__ieee754_sqrt+0x136>
 800cff6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d0a4 <__ieee754_sqrt+0x1ac>
 800cffa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d0a8 <__ieee754_sqrt+0x1b0>
 800cffe:	e9da 0100 	ldrd	r0, r1, [sl]
 800d002:	e9db 2300 	ldrd	r2, r3, [fp]
 800d006:	f7f3 f90f 	bl	8000228 <__aeabi_dsub>
 800d00a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d00e:	4602      	mov	r2, r0
 800d010:	460b      	mov	r3, r1
 800d012:	4640      	mov	r0, r8
 800d014:	4649      	mov	r1, r9
 800d016:	f7f3 fd3b 	bl	8000a90 <__aeabi_dcmple>
 800d01a:	b140      	cbz	r0, 800d02e <__ieee754_sqrt+0x136>
 800d01c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800d020:	e9da 0100 	ldrd	r0, r1, [sl]
 800d024:	e9db 2300 	ldrd	r2, r3, [fp]
 800d028:	d126      	bne.n	800d078 <__ieee754_sqrt+0x180>
 800d02a:	3501      	adds	r5, #1
 800d02c:	463c      	mov	r4, r7
 800d02e:	106a      	asrs	r2, r5, #1
 800d030:	0863      	lsrs	r3, r4, #1
 800d032:	07e9      	lsls	r1, r5, #31
 800d034:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d038:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d03c:	bf48      	it	mi
 800d03e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d042:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d046:	461c      	mov	r4, r3
 800d048:	e76d      	b.n	800cf26 <__ieee754_sqrt+0x2e>
 800d04a:	0ad3      	lsrs	r3, r2, #11
 800d04c:	3815      	subs	r0, #21
 800d04e:	0552      	lsls	r2, r2, #21
 800d050:	2b00      	cmp	r3, #0
 800d052:	d0fa      	beq.n	800d04a <__ieee754_sqrt+0x152>
 800d054:	02dc      	lsls	r4, r3, #11
 800d056:	d50a      	bpl.n	800d06e <__ieee754_sqrt+0x176>
 800d058:	f1c1 0420 	rsb	r4, r1, #32
 800d05c:	fa22 f404 	lsr.w	r4, r2, r4
 800d060:	1e4d      	subs	r5, r1, #1
 800d062:	408a      	lsls	r2, r1
 800d064:	4323      	orrs	r3, r4
 800d066:	1b41      	subs	r1, r0, r5
 800d068:	e772      	b.n	800cf50 <__ieee754_sqrt+0x58>
 800d06a:	4608      	mov	r0, r1
 800d06c:	e7f0      	b.n	800d050 <__ieee754_sqrt+0x158>
 800d06e:	005b      	lsls	r3, r3, #1
 800d070:	3101      	adds	r1, #1
 800d072:	e7ef      	b.n	800d054 <__ieee754_sqrt+0x15c>
 800d074:	46e0      	mov	r8, ip
 800d076:	e7aa      	b.n	800cfce <__ieee754_sqrt+0xd6>
 800d078:	f7f3 f8d8 	bl	800022c <__adddf3>
 800d07c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4640      	mov	r0, r8
 800d086:	4649      	mov	r1, r9
 800d088:	f7f3 fcf8 	bl	8000a7c <__aeabi_dcmplt>
 800d08c:	b120      	cbz	r0, 800d098 <__ieee754_sqrt+0x1a0>
 800d08e:	1ca0      	adds	r0, r4, #2
 800d090:	bf08      	it	eq
 800d092:	3501      	addeq	r5, #1
 800d094:	3402      	adds	r4, #2
 800d096:	e7ca      	b.n	800d02e <__ieee754_sqrt+0x136>
 800d098:	3401      	adds	r4, #1
 800d09a:	f024 0401 	bic.w	r4, r4, #1
 800d09e:	e7c6      	b.n	800d02e <__ieee754_sqrt+0x136>
 800d0a0:	7ff00000 	.word	0x7ff00000
 800d0a4:	20000040 	.word	0x20000040
 800d0a8:	20000048 	.word	0x20000048
 800d0ac:	00000000 	.word	0x00000000

0800d0b0 <__ieee754_rem_pio2>:
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	ed2d 8b02 	vpush	{d8}
 800d0b8:	ec55 4b10 	vmov	r4, r5, d0
 800d0bc:	4bca      	ldr	r3, [pc, #808]	; (800d3e8 <__ieee754_rem_pio2+0x338>)
 800d0be:	b08b      	sub	sp, #44	; 0x2c
 800d0c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d0c4:	4598      	cmp	r8, r3
 800d0c6:	4682      	mov	sl, r0
 800d0c8:	9502      	str	r5, [sp, #8]
 800d0ca:	dc08      	bgt.n	800d0de <__ieee754_rem_pio2+0x2e>
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	ed80 0b00 	vstr	d0, [r0]
 800d0d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d0d8:	f04f 0b00 	mov.w	fp, #0
 800d0dc:	e028      	b.n	800d130 <__ieee754_rem_pio2+0x80>
 800d0de:	4bc3      	ldr	r3, [pc, #780]	; (800d3ec <__ieee754_rem_pio2+0x33c>)
 800d0e0:	4598      	cmp	r8, r3
 800d0e2:	dc78      	bgt.n	800d1d6 <__ieee754_rem_pio2+0x126>
 800d0e4:	9b02      	ldr	r3, [sp, #8]
 800d0e6:	4ec2      	ldr	r6, [pc, #776]	; (800d3f0 <__ieee754_rem_pio2+0x340>)
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	ee10 0a10 	vmov	r0, s0
 800d0ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x300>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	dd39      	ble.n	800d16c <__ieee754_rem_pio2+0xbc>
 800d0f8:	f7f3 f896 	bl	8000228 <__aeabi_dsub>
 800d0fc:	45b0      	cmp	r8, r6
 800d0fe:	4604      	mov	r4, r0
 800d100:	460d      	mov	r5, r1
 800d102:	d01b      	beq.n	800d13c <__ieee754_rem_pio2+0x8c>
 800d104:	a3ac      	add	r3, pc, #688	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x308>)
 800d106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10a:	f7f3 f88d 	bl	8000228 <__aeabi_dsub>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	e9ca 2300 	strd	r2, r3, [sl]
 800d116:	4620      	mov	r0, r4
 800d118:	4629      	mov	r1, r5
 800d11a:	f7f3 f885 	bl	8000228 <__aeabi_dsub>
 800d11e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x308>)
 800d120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d124:	f7f3 f880 	bl	8000228 <__aeabi_dsub>
 800d128:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d12c:	f04f 0b01 	mov.w	fp, #1
 800d130:	4658      	mov	r0, fp
 800d132:	b00b      	add	sp, #44	; 0x2c
 800d134:	ecbd 8b02 	vpop	{d8}
 800d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13c:	a3a0      	add	r3, pc, #640	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x310>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 f871 	bl	8000228 <__aeabi_dsub>
 800d146:	a3a0      	add	r3, pc, #640	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x318>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	4604      	mov	r4, r0
 800d14e:	460d      	mov	r5, r1
 800d150:	f7f3 f86a 	bl	8000228 <__aeabi_dsub>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	e9ca 2300 	strd	r2, r3, [sl]
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 f862 	bl	8000228 <__aeabi_dsub>
 800d164:	a398      	add	r3, pc, #608	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x318>)
 800d166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16a:	e7db      	b.n	800d124 <__ieee754_rem_pio2+0x74>
 800d16c:	f7f3 f85e 	bl	800022c <__adddf3>
 800d170:	45b0      	cmp	r8, r6
 800d172:	4604      	mov	r4, r0
 800d174:	460d      	mov	r5, r1
 800d176:	d016      	beq.n	800d1a6 <__ieee754_rem_pio2+0xf6>
 800d178:	a38f      	add	r3, pc, #572	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x308>)
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	f7f3 f855 	bl	800022c <__adddf3>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	e9ca 2300 	strd	r2, r3, [sl]
 800d18a:	4620      	mov	r0, r4
 800d18c:	4629      	mov	r1, r5
 800d18e:	f7f3 f84b 	bl	8000228 <__aeabi_dsub>
 800d192:	a389      	add	r3, pc, #548	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x308>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f3 f848 	bl	800022c <__adddf3>
 800d19c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d1a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1a4:	e7c4      	b.n	800d130 <__ieee754_rem_pio2+0x80>
 800d1a6:	a386      	add	r3, pc, #536	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x310>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	f7f3 f83e 	bl	800022c <__adddf3>
 800d1b0:	a385      	add	r3, pc, #532	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x318>)
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	460d      	mov	r5, r1
 800d1ba:	f7f3 f837 	bl	800022c <__adddf3>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	e9ca 2300 	strd	r2, r3, [sl]
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	f7f3 f82d 	bl	8000228 <__aeabi_dsub>
 800d1ce:	a37e      	add	r3, pc, #504	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x318>)
 800d1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d4:	e7e0      	b.n	800d198 <__ieee754_rem_pio2+0xe8>
 800d1d6:	4b87      	ldr	r3, [pc, #540]	; (800d3f4 <__ieee754_rem_pio2+0x344>)
 800d1d8:	4598      	cmp	r8, r3
 800d1da:	f300 80d8 	bgt.w	800d38e <__ieee754_rem_pio2+0x2de>
 800d1de:	f7ff fe27 	bl	800ce30 <fabs>
 800d1e2:	ec55 4b10 	vmov	r4, r5, d0
 800d1e6:	ee10 0a10 	vmov	r0, s0
 800d1ea:	a379      	add	r3, pc, #484	; (adr r3, 800d3d0 <__ieee754_rem_pio2+0x320>)
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	f7f3 f9d1 	bl	8000598 <__aeabi_dmul>
 800d1f6:	4b80      	ldr	r3, [pc, #512]	; (800d3f8 <__ieee754_rem_pio2+0x348>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f7f3 f817 	bl	800022c <__adddf3>
 800d1fe:	f7f3 fc7b 	bl	8000af8 <__aeabi_d2iz>
 800d202:	4683      	mov	fp, r0
 800d204:	f7f3 f95e 	bl	80004c4 <__aeabi_i2d>
 800d208:	4602      	mov	r2, r0
 800d20a:	460b      	mov	r3, r1
 800d20c:	ec43 2b18 	vmov	d8, r2, r3
 800d210:	a367      	add	r3, pc, #412	; (adr r3, 800d3b0 <__ieee754_rem_pio2+0x300>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	f7f3 f9bf 	bl	8000598 <__aeabi_dmul>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4620      	mov	r0, r4
 800d220:	4629      	mov	r1, r5
 800d222:	f7f3 f801 	bl	8000228 <__aeabi_dsub>
 800d226:	a364      	add	r3, pc, #400	; (adr r3, 800d3b8 <__ieee754_rem_pio2+0x308>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	4606      	mov	r6, r0
 800d22e:	460f      	mov	r7, r1
 800d230:	ec51 0b18 	vmov	r0, r1, d8
 800d234:	f7f3 f9b0 	bl	8000598 <__aeabi_dmul>
 800d238:	f1bb 0f1f 	cmp.w	fp, #31
 800d23c:	4604      	mov	r4, r0
 800d23e:	460d      	mov	r5, r1
 800d240:	dc0d      	bgt.n	800d25e <__ieee754_rem_pio2+0x1ae>
 800d242:	4b6e      	ldr	r3, [pc, #440]	; (800d3fc <__ieee754_rem_pio2+0x34c>)
 800d244:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d24c:	4543      	cmp	r3, r8
 800d24e:	d006      	beq.n	800d25e <__ieee754_rem_pio2+0x1ae>
 800d250:	4622      	mov	r2, r4
 800d252:	462b      	mov	r3, r5
 800d254:	4630      	mov	r0, r6
 800d256:	4639      	mov	r1, r7
 800d258:	f7f2 ffe6 	bl	8000228 <__aeabi_dsub>
 800d25c:	e00e      	b.n	800d27c <__ieee754_rem_pio2+0x1cc>
 800d25e:	462b      	mov	r3, r5
 800d260:	4622      	mov	r2, r4
 800d262:	4630      	mov	r0, r6
 800d264:	4639      	mov	r1, r7
 800d266:	f7f2 ffdf 	bl	8000228 <__aeabi_dsub>
 800d26a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d274:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d278:	2b10      	cmp	r3, #16
 800d27a:	dc02      	bgt.n	800d282 <__ieee754_rem_pio2+0x1d2>
 800d27c:	e9ca 0100 	strd	r0, r1, [sl]
 800d280:	e039      	b.n	800d2f6 <__ieee754_rem_pio2+0x246>
 800d282:	a34f      	add	r3, pc, #316	; (adr r3, 800d3c0 <__ieee754_rem_pio2+0x310>)
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	ec51 0b18 	vmov	r0, r1, d8
 800d28c:	f7f3 f984 	bl	8000598 <__aeabi_dmul>
 800d290:	4604      	mov	r4, r0
 800d292:	460d      	mov	r5, r1
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f2 ffc4 	bl	8000228 <__aeabi_dsub>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	4689      	mov	r9, r1
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	4639      	mov	r1, r7
 800d2ac:	f7f2 ffbc 	bl	8000228 <__aeabi_dsub>
 800d2b0:	4622      	mov	r2, r4
 800d2b2:	462b      	mov	r3, r5
 800d2b4:	f7f2 ffb8 	bl	8000228 <__aeabi_dsub>
 800d2b8:	a343      	add	r3, pc, #268	; (adr r3, 800d3c8 <__ieee754_rem_pio2+0x318>)
 800d2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2be:	4604      	mov	r4, r0
 800d2c0:	460d      	mov	r5, r1
 800d2c2:	ec51 0b18 	vmov	r0, r1, d8
 800d2c6:	f7f3 f967 	bl	8000598 <__aeabi_dmul>
 800d2ca:	4622      	mov	r2, r4
 800d2cc:	462b      	mov	r3, r5
 800d2ce:	f7f2 ffab 	bl	8000228 <__aeabi_dsub>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	460d      	mov	r5, r1
 800d2da:	4640      	mov	r0, r8
 800d2dc:	4649      	mov	r1, r9
 800d2de:	f7f2 ffa3 	bl	8000228 <__aeabi_dsub>
 800d2e2:	9a03      	ldr	r2, [sp, #12]
 800d2e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b31      	cmp	r3, #49	; 0x31
 800d2ec:	dc24      	bgt.n	800d338 <__ieee754_rem_pio2+0x288>
 800d2ee:	e9ca 0100 	strd	r0, r1, [sl]
 800d2f2:	4646      	mov	r6, r8
 800d2f4:	464f      	mov	r7, r9
 800d2f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	4642      	mov	r2, r8
 800d2fe:	464b      	mov	r3, r9
 800d300:	4639      	mov	r1, r7
 800d302:	f7f2 ff91 	bl	8000228 <__aeabi_dsub>
 800d306:	462b      	mov	r3, r5
 800d308:	4622      	mov	r2, r4
 800d30a:	f7f2 ff8d 	bl	8000228 <__aeabi_dsub>
 800d30e:	9b02      	ldr	r3, [sp, #8]
 800d310:	2b00      	cmp	r3, #0
 800d312:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d316:	f6bf af0b 	bge.w	800d130 <__ieee754_rem_pio2+0x80>
 800d31a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d31e:	f8ca 3004 	str.w	r3, [sl, #4]
 800d322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d326:	f8ca 8000 	str.w	r8, [sl]
 800d32a:	f8ca 0008 	str.w	r0, [sl, #8]
 800d32e:	f8ca 300c 	str.w	r3, [sl, #12]
 800d332:	f1cb 0b00 	rsb	fp, fp, #0
 800d336:	e6fb      	b.n	800d130 <__ieee754_rem_pio2+0x80>
 800d338:	a327      	add	r3, pc, #156	; (adr r3, 800d3d8 <__ieee754_rem_pio2+0x328>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	ec51 0b18 	vmov	r0, r1, d8
 800d342:	f7f3 f929 	bl	8000598 <__aeabi_dmul>
 800d346:	4604      	mov	r4, r0
 800d348:	460d      	mov	r5, r1
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4640      	mov	r0, r8
 800d350:	4649      	mov	r1, r9
 800d352:	f7f2 ff69 	bl	8000228 <__aeabi_dsub>
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	4606      	mov	r6, r0
 800d35c:	460f      	mov	r7, r1
 800d35e:	4640      	mov	r0, r8
 800d360:	4649      	mov	r1, r9
 800d362:	f7f2 ff61 	bl	8000228 <__aeabi_dsub>
 800d366:	4622      	mov	r2, r4
 800d368:	462b      	mov	r3, r5
 800d36a:	f7f2 ff5d 	bl	8000228 <__aeabi_dsub>
 800d36e:	a31c      	add	r3, pc, #112	; (adr r3, 800d3e0 <__ieee754_rem_pio2+0x330>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	4604      	mov	r4, r0
 800d376:	460d      	mov	r5, r1
 800d378:	ec51 0b18 	vmov	r0, r1, d8
 800d37c:	f7f3 f90c 	bl	8000598 <__aeabi_dmul>
 800d380:	4622      	mov	r2, r4
 800d382:	462b      	mov	r3, r5
 800d384:	f7f2 ff50 	bl	8000228 <__aeabi_dsub>
 800d388:	4604      	mov	r4, r0
 800d38a:	460d      	mov	r5, r1
 800d38c:	e760      	b.n	800d250 <__ieee754_rem_pio2+0x1a0>
 800d38e:	4b1c      	ldr	r3, [pc, #112]	; (800d400 <__ieee754_rem_pio2+0x350>)
 800d390:	4598      	cmp	r8, r3
 800d392:	dd37      	ble.n	800d404 <__ieee754_rem_pio2+0x354>
 800d394:	ee10 2a10 	vmov	r2, s0
 800d398:	462b      	mov	r3, r5
 800d39a:	4620      	mov	r0, r4
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7f2 ff43 	bl	8000228 <__aeabi_dsub>
 800d3a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3a6:	e9ca 0100 	strd	r0, r1, [sl]
 800d3aa:	e695      	b.n	800d0d8 <__ieee754_rem_pio2+0x28>
 800d3ac:	f3af 8000 	nop.w
 800d3b0:	54400000 	.word	0x54400000
 800d3b4:	3ff921fb 	.word	0x3ff921fb
 800d3b8:	1a626331 	.word	0x1a626331
 800d3bc:	3dd0b461 	.word	0x3dd0b461
 800d3c0:	1a600000 	.word	0x1a600000
 800d3c4:	3dd0b461 	.word	0x3dd0b461
 800d3c8:	2e037073 	.word	0x2e037073
 800d3cc:	3ba3198a 	.word	0x3ba3198a
 800d3d0:	6dc9c883 	.word	0x6dc9c883
 800d3d4:	3fe45f30 	.word	0x3fe45f30
 800d3d8:	2e000000 	.word	0x2e000000
 800d3dc:	3ba3198a 	.word	0x3ba3198a
 800d3e0:	252049c1 	.word	0x252049c1
 800d3e4:	397b839a 	.word	0x397b839a
 800d3e8:	3fe921fb 	.word	0x3fe921fb
 800d3ec:	4002d97b 	.word	0x4002d97b
 800d3f0:	3ff921fb 	.word	0x3ff921fb
 800d3f4:	413921fb 	.word	0x413921fb
 800d3f8:	3fe00000 	.word	0x3fe00000
 800d3fc:	0800e728 	.word	0x0800e728
 800d400:	7fefffff 	.word	0x7fefffff
 800d404:	ea4f 5628 	mov.w	r6, r8, asr #20
 800d408:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800d40c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800d410:	4620      	mov	r0, r4
 800d412:	460d      	mov	r5, r1
 800d414:	f7f3 fb70 	bl	8000af8 <__aeabi_d2iz>
 800d418:	f7f3 f854 	bl	80004c4 <__aeabi_i2d>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4620      	mov	r0, r4
 800d422:	4629      	mov	r1, r5
 800d424:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d428:	f7f2 fefe 	bl	8000228 <__aeabi_dsub>
 800d42c:	4b21      	ldr	r3, [pc, #132]	; (800d4b4 <__ieee754_rem_pio2+0x404>)
 800d42e:	2200      	movs	r2, #0
 800d430:	f7f3 f8b2 	bl	8000598 <__aeabi_dmul>
 800d434:	460d      	mov	r5, r1
 800d436:	4604      	mov	r4, r0
 800d438:	f7f3 fb5e 	bl	8000af8 <__aeabi_d2iz>
 800d43c:	f7f3 f842 	bl	80004c4 <__aeabi_i2d>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	4620      	mov	r0, r4
 800d446:	4629      	mov	r1, r5
 800d448:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d44c:	f7f2 feec 	bl	8000228 <__aeabi_dsub>
 800d450:	4b18      	ldr	r3, [pc, #96]	; (800d4b4 <__ieee754_rem_pio2+0x404>)
 800d452:	2200      	movs	r2, #0
 800d454:	f7f3 f8a0 	bl	8000598 <__aeabi_dmul>
 800d458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d45c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d460:	2703      	movs	r7, #3
 800d462:	2400      	movs	r4, #0
 800d464:	2500      	movs	r5, #0
 800d466:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800d46a:	4622      	mov	r2, r4
 800d46c:	462b      	mov	r3, r5
 800d46e:	46b9      	mov	r9, r7
 800d470:	3f01      	subs	r7, #1
 800d472:	f7f3 faf9 	bl	8000a68 <__aeabi_dcmpeq>
 800d476:	2800      	cmp	r0, #0
 800d478:	d1f5      	bne.n	800d466 <__ieee754_rem_pio2+0x3b6>
 800d47a:	4b0f      	ldr	r3, [pc, #60]	; (800d4b8 <__ieee754_rem_pio2+0x408>)
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	2302      	movs	r3, #2
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	4632      	mov	r2, r6
 800d484:	464b      	mov	r3, r9
 800d486:	4651      	mov	r1, sl
 800d488:	a804      	add	r0, sp, #16
 800d48a:	f000 f819 	bl	800d4c0 <__kernel_rem_pio2>
 800d48e:	9b02      	ldr	r3, [sp, #8]
 800d490:	2b00      	cmp	r3, #0
 800d492:	4683      	mov	fp, r0
 800d494:	f6bf ae4c 	bge.w	800d130 <__ieee754_rem_pio2+0x80>
 800d498:	e9da 2100 	ldrd	r2, r1, [sl]
 800d49c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a0:	e9ca 2300 	strd	r2, r3, [sl]
 800d4a4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d4a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4ac:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d4b0:	e73f      	b.n	800d332 <__ieee754_rem_pio2+0x282>
 800d4b2:	bf00      	nop
 800d4b4:	41700000 	.word	0x41700000
 800d4b8:	0800e7a8 	.word	0x0800e7a8
 800d4bc:	00000000 	.word	0x00000000

0800d4c0 <__kernel_rem_pio2>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	ed2d 8b02 	vpush	{d8}
 800d4c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d4cc:	f112 0f14 	cmn.w	r2, #20
 800d4d0:	9306      	str	r3, [sp, #24]
 800d4d2:	9104      	str	r1, [sp, #16]
 800d4d4:	4bc2      	ldr	r3, [pc, #776]	; (800d7e0 <__kernel_rem_pio2+0x320>)
 800d4d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d4d8:	9009      	str	r0, [sp, #36]	; 0x24
 800d4da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	9b06      	ldr	r3, [sp, #24]
 800d4e2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d4e6:	bfa8      	it	ge
 800d4e8:	1ed4      	subge	r4, r2, #3
 800d4ea:	9305      	str	r3, [sp, #20]
 800d4ec:	bfb2      	itee	lt
 800d4ee:	2400      	movlt	r4, #0
 800d4f0:	2318      	movge	r3, #24
 800d4f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800d4f6:	f06f 0317 	mvn.w	r3, #23
 800d4fa:	fb04 3303 	mla	r3, r4, r3, r3
 800d4fe:	eb03 0a02 	add.w	sl, r3, r2
 800d502:	9b00      	ldr	r3, [sp, #0]
 800d504:	9a05      	ldr	r2, [sp, #20]
 800d506:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800d7d0 <__kernel_rem_pio2+0x310>
 800d50a:	eb03 0802 	add.w	r8, r3, r2
 800d50e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d510:	1aa7      	subs	r7, r4, r2
 800d512:	ae20      	add	r6, sp, #128	; 0x80
 800d514:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d518:	2500      	movs	r5, #0
 800d51a:	4545      	cmp	r5, r8
 800d51c:	dd13      	ble.n	800d546 <__kernel_rem_pio2+0x86>
 800d51e:	9b06      	ldr	r3, [sp, #24]
 800d520:	aa20      	add	r2, sp, #128	; 0x80
 800d522:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d526:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d52a:	f04f 0800 	mov.w	r8, #0
 800d52e:	9b00      	ldr	r3, [sp, #0]
 800d530:	4598      	cmp	r8, r3
 800d532:	dc31      	bgt.n	800d598 <__kernel_rem_pio2+0xd8>
 800d534:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800d7d0 <__kernel_rem_pio2+0x310>
 800d538:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d53c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d540:	462f      	mov	r7, r5
 800d542:	2600      	movs	r6, #0
 800d544:	e01b      	b.n	800d57e <__kernel_rem_pio2+0xbe>
 800d546:	42ef      	cmn	r7, r5
 800d548:	d407      	bmi.n	800d55a <__kernel_rem_pio2+0x9a>
 800d54a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d54e:	f7f2 ffb9 	bl	80004c4 <__aeabi_i2d>
 800d552:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d556:	3501      	adds	r5, #1
 800d558:	e7df      	b.n	800d51a <__kernel_rem_pio2+0x5a>
 800d55a:	ec51 0b18 	vmov	r0, r1, d8
 800d55e:	e7f8      	b.n	800d552 <__kernel_rem_pio2+0x92>
 800d560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d564:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d568:	f7f3 f816 	bl	8000598 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d574:	f7f2 fe5a 	bl	800022c <__adddf3>
 800d578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d57c:	3601      	adds	r6, #1
 800d57e:	9b05      	ldr	r3, [sp, #20]
 800d580:	429e      	cmp	r6, r3
 800d582:	f1a7 0708 	sub.w	r7, r7, #8
 800d586:	ddeb      	ble.n	800d560 <__kernel_rem_pio2+0xa0>
 800d588:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d58c:	f108 0801 	add.w	r8, r8, #1
 800d590:	ecab 7b02 	vstmia	fp!, {d7}
 800d594:	3508      	adds	r5, #8
 800d596:	e7ca      	b.n	800d52e <__kernel_rem_pio2+0x6e>
 800d598:	9b00      	ldr	r3, [sp, #0]
 800d59a:	aa0c      	add	r2, sp, #48	; 0x30
 800d59c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d5a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d5a8:	9c00      	ldr	r4, [sp, #0]
 800d5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d5ac:	00e3      	lsls	r3, r4, #3
 800d5ae:	9308      	str	r3, [sp, #32]
 800d5b0:	ab98      	add	r3, sp, #608	; 0x260
 800d5b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d5ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800d5be:	ab70      	add	r3, sp, #448	; 0x1c0
 800d5c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d5c4:	46c3      	mov	fp, r8
 800d5c6:	46a1      	mov	r9, r4
 800d5c8:	f1b9 0f00 	cmp.w	r9, #0
 800d5cc:	f1a5 0508 	sub.w	r5, r5, #8
 800d5d0:	dc77      	bgt.n	800d6c2 <__kernel_rem_pio2+0x202>
 800d5d2:	ec47 6b10 	vmov	d0, r6, r7
 800d5d6:	4650      	mov	r0, sl
 800d5d8:	f000 fc4a 	bl	800de70 <scalbn>
 800d5dc:	ec57 6b10 	vmov	r6, r7, d0
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d5e6:	ee10 0a10 	vmov	r0, s0
 800d5ea:	4639      	mov	r1, r7
 800d5ec:	f7f2 ffd4 	bl	8000598 <__aeabi_dmul>
 800d5f0:	ec41 0b10 	vmov	d0, r0, r1
 800d5f4:	f000 fcbc 	bl	800df70 <floor>
 800d5f8:	4b7a      	ldr	r3, [pc, #488]	; (800d7e4 <__kernel_rem_pio2+0x324>)
 800d5fa:	ec51 0b10 	vmov	r0, r1, d0
 800d5fe:	2200      	movs	r2, #0
 800d600:	f7f2 ffca 	bl	8000598 <__aeabi_dmul>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	4630      	mov	r0, r6
 800d60a:	4639      	mov	r1, r7
 800d60c:	f7f2 fe0c 	bl	8000228 <__aeabi_dsub>
 800d610:	460f      	mov	r7, r1
 800d612:	4606      	mov	r6, r0
 800d614:	f7f3 fa70 	bl	8000af8 <__aeabi_d2iz>
 800d618:	9002      	str	r0, [sp, #8]
 800d61a:	f7f2 ff53 	bl	80004c4 <__aeabi_i2d>
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4630      	mov	r0, r6
 800d624:	4639      	mov	r1, r7
 800d626:	f7f2 fdff 	bl	8000228 <__aeabi_dsub>
 800d62a:	f1ba 0f00 	cmp.w	sl, #0
 800d62e:	4606      	mov	r6, r0
 800d630:	460f      	mov	r7, r1
 800d632:	dd6d      	ble.n	800d710 <__kernel_rem_pio2+0x250>
 800d634:	1e61      	subs	r1, r4, #1
 800d636:	ab0c      	add	r3, sp, #48	; 0x30
 800d638:	9d02      	ldr	r5, [sp, #8]
 800d63a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d63e:	f1ca 0018 	rsb	r0, sl, #24
 800d642:	fa43 f200 	asr.w	r2, r3, r0
 800d646:	4415      	add	r5, r2
 800d648:	4082      	lsls	r2, r0
 800d64a:	1a9b      	subs	r3, r3, r2
 800d64c:	aa0c      	add	r2, sp, #48	; 0x30
 800d64e:	9502      	str	r5, [sp, #8]
 800d650:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d654:	f1ca 0217 	rsb	r2, sl, #23
 800d658:	fa43 fb02 	asr.w	fp, r3, r2
 800d65c:	f1bb 0f00 	cmp.w	fp, #0
 800d660:	dd65      	ble.n	800d72e <__kernel_rem_pio2+0x26e>
 800d662:	9b02      	ldr	r3, [sp, #8]
 800d664:	2200      	movs	r2, #0
 800d666:	3301      	adds	r3, #1
 800d668:	9302      	str	r3, [sp, #8]
 800d66a:	4615      	mov	r5, r2
 800d66c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d670:	4294      	cmp	r4, r2
 800d672:	f300 809f 	bgt.w	800d7b4 <__kernel_rem_pio2+0x2f4>
 800d676:	f1ba 0f00 	cmp.w	sl, #0
 800d67a:	dd07      	ble.n	800d68c <__kernel_rem_pio2+0x1cc>
 800d67c:	f1ba 0f01 	cmp.w	sl, #1
 800d680:	f000 80c1 	beq.w	800d806 <__kernel_rem_pio2+0x346>
 800d684:	f1ba 0f02 	cmp.w	sl, #2
 800d688:	f000 80c7 	beq.w	800d81a <__kernel_rem_pio2+0x35a>
 800d68c:	f1bb 0f02 	cmp.w	fp, #2
 800d690:	d14d      	bne.n	800d72e <__kernel_rem_pio2+0x26e>
 800d692:	4632      	mov	r2, r6
 800d694:	463b      	mov	r3, r7
 800d696:	4954      	ldr	r1, [pc, #336]	; (800d7e8 <__kernel_rem_pio2+0x328>)
 800d698:	2000      	movs	r0, #0
 800d69a:	f7f2 fdc5 	bl	8000228 <__aeabi_dsub>
 800d69e:	4606      	mov	r6, r0
 800d6a0:	460f      	mov	r7, r1
 800d6a2:	2d00      	cmp	r5, #0
 800d6a4:	d043      	beq.n	800d72e <__kernel_rem_pio2+0x26e>
 800d6a6:	4650      	mov	r0, sl
 800d6a8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800d7d8 <__kernel_rem_pio2+0x318>
 800d6ac:	f000 fbe0 	bl	800de70 <scalbn>
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	ec53 2b10 	vmov	r2, r3, d0
 800d6b8:	f7f2 fdb6 	bl	8000228 <__aeabi_dsub>
 800d6bc:	4606      	mov	r6, r0
 800d6be:	460f      	mov	r7, r1
 800d6c0:	e035      	b.n	800d72e <__kernel_rem_pio2+0x26e>
 800d6c2:	4b4a      	ldr	r3, [pc, #296]	; (800d7ec <__kernel_rem_pio2+0x32c>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	4639      	mov	r1, r7
 800d6ca:	f7f2 ff65 	bl	8000598 <__aeabi_dmul>
 800d6ce:	f7f3 fa13 	bl	8000af8 <__aeabi_d2iz>
 800d6d2:	f7f2 fef7 	bl	80004c4 <__aeabi_i2d>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	460b      	mov	r3, r1
 800d6da:	ec43 2b18 	vmov	d8, r2, r3
 800d6de:	4b44      	ldr	r3, [pc, #272]	; (800d7f0 <__kernel_rem_pio2+0x330>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f7f2 ff59 	bl	8000598 <__aeabi_dmul>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	f7f2 fd9b 	bl	8000228 <__aeabi_dsub>
 800d6f2:	f7f3 fa01 	bl	8000af8 <__aeabi_d2iz>
 800d6f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6fa:	f84b 0b04 	str.w	r0, [fp], #4
 800d6fe:	ec51 0b18 	vmov	r0, r1, d8
 800d702:	f7f2 fd93 	bl	800022c <__adddf3>
 800d706:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	e75b      	b.n	800d5c8 <__kernel_rem_pio2+0x108>
 800d710:	d106      	bne.n	800d720 <__kernel_rem_pio2+0x260>
 800d712:	1e63      	subs	r3, r4, #1
 800d714:	aa0c      	add	r2, sp, #48	; 0x30
 800d716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d71a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800d71e:	e79d      	b.n	800d65c <__kernel_rem_pio2+0x19c>
 800d720:	4b34      	ldr	r3, [pc, #208]	; (800d7f4 <__kernel_rem_pio2+0x334>)
 800d722:	2200      	movs	r2, #0
 800d724:	f7f3 f9be 	bl	8000aa4 <__aeabi_dcmpge>
 800d728:	2800      	cmp	r0, #0
 800d72a:	d140      	bne.n	800d7ae <__kernel_rem_pio2+0x2ee>
 800d72c:	4683      	mov	fp, r0
 800d72e:	2200      	movs	r2, #0
 800d730:	2300      	movs	r3, #0
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f3 f997 	bl	8000a68 <__aeabi_dcmpeq>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	f000 80c1 	beq.w	800d8c2 <__kernel_rem_pio2+0x402>
 800d740:	1e65      	subs	r5, r4, #1
 800d742:	462b      	mov	r3, r5
 800d744:	2200      	movs	r2, #0
 800d746:	9900      	ldr	r1, [sp, #0]
 800d748:	428b      	cmp	r3, r1
 800d74a:	da6d      	bge.n	800d828 <__kernel_rem_pio2+0x368>
 800d74c:	2a00      	cmp	r2, #0
 800d74e:	f000 808a 	beq.w	800d866 <__kernel_rem_pio2+0x3a6>
 800d752:	ab0c      	add	r3, sp, #48	; 0x30
 800d754:	f1aa 0a18 	sub.w	sl, sl, #24
 800d758:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 80ae 	beq.w	800d8be <__kernel_rem_pio2+0x3fe>
 800d762:	4650      	mov	r0, sl
 800d764:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800d7d8 <__kernel_rem_pio2+0x318>
 800d768:	f000 fb82 	bl	800de70 <scalbn>
 800d76c:	1c6b      	adds	r3, r5, #1
 800d76e:	00da      	lsls	r2, r3, #3
 800d770:	9205      	str	r2, [sp, #20]
 800d772:	ec57 6b10 	vmov	r6, r7, d0
 800d776:	aa70      	add	r2, sp, #448	; 0x1c0
 800d778:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800d7ec <__kernel_rem_pio2+0x32c>
 800d77c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800d780:	462c      	mov	r4, r5
 800d782:	f04f 0800 	mov.w	r8, #0
 800d786:	2c00      	cmp	r4, #0
 800d788:	f280 80d4 	bge.w	800d934 <__kernel_rem_pio2+0x474>
 800d78c:	462c      	mov	r4, r5
 800d78e:	2c00      	cmp	r4, #0
 800d790:	f2c0 8102 	blt.w	800d998 <__kernel_rem_pio2+0x4d8>
 800d794:	4b18      	ldr	r3, [pc, #96]	; (800d7f8 <__kernel_rem_pio2+0x338>)
 800d796:	461e      	mov	r6, r3
 800d798:	ab70      	add	r3, sp, #448	; 0x1c0
 800d79a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800d79e:	1b2b      	subs	r3, r5, r4
 800d7a0:	f04f 0900 	mov.w	r9, #0
 800d7a4:	f04f 0a00 	mov.w	sl, #0
 800d7a8:	2700      	movs	r7, #0
 800d7aa:	9306      	str	r3, [sp, #24]
 800d7ac:	e0e6      	b.n	800d97c <__kernel_rem_pio2+0x4bc>
 800d7ae:	f04f 0b02 	mov.w	fp, #2
 800d7b2:	e756      	b.n	800d662 <__kernel_rem_pio2+0x1a2>
 800d7b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d7b8:	bb05      	cbnz	r5, 800d7fc <__kernel_rem_pio2+0x33c>
 800d7ba:	b123      	cbz	r3, 800d7c6 <__kernel_rem_pio2+0x306>
 800d7bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d7c0:	f8c8 3000 	str.w	r3, [r8]
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	3201      	adds	r2, #1
 800d7c8:	f108 0804 	add.w	r8, r8, #4
 800d7cc:	461d      	mov	r5, r3
 800d7ce:	e74f      	b.n	800d670 <__kernel_rem_pio2+0x1b0>
	...
 800d7dc:	3ff00000 	.word	0x3ff00000
 800d7e0:	0800e8f0 	.word	0x0800e8f0
 800d7e4:	40200000 	.word	0x40200000
 800d7e8:	3ff00000 	.word	0x3ff00000
 800d7ec:	3e700000 	.word	0x3e700000
 800d7f0:	41700000 	.word	0x41700000
 800d7f4:	3fe00000 	.word	0x3fe00000
 800d7f8:	0800e8b0 	.word	0x0800e8b0
 800d7fc:	1acb      	subs	r3, r1, r3
 800d7fe:	f8c8 3000 	str.w	r3, [r8]
 800d802:	462b      	mov	r3, r5
 800d804:	e7df      	b.n	800d7c6 <__kernel_rem_pio2+0x306>
 800d806:	1e62      	subs	r2, r4, #1
 800d808:	ab0c      	add	r3, sp, #48	; 0x30
 800d80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d812:	a90c      	add	r1, sp, #48	; 0x30
 800d814:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d818:	e738      	b.n	800d68c <__kernel_rem_pio2+0x1cc>
 800d81a:	1e62      	subs	r2, r4, #1
 800d81c:	ab0c      	add	r3, sp, #48	; 0x30
 800d81e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d822:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d826:	e7f4      	b.n	800d812 <__kernel_rem_pio2+0x352>
 800d828:	a90c      	add	r1, sp, #48	; 0x30
 800d82a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d82e:	3b01      	subs	r3, #1
 800d830:	430a      	orrs	r2, r1
 800d832:	e788      	b.n	800d746 <__kernel_rem_pio2+0x286>
 800d834:	3301      	adds	r3, #1
 800d836:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d83a:	2900      	cmp	r1, #0
 800d83c:	d0fa      	beq.n	800d834 <__kernel_rem_pio2+0x374>
 800d83e:	9a08      	ldr	r2, [sp, #32]
 800d840:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800d844:	446a      	add	r2, sp
 800d846:	3a98      	subs	r2, #152	; 0x98
 800d848:	9208      	str	r2, [sp, #32]
 800d84a:	9a06      	ldr	r2, [sp, #24]
 800d84c:	a920      	add	r1, sp, #128	; 0x80
 800d84e:	18a2      	adds	r2, r4, r2
 800d850:	18e3      	adds	r3, r4, r3
 800d852:	f104 0801 	add.w	r8, r4, #1
 800d856:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d85a:	9302      	str	r3, [sp, #8]
 800d85c:	9b02      	ldr	r3, [sp, #8]
 800d85e:	4543      	cmp	r3, r8
 800d860:	da04      	bge.n	800d86c <__kernel_rem_pio2+0x3ac>
 800d862:	461c      	mov	r4, r3
 800d864:	e6a2      	b.n	800d5ac <__kernel_rem_pio2+0xec>
 800d866:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d868:	2301      	movs	r3, #1
 800d86a:	e7e4      	b.n	800d836 <__kernel_rem_pio2+0x376>
 800d86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d86e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d872:	f7f2 fe27 	bl	80004c4 <__aeabi_i2d>
 800d876:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d87c:	46ab      	mov	fp, r5
 800d87e:	461c      	mov	r4, r3
 800d880:	f04f 0900 	mov.w	r9, #0
 800d884:	2600      	movs	r6, #0
 800d886:	2700      	movs	r7, #0
 800d888:	9b05      	ldr	r3, [sp, #20]
 800d88a:	4599      	cmp	r9, r3
 800d88c:	dd06      	ble.n	800d89c <__kernel_rem_pio2+0x3dc>
 800d88e:	9b08      	ldr	r3, [sp, #32]
 800d890:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d894:	f108 0801 	add.w	r8, r8, #1
 800d898:	9308      	str	r3, [sp, #32]
 800d89a:	e7df      	b.n	800d85c <__kernel_rem_pio2+0x39c>
 800d89c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d8a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d8a4:	f7f2 fe78 	bl	8000598 <__aeabi_dmul>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	4639      	mov	r1, r7
 800d8b0:	f7f2 fcbc 	bl	800022c <__adddf3>
 800d8b4:	f109 0901 	add.w	r9, r9, #1
 800d8b8:	4606      	mov	r6, r0
 800d8ba:	460f      	mov	r7, r1
 800d8bc:	e7e4      	b.n	800d888 <__kernel_rem_pio2+0x3c8>
 800d8be:	3d01      	subs	r5, #1
 800d8c0:	e747      	b.n	800d752 <__kernel_rem_pio2+0x292>
 800d8c2:	ec47 6b10 	vmov	d0, r6, r7
 800d8c6:	f1ca 0000 	rsb	r0, sl, #0
 800d8ca:	f000 fad1 	bl	800de70 <scalbn>
 800d8ce:	ec57 6b10 	vmov	r6, r7, d0
 800d8d2:	4ba0      	ldr	r3, [pc, #640]	; (800db54 <__kernel_rem_pio2+0x694>)
 800d8d4:	ee10 0a10 	vmov	r0, s0
 800d8d8:	2200      	movs	r2, #0
 800d8da:	4639      	mov	r1, r7
 800d8dc:	f7f3 f8e2 	bl	8000aa4 <__aeabi_dcmpge>
 800d8e0:	b1f8      	cbz	r0, 800d922 <__kernel_rem_pio2+0x462>
 800d8e2:	4b9d      	ldr	r3, [pc, #628]	; (800db58 <__kernel_rem_pio2+0x698>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f2 fe55 	bl	8000598 <__aeabi_dmul>
 800d8ee:	f7f3 f903 	bl	8000af8 <__aeabi_d2iz>
 800d8f2:	4680      	mov	r8, r0
 800d8f4:	f7f2 fde6 	bl	80004c4 <__aeabi_i2d>
 800d8f8:	4b96      	ldr	r3, [pc, #600]	; (800db54 <__kernel_rem_pio2+0x694>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f7f2 fe4c 	bl	8000598 <__aeabi_dmul>
 800d900:	460b      	mov	r3, r1
 800d902:	4602      	mov	r2, r0
 800d904:	4639      	mov	r1, r7
 800d906:	4630      	mov	r0, r6
 800d908:	f7f2 fc8e 	bl	8000228 <__aeabi_dsub>
 800d90c:	f7f3 f8f4 	bl	8000af8 <__aeabi_d2iz>
 800d910:	1c65      	adds	r5, r4, #1
 800d912:	ab0c      	add	r3, sp, #48	; 0x30
 800d914:	f10a 0a18 	add.w	sl, sl, #24
 800d918:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d91c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d920:	e71f      	b.n	800d762 <__kernel_rem_pio2+0x2a2>
 800d922:	4630      	mov	r0, r6
 800d924:	4639      	mov	r1, r7
 800d926:	f7f3 f8e7 	bl	8000af8 <__aeabi_d2iz>
 800d92a:	ab0c      	add	r3, sp, #48	; 0x30
 800d92c:	4625      	mov	r5, r4
 800d92e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d932:	e716      	b.n	800d762 <__kernel_rem_pio2+0x2a2>
 800d934:	ab0c      	add	r3, sp, #48	; 0x30
 800d936:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800d93a:	f7f2 fdc3 	bl	80004c4 <__aeabi_i2d>
 800d93e:	4632      	mov	r2, r6
 800d940:	463b      	mov	r3, r7
 800d942:	f7f2 fe29 	bl	8000598 <__aeabi_dmul>
 800d946:	4642      	mov	r2, r8
 800d948:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d94c:	464b      	mov	r3, r9
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	f7f2 fe21 	bl	8000598 <__aeabi_dmul>
 800d956:	3c01      	subs	r4, #1
 800d958:	4606      	mov	r6, r0
 800d95a:	460f      	mov	r7, r1
 800d95c:	e713      	b.n	800d786 <__kernel_rem_pio2+0x2c6>
 800d95e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800d962:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800d966:	f7f2 fe17 	bl	8000598 <__aeabi_dmul>
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	4648      	mov	r0, r9
 800d970:	4651      	mov	r1, sl
 800d972:	f7f2 fc5b 	bl	800022c <__adddf3>
 800d976:	3701      	adds	r7, #1
 800d978:	4681      	mov	r9, r0
 800d97a:	468a      	mov	sl, r1
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	429f      	cmp	r7, r3
 800d980:	dc02      	bgt.n	800d988 <__kernel_rem_pio2+0x4c8>
 800d982:	9b06      	ldr	r3, [sp, #24]
 800d984:	429f      	cmp	r7, r3
 800d986:	ddea      	ble.n	800d95e <__kernel_rem_pio2+0x49e>
 800d988:	9a06      	ldr	r2, [sp, #24]
 800d98a:	ab48      	add	r3, sp, #288	; 0x120
 800d98c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800d990:	e9c6 9a00 	strd	r9, sl, [r6]
 800d994:	3c01      	subs	r4, #1
 800d996:	e6fa      	b.n	800d78e <__kernel_rem_pio2+0x2ce>
 800d998:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	dc0b      	bgt.n	800d9b6 <__kernel_rem_pio2+0x4f6>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	dc39      	bgt.n	800da16 <__kernel_rem_pio2+0x556>
 800d9a2:	d05d      	beq.n	800da60 <__kernel_rem_pio2+0x5a0>
 800d9a4:	9b02      	ldr	r3, [sp, #8]
 800d9a6:	f003 0007 	and.w	r0, r3, #7
 800d9aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d9ae:	ecbd 8b02 	vpop	{d8}
 800d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d9b8:	2b03      	cmp	r3, #3
 800d9ba:	d1f3      	bne.n	800d9a4 <__kernel_rem_pio2+0x4e4>
 800d9bc:	9b05      	ldr	r3, [sp, #20]
 800d9be:	9500      	str	r5, [sp, #0]
 800d9c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d9c4:	eb0d 0403 	add.w	r4, sp, r3
 800d9c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800d9cc:	46a2      	mov	sl, r4
 800d9ce:	9b00      	ldr	r3, [sp, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	f1aa 0a08 	sub.w	sl, sl, #8
 800d9d6:	dc69      	bgt.n	800daac <__kernel_rem_pio2+0x5ec>
 800d9d8:	46aa      	mov	sl, r5
 800d9da:	f1ba 0f01 	cmp.w	sl, #1
 800d9de:	f1a4 0408 	sub.w	r4, r4, #8
 800d9e2:	f300 8083 	bgt.w	800daec <__kernel_rem_pio2+0x62c>
 800d9e6:	9c05      	ldr	r4, [sp, #20]
 800d9e8:	ab48      	add	r3, sp, #288	; 0x120
 800d9ea:	441c      	add	r4, r3
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	2d01      	cmp	r5, #1
 800d9f2:	f300 809a 	bgt.w	800db2a <__kernel_rem_pio2+0x66a>
 800d9f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800d9fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d9fe:	f1bb 0f00 	cmp.w	fp, #0
 800da02:	f040 8098 	bne.w	800db36 <__kernel_rem_pio2+0x676>
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	e9c3 7800 	strd	r7, r8, [r3]
 800da0c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800da10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800da14:	e7c6      	b.n	800d9a4 <__kernel_rem_pio2+0x4e4>
 800da16:	9e05      	ldr	r6, [sp, #20]
 800da18:	ab48      	add	r3, sp, #288	; 0x120
 800da1a:	441e      	add	r6, r3
 800da1c:	462c      	mov	r4, r5
 800da1e:	2000      	movs	r0, #0
 800da20:	2100      	movs	r1, #0
 800da22:	2c00      	cmp	r4, #0
 800da24:	da33      	bge.n	800da8e <__kernel_rem_pio2+0x5ce>
 800da26:	f1bb 0f00 	cmp.w	fp, #0
 800da2a:	d036      	beq.n	800da9a <__kernel_rem_pio2+0x5da>
 800da2c:	4602      	mov	r2, r0
 800da2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da32:	9c04      	ldr	r4, [sp, #16]
 800da34:	e9c4 2300 	strd	r2, r3, [r4]
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800da40:	f7f2 fbf2 	bl	8000228 <__aeabi_dsub>
 800da44:	ae4a      	add	r6, sp, #296	; 0x128
 800da46:	2401      	movs	r4, #1
 800da48:	42a5      	cmp	r5, r4
 800da4a:	da29      	bge.n	800daa0 <__kernel_rem_pio2+0x5e0>
 800da4c:	f1bb 0f00 	cmp.w	fp, #0
 800da50:	d002      	beq.n	800da58 <__kernel_rem_pio2+0x598>
 800da52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da56:	4619      	mov	r1, r3
 800da58:	9b04      	ldr	r3, [sp, #16]
 800da5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800da5e:	e7a1      	b.n	800d9a4 <__kernel_rem_pio2+0x4e4>
 800da60:	9c05      	ldr	r4, [sp, #20]
 800da62:	ab48      	add	r3, sp, #288	; 0x120
 800da64:	441c      	add	r4, r3
 800da66:	2000      	movs	r0, #0
 800da68:	2100      	movs	r1, #0
 800da6a:	2d00      	cmp	r5, #0
 800da6c:	da09      	bge.n	800da82 <__kernel_rem_pio2+0x5c2>
 800da6e:	f1bb 0f00 	cmp.w	fp, #0
 800da72:	d002      	beq.n	800da7a <__kernel_rem_pio2+0x5ba>
 800da74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da78:	4619      	mov	r1, r3
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	e9c3 0100 	strd	r0, r1, [r3]
 800da80:	e790      	b.n	800d9a4 <__kernel_rem_pio2+0x4e4>
 800da82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800da86:	f7f2 fbd1 	bl	800022c <__adddf3>
 800da8a:	3d01      	subs	r5, #1
 800da8c:	e7ed      	b.n	800da6a <__kernel_rem_pio2+0x5aa>
 800da8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800da92:	f7f2 fbcb 	bl	800022c <__adddf3>
 800da96:	3c01      	subs	r4, #1
 800da98:	e7c3      	b.n	800da22 <__kernel_rem_pio2+0x562>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	e7c8      	b.n	800da32 <__kernel_rem_pio2+0x572>
 800daa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800daa4:	f7f2 fbc2 	bl	800022c <__adddf3>
 800daa8:	3401      	adds	r4, #1
 800daaa:	e7cd      	b.n	800da48 <__kernel_rem_pio2+0x588>
 800daac:	e9da 8900 	ldrd	r8, r9, [sl]
 800dab0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dab4:	9b00      	ldr	r3, [sp, #0]
 800dab6:	3b01      	subs	r3, #1
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	4632      	mov	r2, r6
 800dabc:	463b      	mov	r3, r7
 800dabe:	4640      	mov	r0, r8
 800dac0:	4649      	mov	r1, r9
 800dac2:	f7f2 fbb3 	bl	800022c <__adddf3>
 800dac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800daca:	4602      	mov	r2, r0
 800dacc:	460b      	mov	r3, r1
 800dace:	4640      	mov	r0, r8
 800dad0:	4649      	mov	r1, r9
 800dad2:	f7f2 fba9 	bl	8000228 <__aeabi_dsub>
 800dad6:	4632      	mov	r2, r6
 800dad8:	463b      	mov	r3, r7
 800dada:	f7f2 fba7 	bl	800022c <__adddf3>
 800dade:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dae2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dae6:	ed8a 7b00 	vstr	d7, [sl]
 800daea:	e770      	b.n	800d9ce <__kernel_rem_pio2+0x50e>
 800daec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800daf0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800daf4:	4640      	mov	r0, r8
 800daf6:	4632      	mov	r2, r6
 800daf8:	463b      	mov	r3, r7
 800dafa:	4649      	mov	r1, r9
 800dafc:	f7f2 fb96 	bl	800022c <__adddf3>
 800db00:	e9cd 0100 	strd	r0, r1, [sp]
 800db04:	4602      	mov	r2, r0
 800db06:	460b      	mov	r3, r1
 800db08:	4640      	mov	r0, r8
 800db0a:	4649      	mov	r1, r9
 800db0c:	f7f2 fb8c 	bl	8000228 <__aeabi_dsub>
 800db10:	4632      	mov	r2, r6
 800db12:	463b      	mov	r3, r7
 800db14:	f7f2 fb8a 	bl	800022c <__adddf3>
 800db18:	ed9d 7b00 	vldr	d7, [sp]
 800db1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db20:	ed84 7b00 	vstr	d7, [r4]
 800db24:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800db28:	e757      	b.n	800d9da <__kernel_rem_pio2+0x51a>
 800db2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db2e:	f7f2 fb7d 	bl	800022c <__adddf3>
 800db32:	3d01      	subs	r5, #1
 800db34:	e75c      	b.n	800d9f0 <__kernel_rem_pio2+0x530>
 800db36:	9b04      	ldr	r3, [sp, #16]
 800db38:	9a04      	ldr	r2, [sp, #16]
 800db3a:	601f      	str	r7, [r3, #0]
 800db3c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800db40:	605c      	str	r4, [r3, #4]
 800db42:	609d      	str	r5, [r3, #8]
 800db44:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800db48:	60d3      	str	r3, [r2, #12]
 800db4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db4e:	6110      	str	r0, [r2, #16]
 800db50:	6153      	str	r3, [r2, #20]
 800db52:	e727      	b.n	800d9a4 <__kernel_rem_pio2+0x4e4>
 800db54:	41700000 	.word	0x41700000
 800db58:	3e700000 	.word	0x3e700000
 800db5c:	00000000 	.word	0x00000000

0800db60 <__kernel_cos>:
 800db60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	ec57 6b10 	vmov	r6, r7, d0
 800db68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800db6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800db70:	ed8d 1b00 	vstr	d1, [sp]
 800db74:	da07      	bge.n	800db86 <__kernel_cos+0x26>
 800db76:	ee10 0a10 	vmov	r0, s0
 800db7a:	4639      	mov	r1, r7
 800db7c:	f7f2 ffbc 	bl	8000af8 <__aeabi_d2iz>
 800db80:	2800      	cmp	r0, #0
 800db82:	f000 8088 	beq.w	800dc96 <__kernel_cos+0x136>
 800db86:	4632      	mov	r2, r6
 800db88:	463b      	mov	r3, r7
 800db8a:	4630      	mov	r0, r6
 800db8c:	4639      	mov	r1, r7
 800db8e:	f7f2 fd03 	bl	8000598 <__aeabi_dmul>
 800db92:	4b51      	ldr	r3, [pc, #324]	; (800dcd8 <__kernel_cos+0x178>)
 800db94:	2200      	movs	r2, #0
 800db96:	4604      	mov	r4, r0
 800db98:	460d      	mov	r5, r1
 800db9a:	f7f2 fcfd 	bl	8000598 <__aeabi_dmul>
 800db9e:	a340      	add	r3, pc, #256	; (adr r3, 800dca0 <__kernel_cos+0x140>)
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	4682      	mov	sl, r0
 800dba6:	468b      	mov	fp, r1
 800dba8:	4620      	mov	r0, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	f7f2 fcf4 	bl	8000598 <__aeabi_dmul>
 800dbb0:	a33d      	add	r3, pc, #244	; (adr r3, 800dca8 <__kernel_cos+0x148>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb39 	bl	800022c <__adddf3>
 800dbba:	4622      	mov	r2, r4
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	f7f2 fceb 	bl	8000598 <__aeabi_dmul>
 800dbc2:	a33b      	add	r3, pc, #236	; (adr r3, 800dcb0 <__kernel_cos+0x150>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb2e 	bl	8000228 <__aeabi_dsub>
 800dbcc:	4622      	mov	r2, r4
 800dbce:	462b      	mov	r3, r5
 800dbd0:	f7f2 fce2 	bl	8000598 <__aeabi_dmul>
 800dbd4:	a338      	add	r3, pc, #224	; (adr r3, 800dcb8 <__kernel_cos+0x158>)
 800dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbda:	f7f2 fb27 	bl	800022c <__adddf3>
 800dbde:	4622      	mov	r2, r4
 800dbe0:	462b      	mov	r3, r5
 800dbe2:	f7f2 fcd9 	bl	8000598 <__aeabi_dmul>
 800dbe6:	a336      	add	r3, pc, #216	; (adr r3, 800dcc0 <__kernel_cos+0x160>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	f7f2 fb1c 	bl	8000228 <__aeabi_dsub>
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	f7f2 fcd0 	bl	8000598 <__aeabi_dmul>
 800dbf8:	a333      	add	r3, pc, #204	; (adr r3, 800dcc8 <__kernel_cos+0x168>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	f7f2 fb15 	bl	800022c <__adddf3>
 800dc02:	4622      	mov	r2, r4
 800dc04:	462b      	mov	r3, r5
 800dc06:	f7f2 fcc7 	bl	8000598 <__aeabi_dmul>
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	f7f2 fcc3 	bl	8000598 <__aeabi_dmul>
 800dc12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc16:	4604      	mov	r4, r0
 800dc18:	460d      	mov	r5, r1
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	f7f2 fcbb 	bl	8000598 <__aeabi_dmul>
 800dc22:	460b      	mov	r3, r1
 800dc24:	4602      	mov	r2, r0
 800dc26:	4629      	mov	r1, r5
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f7f2 fafd 	bl	8000228 <__aeabi_dsub>
 800dc2e:	4b2b      	ldr	r3, [pc, #172]	; (800dcdc <__kernel_cos+0x17c>)
 800dc30:	4598      	cmp	r8, r3
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	dc10      	bgt.n	800dc5a <__kernel_cos+0xfa>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	4659      	mov	r1, fp
 800dc40:	f7f2 faf2 	bl	8000228 <__aeabi_dsub>
 800dc44:	460b      	mov	r3, r1
 800dc46:	4926      	ldr	r1, [pc, #152]	; (800dce0 <__kernel_cos+0x180>)
 800dc48:	4602      	mov	r2, r0
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	f7f2 faec 	bl	8000228 <__aeabi_dsub>
 800dc50:	ec41 0b10 	vmov	d0, r0, r1
 800dc54:	b003      	add	sp, #12
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	4b22      	ldr	r3, [pc, #136]	; (800dce4 <__kernel_cos+0x184>)
 800dc5c:	4920      	ldr	r1, [pc, #128]	; (800dce0 <__kernel_cos+0x180>)
 800dc5e:	4598      	cmp	r8, r3
 800dc60:	bfcc      	ite	gt
 800dc62:	4d21      	ldrgt	r5, [pc, #132]	; (800dce8 <__kernel_cos+0x188>)
 800dc64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dc68:	2400      	movs	r4, #0
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	2000      	movs	r0, #0
 800dc70:	f7f2 fada 	bl	8000228 <__aeabi_dsub>
 800dc74:	4622      	mov	r2, r4
 800dc76:	4680      	mov	r8, r0
 800dc78:	4689      	mov	r9, r1
 800dc7a:	462b      	mov	r3, r5
 800dc7c:	4650      	mov	r0, sl
 800dc7e:	4659      	mov	r1, fp
 800dc80:	f7f2 fad2 	bl	8000228 <__aeabi_dsub>
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	f7f2 face 	bl	8000228 <__aeabi_dsub>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4640      	mov	r0, r8
 800dc92:	4649      	mov	r1, r9
 800dc94:	e7da      	b.n	800dc4c <__kernel_cos+0xec>
 800dc96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800dcd0 <__kernel_cos+0x170>
 800dc9a:	e7db      	b.n	800dc54 <__kernel_cos+0xf4>
 800dc9c:	f3af 8000 	nop.w
 800dca0:	be8838d4 	.word	0xbe8838d4
 800dca4:	bda8fae9 	.word	0xbda8fae9
 800dca8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dcac:	3e21ee9e 	.word	0x3e21ee9e
 800dcb0:	809c52ad 	.word	0x809c52ad
 800dcb4:	3e927e4f 	.word	0x3e927e4f
 800dcb8:	19cb1590 	.word	0x19cb1590
 800dcbc:	3efa01a0 	.word	0x3efa01a0
 800dcc0:	16c15177 	.word	0x16c15177
 800dcc4:	3f56c16c 	.word	0x3f56c16c
 800dcc8:	5555554c 	.word	0x5555554c
 800dccc:	3fa55555 	.word	0x3fa55555
 800dcd0:	00000000 	.word	0x00000000
 800dcd4:	3ff00000 	.word	0x3ff00000
 800dcd8:	3fe00000 	.word	0x3fe00000
 800dcdc:	3fd33332 	.word	0x3fd33332
 800dce0:	3ff00000 	.word	0x3ff00000
 800dce4:	3fe90000 	.word	0x3fe90000
 800dce8:	3fd20000 	.word	0x3fd20000
 800dcec:	00000000 	.word	0x00000000

0800dcf0 <__kernel_sin>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	ed2d 8b04 	vpush	{d8-d9}
 800dcf8:	eeb0 8a41 	vmov.f32	s16, s2
 800dcfc:	eef0 8a61 	vmov.f32	s17, s3
 800dd00:	ec55 4b10 	vmov	r4, r5, d0
 800dd04:	b083      	sub	sp, #12
 800dd06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dd0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dd0e:	9001      	str	r0, [sp, #4]
 800dd10:	da06      	bge.n	800dd20 <__kernel_sin+0x30>
 800dd12:	ee10 0a10 	vmov	r0, s0
 800dd16:	4629      	mov	r1, r5
 800dd18:	f7f2 feee 	bl	8000af8 <__aeabi_d2iz>
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d051      	beq.n	800ddc4 <__kernel_sin+0xd4>
 800dd20:	4622      	mov	r2, r4
 800dd22:	462b      	mov	r3, r5
 800dd24:	4620      	mov	r0, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	f7f2 fc36 	bl	8000598 <__aeabi_dmul>
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	468b      	mov	fp, r1
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4620      	mov	r0, r4
 800dd36:	4629      	mov	r1, r5
 800dd38:	f7f2 fc2e 	bl	8000598 <__aeabi_dmul>
 800dd3c:	a341      	add	r3, pc, #260	; (adr r3, 800de44 <__kernel_sin+0x154>)
 800dd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd42:	4680      	mov	r8, r0
 800dd44:	4689      	mov	r9, r1
 800dd46:	4650      	mov	r0, sl
 800dd48:	4659      	mov	r1, fp
 800dd4a:	f7f2 fc25 	bl	8000598 <__aeabi_dmul>
 800dd4e:	a33f      	add	r3, pc, #252	; (adr r3, 800de4c <__kernel_sin+0x15c>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7f2 fa68 	bl	8000228 <__aeabi_dsub>
 800dd58:	4652      	mov	r2, sl
 800dd5a:	465b      	mov	r3, fp
 800dd5c:	f7f2 fc1c 	bl	8000598 <__aeabi_dmul>
 800dd60:	a33c      	add	r3, pc, #240	; (adr r3, 800de54 <__kernel_sin+0x164>)
 800dd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd66:	f7f2 fa61 	bl	800022c <__adddf3>
 800dd6a:	4652      	mov	r2, sl
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	f7f2 fc13 	bl	8000598 <__aeabi_dmul>
 800dd72:	a33a      	add	r3, pc, #232	; (adr r3, 800de5c <__kernel_sin+0x16c>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	f7f2 fa56 	bl	8000228 <__aeabi_dsub>
 800dd7c:	4652      	mov	r2, sl
 800dd7e:	465b      	mov	r3, fp
 800dd80:	f7f2 fc0a 	bl	8000598 <__aeabi_dmul>
 800dd84:	a337      	add	r3, pc, #220	; (adr r3, 800de64 <__kernel_sin+0x174>)
 800dd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8a:	f7f2 fa4f 	bl	800022c <__adddf3>
 800dd8e:	9b01      	ldr	r3, [sp, #4]
 800dd90:	4606      	mov	r6, r0
 800dd92:	460f      	mov	r7, r1
 800dd94:	b9eb      	cbnz	r3, 800ddd2 <__kernel_sin+0xe2>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	4659      	mov	r1, fp
 800dd9e:	f7f2 fbfb 	bl	8000598 <__aeabi_dmul>
 800dda2:	a325      	add	r3, pc, #148	; (adr r3, 800de38 <__kernel_sin+0x148>)
 800dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda8:	f7f2 fa3e 	bl	8000228 <__aeabi_dsub>
 800ddac:	4642      	mov	r2, r8
 800ddae:	464b      	mov	r3, r9
 800ddb0:	f7f2 fbf2 	bl	8000598 <__aeabi_dmul>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	4620      	mov	r0, r4
 800ddba:	4629      	mov	r1, r5
 800ddbc:	f7f2 fa36 	bl	800022c <__adddf3>
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	460d      	mov	r5, r1
 800ddc4:	ec45 4b10 	vmov	d0, r4, r5
 800ddc8:	b003      	add	sp, #12
 800ddca:	ecbd 8b04 	vpop	{d8-d9}
 800ddce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd2:	4b1b      	ldr	r3, [pc, #108]	; (800de40 <__kernel_sin+0x150>)
 800ddd4:	ec51 0b18 	vmov	r0, r1, d8
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f7f2 fbdd 	bl	8000598 <__aeabi_dmul>
 800ddde:	4632      	mov	r2, r6
 800dde0:	ec41 0b19 	vmov	d9, r0, r1
 800dde4:	463b      	mov	r3, r7
 800dde6:	4640      	mov	r0, r8
 800dde8:	4649      	mov	r1, r9
 800ddea:	f7f2 fbd5 	bl	8000598 <__aeabi_dmul>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	ec51 0b19 	vmov	r0, r1, d9
 800ddf6:	f7f2 fa17 	bl	8000228 <__aeabi_dsub>
 800ddfa:	4652      	mov	r2, sl
 800ddfc:	465b      	mov	r3, fp
 800ddfe:	f7f2 fbcb 	bl	8000598 <__aeabi_dmul>
 800de02:	ec53 2b18 	vmov	r2, r3, d8
 800de06:	f7f2 fa0f 	bl	8000228 <__aeabi_dsub>
 800de0a:	a30b      	add	r3, pc, #44	; (adr r3, 800de38 <__kernel_sin+0x148>)
 800de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de10:	4606      	mov	r6, r0
 800de12:	460f      	mov	r7, r1
 800de14:	4640      	mov	r0, r8
 800de16:	4649      	mov	r1, r9
 800de18:	f7f2 fbbe 	bl	8000598 <__aeabi_dmul>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	4630      	mov	r0, r6
 800de22:	4639      	mov	r1, r7
 800de24:	f7f2 fa02 	bl	800022c <__adddf3>
 800de28:	4602      	mov	r2, r0
 800de2a:	460b      	mov	r3, r1
 800de2c:	4620      	mov	r0, r4
 800de2e:	4629      	mov	r1, r5
 800de30:	f7f2 f9fa 	bl	8000228 <__aeabi_dsub>
 800de34:	e7c4      	b.n	800ddc0 <__kernel_sin+0xd0>
 800de36:	bf00      	nop
 800de38:	55555549 	.word	0x55555549
 800de3c:	3fc55555 	.word	0x3fc55555
 800de40:	3fe00000 	.word	0x3fe00000
 800de44:	5acfd57c 	.word	0x5acfd57c
 800de48:	3de5d93a 	.word	0x3de5d93a
 800de4c:	8a2b9ceb 	.word	0x8a2b9ceb
 800de50:	3e5ae5e6 	.word	0x3e5ae5e6
 800de54:	57b1fe7d 	.word	0x57b1fe7d
 800de58:	3ec71de3 	.word	0x3ec71de3
 800de5c:	19c161d5 	.word	0x19c161d5
 800de60:	3f2a01a0 	.word	0x3f2a01a0
 800de64:	1110f8a6 	.word	0x1110f8a6
 800de68:	3f811111 	.word	0x3f811111
 800de6c:	00000000 	.word	0x00000000

0800de70 <scalbn>:
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	ec55 4b10 	vmov	r4, r5, d0
 800de76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800de7a:	4606      	mov	r6, r0
 800de7c:	462b      	mov	r3, r5
 800de7e:	b999      	cbnz	r1, 800dea8 <scalbn+0x38>
 800de80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800de84:	4323      	orrs	r3, r4
 800de86:	d03f      	beq.n	800df08 <scalbn+0x98>
 800de88:	4b35      	ldr	r3, [pc, #212]	; (800df60 <scalbn+0xf0>)
 800de8a:	4629      	mov	r1, r5
 800de8c:	ee10 0a10 	vmov	r0, s0
 800de90:	2200      	movs	r2, #0
 800de92:	f7f2 fb81 	bl	8000598 <__aeabi_dmul>
 800de96:	4b33      	ldr	r3, [pc, #204]	; (800df64 <scalbn+0xf4>)
 800de98:	429e      	cmp	r6, r3
 800de9a:	4604      	mov	r4, r0
 800de9c:	460d      	mov	r5, r1
 800de9e:	da10      	bge.n	800dec2 <scalbn+0x52>
 800dea0:	a327      	add	r3, pc, #156	; (adr r3, 800df40 <scalbn+0xd0>)
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	e01f      	b.n	800dee8 <scalbn+0x78>
 800dea8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800deac:	4291      	cmp	r1, r2
 800deae:	d10c      	bne.n	800deca <scalbn+0x5a>
 800deb0:	ee10 2a10 	vmov	r2, s0
 800deb4:	4620      	mov	r0, r4
 800deb6:	4629      	mov	r1, r5
 800deb8:	f7f2 f9b8 	bl	800022c <__adddf3>
 800debc:	4604      	mov	r4, r0
 800debe:	460d      	mov	r5, r1
 800dec0:	e022      	b.n	800df08 <scalbn+0x98>
 800dec2:	460b      	mov	r3, r1
 800dec4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800dec8:	3936      	subs	r1, #54	; 0x36
 800deca:	f24c 3250 	movw	r2, #50000	; 0xc350
 800dece:	4296      	cmp	r6, r2
 800ded0:	dd0d      	ble.n	800deee <scalbn+0x7e>
 800ded2:	2d00      	cmp	r5, #0
 800ded4:	a11c      	add	r1, pc, #112	; (adr r1, 800df48 <scalbn+0xd8>)
 800ded6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deda:	da02      	bge.n	800dee2 <scalbn+0x72>
 800dedc:	a11c      	add	r1, pc, #112	; (adr r1, 800df50 <scalbn+0xe0>)
 800dede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dee2:	a319      	add	r3, pc, #100	; (adr r3, 800df48 <scalbn+0xd8>)
 800dee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee8:	f7f2 fb56 	bl	8000598 <__aeabi_dmul>
 800deec:	e7e6      	b.n	800debc <scalbn+0x4c>
 800deee:	1872      	adds	r2, r6, r1
 800def0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800def4:	428a      	cmp	r2, r1
 800def6:	dcec      	bgt.n	800ded2 <scalbn+0x62>
 800def8:	2a00      	cmp	r2, #0
 800defa:	dd08      	ble.n	800df0e <scalbn+0x9e>
 800defc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df08:	ec45 4b10 	vmov	d0, r4, r5
 800df0c:	bd70      	pop	{r4, r5, r6, pc}
 800df0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df12:	da08      	bge.n	800df26 <scalbn+0xb6>
 800df14:	2d00      	cmp	r5, #0
 800df16:	a10a      	add	r1, pc, #40	; (adr r1, 800df40 <scalbn+0xd0>)
 800df18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df1c:	dac0      	bge.n	800dea0 <scalbn+0x30>
 800df1e:	a10e      	add	r1, pc, #56	; (adr r1, 800df58 <scalbn+0xe8>)
 800df20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df24:	e7bc      	b.n	800dea0 <scalbn+0x30>
 800df26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df2a:	3236      	adds	r2, #54	; 0x36
 800df2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800df34:	4620      	mov	r0, r4
 800df36:	4b0c      	ldr	r3, [pc, #48]	; (800df68 <scalbn+0xf8>)
 800df38:	2200      	movs	r2, #0
 800df3a:	e7d5      	b.n	800dee8 <scalbn+0x78>
 800df3c:	f3af 8000 	nop.w
 800df40:	c2f8f359 	.word	0xc2f8f359
 800df44:	01a56e1f 	.word	0x01a56e1f
 800df48:	8800759c 	.word	0x8800759c
 800df4c:	7e37e43c 	.word	0x7e37e43c
 800df50:	8800759c 	.word	0x8800759c
 800df54:	fe37e43c 	.word	0xfe37e43c
 800df58:	c2f8f359 	.word	0xc2f8f359
 800df5c:	81a56e1f 	.word	0x81a56e1f
 800df60:	43500000 	.word	0x43500000
 800df64:	ffff3cb0 	.word	0xffff3cb0
 800df68:	3c900000 	.word	0x3c900000
 800df6c:	00000000 	.word	0x00000000

0800df70 <floor>:
 800df70:	ec51 0b10 	vmov	r0, r1, d0
 800df74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800df78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df7c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800df80:	2e13      	cmp	r6, #19
 800df82:	ee10 5a10 	vmov	r5, s0
 800df86:	ee10 8a10 	vmov	r8, s0
 800df8a:	460c      	mov	r4, r1
 800df8c:	dc31      	bgt.n	800dff2 <floor+0x82>
 800df8e:	2e00      	cmp	r6, #0
 800df90:	da14      	bge.n	800dfbc <floor+0x4c>
 800df92:	a333      	add	r3, pc, #204	; (adr r3, 800e060 <floor+0xf0>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 f948 	bl	800022c <__adddf3>
 800df9c:	2200      	movs	r2, #0
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f7f2 fd8a 	bl	8000ab8 <__aeabi_dcmpgt>
 800dfa4:	b138      	cbz	r0, 800dfb6 <floor+0x46>
 800dfa6:	2c00      	cmp	r4, #0
 800dfa8:	da53      	bge.n	800e052 <floor+0xe2>
 800dfaa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800dfae:	4325      	orrs	r5, r4
 800dfb0:	d052      	beq.n	800e058 <floor+0xe8>
 800dfb2:	4c2d      	ldr	r4, [pc, #180]	; (800e068 <floor+0xf8>)
 800dfb4:	2500      	movs	r5, #0
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4628      	mov	r0, r5
 800dfba:	e024      	b.n	800e006 <floor+0x96>
 800dfbc:	4f2b      	ldr	r7, [pc, #172]	; (800e06c <floor+0xfc>)
 800dfbe:	4137      	asrs	r7, r6
 800dfc0:	ea01 0307 	and.w	r3, r1, r7
 800dfc4:	4303      	orrs	r3, r0
 800dfc6:	d01e      	beq.n	800e006 <floor+0x96>
 800dfc8:	a325      	add	r3, pc, #148	; (adr r3, 800e060 <floor+0xf0>)
 800dfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfce:	f7f2 f92d 	bl	800022c <__adddf3>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	f7f2 fd6f 	bl	8000ab8 <__aeabi_dcmpgt>
 800dfda:	2800      	cmp	r0, #0
 800dfdc:	d0eb      	beq.n	800dfb6 <floor+0x46>
 800dfde:	2c00      	cmp	r4, #0
 800dfe0:	bfbe      	ittt	lt
 800dfe2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dfe6:	4133      	asrlt	r3, r6
 800dfe8:	18e4      	addlt	r4, r4, r3
 800dfea:	ea24 0407 	bic.w	r4, r4, r7
 800dfee:	2500      	movs	r5, #0
 800dff0:	e7e1      	b.n	800dfb6 <floor+0x46>
 800dff2:	2e33      	cmp	r6, #51	; 0x33
 800dff4:	dd0b      	ble.n	800e00e <floor+0x9e>
 800dff6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dffa:	d104      	bne.n	800e006 <floor+0x96>
 800dffc:	ee10 2a10 	vmov	r2, s0
 800e000:	460b      	mov	r3, r1
 800e002:	f7f2 f913 	bl	800022c <__adddf3>
 800e006:	ec41 0b10 	vmov	d0, r0, r1
 800e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e00e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800e012:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e016:	40df      	lsrs	r7, r3
 800e018:	4238      	tst	r0, r7
 800e01a:	d0f4      	beq.n	800e006 <floor+0x96>
 800e01c:	a310      	add	r3, pc, #64	; (adr r3, 800e060 <floor+0xf0>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	f7f2 f903 	bl	800022c <__adddf3>
 800e026:	2200      	movs	r2, #0
 800e028:	2300      	movs	r3, #0
 800e02a:	f7f2 fd45 	bl	8000ab8 <__aeabi_dcmpgt>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d0c1      	beq.n	800dfb6 <floor+0x46>
 800e032:	2c00      	cmp	r4, #0
 800e034:	da0a      	bge.n	800e04c <floor+0xdc>
 800e036:	2e14      	cmp	r6, #20
 800e038:	d101      	bne.n	800e03e <floor+0xce>
 800e03a:	3401      	adds	r4, #1
 800e03c:	e006      	b.n	800e04c <floor+0xdc>
 800e03e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e042:	2301      	movs	r3, #1
 800e044:	40b3      	lsls	r3, r6
 800e046:	441d      	add	r5, r3
 800e048:	45a8      	cmp	r8, r5
 800e04a:	d8f6      	bhi.n	800e03a <floor+0xca>
 800e04c:	ea25 0507 	bic.w	r5, r5, r7
 800e050:	e7b1      	b.n	800dfb6 <floor+0x46>
 800e052:	2500      	movs	r5, #0
 800e054:	462c      	mov	r4, r5
 800e056:	e7ae      	b.n	800dfb6 <floor+0x46>
 800e058:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e05c:	e7ab      	b.n	800dfb6 <floor+0x46>
 800e05e:	bf00      	nop
 800e060:	8800759c 	.word	0x8800759c
 800e064:	7e37e43c 	.word	0x7e37e43c
 800e068:	bff00000 	.word	0xbff00000
 800e06c:	000fffff 	.word	0x000fffff

0800e070 <realloc>:
 800e070:	4b02      	ldr	r3, [pc, #8]	; (800e07c <realloc+0xc>)
 800e072:	460a      	mov	r2, r1
 800e074:	4601      	mov	r1, r0
 800e076:	6818      	ldr	r0, [r3, #0]
 800e078:	f000 b802 	b.w	800e080 <_realloc_r>
 800e07c:	2000009c 	.word	0x2000009c

0800e080 <_realloc_r>:
 800e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	4680      	mov	r8, r0
 800e086:	4614      	mov	r4, r2
 800e088:	460e      	mov	r6, r1
 800e08a:	b921      	cbnz	r1, 800e096 <_realloc_r+0x16>
 800e08c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e090:	4611      	mov	r1, r2
 800e092:	f000 b8d3 	b.w	800e23c <_malloc_r>
 800e096:	b92a      	cbnz	r2, 800e0a4 <_realloc_r+0x24>
 800e098:	f000 f864 	bl	800e164 <_free_r>
 800e09c:	4625      	mov	r5, r4
 800e09e:	4628      	mov	r0, r5
 800e0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a4:	f000 f956 	bl	800e354 <_malloc_usable_size_r>
 800e0a8:	4284      	cmp	r4, r0
 800e0aa:	4607      	mov	r7, r0
 800e0ac:	d802      	bhi.n	800e0b4 <_realloc_r+0x34>
 800e0ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0b2:	d812      	bhi.n	800e0da <_realloc_r+0x5a>
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	4640      	mov	r0, r8
 800e0b8:	f000 f8c0 	bl	800e23c <_malloc_r>
 800e0bc:	4605      	mov	r5, r0
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d0ed      	beq.n	800e09e <_realloc_r+0x1e>
 800e0c2:	42bc      	cmp	r4, r7
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	bf28      	it	cs
 800e0ca:	463a      	movcs	r2, r7
 800e0cc:	f000 f83c 	bl	800e148 <memcpy>
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	f000 f846 	bl	800e164 <_free_r>
 800e0d8:	e7e1      	b.n	800e09e <_realloc_r+0x1e>
 800e0da:	4635      	mov	r5, r6
 800e0dc:	e7df      	b.n	800e09e <_realloc_r+0x1e>

0800e0de <memset>:
 800e0de:	4402      	add	r2, r0
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	4293      	cmp	r3, r2
 800e0e4:	d100      	bne.n	800e0e8 <memset+0xa>
 800e0e6:	4770      	bx	lr
 800e0e8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ec:	e7f9      	b.n	800e0e2 <memset+0x4>
	...

0800e0f0 <__errno>:
 800e0f0:	4b01      	ldr	r3, [pc, #4]	; (800e0f8 <__errno+0x8>)
 800e0f2:	6818      	ldr	r0, [r3, #0]
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	2000009c 	.word	0x2000009c

0800e0fc <__libc_init_array>:
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	4d0d      	ldr	r5, [pc, #52]	; (800e134 <__libc_init_array+0x38>)
 800e100:	4c0d      	ldr	r4, [pc, #52]	; (800e138 <__libc_init_array+0x3c>)
 800e102:	1b64      	subs	r4, r4, r5
 800e104:	10a4      	asrs	r4, r4, #2
 800e106:	2600      	movs	r6, #0
 800e108:	42a6      	cmp	r6, r4
 800e10a:	d109      	bne.n	800e120 <__libc_init_array+0x24>
 800e10c:	4d0b      	ldr	r5, [pc, #44]	; (800e13c <__libc_init_array+0x40>)
 800e10e:	4c0c      	ldr	r4, [pc, #48]	; (800e140 <__libc_init_array+0x44>)
 800e110:	f000 f938 	bl	800e384 <_init>
 800e114:	1b64      	subs	r4, r4, r5
 800e116:	10a4      	asrs	r4, r4, #2
 800e118:	2600      	movs	r6, #0
 800e11a:	42a6      	cmp	r6, r4
 800e11c:	d105      	bne.n	800e12a <__libc_init_array+0x2e>
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	f855 3b04 	ldr.w	r3, [r5], #4
 800e124:	4798      	blx	r3
 800e126:	3601      	adds	r6, #1
 800e128:	e7ee      	b.n	800e108 <__libc_init_array+0xc>
 800e12a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e12e:	4798      	blx	r3
 800e130:	3601      	adds	r6, #1
 800e132:	e7f2      	b.n	800e11a <__libc_init_array+0x1e>
 800e134:	0800e908 	.word	0x0800e908
 800e138:	0800e908 	.word	0x0800e908
 800e13c:	0800e908 	.word	0x0800e908
 800e140:	0800e910 	.word	0x0800e910

0800e144 <__retarget_lock_acquire_recursive>:
 800e144:	4770      	bx	lr

0800e146 <__retarget_lock_release_recursive>:
 800e146:	4770      	bx	lr

0800e148 <memcpy>:
 800e148:	440a      	add	r2, r1
 800e14a:	4291      	cmp	r1, r2
 800e14c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e150:	d100      	bne.n	800e154 <memcpy+0xc>
 800e152:	4770      	bx	lr
 800e154:	b510      	push	{r4, lr}
 800e156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e15a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e15e:	4291      	cmp	r1, r2
 800e160:	d1f9      	bne.n	800e156 <memcpy+0xe>
 800e162:	bd10      	pop	{r4, pc}

0800e164 <_free_r>:
 800e164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e166:	2900      	cmp	r1, #0
 800e168:	d044      	beq.n	800e1f4 <_free_r+0x90>
 800e16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e16e:	9001      	str	r0, [sp, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	f1a1 0404 	sub.w	r4, r1, #4
 800e176:	bfb8      	it	lt
 800e178:	18e4      	addlt	r4, r4, r3
 800e17a:	f000 f8df 	bl	800e33c <__malloc_lock>
 800e17e:	4a1e      	ldr	r2, [pc, #120]	; (800e1f8 <_free_r+0x94>)
 800e180:	9801      	ldr	r0, [sp, #4]
 800e182:	6813      	ldr	r3, [r2, #0]
 800e184:	b933      	cbnz	r3, 800e194 <_free_r+0x30>
 800e186:	6063      	str	r3, [r4, #4]
 800e188:	6014      	str	r4, [r2, #0]
 800e18a:	b003      	add	sp, #12
 800e18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e190:	f000 b8da 	b.w	800e348 <__malloc_unlock>
 800e194:	42a3      	cmp	r3, r4
 800e196:	d908      	bls.n	800e1aa <_free_r+0x46>
 800e198:	6825      	ldr	r5, [r4, #0]
 800e19a:	1961      	adds	r1, r4, r5
 800e19c:	428b      	cmp	r3, r1
 800e19e:	bf01      	itttt	eq
 800e1a0:	6819      	ldreq	r1, [r3, #0]
 800e1a2:	685b      	ldreq	r3, [r3, #4]
 800e1a4:	1949      	addeq	r1, r1, r5
 800e1a6:	6021      	streq	r1, [r4, #0]
 800e1a8:	e7ed      	b.n	800e186 <_free_r+0x22>
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	b10b      	cbz	r3, 800e1b4 <_free_r+0x50>
 800e1b0:	42a3      	cmp	r3, r4
 800e1b2:	d9fa      	bls.n	800e1aa <_free_r+0x46>
 800e1b4:	6811      	ldr	r1, [r2, #0]
 800e1b6:	1855      	adds	r5, r2, r1
 800e1b8:	42a5      	cmp	r5, r4
 800e1ba:	d10b      	bne.n	800e1d4 <_free_r+0x70>
 800e1bc:	6824      	ldr	r4, [r4, #0]
 800e1be:	4421      	add	r1, r4
 800e1c0:	1854      	adds	r4, r2, r1
 800e1c2:	42a3      	cmp	r3, r4
 800e1c4:	6011      	str	r1, [r2, #0]
 800e1c6:	d1e0      	bne.n	800e18a <_free_r+0x26>
 800e1c8:	681c      	ldr	r4, [r3, #0]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	6053      	str	r3, [r2, #4]
 800e1ce:	440c      	add	r4, r1
 800e1d0:	6014      	str	r4, [r2, #0]
 800e1d2:	e7da      	b.n	800e18a <_free_r+0x26>
 800e1d4:	d902      	bls.n	800e1dc <_free_r+0x78>
 800e1d6:	230c      	movs	r3, #12
 800e1d8:	6003      	str	r3, [r0, #0]
 800e1da:	e7d6      	b.n	800e18a <_free_r+0x26>
 800e1dc:	6825      	ldr	r5, [r4, #0]
 800e1de:	1961      	adds	r1, r4, r5
 800e1e0:	428b      	cmp	r3, r1
 800e1e2:	bf04      	itt	eq
 800e1e4:	6819      	ldreq	r1, [r3, #0]
 800e1e6:	685b      	ldreq	r3, [r3, #4]
 800e1e8:	6063      	str	r3, [r4, #4]
 800e1ea:	bf04      	itt	eq
 800e1ec:	1949      	addeq	r1, r1, r5
 800e1ee:	6021      	streq	r1, [r4, #0]
 800e1f0:	6054      	str	r4, [r2, #4]
 800e1f2:	e7ca      	b.n	800e18a <_free_r+0x26>
 800e1f4:	b003      	add	sp, #12
 800e1f6:	bd30      	pop	{r4, r5, pc}
 800e1f8:	20005ca4 	.word	0x20005ca4

0800e1fc <sbrk_aligned>:
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	4e0e      	ldr	r6, [pc, #56]	; (800e238 <sbrk_aligned+0x3c>)
 800e200:	460c      	mov	r4, r1
 800e202:	6831      	ldr	r1, [r6, #0]
 800e204:	4605      	mov	r5, r0
 800e206:	b911      	cbnz	r1, 800e20e <sbrk_aligned+0x12>
 800e208:	f000 f8ac 	bl	800e364 <_sbrk_r>
 800e20c:	6030      	str	r0, [r6, #0]
 800e20e:	4621      	mov	r1, r4
 800e210:	4628      	mov	r0, r5
 800e212:	f000 f8a7 	bl	800e364 <_sbrk_r>
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	d00a      	beq.n	800e230 <sbrk_aligned+0x34>
 800e21a:	1cc4      	adds	r4, r0, #3
 800e21c:	f024 0403 	bic.w	r4, r4, #3
 800e220:	42a0      	cmp	r0, r4
 800e222:	d007      	beq.n	800e234 <sbrk_aligned+0x38>
 800e224:	1a21      	subs	r1, r4, r0
 800e226:	4628      	mov	r0, r5
 800e228:	f000 f89c 	bl	800e364 <_sbrk_r>
 800e22c:	3001      	adds	r0, #1
 800e22e:	d101      	bne.n	800e234 <sbrk_aligned+0x38>
 800e230:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e234:	4620      	mov	r0, r4
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	20005ca8 	.word	0x20005ca8

0800e23c <_malloc_r>:
 800e23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e240:	1ccd      	adds	r5, r1, #3
 800e242:	f025 0503 	bic.w	r5, r5, #3
 800e246:	3508      	adds	r5, #8
 800e248:	2d0c      	cmp	r5, #12
 800e24a:	bf38      	it	cc
 800e24c:	250c      	movcc	r5, #12
 800e24e:	2d00      	cmp	r5, #0
 800e250:	4607      	mov	r7, r0
 800e252:	db01      	blt.n	800e258 <_malloc_r+0x1c>
 800e254:	42a9      	cmp	r1, r5
 800e256:	d905      	bls.n	800e264 <_malloc_r+0x28>
 800e258:	230c      	movs	r3, #12
 800e25a:	603b      	str	r3, [r7, #0]
 800e25c:	2600      	movs	r6, #0
 800e25e:	4630      	mov	r0, r6
 800e260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e338 <_malloc_r+0xfc>
 800e268:	f000 f868 	bl	800e33c <__malloc_lock>
 800e26c:	f8d8 3000 	ldr.w	r3, [r8]
 800e270:	461c      	mov	r4, r3
 800e272:	bb5c      	cbnz	r4, 800e2cc <_malloc_r+0x90>
 800e274:	4629      	mov	r1, r5
 800e276:	4638      	mov	r0, r7
 800e278:	f7ff ffc0 	bl	800e1fc <sbrk_aligned>
 800e27c:	1c43      	adds	r3, r0, #1
 800e27e:	4604      	mov	r4, r0
 800e280:	d155      	bne.n	800e32e <_malloc_r+0xf2>
 800e282:	f8d8 4000 	ldr.w	r4, [r8]
 800e286:	4626      	mov	r6, r4
 800e288:	2e00      	cmp	r6, #0
 800e28a:	d145      	bne.n	800e318 <_malloc_r+0xdc>
 800e28c:	2c00      	cmp	r4, #0
 800e28e:	d048      	beq.n	800e322 <_malloc_r+0xe6>
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	4631      	mov	r1, r6
 800e294:	4638      	mov	r0, r7
 800e296:	eb04 0903 	add.w	r9, r4, r3
 800e29a:	f000 f863 	bl	800e364 <_sbrk_r>
 800e29e:	4581      	cmp	r9, r0
 800e2a0:	d13f      	bne.n	800e322 <_malloc_r+0xe6>
 800e2a2:	6821      	ldr	r1, [r4, #0]
 800e2a4:	1a6d      	subs	r5, r5, r1
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	4638      	mov	r0, r7
 800e2aa:	f7ff ffa7 	bl	800e1fc <sbrk_aligned>
 800e2ae:	3001      	adds	r0, #1
 800e2b0:	d037      	beq.n	800e322 <_malloc_r+0xe6>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	442b      	add	r3, r5
 800e2b6:	6023      	str	r3, [r4, #0]
 800e2b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d038      	beq.n	800e332 <_malloc_r+0xf6>
 800e2c0:	685a      	ldr	r2, [r3, #4]
 800e2c2:	42a2      	cmp	r2, r4
 800e2c4:	d12b      	bne.n	800e31e <_malloc_r+0xe2>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	605a      	str	r2, [r3, #4]
 800e2ca:	e00f      	b.n	800e2ec <_malloc_r+0xb0>
 800e2cc:	6822      	ldr	r2, [r4, #0]
 800e2ce:	1b52      	subs	r2, r2, r5
 800e2d0:	d41f      	bmi.n	800e312 <_malloc_r+0xd6>
 800e2d2:	2a0b      	cmp	r2, #11
 800e2d4:	d917      	bls.n	800e306 <_malloc_r+0xca>
 800e2d6:	1961      	adds	r1, r4, r5
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	6025      	str	r5, [r4, #0]
 800e2dc:	bf18      	it	ne
 800e2de:	6059      	strne	r1, [r3, #4]
 800e2e0:	6863      	ldr	r3, [r4, #4]
 800e2e2:	bf08      	it	eq
 800e2e4:	f8c8 1000 	streq.w	r1, [r8]
 800e2e8:	5162      	str	r2, [r4, r5]
 800e2ea:	604b      	str	r3, [r1, #4]
 800e2ec:	4638      	mov	r0, r7
 800e2ee:	f104 060b 	add.w	r6, r4, #11
 800e2f2:	f000 f829 	bl	800e348 <__malloc_unlock>
 800e2f6:	f026 0607 	bic.w	r6, r6, #7
 800e2fa:	1d23      	adds	r3, r4, #4
 800e2fc:	1af2      	subs	r2, r6, r3
 800e2fe:	d0ae      	beq.n	800e25e <_malloc_r+0x22>
 800e300:	1b9b      	subs	r3, r3, r6
 800e302:	50a3      	str	r3, [r4, r2]
 800e304:	e7ab      	b.n	800e25e <_malloc_r+0x22>
 800e306:	42a3      	cmp	r3, r4
 800e308:	6862      	ldr	r2, [r4, #4]
 800e30a:	d1dd      	bne.n	800e2c8 <_malloc_r+0x8c>
 800e30c:	f8c8 2000 	str.w	r2, [r8]
 800e310:	e7ec      	b.n	800e2ec <_malloc_r+0xb0>
 800e312:	4623      	mov	r3, r4
 800e314:	6864      	ldr	r4, [r4, #4]
 800e316:	e7ac      	b.n	800e272 <_malloc_r+0x36>
 800e318:	4634      	mov	r4, r6
 800e31a:	6876      	ldr	r6, [r6, #4]
 800e31c:	e7b4      	b.n	800e288 <_malloc_r+0x4c>
 800e31e:	4613      	mov	r3, r2
 800e320:	e7cc      	b.n	800e2bc <_malloc_r+0x80>
 800e322:	230c      	movs	r3, #12
 800e324:	603b      	str	r3, [r7, #0]
 800e326:	4638      	mov	r0, r7
 800e328:	f000 f80e 	bl	800e348 <__malloc_unlock>
 800e32c:	e797      	b.n	800e25e <_malloc_r+0x22>
 800e32e:	6025      	str	r5, [r4, #0]
 800e330:	e7dc      	b.n	800e2ec <_malloc_r+0xb0>
 800e332:	605b      	str	r3, [r3, #4]
 800e334:	deff      	udf	#255	; 0xff
 800e336:	bf00      	nop
 800e338:	20005ca4 	.word	0x20005ca4

0800e33c <__malloc_lock>:
 800e33c:	4801      	ldr	r0, [pc, #4]	; (800e344 <__malloc_lock+0x8>)
 800e33e:	f7ff bf01 	b.w	800e144 <__retarget_lock_acquire_recursive>
 800e342:	bf00      	nop
 800e344:	20005ca0 	.word	0x20005ca0

0800e348 <__malloc_unlock>:
 800e348:	4801      	ldr	r0, [pc, #4]	; (800e350 <__malloc_unlock+0x8>)
 800e34a:	f7ff befc 	b.w	800e146 <__retarget_lock_release_recursive>
 800e34e:	bf00      	nop
 800e350:	20005ca0 	.word	0x20005ca0

0800e354 <_malloc_usable_size_r>:
 800e354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e358:	1f18      	subs	r0, r3, #4
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	bfbc      	itt	lt
 800e35e:	580b      	ldrlt	r3, [r1, r0]
 800e360:	18c0      	addlt	r0, r0, r3
 800e362:	4770      	bx	lr

0800e364 <_sbrk_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d06      	ldr	r5, [pc, #24]	; (800e380 <_sbrk_r+0x1c>)
 800e368:	2300      	movs	r3, #0
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	602b      	str	r3, [r5, #0]
 800e370:	f7f7 fb14 	bl	800599c <_sbrk>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_sbrk_r+0x1a>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_sbrk_r+0x1a>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	20005cac 	.word	0x20005cac

0800e384 <_init>:
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	bf00      	nop
 800e388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38a:	bc08      	pop	{r3}
 800e38c:	469e      	mov	lr, r3
 800e38e:	4770      	bx	lr

0800e390 <_fini>:
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e392:	bf00      	nop
 800e394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e396:	bc08      	pop	{r3}
 800e398:	469e      	mov	lr, r3
 800e39a:	4770      	bx	lr
